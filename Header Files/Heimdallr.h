//
//     Generated by private class-dump
//

@class HMDConfigManager, NSString, HMDHeimdallrConfig, NSSet, NSMutableDictionary, NSDictionary, HMDInjectedInfo, NSMutableSet, NSMutableArray, HMDPerformanceReporter, HMDRecordStore, HMDSessionTracker;

@interface Heimdallr : NSObject {
    struct _opaque_pthread_rwlock_t { long long __sig; char __opaque[192]; } _remoteModuleLock;
    struct _opaque_pthread_rwlock_t { long long __sig; char __opaque[192]; } _manualStartedModuleLock;
    struct _opaque_pthread_rwlock_t { long long __sig; char __opaque[192]; } _callbackLock;
    struct _opaque_pthread_rwlock_t { long long __sig; char __opaque[192]; } _manualControlModuleLock;
    NSMutableDictionary *_callbackDictionary;
    BOOL _showDebugAlert;
    BOOL _enablePriorityInversionProtection;
    BOOL _enableWorking;
    BOOL _isRemoteReady;
    BOOL _initializationCompleted;
    HMDInjectedInfo *_userInfo;
    NSMutableDictionary *_remoteModules;
    NSMutableDictionary *_manualStartedModules;
    NSSet *_manualControlModuleSet;
    NSMutableArray *_localModules;
    NSMutableSet *_activeModules;
    HMDHeimdallrConfig *_config;
    HMDConfigManager *_configManager;
    HMDPerformanceReporter *_reporter;
    HMDRecordStore *_store;
    HMDSessionTracker *_sessionTracker;
    unsigned long long _safeModeType;
}

@property (class, nonatomic) BOOL enableHermasRefactor;
@property (class, copy, nonatomic) NSDictionary *refactorMaxUploadSizeWeight;

@property (retain, nonatomic) NSMutableDictionary *remoteModules;
@property (retain, nonatomic) NSMutableDictionary *manualStartedModules;
@property (copy, nonatomic) NSSet *manualControlModuleSet;
@property (retain, nonatomic) NSMutableArray *localModules;
@property (retain, nonatomic) NSMutableSet *activeModules;
@property (retain, nonatomic) HMDInjectedInfo *userInfo;
@property (retain) HMDHeimdallrConfig *config;
@property (retain, nonatomic) HMDConfigManager *configManager;
@property (retain, nonatomic) HMDPerformanceReporter *reporter;
@property (retain, nonatomic) HMDRecordStore *store;
@property (retain, nonatomic) HMDSessionTracker *sessionTracker;
@property BOOL enableWorking;
@property BOOL isRemoteReady;
@property (nonatomic) BOOL initializationCompleted;
@property (nonatomic) unsigned long long safeModeType;
@property (readonly, copy, nonatomic) NSString *sessionID;
@property (nonatomic) BOOL showDebugAlert;
@property (nonatomic) BOOL enablePriorityInversionProtection;

+ (void)hmd_didFnishConcurrentRendering;
+ (void)receiveDevastedDataForTableName:(id)arg0 localID:(id)arg1;
+ (void)uploadLocalConfigDebugRealData;
+ (void)appReachStateChanged:(id)arg0;
+ (void)uploadDebugRealDataWithStartTime:(double)arg0 endTime:(double)arg1 wifiOnly:(BOOL)arg2;
+ (void)setEnableHermasRefactor:(BOOL)arg0;
+ (BOOL)enableHermasRefactor;
+ (id)syncStartModuleSettings;
+ (void)uploadDebugRealDataWithLocalConfig;
+ (void)setRefactorMaxUploadSizeWeight:(id)arg0;
+ (id)refactorMaxUploadSizeWeight;
+ (void)setupAllSDKMonitors;
+ (id)shared;
+ (id)allocWithZone:(struct _NSZone { } *)arg0;

- (void)updateConfig:(id)arg0;
- (id)copyAllRemoteModules;
- (void)cleanupDatabaseWithConfig:(id)arg0 tableName:(id)arg1;
- (void)cleanupDatabase:(id)arg0 limitSize:(unsigned long long)arg1;
- (void)cleanupSessionFilesWithConfig:(id)arg0 path:(id)arg1;
- (void)extremeCleanup;
- (id)cleanupConfigWithOutdatedDays:(unsigned long long)arg0;
- (void)cleanUserExceptionCache;
- (void)roleStateChangeAndCleanData;
- (void)triggerExceptionUpload;
- (void)hmdSafeModeCriticalTypeInvoke;
- (void)hmdSafeModeMildTypeInvoke;
- (void)rewriteHostConfigFileWithModulesReserve:(id)arg0;
- (void)hmdSafeModeContinuousCrashWithCount:(int)arg0;
- (void)hmdSafeModeAppWillTerminate;
- (void)setSessionTracker:(id)arg0;
- (void)setShowDebugAlert:(BOOL)arg0;
- (void)configDidUpdate:(id)arg0;
- (void)performanceReportSuccessed:(id)arg0;
- (void)handleBecomeActiveNotification:(id)arg0;
- (void)setEnablePriorityInversionProtection:(BOOL)arg0;
- (void)safeModeCheck;
- (void)setEnableWorking:(BOOL)arg0;
- (void)recordDatabaseSizeAndDevastateIfNeeded;
- (BOOL)setupUserDefaultModules;
- (void)setupSyncModules;
- (void)setupConfigAsync;
- (void)setupLocalModuesAsync;
- (void)reportCachedDataDelayAsync;
- (void)setInitializationCompleted:(BOOL)arg0;
- (id)moduleWithConfig:(id)arg0;
- (void)setupModule:(id)arg0;
- (void)setupHMDModulesWithArray:(id)arg0 async:(BOOL)arg1;
- (BOOL)enableWorking;
- (void)updateTTMonitorExchangeSwitchIfNeeded;
- (void)updateNetQualityTrackerStatus;
- (id)activeModules;
- (id)remoteModules;
- (BOOL)needManualControl:(id)arg0;
- (void)stopModule:(id)arg0 manually:(BOOL)arg1;
- (void)unregisterSyncStartModule:(id)arg0;
- (void)registerSyncStartModule:(id)arg0;
- (void)setupModuleIndependentOfStart:(id)arg0;
- (void)setIsRemoteReady:(BOOL)arg0;
- (void)module:(id)arg0 name:(id)arg1 didChangeState:(BOOL)arg2;
- (void)startModule:(id)arg0 manually:(BOOL)arg1;
- (id)localModules;
- (id)manualStartedModules;
- (void)cleanupWithCleanConfig:(id)arg0;
- (void)devastateDatabase;
- (void)safeModeClean;
- (void)setupWithInjectedInfo:(id)arg0;
- (id)moduleWithName:(id)arg0;
- (BOOL)isModuleWorkingForName:(id)arg0;
- (void)updateRecordCount:(long long)arg0;
- (id)addObserverForModule:(id)arg0 usingBlock:(id /* block */)arg1;
- (void)markAsManualControl:(id)arg0;
- (void)manualStart:(id)arg0;
- (void)manualStop:(id)arg0;
- (BOOL)showDebugAlert;
- (BOOL)enablePriorityInversionProtection;
- (void)setRemoteModules:(id)arg0;
- (void)setManualStartedModules:(id)arg0;
- (id)manualControlModuleSet;
- (void)setManualControlModuleSet:(id)arg0;
- (void)setLocalModules:(id)arg0;
- (void)setActiveModules:(id)arg0;
- (id)sessionTracker;
- (BOOL)isRemoteReady;
- (BOOL)initializationCompleted;
- (unsigned long long)safeModeType;
- (void)setSafeModeType:(unsigned long long)arg0;
- (id)init;
- (id)database;
- (void)setConfig:(id)arg0;
- (void).cxx_destruct;
- (id)sessionID;
- (void)didEnterBackground:(id)arg0;
- (id)config;
- (id)reporter;
- (id)store;
- (void)setUserInfo:(id)arg0;
- (void)cleanup;
- (void)setStore:(id)arg0;
- (void)setReporter:(id)arg0;
- (id)userInfo;
- (id)configManager;
- (void)dealloc;
- (void)removeObserver:(id)arg0;
- (void)setConfigManager:(id)arg0;

@end
