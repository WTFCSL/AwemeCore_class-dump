//
//     Generated by private class-dump
//

@class NSString, UIImageView, TTVideoEngine, BDXLynxVideoProModel;
@protocol BDXLynxVideoProUIProtocol;

@interface BDXLynxVideoPlayerPro : UIView <TTVideoEngineDelegate, TTVideoEngineDataSource, BDXLynxVideoProPlayerProtocol> {
    BOOL _createEngineEveryTime;
    BOOL _renderByMetal;
    BOOL _asyncClose;
    BOOL _asyncPrepare;
    BOOL _inBackground;
    BOOL _willResumeWhileActive;
    BOOL _inListReusePool;
    BDXLynxVideoProModel *_playingModel;
    id<BDXLynxVideoProUIProtocol> _uiDelegate;
    TTVideoEngine *_videoEngine;
    UIImageView *_coverImageView;
}

@property (retain, nonatomic) TTVideoEngine *videoEngine;
@property (retain, nonatomic) UIImageView *coverImageView;
@property (nonatomic) BOOL inBackground;
@property (nonatomic) BOOL willResumeWhileActive;
@property (nonatomic) BOOL inListReusePool;
@property (nonatomic) BOOL createEngineEveryTime;
@property (retain, nonatomic) BDXLynxVideoProModel *playingModel;
@property (weak, nonatomic) id<BDXLynxVideoProUIProtocol> uiDelegate;
@property (nonatomic) BOOL renderByMetal;
@property (nonatomic) BOOL asyncClose;
@property (nonatomic) BOOL asyncPrepare;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (Class)fullScreenClz;

- (void)onListCellPrepareForReuse:(id)arg0 withList:(id)arg1;
- (void)onListCellAppear:(id)arg0 withList:(id)arg1;
- (void)onListCellDisappear:(id)arg0 exist:(BOOL)arg1 withList:(id)arg2;
- (id)playingModel;
- (void)seek:(double)arg0 completion:(id /* block */)arg1;
- (BOOL)asyncClose;
- (void)setCoverImageView:(id)arg0;
- (id)coverImageView;
- (void)mute:(BOOL)arg0;
- (void)videoEngine:(id)arg0 loadStateDidChanged:(unsigned long long)arg1;
- (void)videoEngineUserStopped:(id)arg0;
- (void)videoEngineDidFinish:(id)arg0 error:(id)arg1;
- (void)videoEngineDidFinish:(id)arg0 videoStatusException:(long long)arg1;
- (void)videoEngineCloseAysncFinish:(id)arg0;
- (void)videoEngine:(id)arg0 playbackStateDidChanged:(long long)arg1;
- (void)videoEngineReadyToDisPlay:(id)arg0;
- (void)videoEnginePrepared:(id)arg0;
- (void)videoEngine:(id)arg0 retryForError:(id)arg1;
- (void)videoEngine:(id)arg0 mdlKey:(id)arg1 hitCacheSze:(long long)arg2;
- (void)prepareVideo:(BOOL)arg0;
- (void)setAsyncClose:(BOOL)arg0;
- (BOOL)asyncPrepare;
- (void)setAsyncPrepare:(BOOL)arg0;
- (id)apiForFetcher:(unsigned long long)arg0;
- (id)videoEngine;
- (void)setVideoEngine:(id)arg0;
- (void)setPlayingModel:(id)arg0;
- (void)playerBecomeActive;
- (void)playerEnterBackground;
- (void)setCreateEngineEveryTime:(BOOL)arg0;
- (BOOL)willResumeWhileActive;
- (void)setWillResumeWhileActive:(BOOL)arg0;
- (BOOL)createEngineEveryTime;
- (void)tryFetchVideo;
- (BOOL)inListReusePool;
- (void)setInListReusePool:(BOOL)arg0;
- (void)setRenderByMetal:(BOOL)arg0;
- (BOOL)renderByMetal;
- (id)init;
- (void).cxx_destruct;
- (void)stop;
- (void)setUiDelegate:(id)arg0;
- (void)didMoveToWindow;
- (id)uiDelegate;
- (void)setFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0;
- (void)dealloc;
- (void)play;
- (void)pause;
- (BOOL)inBackground;
- (void)setInBackground:(BOOL)arg0;

@end
