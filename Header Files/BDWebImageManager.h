//
//     Generated by private class-dump
//

@class NSString, BDWebImageURLFactory, BDImageCache, NSArray, NSMutableDictionary, NSDictionary, BDImageCacheMonitor, BDWebImageDecoder, NSObject, BDWebImageURLFilter;
@protocol BDBase, OS_dispatch_queue, BDWebImageDownloader;

@interface BDWebImageManager : NSObject <BDWebImageDownloaderDelegate> {
    BDImageCache *_imageCache;
    NSMutableDictionary *_caches;
    struct _opaque_pthread_mutex_t { long long __sig; char __opaque[56]; } _cache_lock;
    NSMutableDictionary *_requests;
    struct _opaque_pthread_mutex_t { long long __sig; char __opaque[56]; } _request_lock;
    NSMutableDictionary *_downloadManagerContainer;
    struct _opaque_pthread_mutex_t { long long __sig; char __opaque[56]; } _manager_lock;
    NSObject<OS_dispatch_queue> *_progressTaskQueue;
    NSObject<OS_dispatch_queue> *_blurHashTaskQueue;
    id<BDBase> _internalBaseManager;
    long long _baseManagerIntializeOnceToken;
    BOOL _enableLog;
    BOOL _enableCacheToMemory;
    BOOL _enableCacheToDisk;
    BOOL _isCDNdowngrade;
    BOOL _isSmartCropIgnoreDowngrade;
    BOOL _isDecoderForDisplay;
    BOOL _enableMultiThreadHeicDecoder;
    BOOL _enableMultiThreadHeifDecoder;
    BOOL _enableMultiThreadVvicDecoder;
    BOOL _isSystemHeicDecoderFirst;
    BOOL _isCustomSequenceHeicsDecoderFirst;
    BOOL _enableRepackHeicData;
    BOOL _enableRemoveRedundantThumbDecode;
    BOOL _checkMimeType;
    BOOL _checkDataLength;
    BOOL _enableAdaptiveDecode;
    BOOL _isCocurrentCallback;
    BOOL _isPrefetchLowPriority;
    BOOL _isPrefetchIgnoreImage;
    BOOL _isNoticeLoadImage;
    BOOL _enableAllImageDownsample;
    BOOL _enableSensibleMonitorWithService;
    BOOL _enableSensibleMonitorWithLogType;
    BOOL _isMonitorLargeImage;
    BOOL _isSupportUIAnimatedImage;
    unsigned int _heicDecoderThreads;
    unsigned int _heifDecoderThreads;
    unsigned int _vvicDecoderThreads;
    long long _insulatedCacheType;
    id /* block */ _shouldDecodeImageBlock;
    id /* block */ _shouldRequestNetImageBlock;
    BDWebImageURLFilter *_urlFilter;
    BDWebImageURLFactory *_urlFactory;
    NSDictionary *_downloadManagerDefaultHeaders;
    unsigned long long _downloadImpl;
    double _timeoutInterval;
    double _timeoutIntervalForResource;
    long long _maxConcurrentTaskCount;
    long long _maxRetryCount;
    unsigned long long _allImageDownsampleMemory;
    long long _sensibleMonitorSamplingIndex;
    id /* block */ _largeImageMonitorCallBack;
    id /* block */ _bizTagURLFilterBlock;
    id /* block */ _sceneTagURLFilterBlock;
    id /* block */ _pageTagURLFilterBlock;
    id<BDWebImageDownloader> _downloadManager;
    BDWebImageDecoder *_decoder;
    BDImageCacheMonitor *_cacheMonitor;
    struct CGSize { double width; double height; } _allImageDownsampleSize;
}

@property (class, readonly) BDWebImageManager *sharedManager;
@property (class, nonatomic) unsigned long long shouldDecodeImageFromType;

@property (retain, nonatomic) BDImageCacheMonitor *cacheMonitor;
@property (nonatomic) BOOL enableLog;
@property (readonly, retain, nonatomic) BDImageCache *imageCache;
@property (nonatomic) long long insulatedCacheType;
@property (nonatomic) BOOL enableCacheToMemory;
@property (nonatomic) BOOL enableCacheToDisk;
@property (nonatomic) BOOL isCDNdowngrade;
@property (nonatomic) BOOL isSmartCropIgnoreDowngrade;
@property (nonatomic) BOOL isDecoderForDisplay;
@property (nonatomic) BOOL enableMultiThreadHeicDecoder;
@property (nonatomic) unsigned int heicDecoderThreads;
@property (nonatomic) BOOL enableMultiThreadHeifDecoder;
@property (nonatomic) unsigned int heifDecoderThreads;
@property (nonatomic) BOOL enableMultiThreadVvicDecoder;
@property (nonatomic) unsigned int vvicDecoderThreads;
@property (nonatomic) BOOL isSystemHeicDecoderFirst;
@property (nonatomic) BOOL isCustomSequenceHeicsDecoderFirst;
@property (nonatomic) BOOL enableRepackHeicData;
@property (nonatomic) BOOL enableRemoveRedundantThumbDecode;
@property (copy, nonatomic) id /* block */ shouldDecodeImageBlock;
@property (copy, nonatomic) id /* block */ shouldRequestNetImageBlock;
@property (retain, nonatomic) BDWebImageURLFilter *urlFilter;
@property (retain, nonatomic) BDWebImageURLFactory *urlFactory;
@property (copy, nonatomic) NSDictionary *downloadManagerDefaultHeaders;
@property (nonatomic) unsigned long long downloadImpl;
@property (nonatomic) double timeoutInterval;
@property (nonatomic) double timeoutIntervalForResource;
@property (nonatomic) BOOL checkMimeType;
@property (nonatomic) BOOL checkDataLength;
@property (nonatomic) long long maxConcurrentTaskCount;
@property (nonatomic) long long maxRetryCount;
@property (nonatomic) BOOL enableAdaptiveDecode;
@property (readonly) NSString *adaptiveDecodePolicy;
@property (nonatomic) BOOL isCocurrentCallback;
@property (nonatomic) BOOL isPrefetchLowPriority;
@property (nonatomic) BOOL isPrefetchIgnoreImage;
@property (nonatomic) BOOL isNoticeLoadImage;
@property (nonatomic) BOOL enableAllImageDownsample;
@property (nonatomic) struct CGSize { double width; double height; } allImageDownsampleSize;
@property (nonatomic) unsigned long long allImageDownsampleMemory;
@property (nonatomic) BOOL isCacheMonitorEnable;
@property (nonatomic) long long cacheMonitorInterval;
@property (nonatomic) BOOL enableSensibleMonitorWithService;
@property (nonatomic) BOOL enableSensibleMonitorWithLogType;
@property (nonatomic) long long sensibleMonitorSamplingIndex;
@property (nonatomic) BOOL isMonitorLargeImage;
@property (copy, nonatomic) id /* block */ largeImageMonitorCallBack;
@property (copy, nonatomic) id /* block */ bizTagURLFilterBlock;
@property (copy, nonatomic) id /* block */ sceneTagURLFilterBlock;
@property (copy, nonatomic) id /* block */ pageTagURLFilterBlock;
@property (readonly) NSArray *allPrefetchs;
@property (readonly, nonatomic) unsigned long long baseImplementation;
@property (readonly, retain, nonatomic) id<BDWebImageDownloader> downloadManager;
@property (nonatomic) unsigned long long baseImpl;
@property (retain, nonatomic) id<BDBase> baseManager;
@property (readonly) id<BDBase> BDBaseManagerFromOption;
@property (retain, nonatomic) BDWebImageDecoder *decoder;
@property (nonatomic) BOOL isSupportUIAnimatedImage;
@property (nonatomic) BOOL insulatedCache;

+ (unsigned long long)shouldDecodeImageFromType;
+ (void)setShouldDecodeImageFromType:(unsigned long long)arg0;
+ (id)sharedManager;

- (BOOL)enableLog;
- (void)setEnableLog:(BOOL)arg0;
- (id)requestImage:(id)arg0 alternativeURLs:(id)arg1 options:(long long)arg2 cacheName:(id)arg3 progress:(id /* block */)arg4 complete:(id /* block */)arg5;
- (id)requestImage:(id)arg0 options:(long long)arg1 complete:(id /* block */)arg2;
- (void)registCache:(id)arg0 forKey:(id)arg1;
- (id)cacheForKey:(id)arg0;
- (id)urlFilter;
- (id)prefetchImageWithURL:(id)arg0 category:(id)arg1 options:(long long)arg2 config:(id)arg3;
- (id)requestKeyWithURL:(id)arg0;
- (id)prefetchImagesWithURLs:(id)arg0 category:(id)arg1 options:(long long)arg2;
- (id)prefetchImageWithURL:(id)arg0 category:(id)arg1 options:(long long)arg2;
- (id)requestImage:(id)arg0 alternativeURLs:(id)arg1 options:(long long)arg2 config:(id)arg3 blocks:(id)arg4;
- (void)startUpWithConfig:(id)arg0;
- (id)adaptiveDecodePolicy;
- (BOOL)enableMultiThreadVvicDecoder;
- (unsigned int)vvicDecoderThreads;
- (BOOL)enableRepackHeicData;
- (BOOL)isRepackNeeded:(id)arg0;
- (id)heicRepackData:(id)arg0;
- (BOOL)isCocurrentCallback;
- (BOOL)isSystemHeicDecoderFirst;
- (void)setIsSystemHeicDecoderFirst:(BOOL)arg0;
- (unsigned long long)downloadImpl;
- (BOOL)containsImageForRequestKey:(id)arg0 preferredCache:(id)arg1 insulatedCacheType:(long long)arg2;
- (BOOL)containsImageForRequestKey:(id)arg0 type:(unsigned long long)arg1 preferredCache:(id)arg2 insulatedCacheType:(long long)arg3;
- (id)imageFromMemoryCacheForRequestKey:(id)arg0 preferredCache:(id)arg1 insulatedCacheType:(long long)arg2;
- (id)imageFromDiskCacheForRequestKey:(id)arg0 preferredCache:(id)arg1 insulatedCacheType:(long long)arg2;
- (id)imageForRequestKey:(id)arg0 preferredCache:(id)arg1 insulatedCacheType:(long long)arg2;
- (id)imageForRequestKey:(id)arg0 withType:(unsigned long long *)arg1 preferredCache:(id)arg2 insulatedCacheType:(long long)arg3;
- (void)imageForRequestKey:(id)arg0 withType:(unsigned long long)arg1 preferredCache:(id)arg2 insulatedCacheType:(long long)arg3 withBlock:(id /* block */)arg4;
- (id)imageDataForRequestKey:(id)arg0 preferredCache:(id)arg1 insulatedCacheType:(long long)arg2;
- (void)imageDataForRequestKey:(id)arg0 preferredCache:(id)arg1 insulatedCacheType:(long long)arg2 withBlock:(id /* block */)arg3;
- (BOOL)containsImageForRequestKey:(id)arg0 preferredCache:(id)arg1;
- (BOOL)containsImageForRequestKey:(id)arg0 type:(unsigned long long)arg1 preferredCache:(id)arg2;
- (id)imageFromMemoryCacheForRequestKey:(id)arg0 preferredCache:(id)arg1;
- (id)imageFromDiskCacheForRequestKey:(id)arg0 preferredCache:(id)arg1;
- (id)imageForRequestKey:(id)arg0 preferredCache:(id)arg1;
- (id)imageForRequestKey:(id)arg0 withType:(unsigned long long *)arg1 preferredCache:(id)arg2;
- (void)imageForRequestKey:(id)arg0 withType:(unsigned long long)arg1 preferredCache:(id)arg2 withBlock:(id /* block */)arg3;
- (id)imageDataForRequestKey:(id)arg0 preferredCache:(id)arg1;
- (void)imageDataForRequestKey:(id)arg0 preferredCache:(id)arg1 withBlock:(id /* block */)arg2;
- (id)internalBaseManager;
- (void)enumCacheForPreferredCache:(id)arg0 insulatedCacheType:(long long)arg1 block:(id /* block */)arg2;
- (id)downloadManagerDefaultHeaders;
- (long long)maxConcurrentTaskCount;
- (void)setMaxConcurrentTaskCount:(long long)arg0;
- (BOOL)checkMimeType;
- (void)setCheckMimeType:(BOOL)arg0;
- (BOOL)checkDataLength;
- (void)setCheckDataLength:(BOOL)arg0;
- (void)setIsCocurrentCallback:(BOOL)arg0;
- (id /* block */)largeImageMonitorCallBack;
- (id)allPrefetchs;
- (void)_receiveBlurHash:(id)arg0 forReuqests:(id)arg1 fromNet:(BOOL)arg2;
- (BOOL)isDecoderForDisplay;
- (BOOL)enableCacheToMemory;
- (BOOL)enableCacheToDisk;
- (id /* block */)bizTagURLFilterBlock;
- (void)bd_noticeStartReuqestImage:(id)arg0;
- (void)downloadImageWithRequest:(id)arg0;
- (id)cacheMonitor;
- (void)bd_noticeDownLoadImageFinish:(id)arg0 image:(id)arg1 from:(long long)arg2;
- (void)cacheContainsImageForRequest:(id)arg0 cacheNoneBlock:(id /* block */)arg1;
- (id)_thumbImageFromMemoryQuery:(id)arg0;
- (void)queryCacheForRequest:(id)arg0 callback:(id /* block */)arg1;
- (id)requestImage:(id)arg0 alternativeURLs:(id)arg1 options:(long long)arg2 cacheName:(id)arg3 transformer:(id)arg4 progress:(id /* block */)arg5 complete:(id /* block */)arg6;
- (id)requestImage:(id)arg0 alternativeURLs:(id)arg1 options:(long long)arg2 timeoutInterval:(double)arg3 cacheName:(id)arg4 transformer:(id)arg5 progress:(id /* block */)arg6 complete:(id /* block */)arg7;
- (id)requestImage:(id)arg0 alternativeURLs:(id)arg1 options:(long long)arg2 size:(struct CGSize { double x0; double x1; })arg3 timeoutInterval:(double)arg4 cacheName:(id)arg5 transformer:(id)arg6 decryptBlock:(id /* block */)arg7 progress:(id /* block */)arg8 complete:(id /* block */)arg9;
- (BOOL)isPrefetchLowPriority;
- (BOOL)enableAllImageDownsample;
- (struct CGSize { double x0; double x1; })allImageDownsampleSize;
- (unsigned long long)allImageDownsampleMemory;
- (BOOL)isPrefetchIgnoreImage;
- (id)prefetchImagesWithURLs:(id)arg0 cacheName:(id)arg1 category:(id)arg2 options:(long long)arg3;
- (id)prefetchImageWithURL:(id)arg0 cacheName:(id)arg1 category:(id)arg2 options:(long long)arg3;
- (id)prefetchImageWithURL:(id)arg0 category:(id)arg1 options:(long long)arg2 config:(id)arg3 blocks:(id)arg4;
- (unsigned long long)baseImplementation;
- (id)downloadManagerFromOption:(long long)arg0;
- (void)enumCacheForRequest:(id)arg0 block:(id /* block */)arg1;
- (id /* block */)shouldDecodeImageBlock;
- (BOOL)_shouldDecodeImageForRequest:(id)arg0 imageData:(id)arg1 previousNeedImage:(BOOL)arg2 decodeError:(id *)arg3;
- (id)_queryCachePath:(id)arg0;
- (void)queryImageForRequest:(id)arg0 memory:(BOOL)arg1 disk:(BOOL)arg2 callback:(id /* block */)arg3;
- (id)_imageFromMemoryQuery:(id)arg0;
- (id)_imageFromDiskQuery:(id)arg0 error:(id *)arg1;
- (id /* block */)shouldRequestNetImageBlock;
- (long long)transformQueuePriority:(long long)arg0;
- (void)_recordPerformanceValuesForRequests:(id)arg0 withTask:(id)arg1;
- (void)decodeImageForReuqests:(id)arg0 task:(id)arg1 finishedWithData:(id)arg2;
- (BOOL)isSmartCropIgnoreDowngrade;
- (BOOL)isCDNdowngrade;
- (void)bd_recordLargeImageInfo:(id)arg0 data:(id)arg1 task:(id)arg2 forRequest:(id)arg3;
- (void)_receiveProgressData:(id)arg0 finished:(BOOL)arg1 taskQueue:(id)arg2 task:(id)arg3 requests:(id)arg4;
- (id)_blurHashImageFromMemoryQuery:(id)arg0;
- (void)_receiveProgressDataOfHeicImage:(id)arg0 finished:(BOOL)arg1 taskQueue:(id)arg2 task:(id)arg3 requests:(id)arg4;
- (BOOL)enableRemoveRedundantThumbDecode;
- (void)downloader:(id)arg0 task:(id)arg1 failedWithError:(id)arg2;
- (void)downloader:(id)arg0 task:(id)arg1 finishedWithData:(id)arg2 savePath:(id)arg3;
- (void)downloader:(id)arg0 task:(id)arg1 receivedSize:(long long)arg2 expectedSize:(long long)arg3;
- (void)downloader:(id)arg0 task:(id)arg1 didReceiveData:(id)arg2 finished:(BOOL)arg3;
- (id)allCaches;
- (id)requestKeyWithSmartCropURL:(id)arg0;
- (void)setIsCacheMonitorEnable:(BOOL)arg0;
- (BOOL)isCacheMonitorEnable;
- (void)setCacheMonitorInterval:(long long)arg0;
- (long long)cacheMonitorInterval;
- (void)cancelAllPrefetchs;
- (id)requestsWithCategory:(id)arg0;
- (id)requestImage:(id)arg0 progress:(id /* block */)arg1 complete:(id /* block */)arg2;
- (id)requestImage:(id)arg0 alternativeURLs:(id)arg1 options:(long long)arg2 timeoutInterval:(double)arg3 cacheName:(id)arg4 transformer:(id)arg5 decryptBlock:(id /* block */)arg6 progress:(id /* block */)arg7 complete:(id /* block */)arg8;
- (id)requestImage:(id)arg0 options:(long long)arg1 size:(struct CGSize { double x0; double x1; })arg2 complete:(id /* block */)arg3;
- (id)prefetchImageWithURLs:(id)arg0 category:(id)arg1 options:(long long)arg2 configs:(id)arg3;
- (id)BDBaseManagerFromOption;
- (unsigned long long)baseImpl;
- (void)setBaseImpl:(unsigned long long)arg0;
- (id)baseManager;
- (void)setBaseManager:(id)arg0;
- (BOOL)insulatedCache;
- (void)setInsulatedCache:(BOOL)arg0;
- (void)downloader:(id)arg0 task:(id)arg1 didReceiveBlurHash:(id)arg2;
- (void)setEnableCacheToMemory:(BOOL)arg0;
- (void)setEnableCacheToDisk:(BOOL)arg0;
- (void)setIsCDNdowngrade:(BOOL)arg0;
- (void)setIsSmartCropIgnoreDowngrade:(BOOL)arg0;
- (void)setIsDecoderForDisplay:(BOOL)arg0;
- (BOOL)enableMultiThreadHeicDecoder;
- (void)setEnableMultiThreadHeicDecoder:(BOOL)arg0;
- (unsigned int)heicDecoderThreads;
- (void)setHeicDecoderThreads:(unsigned int)arg0;
- (BOOL)enableMultiThreadHeifDecoder;
- (void)setEnableMultiThreadHeifDecoder:(BOOL)arg0;
- (unsigned int)heifDecoderThreads;
- (void)setHeifDecoderThreads:(unsigned int)arg0;
- (void)setEnableMultiThreadVvicDecoder:(BOOL)arg0;
- (void)setVvicDecoderThreads:(unsigned int)arg0;
- (BOOL)isCustomSequenceHeicsDecoderFirst;
- (void)setIsCustomSequenceHeicsDecoderFirst:(BOOL)arg0;
- (void)setEnableRepackHeicData:(BOOL)arg0;
- (void)setEnableRemoveRedundantThumbDecode:(BOOL)arg0;
- (void)setShouldDecodeImageBlock:(id /* block */)arg0;
- (void)setShouldRequestNetImageBlock:(id /* block */)arg0;
- (void)setUrlFilter:(id)arg0;
- (void)setDownloadManagerDefaultHeaders:(id)arg0;
- (void)setDownloadImpl:(unsigned long long)arg0;
- (BOOL)enableAdaptiveDecode;
- (void)setEnableAdaptiveDecode:(BOOL)arg0;
- (void)setIsPrefetchLowPriority:(BOOL)arg0;
- (void)setIsPrefetchIgnoreImage:(BOOL)arg0;
- (BOOL)isNoticeLoadImage;
- (void)setIsNoticeLoadImage:(BOOL)arg0;
- (void)setEnableAllImageDownsample:(BOOL)arg0;
- (void)setAllImageDownsampleSize:(struct CGSize { double x0; double x1; })arg0;
- (void)setAllImageDownsampleMemory:(unsigned long long)arg0;
- (BOOL)enableSensibleMonitorWithService;
- (void)setEnableSensibleMonitorWithService:(BOOL)arg0;
- (BOOL)enableSensibleMonitorWithLogType;
- (void)setEnableSensibleMonitorWithLogType:(BOOL)arg0;
- (long long)sensibleMonitorSamplingIndex;
- (void)setSensibleMonitorSamplingIndex:(long long)arg0;
- (void)setLargeImageMonitorCallBack:(id /* block */)arg0;
- (void)setBizTagURLFilterBlock:(id /* block */)arg0;
- (void)setSceneTagURLFilterBlock:(id /* block */)arg0;
- (id /* block */)pageTagURLFilterBlock;
- (void)setPageTagURLFilterBlock:(id /* block */)arg0;
- (BOOL)isSupportUIAnimatedImage;
- (void)setIsSupportUIAnimatedImage:(BOOL)arg0;
- (void)setCacheMonitor:(id)arg0;
- (BOOL)isMonitorLargeImage;
- (void)requestImage:(id)arg0;
- (id /* block */)sceneTagURLFilterBlock;
- (void)setIsMonitorLargeImage:(BOOL)arg0;
- (long long)insulatedCacheType;
- (void)setInsulatedCacheType:(long long)arg0;
- (id)prefetchImageWithURL:(id)arg0 cacheName:(id)arg1 category:(id)arg2 options:(long long)arg3 complete:(id /* block */)arg4;
- (id)downloadManager;
- (long long)maxRetryCount;
- (void)setMaxRetryCount:(long long)arg0;
- (id)init;
- (void)setTimeoutInterval:(double)arg0;
- (void).cxx_destruct;
- (void)setDecoder:(id)arg0;
- (id)initWithCategory:(id)arg0;
- (double)timeoutIntervalForResource;
- (double)timeoutInterval;
- (id)imageCache;
- (void)setTimeoutIntervalForResource:(double)arg0;
- (id)decoder;
- (void)dealloc;
- (void)_cancelRequest:(id)arg0;
- (void)cancelAll;
- (id)urlFactory;
- (void)setUrlFactory:(id)arg0;

@end
