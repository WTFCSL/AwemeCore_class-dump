//
//     Generated by private class-dump
//

@class UIView, NSString, AVURLAsset, NSArray, NSDictionary, NSObject, NSHTTPURLResponse, NSNumber;
@protocol ALMVideoPlayerWrapperDelegate, IESVideoPlayerDelegate, ALMVideoPlayerProtocol, ALMVideoIntePlayerDelegate;

@interface ALMVideoPlayerWrapper : NSObject <ALMVideoIntePlayerDelegate, ALMVideoPlayerProtocol> {
    BOOL _useAlulimDelegateProtocol;
    id<ALMVideoPlayerWrapperDelegate, IESVideoPlayerDelegate> _wrapperDelegate;
    NSObject<ALMVideoPlayerProtocol> *_player;
}

@property (retain, nonatomic) NSObject<ALMVideoPlayerProtocol> *player;
@property (weak, nonatomic) id<ALMVideoPlayerWrapperDelegate, IESVideoPlayerDelegate> wrapperDelegate;
@property (nonatomic) BOOL useAlulimDelegateProtocol;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) UIView *view;
@property (readonly, copy, nonatomic) NSString *currPlayURL;
@property (readonly, copy, nonatomic) AVURLAsset *currPlayAsset;
@property (readonly, nonatomic) double currTimeScale;
@property (readonly, copy, nonatomic) NSDictionary *metaformateDic;
@property (readonly, copy, nonatomic) NSString *videoID;
@property (readonly, copy, nonatomic) NSArray *videoPlayURLs;
@property (readonly, nonatomic) BOOL isUsingHttpDNS;
@property (readonly, nonatomic) NSHTTPURLResponse *videoPlayResponse;
@property (readonly, nonatomic) struct CGSize { double x0; double x1; } videoOriginSize;
@property (readonly, nonatomic) NSNumber *bitrate;
@property (copy, nonatomic) NSString *urlKey;
@property (nonatomic) BOOL enableVideoOutput;
@property (nonatomic) BOOL repeated;
@property (nonatomic) BOOL mute;
@property (nonatomic) double volume;
@property (nonatomic) long long networkTime;
@property (nonatomic) BOOL truncateTailWhenRepeated;
@property (weak, nonatomic) id<ALMVideoIntePlayerDelegate> delegate;
@property (nonatomic) BOOL useCache;
@property (nonatomic) BOOL bufferEnded;
@property (nonatomic) BOOL playingWithCache;
@property (nonatomic) long long cacheSize;
@property (nonatomic) long long currCacheSize;
@property (nonatomic) long long videoMediaSize;
@property (readonly, copy, nonatomic) NSString *videoTraceId;
@property (nonatomic) long long preloadCachedSize;
@property (nonatomic) BOOL ignoreAudioInterruption;
@property (nonatomic) BOOL requestWithCookALM;
@property (nonatomic) double playbackRate;
@property (nonatomic) BOOL radioMode;
@property (nonatomic) BOOL enableHardDecode;
@property (nonatomic) BOOL enableH256Decode;
@property (nonatomic) BOOL ownPlayerPlayWithURLs;
@property (nonatomic) BOOL supportsReserveIfNeeded;
@property (nonatomic) BOOL playByRestored;
@property (nonatomic) unsigned long long sessionId;
@property (readonly, nonatomic) long long actionState;
@property (nonatomic) BOOL requestWithCookies;
@property (nonatomic) BOOL enableNNSR;
@property (nonatomic) BOOL enableVideo15SR;
@property (nonatomic) BOOL enable720pNNSR;
@property (nonatomic) BOOL enableBoundNNSR;
@property (nonatomic) long long scalingMode;
@property (nonatomic) long long rotateType;
@property (nonatomic) unsigned long long imageScaleType;
@property (nonatomic) long long imageLayoutType;
@property (nonatomic) unsigned long long enhancementType;
@property (nonatomic) unsigned long long netWorkType;
@property (readonly, nonatomic) unsigned long long currentResolution;
@property (weak, nonatomic) id<IESVideoPlayerDelegate> deleagte;
@property (nonatomic) unsigned long long renderType;
@property (nonatomic) BOOL enableBytevc1Decode;
@property (nonatomic) BOOL isEnableBmf;
@property (copy, nonatomic) id /* block */ cacheSizeBlock;
@property (readonly, nonatomic) BOOL isDashSource;
@property (nonatomic) BOOL pictureInPictureSupported;

+ (void)updateVideoEngineLocalServerOptions:(id)arg0;
+ (id)playerWithType:(unsigned long long)arg0;
+ (long long)getDownloadCountByVid:(id)arg0;
+ (id)playerWithType:(unsigned long long)arg0 videoWrapper:(struct EngineVideoWrapper { void /* function */ *x0; void /* function */ *x1; void *x2; } *)arg1 audioWrapper:(struct EngineAudioWrapper { void /* function */ *x0; void /* function */ *x1; void /* function */ *x2; void /* function */ *x3; void *x4; } *)arg2;
+ (id)playerWithType:(unsigned long long)arg0 videoID:(id)arg1 andPlayURLs:(id)arg2 videoWrapper:(struct EngineVideoWrapper { void /* function */ *x0; void /* function */ *x1; void *x2; } *)arg3 audioWrapper:(struct EngineAudioWrapper { void /* function */ *x0; void /* function */ *x1; void /* function */ *x2; void /* function */ *x3; void *x4; } *)arg4;
+ (id)playerWithType:(unsigned long long)arg0 videoID:(id)arg1 andPlayURLs:(id)arg2 videoWrapper:(struct EngineVideoWrapper { void /* function */ *x0; void /* function */ *x1; void *x2; } *)arg3 audioWrapperV2:(id)arg4;

- (void)player:(id)arg0 playbackFailedWithError:(id)arg1;
- (void)playerDidReadyForDisplay:(id)arg0;
- (void)player:(id)arg0 didChangePlaybackStateWithAction:(long long)arg1;
- (void)player:(id)arg0 didChangeStallState:(long long)arg1;
- (void)player:(id)arg0 deviceOpenedWithStreamType:(long long)arg1;
- (void)player:(id)arg0 avOutsyncStateDidChangedWithType:(unsigned long long)arg1 extraInfo:(id)arg2;
- (void)player:(id)arg0 switchAudioInfoCompleted:(unsigned long long)arg1;
- (void)player:(id)arg0 downloadProgressWithKey:(id)arg1 videoId:(id)arg2 cacheSize:(long long)arg3 mediaSize:(long long)arg4;
- (void)playerWillLoopPlaying:(id)arg0;
- (void)player:(id)arg0 playbackFailedForURL:(id)arg1 error:(id)arg2;
- (void)player:(id)arg0 didChangeStallState:(long long)arg1 actionType:(long long)arg2 reason:(unsigned long long)arg3;
- (void)player:(id)arg0 didFinishVideoDataDownloadForURL:(id)arg1;
- (void)player:(id)arg0 noVideoDataToDownloadForURL:(id)arg1;
- (void)player:(id)arg0 didFetchVideoModel:(id)arg1;
- (void)player:(id)arg0 didUpdateVRHeadPoseWithYaw:(double)arg1 pitch:(double)arg2 roll:(double)arg3;
- (void)player:(id)arg0 onMaskInfoCallBack:(id)arg1 pts:(unsigned long long)arg2;
- (void)setPlayerDashVideoInfoV2:(id)arg0;
- (void)setPlayerDashVideoHosts:(id)arg0;
- (long long)getKeyVideoAreaFrame;
- (void)setPlayerDashVideoInfo:(id)arg0;
- (void)setDeleagte:(id)arg0;
- (void)setWrapperDelegate:(id)arg0;
- (id)wrapperDelegate;
- (BOOL)useAlulimDelegateProtocol;
- (void)setUseAlulimDelegateProtocol:(BOOL)arg0;
- (void)setPlaybackRate:(double)arg0;
- (void)addObserver:(id)arg0 forKeyPath:(id)arg1 options:(unsigned long long)arg2 context:(void *)arg3;
- (void)removeObserver:(id)arg0 forKeyPath:(id)arg1;
- (void)removeObserver:(id)arg0 forKeyPath:(id)arg1 context:(void *)arg2;
- (void).cxx_destruct;
- (id)initWithPlayer:(id)arg0;
- (void)setPlayer:(id)arg0;
- (id)forwardingTargetForSelector:(SEL)arg0;
- (id)player;

@end
