//
//     Generated by private class-dump
//

@class SonicCameraConfig, NSString, BDPCameraInstanceConfig, NSObject, BDPUniqueID;
@protocol OS_dispatch_queue, SonicCameraCallback;

@interface BDPSonicCamera : NSObject <BDPCameraInstanceProtocol, BDPAppRouteChangeMessage, AVCaptureVideoDataOutputSampleBufferDelegate, SonicCamera> {
    BOOL _initialized;
    BOOL _destoryed;
    int _pageID;
    BDPUniqueID *_uniqueID;
    id<SonicCameraCallback> _callback;
    SonicCameraConfig *_sonicConfig;
    NSObject<OS_dispatch_queue> *_captureQueue;
    BDPCameraInstanceConfig *_cameraConfig;
}

@property (copy, nonatomic) BDPUniqueID *uniqueID;
@property (nonatomic) int pageID;
@property (retain, nonatomic) id<SonicCameraCallback> callback;
@property (retain, nonatomic) SonicCameraConfig *sonicConfig;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *captureQueue;
@property (retain, nonatomic) BDPCameraInstanceConfig *cameraConfig;
@property BOOL initialized;
@property BOOL destoryed;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (id)errMsgForErrCode:(long long)arg0;
+ (BOOL)isAuthorizedCameraForUniqueID:(id)arg0;
+ (id)sonicCameraErrorWithCode:(long long)arg0;

- (id)cameraConfig;
- (void)onAppRouteChangePageDidEnterWithPageID:(long long)arg0 pageURL:(id)arg1 uniqueID:(id)arg2;
- (void)onAppRouteChangePageDidLeaveWithPageID:(long long)arg0 pageURL:(id)arg1 uniqueID:(id)arg2;
- (id)requestCameraWithConfig:(id)arg0;
- (BOOL)disposeCamera;
- (void)setCameraZoom:(double)arg0;
- (id)getCameraConfig;
- (void)setCameraConfig:(id)arg0;
- (void)onCameraEndInterruption;
- (void)onCameraBeginInterruption;
- (void)onCameraStopped;
- (void)onCameraInitDoneWithMaxZoom:(double)arg0;
- (void)buildSonicCamera;
- (void)setCaptureQueue:(id)arg0;
- (void)setDestoryed:(BOOL)arg0;
- (void)setSonicConfig:(id)arg0;
- (id)sonicConfig;
- (id)cameraInstanceConfigWithUniqueID:(id)arg0 pageID:(long long)arg1 cameraConfig:(id)arg2;
- (BOOL)destoryed;
- (id)initWithUniqueID:(id)arg0 pageID:(int)arg1 callback:(id)arg2;
- (BOOL)initialized;
- (void)setInitialized:(BOOL)arg0;
- (void).cxx_destruct;
- (id)uniqueID;
- (void)setCallback:(id)arg0;
- (void)setPageID:(int)arg0;
- (void)setUniqueID:(id)arg0;
- (id)callback;
- (id)captureQueue;
- (int)pageID;
- (void)dealloc;
- (void)captureOutput:(id)arg0 didOutputSampleBuffer:(struct opaqueCMSampleBuffer { } *)arg1 fromConnection:(id)arg2;
- (BOOL)pauseCamera;
- (BOOL)resumeCamera;

@end
