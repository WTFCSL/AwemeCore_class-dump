//
//     Generated by private class-dump
//

@class NSRecursiveLock, NSString, BDPObjectReusePool, BDPRuntimeApp;

@interface BDPAppRuntimePreloadObject : NSObject <BDPDynamicPluginStateMessage, BDPAppPreloadCacheDataSource, BDPIndustrySDKMessage, BDPRuntimePreloadObjectProtocol> {
    BOOL _isPreloading;
    NSRecursiveLock *_lock;
    BDPRuntimeApp *_runtime;
    BDPRuntimeApp *_pluginRuntime;
    BDPObjectReusePool *_runtimePool;
}

@property BOOL isPreloading;
@property (retain, nonatomic) NSRecursiveLock *lock;
@property (retain, nonatomic) BDPRuntimeApp *runtime;
@property (retain, nonatomic) BDPRuntimeApp *pluginRuntime;
@property (retain, nonatomic) BDPObjectReusePool *runtimePool;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (void)bootstrapLoad;
+ (id)getRuntime:(id)arg0 schema:(id)arg1 loader:(id)arg2;
+ (id)getRuntime:(id)arg0;
+ (void)releaseRuntime;
+ (void)preloadRuntime:(id)arg0 schema:(id)arg1 completion:(id /* block */)arg2;
+ (void)preloadRuntime:(id)arg0 completion:(id /* block */)arg1;
+ (id)getPreloadDataSource;
+ (BOOL)supportPreloadForType:(long long)arg0;
+ (id)getRuntimeForPreDefine;
+ (id)sharedObject;

- (void)setIsPreloading:(BOOL)arg0;
- (void)releaseRuntime;
- (void)preloadObjectWithModel:(id)arg0 schema:(id)arg1 reader:(id)arg2 completion:(id /* block */)arg3;
- (BOOL)preloadCache:(id)arg0 shouldPreloadNextWithExistingObject:(id)arg1;
- (void)preloadCache:(id)arg0 willReleaseObject:(id)arg1;
- (void)industrySDKDidUpdated:(id)arg0;
- (void)recieveInterruptionNotification:(id)arg0;
- (void)addNotificaions;
- (void)addFileWithFileName:(id)arg0 pkgName:(id)arg1 result:(id)arg2;
- (id)getDependListWithFile:(id)arg0 pkgName:(id)arg1 predefineConfig:(id)arg2;
- (BOOL)hasFileName:(id)arg0 pkgName:(id)arg1 result:(id)arg2;
- (void)recursionParseDependList:(id)arg0 pkgName:(id)arg1 predefineConfig:(id)arg2 result:(id)arg3;
- (BOOL)preloadDefineFilesEnable;
- (BOOL)predefineCurentPathOnly;
- (id)generatePredefineListWithPredefineConfig:(id)arg0 startPath:(id)arg1 reader:(id)arg2;
- (void)clearPreloadDefineFilesForRuntime:(id)arg0 completion:(id /* block */)arg1;
- (void)innerPreloadObjectWithModel:(id)arg0 schema:(id)arg1 reader:(id)arg2 completion:(id /* block */)arg3;
- (id)runtimePool;
- (void)preloadDefineFilesForRuntime:(id)arg0 reader:(id)arg1 completion:(id /* block */)arg2;
- (void)preloadPrelaunchFileForUniqueID:(id)arg0 Reader:(id)arg1 completion:(id /* block */)arg2 versionCode:(long long)arg3;
- (void)preloadCache:(id)arg0 willReleaseObject:(id)arg1 finish:(id /* block */)arg2;
- (id)pluginRuntime;
- (void)setPluginRuntime:(id)arg0;
- (id)createRuntimeApp:(BOOL)arg0 completeBlk:(id /* block */)arg1;
- (void)preloadIndustrySDKIfNeeded:(id)arg0 stage:(long long)arg1;
- (id)getRuntime:(id)arg0 pluginId:(id)arg1 loader:(id)arg2;
- (void)preloadRuntime:(id)arg0 pluginId:(id)arg1 completion:(id /* block */)arg2;
- (id)getRuntimeForPreDefine;
- (void)pluginDidUpdate:(id)arg0 pluginVersion:(id)arg1 extra:(id)arg2;
- (void)setRuntimePool:(id)arg0;
- (id)init;
- (void).cxx_destruct;
- (id)lock;
- (void)setLock:(id)arg0;
- (id)runtime;
- (BOOL)isPreloading;
- (void)setRuntime:(id)arg0;

@end
