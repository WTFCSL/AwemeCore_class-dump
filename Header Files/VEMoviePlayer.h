//
//     Generated by private class-dump
//

@class NSString, CADisplayLink, AVPlayerItem, AVPlayerItemVideoOutput, VELimitLogger, VEInsertFramePlayer, NSObject, VEPlayerUnitConfig;
@protocol VEProcessSampleDelegate, OS_dispatch_queue, HTSMoviePlayerDelegate;

@interface VEMoviePlayer : NSObject <AVPlayerItemOutputPullDelegate, VEProcessSampleDelegate> {
    AVPlayerItemVideoOutput *_playerItemOutput;
    CADisplayLink *_displayLink;
    struct { long long value; int timescale; unsigned int flags; long long epoch; } _previousFrameTime;
    struct { long long value; int timescale; unsigned int flags; long long epoch; } _processingFrameTime;
    double _previousActualFrameTime;
    NSObject<OS_dispatch_queue> *_operationQueue;
    NSObject<OS_dispatch_queue> *_videoProcessingQueue;
    void *_HTSPlayerOperationQueueKey;
    double _videoDuration;
    struct __CVBuffer { } *_lastPixelBuffer;
    struct { long long value; int timescale; unsigned int flags; long long epoch; } _lastRenderTime;
    struct { long long value; int timescale; unsigned int flags; long long epoch; } _lastPixelBufferTime;
    BOOL _enableResetPlayer;
    BOOL _pauseAndStillRender;
    BOOL _isHighFrameRateRender;
    BOOL _isSeeking;
    BOOL _isFastImport;
    BOOL _noAvplayer;
    BOOL _isFirstFrame;
    NSString *_route;
    id<HTSMoviePlayerDelegate> _delegate;
    unsigned long long _pixelformat;
    AVPlayerItem *_playerItem;
    id<VEProcessSampleDelegate> _downStream;
    id /* block */ _readSampleBlock;
    unsigned long long _moviePlayerType;
    long long _copyBufferFailedCount;
    VEInsertFramePlayer *_insertPlayer;
    VEPlayerUnitConfig *_config;
    VELimitLogger *_limitLogger;
    struct { long long value; int timescale; unsigned int flags; long long epoch; } _currentPlayerTime;
}

@property (nonatomic) unsigned long long moviePlayerType;
@property (nonatomic) long long copyBufferFailedCount;
@property (retain, nonatomic) VEInsertFramePlayer *insertPlayer;
@property (retain, nonatomic) VEPlayerUnitConfig *config;
@property (retain, nonatomic) VELimitLogger *limitLogger;
@property (nonatomic) BOOL isFirstFrame;
@property (weak, nonatomic) id<HTSMoviePlayerDelegate> delegate;
@property (nonatomic) BOOL enableResetPlayer;
@property (nonatomic) BOOL pauseAndStillRender;
@property (nonatomic) BOOL isHighFrameRateRender;
@property (nonatomic) unsigned long long pixelformat;
@property (retain, nonatomic) AVPlayerItem *playerItem;
@property (weak, nonatomic) id<VEProcessSampleDelegate> downStream;
@property (nonatomic) BOOL isSeeking;
@property (nonatomic) struct { long long value; int timescale; unsigned int flags; long long epoch; } currentPlayerTime;
@property (nonatomic) BOOL isFastImport;
@property (nonatomic) BOOL noAvplayer;
@property (copy, nonatomic) id /* block */ readSampleBlock;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (retain, nonatomic) NSString *route;

- (void)runAsync:(id /* block */)arg0;
- (void)runSync:(id /* block */)arg0;
- (void)endProcessing;
- (BOOL)isFastImport;
- (struct { long long x0; int x1; unsigned int x2; long long x3; })currentPlayerTime;
- (void)setIsSeeking:(BOOL)arg0;
- (void)setPixelformat:(unsigned long long)arg0;
- (unsigned long long)pixelformat;
- (void)setCurrentPlayerTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg0;
- (void)setIsFastImport:(BOOL)arg0;
- (void)setLimitLogger:(id)arg0;
- (id)limitLogger;
- (void)seekToTimeAndRender:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg0;
- (BOOL)pauseAndStillRender;
- (void)setPauseAndStillRender:(BOOL)arg0;
- (void)displayLinkCallbackWithNoPlayerItem:(id)arg0;
- (id)initWithPlayerItem:(id)arg0 config:(id)arg1 mode:(unsigned long long)arg2;
- (void)createPlayerItemOutput;
- (void)processPlayerItem;
- (BOOL)noAvplayer;
- (void)setInsertPlayer:(id)arg0;
- (id)insertPlayer;
- (void)processPixelBufferAtTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg0 isSeek:(BOOL)arg1;
- (void)processNoPlayerItem;
- (void)processFrame:(struct __CVBuffer { } *)arg0 frameTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg1;
- (void)processFrame:(struct __CVBuffer { } *)arg0 frameTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg1 isSeek:(BOOL)arg2;
- (void)processLastPixelBufferAtTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg0;
- (BOOL)enableResetPlayer;
- (id /* block */)readSampleBlock;
- (id)initWithPlayerItem:(id)arg0 config:(id)arg1;
- (void)processLastPixelBuffer;
- (void)clearOutputItem;
- (void)resetBufFailedCount;
- (struct { long long x0; int x1; unsigned int x2; long long x3; })getLastPixelbufferTime;
- (void)setEnableResetPlayer:(BOOL)arg0;
- (BOOL)isHighFrameRateRender;
- (void)setIsHighFrameRateRender:(BOOL)arg0;
- (id)downStream;
- (void)setDownStream:(id)arg0;
- (void)setNoAvplayer:(BOOL)arg0;
- (void)setReadSampleBlock:(id /* block */)arg0;
- (unsigned long long)moviePlayerType;
- (void)setMoviePlayerType:(unsigned long long)arg0;
- (long long)copyBufferFailedCount;
- (void)setCopyBufferFailedCount:(long long)arg0;
- (BOOL)isFirstFrame;
- (void)setIsFirstFrame:(BOOL)arg0;
- (void)setConfig:(id)arg0;
- (void).cxx_destruct;
- (id)route;
- (void)processSampleBuffer:(struct opaqueCMSampleBuffer { } *)arg0;
- (id)config;
- (void)setRoute:(id)arg0;
- (id)delegate;
- (BOOL)isSeeking;
- (void)setDelegate:(id)arg0;
- (void)dealloc;
- (id)playerItem;
- (void)setPlayerItem:(id)arg0;
- (void)cancelProcessing;
- (void)displayLinkCallback:(id)arg0;
- (void)startProcessing;

@end
