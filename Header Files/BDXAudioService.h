//
//     Generated by private class-dump
//

@class BDXAudioQueueModel, BDWebImageRequest, NSTimer, NSMutableDictionary, BDXAudioPlayer, NSString;
@protocol BDXAudioServiceDelegate, BDXAudioEventServiceDelegate;

@interface BDXAudioService : NSObject <BDXAudioPlayerDelegate, AudioService> {
    BOOL _inAudioChanging;
    BOOL _enableEvent;
    BOOL _fromRemote;
    NSMutableDictionary *_nowPlayingInfo;
    id<BDXAudioServiceDelegate> _delegate;
    id<BDXAudioEventServiceDelegate> _eventService;
    BDXAudioPlayer *_player;
    NSTimer *_timer;
    BDXAudioQueueModel *_currentQueue;
    long long _playStatus;
    double _seekedTime;
    BDWebImageRequest *_req;
    id _playCommandTarget;
    id _pauseCommandTarget;
    id _previousCommandTarget;
    id _nextCommandTarget;
    id _seekCommandTarget;
}

@property (retain, nonatomic) BDXAudioPlayer *player;
@property (retain, nonatomic) NSTimer *timer;
@property (retain, nonatomic) BDXAudioQueueModel *currentQueue;
@property (nonatomic) long long playStatus;
@property (nonatomic) double seekedTime;
@property (retain, nonatomic) BDWebImageRequest *req;
@property (retain, nonatomic) id playCommandTarget;
@property (retain, nonatomic) id pauseCommandTarget;
@property (retain, nonatomic) id previousCommandTarget;
@property (retain, nonatomic) id nextCommandTarget;
@property (retain, nonatomic) id seekCommandTarget;
@property (nonatomic) BOOL fromRemote;
@property (retain, nonatomic) NSMutableDictionary *nowPlayingInfo;
@property (weak, nonatomic) id<BDXAudioServiceDelegate> delegate;
@property (retain, nonatomic) id<BDXAudioEventServiceDelegate> eventService;
@property (nonatomic) BOOL inAudioChanging;
@property (nonatomic) BOOL enableEvent;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (long long)playBitrate;
- (void)refreshNowPlayingInfo;
- (id)currentPlayModel;
- (void)pauseWithType:(long long)arg0;
- (long long)playStatus;
- (BOOL)updateCurrentModel:(id)arg0;
- (BOOL)canGoPrev;
- (BOOL)canGoNext;
- (void)setPlayStatus:(long long)arg0;
- (void)audioEngine:(id)arg0 didFinishedWithError:(id)arg1;
- (void)audioEngine:(id)arg0 playbackStateChanged:(long long)arg1;
- (void)audioEngineReadyToPlay:(id)arg0;
- (void)receiveNotes:(id)arg0;
- (void)goPrev;
- (void)goNext;
- (void)setCurrentQueue:(id)arg0;
- (void)updateNowPlayingInfoPlayback;
- (void)playCurrent;
- (void)setCurrentToPlay;
- (void)playStatusChanged:(long long)arg0;
- (void)onTimer:(id)arg0;
- (id)playCommandTarget;
- (void)setPlayCommandTarget:(id)arg0;
- (id)pauseCommandTarget;
- (void)setPauseCommandTarget:(id)arg0;
- (id)previousCommandTarget;
- (void)setPreviousCommandTarget:(id)arg0;
- (id)nextCommandTarget;
- (void)setNextCommandTarget:(id)arg0;
- (id)seekCommandTarget;
- (void)setSeekCommandTarget:(id)arg0;
- (void)audioService:(id)arg0 didFinishedWithError:(id)arg1;
- (void)audioService:(id)arg0 playStatusChanged:(long long)arg1;
- (void)audioServiceReadyToPlay:(id)arg0;
- (void)audioServiceDidPlay:(id)arg0;
- (void)audioServiceDidPause:(id)arg0 pauseType:(long long)arg1;
- (void)audioServiceDidStop:(id)arg0;
- (void)audioServiceDidSeek:(id)arg0;
- (void)audioServiceInPlaying:(id)arg0;
- (void)audioServiceAudioChanged:(id)arg0;
- (double)playableTime;
- (void)clearCommand;
- (void)setupCommand;
- (void)audioEngineStartPlay:(id)arg0;
- (void)audioEnginePeriodicTimeObserverForInterval:(id)arg0;
- (void)audioEngine:(id)arg0 loadStateChanged:(long long)arg1;
- (void)appendAudioModels:(id)arg0;
- (BOOL)fromRemote;
- (void)clearNowPlaying;
- (void)setSeekedTime:(double)arg0;
- (void)updateNowPlaying;
- (void)setInAudioChanging:(BOOL)arg0;
- (double)seekedTime;
- (void)setFromRemote:(BOOL)arg0;
- (void)refreshCommandState;
- (void)resetNowPlaying;
- (BOOL)enableEvent;
- (void)setAudioModels:(id)arg0 current:(id)arg1 queueId:(id)arg2;
- (BOOL)inAudioChanging;
- (void)setEnableEvent:(BOOL)arg0;
- (id)timer;
- (id)nowPlayingInfo;
- (id)init;
- (void).cxx_destruct;
- (void)stop;
- (id)currentQueue;
- (void)setPlayer:(id)arg0;
- (double)duration;
- (id)delegate;
- (void)setTimer:(id)arg0;
- (void)setEventService:(id)arg0;
- (void)addObserver:(id)arg0;
- (void)setNowPlayingInfo:(id)arg0;
- (BOOL)isPlaying;
- (double)playbackTime;
- (id)eventService;
- (void)clear;
- (id)queue;
- (void)setDelegate:(id)arg0;
- (void)dealloc;
- (void)play;
- (void)pause;
- (void)seekToTime:(double)arg0;
- (void)setQueue:(id)arg0;
- (void)removeObserver:(id)arg0;
- (id)player;
- (void)prepareToPlay;
- (void)setIsLooping:(BOOL)arg0;
- (void)setupNotifications;
- (id)req;
- (void)setReq:(id)arg0;

@end
