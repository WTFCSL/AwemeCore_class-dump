//
//     Generated by private class-dump
//

@class VEAudioConfig, NSURL, VEAudioResamplerUnit, VEAudioEffectUnit, AVAssetReaderOutput, IESAudioConverter, VECurveTransUtils, NSThread, NSObject, IESMMAudioCurveConfig, AVAsset, VEAudioProcessorAdapter, NSLock, AVAssetReader;
@protocol OS_dispatch_queue, VEAudioDecoderProtocol;

@interface VEAudioReader : IESMMObject {
    struct mutex { struct _opaque_pthread_mutex_t { long long __sig; char __opaque[56]; } __m_; } m_configLock;
    struct mutex { struct _opaque_pthread_mutex_t { long long __sig; char __opaque[56]; } __m_; } m_decodeBufferLock;
    BOOL _endOfFile;
    BOOL _isStreamVCReader;
    BOOL _threadCancle;
    BOOL _needReset;
    BOOL _threadStopped;
    BOOL _logFirstDecodedData;
    BOOL _needInitReader;
    int _converterNumberFrames;
    int _readerStatus;
    VEAudioConfig *_audioConfig;
    AVAsset *_asset;
    IESAudioConverter *_audioConverter;
    VEAudioResamplerUnit *_resampleUnit;
    struct AudioBufferList { unsigned int x0; struct AudioBuffer { unsigned int x0; unsigned int x1; void *x2; } x1[1]; } *_converterAudioBuffer;
    struct AudioBufferList { unsigned int x0; struct AudioBuffer { unsigned int x0; unsigned int x1; void *x2; } x1[1]; } *_decodeBufferList;
    VEAudioEffectUnit *_effectUnit;
    long long _channels;
    double _sampleRate;
    AVAssetReader *_assetReader;
    AVAssetReaderOutput *_audioOutput;
    long long _renderFrames;
    long long _decodedFrames;
    double _offsetTime;
    double _seekToTime;
    NSThread *_decodeThread;
    NSObject<OS_dispatch_queue> *_decodeQueue;
    id<VEAudioDecoderProtocol> _ffdecoder;
    long long _decoderBufferCapcity;
    VEAudioConfig *_latestAudioConfig;
    VECurveTransUtils *_curveTransUtils;
    IESMMAudioCurveConfig *_curveConfig;
    double _lastVideoTime;
    double _lastPlayTime;
    double _maxRenderTime;
    double _minRenderTime;
    id /* block */ _seekCompletion;
    id /* block */ _audioVolumnKeyFrameCallback;
    NSLock *_renderQueueLock;
    NSURL *_fileUrl;
    VEAudioProcessorAdapter *_teProcessor;
    VEAudioProcessorAdapter *_teNextProcessor;
    struct AudioBufferQueue { char *bufferData; unsigned int dataSize; } _renderQueue;
}

@property (retain, nonatomic) AVAsset *asset;
@property (retain, nonatomic) IESAudioConverter *audioConverter;
@property (retain, nonatomic) VEAudioResamplerUnit *resampleUnit;
@property (nonatomic) struct AudioBufferQueue { char *bufferData; unsigned int dataSize; } renderQueue;
@property (nonatomic) int converterNumberFrames;
@property (nonatomic) struct AudioBufferList { unsigned int x0; struct AudioBuffer { unsigned int x0; unsigned int x1; void *x2; } x1[1]; } *converterAudioBuffer;
@property (nonatomic) struct AudioBufferList { unsigned int x0; struct AudioBuffer { unsigned int x0; unsigned int x1; void *x2; } x1[1]; } *decodeBufferList;
@property (nonatomic) BOOL endOfFile;
@property (retain, nonatomic) VEAudioEffectUnit *effectUnit;
@property (nonatomic) long long channels;
@property (nonatomic) double sampleRate;
@property (nonatomic) BOOL isStreamVCReader;
@property (retain, nonatomic) AVAssetReader *assetReader;
@property (retain, nonatomic) AVAssetReaderOutput *audioOutput;
@property (nonatomic) long long renderFrames;
@property (nonatomic) long long decodedFrames;
@property (nonatomic) double offsetTime;
@property (nonatomic) double seekToTime;
@property (retain, nonatomic) NSThread *decodeThread;
@property (nonatomic) BOOL threadCancle;
@property (nonatomic) BOOL needReset;
@property (nonatomic) BOOL threadStopped;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *decodeQueue;
@property (retain, nonatomic) id<VEAudioDecoderProtocol> ffdecoder;
@property (nonatomic) long long decoderBufferCapcity;
@property (retain, nonatomic) VEAudioConfig *latestAudioConfig;
@property (retain, nonatomic) VECurveTransUtils *curveTransUtils;
@property (retain, nonatomic) IESMMAudioCurveConfig *curveConfig;
@property (nonatomic) double lastVideoTime;
@property (nonatomic) double lastPlayTime;
@property (nonatomic) double maxRenderTime;
@property (nonatomic) double minRenderTime;
@property (copy, nonatomic) id /* block */ seekCompletion;
@property (nonatomic) BOOL logFirstDecodedData;
@property (nonatomic) BOOL needInitReader;
@property (copy, nonatomic) id /* block */ audioVolumnKeyFrameCallback;
@property (retain, nonatomic) NSLock *renderQueueLock;
@property (nonatomic) int readerStatus;
@property (retain, nonatomic) NSURL *fileUrl;
@property (retain, nonatomic) VEAudioProcessorAdapter *teProcessor;
@property (retain, nonatomic) VEAudioProcessorAdapter *teNextProcessor;
@property (retain, nonatomic) VEAudioConfig *audioConfig;

- (id)audioConfig;
- (void)setAudioConfig:(id)arg0;
- (double)lastPlayTime;
- (void)setLastPlayTime:(double)arg0;
- (id)audioConverter;
- (void)setAudioConverter:(id)arg0;
- (void)setAudioOutput:(id)arg0;
- (void)setNeedReset:(BOOL)arg0;
- (BOOL)needReset;
- (void)setRenderFrames:(long long)arg0;
- (long long)renderFrames;
- (id)initWithAVAsset:(id)arg0 FilePath:(id)arg1 audioConfig:(id)arg2;
- (BOOL)hasValidFilePath;
- (void)setNeedInitReader:(BOOL)arg0;
- (void)setTeProcessor:(id)arg0;
- (void)setTeNextProcessor:(id)arg0;
- (BOOL)p_prepareDecodeResoureWithMode:(unsigned long long)arg0;
- (void)readNextAudioBufferList:(struct AudioBufferList { unsigned int x0; struct AudioBuffer { unsigned int x0; unsigned int x1; void *x2; } x1[1]; } *)arg0;
- (double)minRenderTime;
- (double)maxRenderTime;
- (struct AudioBufferQueue { char *x0; unsigned int x1; })renderQueue;
- (BOOL)endOfFile;
- (void)dequeue:(char *)arg0 offset:(unsigned int)arg1 dataSize:(unsigned int)arg2;
- (id)ffdecoder;
- (BOOL)assetReaderRenderData:(struct AudioBufferList { unsigned int x0; struct AudioBuffer { unsigned int x0; unsigned int x1; void *x2; } x1[1]; } *)arg0;
- (long long)decodedFrames;
- (void)setDecodedFrames:(long long)arg0;
- (BOOL)logFirstDecodedData;
- (void)setLogFirstDecodedData:(BOOL)arg0;
- (void)setEndOfFile:(BOOL)arg0;
- (id)curveConfig;
- (void)setLastVideoTime:(double)arg0;
- (void)seekAssetReaderToTime:(double)arg0;
- (void)setLatestAudioConfig:(id)arg0;
- (BOOL)threadCancle;
- (void)resetRenderQueue;
- (id /* block */)seekCompletion;
- (void)setSeekCompletion:(id /* block */)arg0;
- (void)startDecode;
- (void)resetAVAssetReader;
- (id)teProcessor;
- (id)teNextProcessor;
- (void)setThreadCancle:(BOOL)arg0;
- (void)p_initReaderIfNeed;
- (void)initAVAssetReader:(id)arg0 audioConfig:(id)arg1;
- (void)p_calculateRenderLimits;
- (void)setRenderQueueLock:(id)arg0;
- (void)setDecodeBufferList:(struct AudioBufferList { unsigned int x0; struct AudioBuffer { unsigned int x0; unsigned int x1; void *x2; } x1[1]; } *)arg0;
- (struct AudioBufferList { unsigned int x0; struct AudioBuffer { unsigned int x0; unsigned int x1; void *x2; } x1[1]; } *)decodeBufferList;
- (void)setDecoderBufferCapcity:(long long)arg0;
- (void)setCurveConfig:(id)arg0;
- (BOOL)needInitReader;
- (void)setFfdecoder:(id)arg0;
- (id)latestAudioConfig;
- (void)refreshAudioConfig;
- (void)readDataAndProcess;
- (int)readerStatus;
- (void)setReaderStatus:(int)arg0;
- (long long)decoderBufferCapcity;
- (unsigned int)filterProcessByTE:(struct AudioBufferList { unsigned int x0; struct AudioBuffer { unsigned int x0; unsigned int x1; void *x2; } x1[1]; } *)arg0;
- (unsigned int)filterProcess:(struct AudioBufferList { unsigned int x0; struct AudioBuffer { unsigned int x0; unsigned int x1; void *x2; } x1[1]; } *)arg0;
- (id)renderQueueLock;
- (double)lastVideoTime;
- (void)enqueue:(char *)arg0 dataSize:(unsigned int)arg1;
- (id)p_handleFilter:(id)arg0 inExistingFilters:(id)arg1;
- (float)p_updateAvgRatio:(unsigned int)arg0;
- (double)currentDecodeTime;
- (void)closeTestFile;
- (void)updateTestFile;
- (void)updateAudioConfig:(id)arg0 discardDecodedBuffer:(BOOL)arg1;
- (void)stopAsyncWithCompletion:(id /* block */)arg0;
- (void)stopSync;
- (BOOL)stopSync2;
- (void)setupTEProcessorWithTEReaderUnit:(void *)arg0;
- (BOOL)isStreamAudioReader;
- (id)currentAVAsset;
- (void)setRenderQueue:(struct AudioBufferQueue { char *x0; unsigned int x1; })arg0;
- (int)converterNumberFrames;
- (void)setConverterNumberFrames:(int)arg0;
- (struct AudioBufferList { unsigned int x0; struct AudioBuffer { unsigned int x0; unsigned int x1; void *x2; } x1[1]; } *)converterAudioBuffer;
- (void)setConverterAudioBuffer:(struct AudioBufferList { unsigned int x0; struct AudioBuffer { unsigned int x0; unsigned int x1; void *x2; } x1[1]; } *)arg0;
- (id)decodeThread;
- (void)setDecodeThread:(id)arg0;
- (void)setMaxRenderTime:(double)arg0;
- (void)setMinRenderTime:(double)arg0;
- (id /* block */)audioVolumnKeyFrameCallback;
- (void)setResampleUnit:(id)arg0;
- (id)initWithAVAsset:(id)arg0 audioConfig:(id)arg1;
- (void)setAudioVolumnKeyFrameCallback:(id /* block */)arg0;
- (id)resampleUnit;
- (void)readData:(struct AudioBufferList { unsigned int x0; struct AudioBuffer { unsigned int x0; unsigned int x1; void *x2; } x1[1]; } *)arg0 numberFrames:(unsigned int)arg1 atTime:(double)arg2;
- (double)getCurrentVolumnAtPts:(double)arg0;
- (void)resetReaderWithTime:(double)arg0 completion:(id /* block */)arg1;
- (id)p_getCurveConfig:(id)arg0;
- (BOOL)isStreamVCReader;
- (void)setIsStreamVCReader:(BOOL)arg0;
- (void)resetReaderWithTime:(double)arg0;
- (void)initConvertWithASBD:(struct AudioStreamBasicDescription { double x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; })arg0;
- (void)readDataWithResample:(struct AudioBufferList { unsigned int x0; struct AudioBuffer { unsigned int x0; unsigned int x1; void *x2; } x1[1]; } *)arg0 numberFrames:(unsigned int)arg1;
- (id)effectUnit;
- (void)setEffectUnit:(id)arg0;
- (void)setCurveTransUtils:(id)arg0;
- (id)curveTransUtils;
- (void)setDecodeQueue:(id)arg0;
- (void)setThreadStopped:(BOOL)arg0;
- (id)decodeQueue;
- (BOOL)threadStopped;
- (long long)channels;
- (void)addFilter:(id)arg0;
- (void)setChannels:(long long)arg0;
- (void).cxx_destruct;
- (double)sampleRate;
- (void)removeAllFilters;
- (id)audioOutput;
- (double)currentTime;
- (id)asset;
- (void)setAsset:(id)arg0;
- (void)dealloc;
- (void)setSeekToTime:(double)arg0;
- (void)seekToTime:(double)arg0;
- (double)seekToTime;
- (id).cxx_construct;
- (void)setSampleRate:(double)arg0;
- (double)offsetTime;
- (void)setOffsetTime:(double)arg0;
- (id)assetReader;
- (void)setAssetReader:(id)arg0;
- (id)fileUrl;
- (void)setFileUrl:(id)arg0;
- (void)resetReader;
- (void)stopReader;
- (void)threadFunc;

@end
