//
//     Generated by private class-dump
//

@class NSString, NSDictionary, NSMutableSet, BDXBridgeAuthPackage, NSLock, NSArray;

@interface BDXBridgeSDKAuthManager : NSObject <BDXBridgeAuthModuleProtocol> {
    id /* block */ _monitorHybridBlock;
    NSArray *_innerDomains;
    BDXBridgeAuthPackage *_authPackage;
    NSString *_namespace;
    NSDictionary *_authRules;
    NSMutableSet *_privateDomains;
    NSLock *_methodSetLock;
    NSMutableSet *_publicMethods;
    NSMutableSet *_protectedMethods;
    NSMutableSet *_privateMethods;
    NSMutableSet *_secureMethods;
}

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (copy, nonatomic) NSString *namespace;
@property (copy, nonatomic) NSDictionary *authRules;
@property (retain, nonatomic) NSMutableSet *privateDomains;
@property (retain, nonatomic) NSLock *methodSetLock;
@property (retain, nonatomic) NSMutableSet *publicMethods;
@property (retain, nonatomic) NSMutableSet *protectedMethods;
@property (retain, nonatomic) NSMutableSet *privateMethods;
@property (retain, nonatomic) NSMutableSet *secureMethods;
@property (copy, nonatomic) BDXBridgeAuthPackage *authPackage;
@property (nonatomic, getter=hasFetchedAuthInfos) BOOL fetchedAuthInfos;
@property (nonatomic, getter=isFetchingAuthInfos) BOOL fetchingAuthInfos;
@property (nonatomic, getter=hasUsedAuthInfosBeforeConfiguring) BOOL usedAuthInfosBeforeConfiguring;
@property (copy, nonatomic) id /* block */ monitorHybridBlock;
@property (nonatomic, getter=isBypassJSBAuthEnabled) BOOL bypassJSBAuthEnabled;
@property (nonatomic, getter=isBuiltinAuthInfosEnabled) BOOL builtinAuthInfosEnabled;
@property (readonly, nonatomic) BOOL hasCachedAuthInfos;
@property (copy, nonatomic) NSArray *innerDomains;

+ (id)sharedManagerWithNamesapce:(id)arg0;
+ (void)configBoeUrlString:(id)arg0;
+ (void)updateAuthPackagesWithJsonObjects:(id)arg0;
+ (void)p_updateAuthManagerWithPackages:(id)arg0;
+ (void)addPrivateDomains:(id)arg0 inNamespace:(id)arg1;
+ (id)parseAuthInfosWithJSON:(id)arg0 accessKey:(id)arg1;
+ (id)getRequestParamsWithAccessKey:(id)arg0 commonParams:(id)arg1 extraChannels:(id)arg2;
+ (id)sharedManager;

- (void)addPrivateDomains:(id)arg0;
- (long long)authGroupForURL:(id)arg0;
- (void)setBuiltinAuthInfosEnabled:(BOOL)arg0;
- (id)publicMethods;
- (id)protectedMethods;
- (id)privateMethods;
- (void)setMonitorHybridBlock:(id /* block */)arg0;
- (id)authPackage;
- (void)setAuthPackage:(id)arg0;
- (id)methodSetLock;
- (id)secureMethods;
- (void)endMonitorEvent:(id)arg0;
- (BOOL)isBypassJSBAuthEnabled;
- (id)strippedURL:(id)arg0;
- (void)updateAuthGroup:(long long *)arg0 includedMethods:(id)arg1 excludedMethods:(id)arg2 forURL:(id)arg3;
- (id /* block */)monitorHybridBlock;
- (id)privateDomains;
- (void)setUsedAuthInfosBeforeConfiguring:(BOOL)arg0;
- (id)secondLevelDomainForURL:(id)arg0;
- (id)authRules;
- (void)setAuthRules:(id)arg0;
- (void)updateAuthRules;
- (void)updateMethodAuthTypes;
- (void)registerMethod:(id)arg0 withAuthType:(long long)arg1;
- (BOOL)isAuthorizedMethod:(id)arg0 forURL:(id)arg1 fromSource:(id)arg2 frameURL:(id)arg3 isMainFrame:(BOOL)arg4 fromEngineView:(id)arg5;
- (id)innerDomains;
- (id)isAuthorizedMethod:(id)arg0 methodName:(id)arg1 bizID:(id)arg2 forURL:(id)arg3;
- (void)setFetchedAuthInfos:(BOOL)arg0;
- (BOOL)hasFetchedAuthInfos;
- (void)setFetchingAuthInfos:(BOOL)arg0;
- (BOOL)isFetchingAuthInfos;
- (BOOL)hasUsedAuthInfosBeforeConfiguring;
- (BOOL)isBuiltinAuthInfosEnabled;
- (void)setBypassJSBAuthEnabled:(BOOL)arg0;
- (BOOL)hasCachedAuthInfos;
- (void)setInnerDomains:(id)arg0;
- (void)setPrivateDomains:(id)arg0;
- (void)setMethodSetLock:(id)arg0;
- (void)setPublicMethods:(id)arg0;
- (void)setProtectedMethods:(id)arg0;
- (void)setPrivateMethods:(id)arg0;
- (void)setSecureMethods:(id)arg0;
- (BOOL)isAuthorizedForLynxView:(id)arg0 callMessage:(id)arg1;
- (id)__paramsWithContainer:(id)arg0;
- (id)__monitorWithContainer:(id)arg0;
- (id)init;
- (id)namespace;
- (void).cxx_destruct;
- (void)setNamespace:(id)arg0;

@end
