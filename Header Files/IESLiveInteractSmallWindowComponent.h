//
//     Generated by private class-dump
//

@class IESLiveGCDTimer, NSString, IESLiveMoreToolsSettingItem;
@protocol IESLiveInteractSmallWindowDelegate;

@interface IESLiveInteractSmallWindowComponent : IESLiveInteractComponentBase <IESLiveInteractSmallWindowRouter, IESLiveBigPartyActions, IESLiveMultiAudioAction, IESLiveKTVActions, IESLiveInteractionPlaymodeActions, HTSLiveMessageSubscriber> {
    BOOL _hasSwitchAudioAudioScenarioToCommunication;
    BOOL _autoOpenSmallWindow;
    BOOL _smallWindowExistBeforeEnter;
    BOOL _isClosing;
    BOOL _hasLoadParam;
    BOOL _hasApplyOnce;
    BOOL _isCurrentWaitingLink;
    BOOL _isCurrentLinkMic;
    BOOL _isSelfSing;
    long long _currentWindowType;
    id<IESLiveInteractSmallWindowDelegate> _currentWindowDelegate;
    IESLiveMoreToolsSettingItem *_smallWindowItem;
    IESLiveGCDTimer *_limitTimer;
    long long _closeSmallWinTimes;
}

@property (nonatomic) BOOL autoOpenSmallWindow;
@property (nonatomic) BOOL smallWindowExistBeforeEnter;
@property (nonatomic) BOOL isClosing;
@property (nonatomic) BOOL hasLoadParam;
@property (nonatomic) BOOL hasApplyOnce;
@property (nonatomic) BOOL isCurrentWaitingLink;
@property (nonatomic) BOOL isCurrentLinkMic;
@property (retain, nonatomic) IESLiveMoreToolsSettingItem *smallWindowItem;
@property (retain, nonatomic) IESLiveGCDTimer *limitTimer;
@property (nonatomic) BOOL isSelfSing;
@property (nonatomic) long long closeSmallWinTimes;
@property (readonly, nonatomic) long long currentWindowType;
@property (readonly, nonatomic) BOOL hasSwitchAudioAudioScenarioToCommunication;
@property (weak, nonatomic) id<IESLiveInteractSmallWindowDelegate> currentWindowDelegate;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (void)leaveRoom;
- (void)componentMount;
- (void)componentUnmount;
- (id)smallWindowItem;
- (BOOL)canOpenWaitingLinkSmallWindow;
- (BOOL)canOpenLinkMicSmallWindow;
- (BOOL)abEnableWaitingLinkSmallWindow;
- (BOOL)abEnableLinkMicSmallWindow;
- (BOOL)autoOpenInteractSmallWindow;
- (BOOL)isLinkMicSmallWindowShowing;
- (BOOL)isWaitingSmallWindowShowing;
- (long long)permitReceiveEnterRoomTime;
- (id)allMemberList;
- (id)paidLinkProgress;
- (void)updateLimitProgress:(id)arg0 WithUser:(id)arg1;
- (id)smallWindowRoomId;
- (void)currentWindowTypeSwitchTo:(long long)arg0 isReturnRoom:(BOOL)arg1;
- (BOOL)liveInteractSmallWinCloseButtonAbTest;
- (void)showToastWhenCloseSmallWinIfNeeded;
- (BOOL)smallWindowExistBeforeEnterRoom;
- (long long)currentWindowType;
- (BOOL)hasSwitchAudioAudioScenarioToCommunication;
- (id)currentWindowDelegate;
- (void)setCurrentWindowDelegate:(id)arg0;
- (void)trackWithEvent:(id)arg0 extra:(id)arg1;
- (void)showSettingView;
- (void)addMoreToolsSettingItem;
- (void)upDateMessageReciver;
- (void)bigPartyAllMembersListDidChange:(id)arg0;
- (void)addSmallWindowSettingItem;
- (void)multiAudioAllMembersListDidChange:(id)arg0;
- (void)interactionPlaymodeDidStart:(int)arg0;
- (void)interactionPlaymodeDidEnd:(int)arg0;
- (id)limitTimer;
- (void)setLimitTimer:(id)arg0;
- (void)componentBindContext;
- (void)willStartPlayMusicWithMusicID:(id)arg0 afterTime:(long long)arg1;
- (void)didStopPlayMusicWithMusicID:(id)arg0 finished:(BOOL)arg1;
- (void)setAutoOpenSmallWindow:(BOOL)arg0;
- (void)setIsCurrentWaitingLink:(BOOL)arg0;
- (void)setIsCurrentLinkMic:(BOOL)arg0;
- (void)setHasApplyOnce:(BOOL)arg0;
- (BOOL)hasApplyOnce;
- (void)setSmallWindowExistBeforeEnter:(BOOL)arg0;
- (void)removeMoreToolsSettingItem;
- (void)onReceiveOrderSingMessage:(id)arg0;
- (void)setIsSelfSing:(BOOL)arg0;
- (BOOL)smallWindowExistBeforeEnter;
- (BOOL)isSelfSing;
- (BOOL)isPerForming;
- (long long)closeSmallWinTimes;
- (void)setCloseSmallWinTimes:(long long)arg0;
- (void)setCurrentWindowType:(long long)arg0;
- (long long)p_expectedLeaveTime:(id)arg0;
- (double)linkmicProgress:(id)arg0;
- (long long)maxAlertTime;
- (void)addPiPItemInMoreTools;
- (BOOL)autoOpenSmallWindow;
- (BOOL)hasLoadParam;
- (void)setHasLoadParam:(BOOL)arg0;
- (BOOL)isCurrentWaitingLink;
- (BOOL)isCurrentLinkMic;
- (void)setSmallWindowItem:(id)arg0;
- (BOOL)isClosing;
- (void).cxx_destruct;
- (void)messageReceived:(id)arg0;
- (BOOL)isAudio;
- (void)setIsClosing:(BOOL)arg0;
- (id)linkStatus;

@end
