//
//     Generated by private class-dump
//

@class NSMutableDictionary, NSString, IESLivePKModel, UIView, NSMutableArray;

@interface IESLivePKLocalLayout : NSObject <IESLIvePKAudienceLocalLayoutAction, IESLiveInteractiveLocalLayout> {
    BOOL _ownHasGuestLink;
    BOOL _oppositeHasGuestLink;
    BOOL _isAnchor;
    BOOL _canUpdateWithGuest;
    UIView *optionViewContainer;
    UIView *sessionViewContainer;
    NSMutableDictionary *_anchorViewFrames;
    IESLivePKModel *_pkmodel;
    UIView *_oppositeRtcView;
    UIView *_hostRtcView;
    NSMutableArray *_renderInfos;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _frameOfFullContaienr;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _hostAnchorFrame;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _normalPreviewFrame;
}

@property (retain, nonatomic) IESLivePKModel *pkmodel;
@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } frameOfFullContaienr;
@property (nonatomic) BOOL ownHasGuestLink;
@property (nonatomic) BOOL oppositeHasGuestLink;
@property (weak, nonatomic) UIView *oppositeRtcView;
@property (weak, nonatomic) UIView *hostRtcView;
@property (nonatomic) BOOL isAnchor;
@property (nonatomic) BOOL canUpdateWithGuest;
@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } hostAnchorFrame;
@property (retain, nonatomic) NSMutableArray *renderInfos;
@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } normalPreviewFrame;
@property (retain, nonatomic) NSMutableDictionary *anchorViewFrames;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (retain, nonatomic) UIView *sessionViewContainer;
@property (retain, nonatomic) UIView *optionViewContainer;

- (void)setIsAnchor:(BOOL)arg0;
- (void)didSetAttachingDIContext;
- (id)initWithDIContext:(id)arg0;
- (void)sendEffectRenderInfo;
- (id)anchorViewFrames;
- (void)setPkmodel:(id)arg0;
- (id)pkmodel;
- (void)setCameraCornerHidden:(BOOL)arg0;
- (id)renderInfos;
- (void)setRenderInfos:(id)arg0;
- (void)restoreLayoutIncludePreview:(BOOL)arg0;
- (void)setSessionViewContainer:(id)arg0;
- (void)setOptionViewContainer:(id)arg0;
- (void)updateSingleViewLayoutIfNeeded;
- (id)optionViewContainer;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })ratioRectByFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0;
- (id)renderInfoByRectRatio:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0 renderKey:(id)arg1;
- (void)setNormalPreviewFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0;
- (void)cleanRTCSessionView;
- (id)sessionViewContainer;
- (BOOL)singleViewOptEnabled;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })normalPreviewFrame;
- (void)layoutHostSession:(id)arg0;
- (void)onNewSessionCreated:(id)arg0 local:(BOOL)arg1;
- (void)updateLayoutOfSessionViews:(id)arg0 withUserService:(id)arg1;
- (void)updateRenderLayout:(id)arg0;
- (void)disableSingleViewLayout;
- (void)setFrameOfFullContaienr:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0;
- (void)updateLocalLayoutWithGuestOnSelf:(BOOL)arg0;
- (void)updateLocalLayoutWithGuestOnOpposite:(BOOL)arg0;
- (void)setCanUpdateWithGuest:(BOOL)arg0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frameOfFullContaienr;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })ratioFrameOfPKLayout;
- (void)startLayout;
- (void)updateAnchorViewFrames;
- (void)setAnchorViewFrames:(id)arg0;
- (BOOL)canUpdateWithGuest;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frameOfAnchor:(BOOL)arg0;
- (id)hostRtcView;
- (void)setHostAnchorFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0;
- (id)oppositeRtcView;
- (void)setHostRtcView:(id)arg0;
- (void)setOppositeRtcView:(id)arg0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })hostAnchorFrame;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frameOfSingleView:(BOOL)arg0;
- (BOOL)ownHasGuestLink;
- (void)setOwnHasGuestLink:(BOOL)arg0;
- (BOOL)oppositeHasGuestLink;
- (void)setOppositeHasGuestLink:(BOOL)arg0;
- (void).cxx_destruct;
- (BOOL)isAnchor;
- (id)videoView;

@end
