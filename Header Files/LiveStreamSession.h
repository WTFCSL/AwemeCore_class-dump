//
//     Generated by private class-dump
//

@class NSDictionary, LiveStreamSessionEventTracker, LiveStreamCapture, NSMutableArray, NSString, LiveStreamMultiTimerManager, LSLiveAudioLoudNorm, NSMutableDictionary, LSAlgorithmInfoHelper, NSObject, NSMutableString, NSLock, LSStreamVideoSource, LSRTMPReconnectAppNotificationObserver, VideoSource, LiveStreamConfiguration, TTReachability, LSStreamAudioSource, LiveStreamAudioCapture, AudioSource;
@protocol OS_dispatch_source, LiveStreamSessionAudioProtocol, OS_dispatch_semaphore, OS_dispatch_queue, LiveStreamSessionProtocol;

@interface LiveStreamSession : NSObject <LiveStreamAudioCaptureDelegate> {
    VideoSource *videoSource;
    AudioSource *audioSource;
    struct scoped_refptr<avframework::ObjcVideoTrackSource> { struct ObjcVideoTrackSource *ptr_; } objcVideoTrackSource;
    struct scoped_refptr<avframework::ObjcAudioTrackSource> { struct ObjcAudioTrackSource *ptr_; } objcAudioTrackSource;
    struct scoped_refptr<avframework::VideoTrackInterface> { struct VideoTrackInterface *ptr_; } videoTrack;
    struct unique_ptr<avframework::VideoSinkInterface<avframework::VideoFrame>, std::default_delete<avframework::VideoSinkInterface<avframework::VideoFrame>>> { struct __compressed_pair<avframework::VideoSinkInterface<avframework::VideoFrame> *, std::default_delete<avframework::VideoSinkInterface<avframework::VideoFrame>>> { void *__value_; } __ptr_; } sink;
    struct TransportSendStallStatics { long long _totalReConnectCostTime; long long _totalReConnectCount; long long _totalSendVideoStallTime; long long _totalSendAudioStallTime; long long _totalSendVideoStallCount; long long _totalSendAudioStallCount; long long _totalPtsVideoStallTime; long long _totalPtsAudioStallTime; long long _totalPtsVideoStallCount; long long _totalPtsAudioStallCount; } mPushStreamStatistic_;
    struct TransportSendStallStatics { long long _totalReConnectCostTime; long long _totalReConnectCount; long long _totalSendVideoStallTime; long long _totalSendAudioStallTime; long long _totalSendVideoStallCount; long long _totalSendAudioStallCount; long long _totalPtsVideoStallTime; long long _totalPtsAudioStallTime; long long _totalPtsVideoStallCount; long long _totalPtsAudioStallCount; } mConnectEndStatistic_;
    struct SITICalculator { void /* function */ **_vptr$ObserverInterface; struct SITICalculatorObserver *observer_; struct scoped_refptr<avframework::SITIHelperInterface> { struct SITIHelperInterface *ptr_; } siti_; int curCplxCategory_; } siti_;
    struct LSSITICalculatorObserver { void /* function */ **_vptr$SITICalculatorObserver; LiveStreamSession *session_; } sitiObserver_;
    struct scoped_refptr<avframework::LiveVideoVQScore> { struct LiveVideoVQScore *ptr_; } vqscore_;
    struct scoped_refptr<avframework::LiveVideoColorHist> { struct LiveVideoColorHist *ptr_; } color_hist_;
    struct scoped_refptr<avframework::MediaEngineFactoryInterface> { struct MediaEngineFactoryInterface *ptr_; } factory;
    struct unique_ptr<avframework::MediaEngineInterface::MediaEncodeStreamInterface, std::default_delete<avframework::MediaEngineInterface::MediaEncodeStreamInterface>> { struct __compressed_pair<avframework::MediaEngineInterface::MediaEncodeStreamInterface *, std::default_delete<avframework::MediaEngineInterface::MediaEncodeStreamInterface>> { struct MediaEncodeStreamInterface *__value_; } __ptr_; } encodeStream;
    struct unique_ptr<avframework::VideoEncoderFactoryInterface, std::default_delete<avframework::VideoEncoderFactoryInterface>> { struct __compressed_pair<avframework::VideoEncoderFactoryInterface *, std::default_delete<avframework::VideoEncoderFactoryInterface>> { struct VideoEncoderFactoryInterface *__value_; } __ptr_; } videoFactory;
    struct unique_ptr<avframework::AudioDecoderFactoryInterface, std::default_delete<avframework::AudioDecoderFactoryInterface>> { struct __compressed_pair<avframework::AudioDecoderFactoryInterface *, std::default_delete<avframework::AudioDecoderFactoryInterface>> { struct AudioDecoderFactoryInterface *__value_; } __ptr_; } audioDecoderFactory;
    struct scoped_refptr<avframework::AudioTrackInterface> { struct AudioTrackInterface *ptr_; } audioTrack;
    struct scoped_refptr<avframework::RTMPTransportInterface> { struct RTMPTransportInterface *ptr_; } rtmpTransport;
    struct scoped_refptr<avframework::EstimateInterface<int>> { void *ptr_; } _encodedBitRateEstimator;
    struct scoped_refptr<avframework::EstimateInterface<int>> { void *ptr_; } _encodedFPSEstimator;
    long long _lastIFrameTimestampUs;
    int _realVideoGopMs;
    struct scoped_refptr<avframework::EstimateInterface<int>> { void *ptr_; } _pushVideoFpsEstimator;
    int _pushVideoState;
    NSString *_pushVideoFunc;
    void *_eaglLayer;
    struct CGSize { double width; double height; } _outputVideoSize;
    int _fps;
    int _bps;
    int _maxbps;
    int _minbps;
    long long _updatedBPS;
    int _gop;
    float _gop_sec_max;
    int _rtmpSeqNumber;
    float _video_bitrate_limit_rate;
    NSString *video_codec_info;
    NSString *audio_codec_info;
    long long _profileLevel;
    NSObject<OS_dispatch_semaphore> *_optimumSignal;
    struct atomic<bool> { struct __cxx_atomic_impl<bool, std::__cxx_atomic_base_impl<bool>> { _Atomic BOOL __a_value; } __a_; } _bCanInput;
    struct mutex { struct _opaque_pthread_mutex_t { long long __sig; char __opaque[56]; } __m_; } _mainMutex;
    int audioChannelCount;
    int audioSampleRate;
    struct unique_ptr<avframework::IOSPlatformObserverServer, std::default_delete<avframework::IOSPlatformObserverServer>> { struct __compressed_pair<avframework::IOSPlatformObserverServer *, std::default_delete<avframework::IOSPlatformObserverServer>> { struct IOSPlatformObserverServer *__value_; } __ptr_; } rtmpObs;
    struct unique_ptr<avframework::IOSPlatformObserverServer, std::default_delete<avframework::IOSPlatformObserverServer>> { struct __compressed_pair<avframework::IOSPlatformObserverServer *, std::default_delete<avframework::IOSPlatformObserverServer>> { struct IOSPlatformObserverServer *__value_; } __ptr_; } engineObs;
    struct unique_ptr<avframework::IOSPlatformObserverServer, std::default_delete<avframework::IOSPlatformObserverServer>> { struct __compressed_pair<avframework::IOSPlatformObserverServer *, std::default_delete<avframework::IOSPlatformObserverServer>> { struct IOSPlatformObserverServer *__value_; } __ptr_; } rtmpReconnectObs;
    struct unique_ptr<avframework::IOSPlatformObserverServer, std::default_delete<avframework::IOSPlatformObserverServer>> { struct __compressed_pair<avframework::IOSPlatformObserverServer *, std::default_delete<avframework::IOSPlatformObserverServer>> { struct IOSPlatformObserverServer *__value_; } __ptr_; } pushStreamStallObs;
    struct unique_ptr<avframework::RTMPReconnectHelper, std::default_delete<avframework::RTMPReconnectHelper>> { struct __compressed_pair<avframework::RTMPReconnectHelper *, std::default_delete<avframework::RTMPReconnectHelper>> { struct RTMPReconnectHelper *__value_; } __ptr_; } rtmpReconnectHelper;
    struct unique_ptr<avframework::IOSPlatformAudioDecodedCallback, std::default_delete<avframework::IOSPlatformAudioDecodedCallback>> { struct __compressed_pair<avframework::IOSPlatformAudioDecodedCallback *, std::default_delete<avframework::IOSPlatformAudioDecodedCallback>> { struct IOSPlatformAudioDecodedCallback *__value_; } __ptr_; } audioDecodedCallback;
    struct scoped_refptr<avframework::PushStreamStallRecorder> { struct PushStreamStallRecorder *ptr_; } pushStreamStallRecorder;
    struct mutex { struct _opaque_pthread_mutex_t { long long __sig; char __opaque[56]; } __m_; } _transportLogMutex;
    unsigned long long _audioSourceType;
    struct LSBundle { struct map<std::string, void *, std::less<std::string>, std::allocator<std::pair<const std::string, void *>>> { struct __tree<std::__value_type<std::string, void *>, std::__map_value_compare<std::string, std::__value_type<std::string, void *>, std::less<std::string>, true>, std::allocator<std::__value_type<std::string, void *>>> { void *__begin_node_; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<std::string, void *>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, void *>, std::less<std::string>, true>> { unsigned long long __value_; } __pair3_; } __tree_; } m_mapBundle; } _streamOption;
    double _startConnectingTime;
    double _startReConnectingTime;
    double _optimumCostTime;
    unsigned long long _enableReportStallLog;
    BOOL _enableDownGradeFlag;
    BOOL _abKeyForenableDownGradeFlag;
    BOOL _enableDownGradeInSend;
    BOOL _protocolDownGrade;
    long long _protocolDownGradeType;
    unsigned long long _reconnectDownGradeThreshold;
    unsigned long long _enableNetFpsAdaptive;
    long long _reconnectErrorCode;
    BOOL _rtmpDownGradeFlag;
    double _startStreamTime;
    NSObject<OS_dispatch_source> *_logTimer;
    unsigned long long _reconnectedCount;
    long long _errorCode;
    long long _connectErrorCode;
    unsigned long long _send_package_slow_times;
    unsigned long long _bitrateAdjustTimes;
    unsigned long long _fpsAdjustTimes;
    unsigned long long _bitrateAdjustUpTimes;
    unsigned long long _videoTransportRealBps;
    unsigned long long _videoEncodebitrate;
    unsigned long long _preRtt;
    unsigned long long _preBwe;
    float _preLossRate;
    unsigned long long _reconnectedTimes;
    unsigned long long _nodeDispatchTimes;
    double _reconnectDuration;
    NSObject<OS_dispatch_queue> *_backgroundQueue;
    NSObject<OS_dispatch_queue> *_videoEncodeDeliverQueue;
    NSLock *_bgImgLock;
    struct __CVBuffer { } *_backgroundImageBuffer;
    struct __CVBuffer { } *_lastImageBuffer;
    unsigned int _lastTexture;
    BOOL _isInBackground;
    struct { long long value; int timescale; unsigned int flags; long long epoch; } _lastPtsInForeground_v;
    struct { long long value; int timescale; unsigned int flags; long long epoch; } _lastPts_v;
    double _enterBackgroundTime;
    TTReachability *_reach;
    long long _networkStatus;
    NSString *_publishURL;
    NSDictionary *_nodeProbeInfo;
    NSString *_optimizedIP;
    BOOL _is_first_connect;
    BOOL _is_only_rtmpk;
    BOOL _hit_node_optimize;
    long long _liveSessionState;
    struct CGSize { double width; double height; } _mixerOutSize;
    BOOL _enableReconnect;
    BOOL _needReconnected;
    int _reconnectTimestamp;
    BOOL _resumeConnectForNetworkStatus;
    long long _pushStreamCount;
    long long _capture0FpsCount;
    long long _encode0FpsCount;
    LiveStreamCapture *_capture;
    int _videoEncodeErrorCode;
    int _audioEncodeErrorCode;
    long long _seiCurrentShiftDiffTime;
    long long _msPtsWrongCount;
    LSAlgorithmInfoHelper *_algorithmInfoHelper;
    BOOL _SEILogEnabled;
    BOOL _audioMute;
    BOOL _shouldAutoReconnect;
    BOOL _isMediaEngineReady;
    BOOL _disableNetDetectReconnect;
    BOOL _isReconnecting;
    BOOL _shouldReportEndInfo;
    BOOL _enableProtocolDegrade;
    BOOL _realTime;
    BOOL _isRtmpAudioFrameDrop;
    BOOL _shouldExecTimerBlocks;
    BOOL _firstFrameInterleaveSuccess;
    BOOL _enableOutAudioLoudNorm;
    int _av_time_diff;
    id<LiveStreamSessionProtocol> _delegate;
    NSObject<OS_dispatch_queue> *_graphManagementQueue;
    LiveStreamConfiguration *_configuration;
    long long _streamLogTimeInterval;
    id /* block */ _streamLogCallback;
    long long _reconnectCount;
    long long _maxReconnectCount;
    long long _reconnectTimeInterval;
    long long _videoEncoderCreateCount;
    long long _mainVideoTrackId;
    long long _mainAudioTrackId;
    id /* block */ _didCapturedAudioBufferList;
    id /* block */ _didCapturedAudioBufferList_withBGMPlayer;
    id /* block */ _audioDecodedFrameCallback;
    id /* block */ _updateEncodeBitrateCallback;
    id /* block */ _shouldUpdateOptimumIPAddress;
    id /* block */ _excuteWithCommandAndUserInfo;
    LiveStreamSessionEventTracker *_streamSessionEventTracker;
    id /* block */ _liveStreamSetupMediaEngineReady;
    id /* block */ _liveStreamWillDestroyMediaEncoder;
    LiveStreamAudioCapture *_audioCapture;
    id /* block */ _getLastAudioPts;
    id<LiveStreamSessionAudioProtocol> _audioDelegate;
    long long _liveStreamLogFlag;
    LiveStreamMultiTimerManager *_timerManager;
    NSMutableString *_networkStateMessage;
    NSMutableString *_pushStreamStallMessage;
    NSMutableString *_pushStreamAvoCacheInfo;
    LSRTMPReconnectAppNotificationObserver *_reconnectAppNotificationObserver;
    long long _reconnectVersion;
    NSDictionary *_rtmpkParams;
    NSDictionary *_rtmpqParams;
    NSDictionary *_nodeOptParams;
    NSDictionary *_rtmpCacheCfgParams;
    NSDictionary *_bwEstCfgParams;
    NSDictionary *_rtmpPortsParams;
    NSString *_suggestFormatParam;
    NSString *_suggestProtocolParam;
    NSDictionary *_sandboxParams;
    NSString *_authString;
    NSString *_qId;
    NSString *_uuid;
    NSString *_sessionId;
    NSString *_serverSessionId;
    NSString *_sessionIdLog;
    long long _sendAudioDropCount;
    NSString *_video_transport_pts;
    long long _sandbox_proceed_cost;
    NSMutableArray *_VideoSourceArray;
    NSMutableArray *_AudioSourceArray;
    LSStreamVideoSource *_originVideoSource;
    LSStreamAudioSource *_originAudioSource;
    NSMutableDictionary *_texture_loader_list;
    id /* block */ _getAudioCallback;
    NSDictionary *_initialLog;
    NSString *_streamingURLString;
    NSString *_streamingIPURLString;
    long long _nodeProbeIndex;
    NSMutableArray *_userMetaDataArr;
    double _backgroundKeepTime;
    LSLiveAudioLoudNorm *_outAudioLoudNormEngine;
}

@property (retain, nonatomic) LiveStreamConfiguration *configuration;
@property (nonatomic) long long liveStreamLogFlag;
@property (copy, nonatomic) id /* block */ getLastAudioPts;
@property (weak, nonatomic) id<LiveStreamSessionAudioProtocol> audioDelegate;
@property (retain, nonatomic) LiveStreamAudioCapture *audioCapture;
@property (copy, nonatomic) id /* block */ liveStreamSetupMediaEngineReady;
@property (copy, nonatomic) id /* block */ liveStreamWillDestroyMediaEncoder;
@property (readonly) BOOL isMediaEngineReady;
@property (retain, nonatomic) LiveStreamSessionEventTracker *streamSessionEventTracker;
@property (copy, nonatomic) id /* block */ liveStreamSetupMediaEngineReady;
@property (copy, nonatomic) id /* block */ liveStreamWillDestroyMediaEncoder;
@property BOOL isMediaEngineReady;
@property (retain, nonatomic) LiveStreamAudioCapture *audioCapture;
@property (copy, nonatomic) id /* block */ getLastAudioPts;
@property (weak, nonatomic) id<LiveStreamSessionAudioProtocol> audioDelegate;
@property (retain, nonatomic) LiveStreamConfiguration *configuration;
@property (nonatomic) long long liveStreamLogFlag;
@property (retain, nonatomic) LiveStreamMultiTimerManager *timerManager;
@property (retain, nonatomic) NSMutableString *networkStateMessage;
@property (retain, nonatomic) NSMutableString *pushStreamStallMessage;
@property (retain, nonatomic) NSMutableString *pushStreamAvoCacheInfo;
@property (retain, nonatomic) LSRTMPReconnectAppNotificationObserver *reconnectAppNotificationObserver;
@property (nonatomic) long long reconnectVersion;
@property (nonatomic) BOOL disableNetDetectReconnect;
@property BOOL isReconnecting;
@property BOOL shouldReportEndInfo;
@property (copy, nonatomic) NSDictionary *rtmpkParams;
@property (copy, nonatomic) NSDictionary *rtmpqParams;
@property (copy, nonatomic) NSDictionary *nodeOptParams;
@property (copy, nonatomic) NSDictionary *rtmpCacheCfgParams;
@property (copy, nonatomic) NSDictionary *bwEstCfgParams;
@property (retain, nonatomic) NSDictionary *rtmpPortsParams;
@property (retain, nonatomic) NSString *suggestFormatParam;
@property (retain, nonatomic) NSString *suggestProtocolParam;
@property (copy, nonatomic) NSDictionary *sandboxParams;
@property (copy, nonatomic) NSString *authString;
@property (copy, nonatomic) NSString *qId;
@property (copy, nonatomic) NSString *uuid;
@property (copy, nonatomic) NSString *sessionId;
@property (copy, nonatomic) NSString *serverSessionId;
@property (copy, nonatomic) NSString *sessionIdLog;
@property (nonatomic) BOOL enableProtocolDegrade;
@property (nonatomic) BOOL realTime;
@property (nonatomic) long long sendAudioDropCount;
@property (nonatomic) int av_time_diff;
@property (retain, nonatomic) NSString *video_transport_pts;
@property (nonatomic) BOOL isRtmpAudioFrameDrop;
@property (nonatomic) long long sandbox_proceed_cost;
@property (retain, nonatomic) NSMutableArray *VideoSourceArray;
@property (retain, nonatomic) NSMutableArray *AudioSourceArray;
@property (retain, nonatomic) LSStreamVideoSource *originVideoSource;
@property (retain, nonatomic) LSStreamAudioSource *originAudioSource;
@property (retain, nonatomic) NSMutableDictionary *texture_loader_list;
@property (copy, nonatomic) id /* block */ getAudioCallback;
@property (retain, nonatomic) NSDictionary *initialLog;
@property (copy, nonatomic) NSString *streamingURLString;
@property (copy, nonatomic) NSString *streamingIPURLString;
@property (nonatomic) BOOL shouldExecTimerBlocks;
@property (nonatomic) BOOL firstFrameInterleaveSuccess;
@property (nonatomic) long long nodeProbeIndex;
@property (retain, nonatomic) NSMutableArray *userMetaDataArr;
@property (nonatomic) BOOL enableOutAudioLoudNorm;
@property (nonatomic) double backgroundKeepTime;
@property (retain, nonatomic) LSLiveAudioLoudNorm *outAudioLoudNormEngine;
@property (weak, nonatomic) id<LiveStreamSessionProtocol> delegate;
@property (readonly, nonatomic) long long liveSessionState;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *graphManagementQueue;
@property (nonatomic, getter=isAudioMute) BOOL audioMute;
@property (nonatomic) long long streamLogTimeInterval;
@property (copy, nonatomic) id /* block */ streamLogCallback;
@property (nonatomic) BOOL shouldAutoReconnect;
@property (nonatomic) long long reconnectCount;
@property (nonatomic) long long maxReconnectCount;
@property (nonatomic) long long reconnectTimeInterval;
@property (readonly, nonatomic) long long videoEncoderCreateCount;
@property (nonatomic) long long mainVideoTrackId;
@property (nonatomic) long long mainAudioTrackId;
@property (copy, nonatomic) id /* block */ didCapturedAudioBufferList;
@property (copy, nonatomic) id /* block */ didCapturedAudioBufferList_withBGMPlayer;
@property (copy, nonatomic) id /* block */ audioDecodedFrameCallback;
@property (copy, nonatomic) id /* block */ updateEncodeBitrateCallback;
@property (copy, nonatomic) id /* block */ shouldUpdateOptimumIPAddress;
@property (copy, nonatomic) id /* block */ excuteWithCommandAndUserInfo;
@property (nonatomic) BOOL enableAudioMixing;
@property (nonatomic) BOOL enableVideoMixing;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (id)getSdkVersion;
+ (id)replaceUriHostToIP:(id)arg0 ip:(id)arg1;
+ (id)getVideoFrameElapse;
+ (BOOL)unregister;
+ (void)load;
+ (BOOL)register;

- (id)audioCapture;
- (void)setAudioCapture:(id)arg0;
- (void)pushPlayerAudioData:(struct AudioBufferList { unsigned int x0; struct AudioBuffer { unsigned int x0; unsigned int x1; void *x2; } x1[1]; } *)arg0 frames:(int)arg1 bytesPerSample:(int)arg2 channels:(int)arg3 sampleRate:(int)arg4;
- (void)pullMicAudio:(void *)arg0 size:(unsigned int)arg1 timeStamp:(long long)arg2 mNumberChannels:(unsigned int)arg3 numberOfFrames:(unsigned int)arg4 processedData:(void *)arg5 earMonitorData:(void *)arg6;
- (void)callbackAudioLog:(id)arg0;
- (void)setDidCapturedAudioBufferList_withBGMPlayer:(id /* block */)arg0;
- (void)handleFullLinkEnableDumpNotifications:(id)arg0;
- (void)setInputFramebuffer:(id)arg0 atIndex:(long long)arg1;
- (void)needRender:(BOOL)arg0;
- (void)newFrameReadyAtTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg0 atIndex:(long long)arg1;
- (BOOL)isRouteToSpeaker;
- (BOOL)isHeadphonesMonitoringEnabled;
- (int)sendSEIMsgWithKey:(id)arg0 value:(id)arg1 repeatTimes:(long long)arg2 keyFrameOnly:(BOOL)arg3 allowsCovered:(BOOL)arg4 timeGap:(int)arg5;
- (void)setEnablePlayer:(BOOL)arg0;
- (void)setGetAudioCallback:(id /* block */)arg0;
- (void)setAudioMute:(BOOL)arg0;
- (void)setEnableAudioLoudNorm:(BOOL)arg0 param:(float)arg1;
- (void)startFakeAudioCapture;
- (void)stopFakeAudioCapture;
- (void)audioPlayerInterrupted:(BOOL)arg0;
- (void)pushAudioBuffer:(char *)arg0 andDataLen:(unsigned long long)arg1 sampelRate:(int)arg2 channels:(int)arg3 andBytesPerSample:(int)arg4 timestamp:(long long)arg5 trackId:(int)arg6;
- (void)setEnableAudioCaptureInBackground:(BOOL)arg0;
- (void)setEnableSpeaker:(BOOL)arg0;
- (void)setEnableNoiseSuppression:(BOOL)arg0 param:(float)arg1;
- (void)setHeadphonesMonitoringEnabled:(BOOL)arg0;
- (void)setEnableAudioLowLatency:(BOOL)arg0 ioBufferDuration:(float)arg1;
- (BOOL)isMicRunning;
- (BOOL)isFakeAudioCaptureRunning;
- (BOOL)isEchoCancellationEnabled;
- (void)setupAudioCaptureWithConfig:(id)arg0;
- (void)setStreamLogCallback:(id /* block */)arg0;
- (void)setReconnectCount:(long long)arg0;
- (void)audioCaptureInterrupted:(BOOL)arg0;
- (id)getEAGLContext;
- (void)setLiveStreamLogFlag:(long long)arg0;
- (void)setLiveStreamLogFlag:(long long)arg0;
- (void)processLowDegradationLevel;
- (id)streamAudioSource;
- (struct AudioSinkInterface { void /* function */ **x0; } *)getAudioSink;
- (void)setLiveStreamSetupMediaEngineReady:(id /* block */)arg0;
- (void)setLiveStreamWillDestroyMediaEncoder:(id /* block */)arg0;
- (void)eventTracker_setInteractStreamingMixOnClientBlock:(id /* block */)arg0;
- (void)p_initWithConfig:(id)arg0;
- (long long)getLatestAudioPts;
- (void)setGetLastAudioPts:(id /* block */)arg0;
- (void)setReconnectTimeInterval:(long long)arg0;
- (long long)reconnectCount;
- (void)setMaxReconnectCount:(long long)arg0;
- (id /* block */)shouldUpdateOptimumIPAddress;
- (void)setShouldUpdateOptimumIPAddress:(id /* block */)arg0;
- (id /* block */)excuteWithCommandAndUserInfo;
- (void)setExcuteWithCommandAndUserInfo:(id /* block */)arg0;
- (void)setOnlyRTMPKMode:(BOOL)arg0;
- (id)appendBasicLog;
- (id)appendVideoLog;
- (id)appendMessageLog;
- (void)setSeiCurrentShiftDiffTime:(long long)arg0;
- (int)sendSEIMsgWithKey:(id)arg0 value:(id)arg1 repeatTimes:(long long)arg2;
- (void)startByScene:(id)arg0;
- (long long)streamLogTimeInterval;
- (void)setStreamLogTimeInterval:(long long)arg0;
- (void)updateAudioDeviceWithCapture:(id)arg0;
- (void)setEchoCancellationEnabled:(BOOL)arg0;
- (void)setupAlgorithmInfoListener:(long long)arg0;
- (void)pushVideoBuffer:(struct __CVBuffer { } *)arg0 texture:(int)arg1 andCMTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg2;
- (void)calculateBitrateRange:(int)arg0 min:(int)arg1 max:(int)arg2 from:(id)arg3;
- (void)calculateBitrateRatio:(float)arg0 from:(id)arg1;
- (void)updateTransportParams:(id)arg0;
- (void)calculateFramerate:(int)arg0 from:(id)arg1;
- (void)__updateSITIConfig:(id)arg0 streamSizeChanged:(BOOL)arg1;
- (id)getBitrateRangeForUpdate;
- (int)getFpsForUpdate;
- (void)__updateAudioBitrate:(long long)arg0;
- (void)setMixerOutputSize:(struct CGSize { double x0; double x1; })arg0;
- (int)checkFpsFallback:(BOOL)arg0;
- (void)setVQScoreMask:(BOOL)arg0 :(int)arg1;
- (void)setColorHistMask:(BOOL)arg0 :(int)arg1;
- (void)setSeiPayloadMixStream:(BOOL)arg0;
- (void)pushVideoBuffer:(struct __CVBuffer { } *)arg0 andCMTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg1;
- (void)stopByScene:(id)arg0;
- (int)sendSEIMsgWithKey:(id)arg0 value:(id)arg1 repeatTimes:(long long)arg2 keyFrameOnly:(BOOL)arg3 allowsCovered:(BOOL)arg4 timeGap:(int)arg5 seiFlag:(int)arg6;
- (int)sendSEIMsgWithKey:(id)arg0 value:(id)arg1 repeatTimes:(long long)arg2 keyFrameOnly:(BOOL)arg3 allowsCovered:(BOOL)arg4 timeGap:(int)arg5 seiFlag:(int)arg6 pts:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg7;
- (void)addUserMetaData:(id)arg0 value:(id)arg1 flag:(int)arg2;
- (id)getStreamInfoForKey:(id)arg0;
- (long long)getTimestampForKey:(long long)arg0;
- (id)getAudioBytesSent;
- (id)getVideoBytesSent;
- (void)pushAudioBuffer:(char *)arg0 andDataLen:(unsigned long long)arg1 andInNumberFrames:(int)arg2 andCMTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg3;
- (void)eventTracker_liveWillStartInteractStreaming;
- (long long)videoEncoderCreateCount;
- (void)__updateBitrate:(long long)arg0 min:(long long)arg1 max:(long long)arg2;
- (void)updateTransportParamter:(id)arg0 value:(id)arg1;
- (void)pushRestartUpdateParams;
- (id /* block */)getAudioCallback;
- (BOOL)isMediaEngineReady;
- (id)getAudioQosInfo;
- (id)appendAudioLog;
- (id /* block */)streamLogCallback;
- (id)convertToJsonData:(id)arg0 compress:(BOOL)arg1;
- (id)bitrateRatioMap;
- (id)bitrateRangeMap;
- (void)reportBitrateFramerateChange:(id)arg0 message:(id)arg1;
- (id)fpsMap;
- (id)fpsForEncodeMap;
- (void)fetchStrategyCenterConfig;
- (void)parseSdkParams;
- (id)getTextureLoaderForTrack:(int)arg0;
- (void)addTextureLoader:(id)arg0 forTrack:(int)arg1;
- (void)pushVideoBuffer:(struct __CVBuffer { } *)arg0 andCMTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg1 trackId:(int)arg2;
- (void)tryToReconnectBySource_LSExtension:(id)arg0;
- (void)shouldReportConnectStartInfo_LSExtension:(BOOL)arg0 errorCode:(long long)arg1;
- (BOOL)protocolDegradeIfNeeded;
- (int)liveStreamURLIndex;
- (void)setLiveStreamURLIndex:(int)arg0;
- (void)removeAllVideoSourceFromEncodeStream;
- (void)removeAllAudioSourceFromEncodeStream;
- (void)runSyncOnQueue:(id /* block */)arg0;
- (long long)liveStreamLogFlag;
- (void)setBackgroundKeepTime:(double)arg0;
- (void)initInternalWithVideo:(id)arg0;
- (id)basicTraceInfo;
- (BOOL)checkAndRefineConfigurations;
- (void)p_preparePushStreamStallRecorder;
- (void)setupSITI;
- (void)setupLiveStreamGraph;
- (long long)__currentRetryCount;
- (void)setProtocolDownGradeFlag;
- (void)shouldReportRrotocolDownGrade:(long long)arg0 reconnectCount:(long long)arg1;
- (void)notificationOnMainQueue:(id)arg0;
- (BOOL)enableReconnectV2;
- (id)streamSessionEventTracker;
- (void)startNetworkObserver;
- (void)didApplicationWillTerminateNotification:(id)arg0;
- (void)setStreamingIPURLString:(id)arg0;
- (void)onErrorOccure:(long long)arg0 errorMessage:(id)arg1 source:(id)arg2;
- (id)initialLog;
- (void)p_prepareRtmpHandles;
- (void)setReconnectAppNotificationObserver:(id)arg0;
- (id)reconnectAppNotificationObserver;
- (void)p_rtmpReconnectNotification:(id)arg0;
- (void)p_prepareRtmpReconnectHelper;
- (void)setupMediaEngine;
- (void)updateEncodeStreamOption;
- (void)resetRealVideoGopInExtensionMode;
- (id)getTcUrl;
- (id)shouldUpdateOptimumURL;
- (id)serverSessionId;
- (id)setServeSessionIdForUrl:(id)arg0;
- (id)setSessionIdForUrl:(id)arg0;
- (void)setLiveSessionState:(long long)arg0;
- (void)checkProtocolDownGrade;
- (id)qId;
- (void)setAudioProfileLevel:(void *)arg0;
- (BOOL)isUseByteVC1Plugin;
- (void)getKCPParameterBundle:(void *)arg0;
- (void)getSendCacheCfgParameterBundle:(void *)arg0;
- (void)getBwestBaseBwCfgParameterBundle:(void *)arg0;
- (void)getQuicParameterBundle:(void *)arg0;
- (void)createAudioDecodeStream:(struct LSBundle { struct map<std::string, void *, std::less<std::string>, std::allocator<std::pair<const std::string, void *>>> { struct __tree<std::__value_type<std::string, void *>, std::__map_value_compare<std::string, std::__value_type<std::string, void *>, std::less<std::string>, true>, std::allocator<std::__value_type<std::string, void *>>> { void *x0; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<std::string, void *>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, void *>, std::less<std::string>, true>> { unsigned long long x0; } x2; } x0; } x0; })arg0;
- (id)encodeURL:(id)arg0;
- (id)modifyRtmpUrlWithPorts:(id)arg0 enableDownGrade:(BOOL)arg1;
- (id /* block */)audioDecodedFrameCallback;
- (void)pauseStream;
- (struct __CVBuffer { } *)loadBackgroundImage;
- (void)_pushVideoBuffer:(struct __CVBuffer { } *)arg0 texture:(int)arg1 andCMTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg2 rotation:(int)arg3;
- (void)tryToReconnectBySource:(id)arg0;
- (void)resumeStream;
- (void)releaseBackgroundImgBuf;
- (void)onNetworkChanged:(long long)arg0;
- (void)setStreamingURLString:(id)arg0;
- (void)shouldReportFPSAdjustWithOldFPS:(int)arg0 newFPS:(int)arg1 adjustment:(id)arg2;
- (void)calculateFpsForEncode:(int)arg0 from:(id)arg1;
- (int)getFpsForEncode;
- (void)runAsyncOnQueue:(id /* block */)arg0;
- (void)__updateFps:(int)arg0 min:(int)arg1 max:(int)arg2;
- (void)adaptVideoFpsForEncode:(int)arg0 from:(id)arg1;
- (void)onVideoEncodeFpsAdjustForAdpt:(int)arg0 adjustment:(id)arg1;
- (id)rtmpCacheCfgParams;
- (void)__cancelSITIBitrateFrameRate;
- (BOOL)disableNetDetectReconnect;
- (long long)reconnectTimeInterval;
- (void)shouldReportOtherStatusLogInfo:(id)arg0;
- (void)__handleRtmpConnectResult:(BOOL)arg0;
- (void)shouldReportConnectStartInfo:(BOOL)arg0 errorCode:(long long)arg1;
- (void)setFirstFrameInterleaveSuccess:(BOOL)arg0;
- (void)setSendAudioDropCount:(long long)arg0;
- (void)setIsRtmpAudioFrameDrop:(BOOL)arg0;
- (void)setAv_time_diff:(int)arg0;
- (void)setVideo_transport_pts:(id)arg0;
- (void)generateTimer;
- (void)shouldReportConnectEndInfo;
- (void)shouldReportSendSlowInfo:(long long)arg0;
- (long long)maxReconnectCount;
- (void)shouldReportConnectFailInfo:(int)arg0 errorCode:(int)arg1 event3:(long long)arg2 msg:(id)arg3;
- (void)shouldReportPushStreamFailInfo:(int)arg0 info:(int)arg1 extraData:(long long)arg2 msg:(id)arg3;
- (long long)sendAudioDropCount;
- (int)av_time_diff;
- (BOOL)isRtmpAudioFrameDrop;
- (void)shouldReportApiInfo:(id)arg0;
- (void)setSandbox_proceed_cost:(long long)arg0;
- (void)shouldReportPushStreamStall:(BOOL)arg0 reason:(int)arg1 stallTime:(long long)arg2;
- (void)shouldReportBitrateAdjustTimeCost:(int)arg0 timeCost:(long long)arg1;
- (void)shouldReportAvoCacheInfo:(int)arg0 videoPackets:(long long)arg1;
- (long long)__streamRetryCount;
- (id)suggestProtocolParam;
- (id)rtmpPortsParams;
- (BOOL)isNodeOptDisabled;
- (id)getNodeProbeIpWithTimeoutAndHost:(id)arg0;
- (id)getNodeProbeIpWithHost:(id)arg0;
- (long long)nodeProbeIndex;
- (void)setNodeProbeIndex:(long long)arg0;
- (void)stopNetworkObserver;
- (void)abortRequest;
- (long long)liveSessionState;
- (void)resetInternal;
- (id /* block */)liveStreamWillDestroyMediaEncoder;
- (void)removeVideoSource:(id)arg0;
- (void)setIsMediaEngineReady:(BOOL)arg0;
- (id)userMetaDataArr;
- (void)pushVideoBuffer:(struct __CVBuffer { } *)arg0 andCMTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg1 rotation:(int)arg2;
- (void)_pushVideoBuffer:(struct __CVBuffer { } *)arg0 andCMTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg1 rotation:(int)arg2;
- (void)pushVideoBuffer:(struct __CVBuffer { } *)arg0 texture:(int)arg1 andCMTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg2 rotation:(int)arg3;
- (id)commonLogInfo;
- (void)setupVideoBitrateRectifyParams:(void *)arg0;
- (id)convertToJsonData:(id)arg0 :(BOOL)arg1;
- (void)setupVQScore:(const void *)arg0;
- (void)setupColorHist:(const void *)arg0;
- (id /* block */)liveStreamSetupMediaEngineReady;
- (id)getPushType;
- (BOOL)firstFrameInterleaveSuccess;
- (id)p_videoCodecStrForVCodec:(unsigned long long)arg0;
- (void)setupAlgorithmInfoHelper;
- (id)appendNodeOptimizedInfoLog;
- (id)appendNetInfo;
- (id)failEventCommonParameter:(int)arg0 errorCode:(int)arg1 event3:(long long)arg2 msg:(id)arg3;
- (id)appendEncoderLog;
- (id)appendTransportLog;
- (id)connectFailFormattedMessage:(int)arg0 errorCode:(int)arg1 event3:(long long)arg2 msg:(id)arg3;
- (int)getSITICplxCategory;
- (id)_getPushVideoState;
- (id)video_transport_pts;
- (double)backgroundKeepTime;
- (void)shouldReportPushStreamInfo;
- (BOOL)shouldExecTimerBlocks;
- (id)getVideoSourceWithUID:(id)arg0;
- (id)linkVideoSourceArray;
- (id)getAudioSourceWithUID:(id)arg0;
- (id)linkAudioSourceArray;
- (void)setEnableAudioMixing:(BOOL)arg0;
- (id)getOriginAudioSource;
- (id)getOriginVideoSource;
- (id)originVideoSource;
- (id)originAudioSource;
- (id)outAudioLoudNormEngine;
- (void)recordRealVideoGopInExtensionMode:(long long)arg0 videoFrameType:(int)arg1;
- (id)audioDelegate;
- (id /* block */)didCapturedAudioBufferList;
- (id /* block */)didCapturedAudioBufferList_withBGMPlayer;
- (void)startStreamWithURL:(id)arg0;
- (void)onSITIBitrateChangedWithCategory:(int)arg0 minBitrate:(int)arg1 maxBitrate:(int)arg2;
- (void)onSITIFpsChangedWithCategory:(int)arg0 initFps:(int)arg1 minFps:(int)arg2 maxFps:(int)arg3;
- (void)onSITICategoryChange:(int)arg0;
- (void)onTransportFpsChange:(int)arg0;
- (void)onRtmpStatusChanged:(int)arg0 :(int)arg1 :(long long)arg2 :(const char *)arg3;
- (void)pushVideoBufferV2:(struct __CVBuffer { } *)arg0 andCMTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg1;
- (void)pushVideoBufferV2:(struct __CVBuffer { } *)arg0 andCMTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg1 rotation:(int)arg2;
- (void)__pushVideoBuffer:(struct __CVBuffer { } *)arg0 andCMTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg1;
- (void)flushLastImageBufferWithTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg0;
- (void)pushAudioBuffer:(char *)arg0 andInNumberFrames:(int)arg1 andBytesPerSample:(int)arg2 andNumberOfChannels:(int)arg3 andSampleRate:(int)arg4 andTimestampUs:(long long)arg5;
- (BOOL)isAudioMute;
- (int)getVQScoreMask;
- (int)getColorHistMask;
- (BOOL)isExtensionRegistered;
- (BOOL)isExtensionRegistered;
- (id)getStatistics;
- (double)getVideoSourceFps;
- (void)shouldReportBitrateAdjustInfoWithSrcBitrate:(int)arg0 dstBitrate:(int)arg1 msg:(const char *)arg2;
- (void)shouldReportAudioFrameDropEvent:(long long)arg0 diff:(int)arg1 videoPts:(id)arg2;
- (BOOL)enableAudioMixing;
- (BOOL)enableVideoMixing;
- (void)setEnableVideoMixing:(BOOL)arg0;
- (void)addVideoSource:(id)arg0;
- (void)addAudioSource:(id)arg0;
- (void)removeAudioSource:(id)arg0;
- (id)getSourceWithUID:(id)arg0 streamType:(int)arg1;
- (void)updateLinkInfo:(id)arg0;
- (void)pushVideoDataWithTrackId:(unsigned long long)arg0 timestamp:(long long)arg1 yBuffer:(void *)arg2 yStride:(int)arg3 uBuffer:(void *)arg4 uStride:(int)arg5 vBuffer:(void *)arg6 vStride:(int)arg7 width:(int)arg8 height:(int)arg9 rotation:(int)arg10;
- (void)pushVideoBuffer:(struct __CVBuffer { } *)arg0 texture:(int)arg1 andCMTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg2 trackId:(unsigned long long)arg3;
- (void)pushAudioBuffer:(char *)arg0 andDataLen:(unsigned long long)arg1 andInNumberFrames:(int)arg2 timestamp:(long long)arg3 trackId:(int)arg4;
- (void)pushEncodedData:(char *)arg0 size:(int)arg1 timestamp:(long long)arg2 dts:(long long)arg3 videoFrameType:(int)arg4;
- (void)requestIDRFrame;
- (id)graphManagementQueue;
- (void)setGraphManagementQueue:(id)arg0;
- (long long)mainVideoTrackId;
- (void)setMainVideoTrackId:(long long)arg0;
- (long long)mainAudioTrackId;
- (void)setMainAudioTrackId:(long long)arg0;
- (void)setDidCapturedAudioBufferList:(id /* block */)arg0;
- (void)setAudioDecodedFrameCallback:(id /* block */)arg0;
- (id /* block */)updateEncodeBitrateCallback;
- (void)setUpdateEncodeBitrateCallback:(id /* block */)arg0;
- (void)setStreamSessionEventTracker:(id)arg0;
- (id /* block */)getLastAudioPts;
- (void)setAudioDelegate:(id)arg0;
- (id)networkStateMessage;
- (void)setNetworkStateMessage:(id)arg0;
- (id)pushStreamStallMessage;
- (void)setPushStreamStallMessage:(id)arg0;
- (id)pushStreamAvoCacheInfo;
- (void)setPushStreamAvoCacheInfo:(id)arg0;
- (long long)reconnectVersion;
- (void)setReconnectVersion:(long long)arg0;
- (void)setDisableNetDetectReconnect:(BOOL)arg0;
- (BOOL)shouldReportEndInfo;
- (void)setShouldReportEndInfo:(BOOL)arg0;
- (id)rtmpkParams;
- (void)setRtmpkParams:(id)arg0;
- (id)rtmpqParams;
- (void)setRtmpqParams:(id)arg0;
- (id)nodeOptParams;
- (void)setNodeOptParams:(id)arg0;
- (void)setRtmpCacheCfgParams:(id)arg0;
- (id)bwEstCfgParams;
- (void)setBwEstCfgParams:(id)arg0;
- (void)setRtmpPortsParams:(id)arg0;
- (id)suggestFormatParam;
- (void)setSuggestFormatParam:(id)arg0;
- (void)setSuggestProtocolParam:(id)arg0;
- (id)sandboxParams;
- (void)setSandboxParams:(id)arg0;
- (id)authString;
- (void)setAuthString:(id)arg0;
- (void)setQId:(id)arg0;
- (void)setServerSessionId:(id)arg0;
- (id)sessionIdLog;
- (void)setSessionIdLog:(id)arg0;
- (BOOL)enableProtocolDegrade;
- (void)setEnableProtocolDegrade:(BOOL)arg0;
- (BOOL)realTime;
- (void)setRealTime:(BOOL)arg0;
- (long long)sandbox_proceed_cost;
- (id)VideoSourceArray;
- (void)setVideoSourceArray:(id)arg0;
- (id)AudioSourceArray;
- (void)setAudioSourceArray:(id)arg0;
- (void)setOriginVideoSource:(id)arg0;
- (void)setOriginAudioSource:(id)arg0;
- (id)texture_loader_list;
- (void)setTexture_loader_list:(id)arg0;
- (void)setInitialLog:(id)arg0;
- (id)streamingURLString;
- (id)streamingIPURLString;
- (void)setShouldExecTimerBlocks:(BOOL)arg0;
- (void)setUserMetaDataArr:(id)arg0;
- (BOOL)enableOutAudioLoudNorm;
- (void)setEnableOutAudioLoudNorm:(BOOL)arg0;
- (void)setOutAudioLoudNormEngine:(id)arg0;
- (void)setEnableOutAudioLoudNorm:(BOOL)arg0 param:(id)arg1;
- (float)getAudioStreamVolumeDb;
- (long long)getLatestVideoPts;
- (void)setSEILogEnabled:(BOOL)arg0;
- (BOOL)isReachable;
- (BOOL)isRunning;
- (void)invalidateTimer;
- (void)setLogLevel:(unsigned long long)arg0;
- (id)init;
- (void)setSessionId:(id)arg0;
- (BOOL)hasConnected;
- (void).cxx_destruct;
- (void)setUuid:(id)arg0;
- (void)setTimerManager:(id)arg0;
- (void)setHasConnected:(BOOL)arg0;
- (id)sessionId;
- (void)stop;
- (id)timerManager;
- (void)stopAudioCapture;
- (id)initWithConfig:(id)arg0;
- (id)delegate;
- (void)startAudioCapture;
- (id)configuration;
- (id)uuid;
- (void)start;
- (void)setDelegate:(id)arg0;
- (void)dealloc;
- (void)notification:(id)arg0;
- (id).cxx_construct;
- (void)setConfiguration:(id)arg0;
- (void)startInternal;
- (BOOL)shouldAutoReconnect;
- (void)setShouldAutoReconnect:(BOOL)arg0;
- (struct AudioStreamBasicDescription { double x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; })audioStreamBasicDescription;
- (id)getSessionId;
- (BOOL)isReconnecting;
- (void)setIsReconnecting:(BOOL)arg0;
- (void)stopInternal;
- (id)syncLock;

@end
