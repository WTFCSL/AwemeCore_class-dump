//
//     Generated by private class-dump
//

@class NSTimer, NSString, NSArray, APBEventListener, NSMutableDictionary, NSDictionary, NSMutableArray, NSObject, APBResponse;
@protocol OS_dispatch_semaphore, IBioAuthFactor, IBioAuthTask;

@interface APBReactor : NSObject <APBEventProtocol> {
    NSObject<OS_dispatch_semaphore> *_reactorLock;
    NSMutableDictionary *_currentPipeInfo;
    long long _currentTaskIndex;
    id /* block */ _rcb;
    APBEventListener *_eventListener;
    APBResponse *_response;
    NSArray *_tasks;
    NSDictionary *_globalConfig;
    NSDictionary *_taskConfig;
    NSMutableArray *_parallelTasks;
    NSTimer *_globalTimer;
    NSTimer *_taskTimer;
    id<IBioAuthFactor> _factor;
    id<IBioAuthTask> _currentTask;
}

@property (nonatomic) long long currentTaskIndex;
@property (copy, nonatomic) id /* block */ rcb;
@property (retain, nonatomic) APBEventListener *eventListener;
@property (retain, nonatomic) APBResponse *response;
@property (retain, nonatomic) NSArray *tasks;
@property (retain, nonatomic) NSDictionary *globalConfig;
@property (retain, nonatomic) NSDictionary *taskConfig;
@property (retain, nonatomic) NSMutableArray *parallelTasks;
@property (retain, nonatomic) NSTimer *globalTimer;
@property (retain, nonatomic) NSTimer *taskTimer;
@property (retain, nonatomic) id<IBioAuthFactor> factor;
@property (weak, nonatomic) id<IBioAuthTask> currentTask;
@property (weak, nonatomic) NSMutableDictionary *currentPipeInfo;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (id)taskConfig;
- (id)taskTimer;
- (id)globalTimer;
- (void)setGlobalConfig:(id)arg0;
- (id)globalConfig;
- (void)setTaskConfig:(id)arg0;
- (void)exec:(id)arg0 withCompletionCallback:(id /* block */)arg1;
- (void)setRcb:(id /* block */)arg0;
- (id /* block */)rcb;
- (void)runWithGlobalConfig:(id)arg0 withResponseCallback:(id /* block */)arg1;
- (void)setParallelTasks:(id)arg0;
- (void)execBackwardCommand:(id)arg0;
- (void)runTask:(long long)arg0 withPipeInfo:(id)arg1;
- (void)internalExit;
- (id)eventByType:(long long)arg0 parm:(id)arg1;
- (BOOL)_object:(id)arg0 responseToSelector:(SEL)arg1;
- (void)setGlobalTimer:(id)arg0;
- (void)setTaskTimer:(id)arg0;
- (void)_removeKVObserver:(id)arg0;
- (void)_resetTask:(id)arg0 forceOnMainThread:(BOOL)arg1;
- (void)setCurrentTaskIndex:(long long)arg0;
- (void)_addKVOObserver:(id)arg0;
- (id)parallelTasks;
- (void)_addGlobalTimer;
- (void)processParallelStateChange:(id)arg0 withObject:(id)arg1;
- (void)processStateChange:(id)arg0;
- (void)_removeAllKVObserver:(id)arg0;
- (void)_resetAllTask:(id)arg0 forceOnMainThread:(BOOL)arg1;
- (long long)currentTaskIndex;
- (void)setCurrentPipeInfo:(id)arg0;
- (void)_addTaskTimer;
- (BOOL)observerKeyPath:(id)arg0 observer:(id)arg1 observercance:(id)arg2;
- (void)onTaskTimer:(id)arg0;
- (void)onGlobalTimer:(id)arg0;
- (void)eventTriggered:(id)arg0;
- (id)currentPipeInfo;
- (id)init;
- (void).cxx_destruct;
- (void)setResponse:(id)arg0;
- (id)factor;
- (id)response;
- (id)currentTask;
- (void)setFactor:(id)arg0;
- (void)_setUp;
- (void)setCurrentTask:(id)arg0;
- (void)dealloc;
- (void)observeValueForKeyPath:(id)arg0 ofObject:(id)arg1 change:(id)arg2 context:(void *)arg3;
- (id)tasks;
- (void)setTasks:(id)arg0;
- (void)setTaskList:(id)arg0;
- (id)eventListener;
- (void)setEventListener:(id)arg0;

@end
