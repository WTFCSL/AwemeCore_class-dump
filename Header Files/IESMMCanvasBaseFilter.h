//
//     Generated by private class-dump
//

@class NSString, HTSGLFramebuffer, IESMMCanvasSrcManager, IESEffectVideoAnimatedRenderer, IESMMCanvasConfig, VERenderer, IESMMCanvasSource, VEColorSpaceInfo;

@interface IESMMCanvasBaseFilter : HTSGLFilterTwoInput <IESMMCanvasConfigProtocol, IESMMCanvasInitializeProtocol> {
    float _canvasVertices[8];
    struct CGSize { double width; double height; } _secondFrameBufferTextureSize;
    BOOL _preventRendering;
    BOOL _enableCanvasAutoRotate;
    BOOL _hasVideoAnimation;
    BOOL _forceDrawCanvas;
    BOOL _isPassThrough;
    unsigned long long _fillMode;
    IESMMCanvasSrcManager *_srcManager;
    NSString *_canvasKey;
    VEColorSpaceInfo *_colorSpaceInfo;
    id /* block */ _observable;
    IESEffectVideoAnimatedRenderer *_renderer;
    HTSGLFramebuffer *_transpEdgeFramebuffer;
    VERenderer *_transpEdgeRenderer;
    IESMMCanvasConfig *_config;
    IESMMCanvasSource *_source;
    long long _curSourceID;
    struct CGSize { double width; double height; } _canvasSize;
    struct CGSize { double width; double height; } _gCanvasSize;
    struct { long long value; int timescale; unsigned int flags; long long epoch; } _currentTime;
}

@property (copy, nonatomic) id /* block */ observable;
@property (nonatomic) struct CGSize { double width; double height; } gCanvasSize;
@property (nonatomic) struct CGSize { double width; double height; } canvasSize;
@property (nonatomic) struct { long long value; int timescale; unsigned int flags; long long epoch; } currentTime;
@property (retain, nonatomic) IESEffectVideoAnimatedRenderer *renderer;
@property (retain, nonatomic) HTSGLFramebuffer *transpEdgeFramebuffer;
@property (retain, nonatomic) VERenderer *transpEdgeRenderer;
@property (retain, nonatomic) IESMMCanvasConfig *config;
@property (retain, nonatomic) IESMMCanvasSource *source;
@property (nonatomic) long long curSourceID;
@property (nonatomic) unsigned long long fillMode;
@property (retain, nonatomic) IESMMCanvasSrcManager *srcManager;
@property (nonatomic) BOOL enableCanvasAutoRotate;
@property (copy, nonatomic) NSString *canvasKey;
@property (nonatomic) BOOL hasVideoAnimation;
@property (nonatomic) BOOL forceDrawCanvas;
@property (copy, nonatomic) VEColorSpaceInfo *colorSpaceInfo;
@property (nonatomic) BOOL isPassThrough;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (BOOL)preventRendering;
- (void)setPreventRendering:(BOOL)arg0;
- (void)setInputSize:(struct CGSize { double x0; double x1; })arg0 atIndex:(long long)arg1;
- (void)newFrameReadyAtTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg0 atIndex:(long long)arg1 exceptionBlock:(id /* block */)arg2;
- (id)colorSpaceInfo;
- (id)canvasKey;
- (void)setCanvasKey:(id)arg0;
- (void)setColorSpaceInfo:(id)arg0;
- (void)setIsPassThrough:(BOOL)arg0;
- (BOOL)isPassThrough;
- (void)updateIsPassThrough:(BOOL)arg0;
- (void)setForceDrawCanvas:(BOOL)arg0;
- (id)initWithConfig:(id)arg0 observable:(id /* block */)arg1 canvasSize:(struct CGSize { double x0; double x1; })arg2 context:(id)arg3;
- (void)notifyObservarCanvasSizeDidChangeIfNeed:(struct CGSize { double x0; double x1; })arg0;
- (struct CGSize { double x0; double x1; })p_adjustOutFrameSize;
- (BOOL)p_checkUseEffectRender;
- (void)drawUsingEffectRenderer;
- (void)renderTranspEdge:(double)arg0 vertices:(float *)arg1 inputFramebuffer:(id)arg2;
- (id)transpEdgeFramebuffer;
- (void)positionCalculateWithSource:(id)arg0 vertices:(float *)arg1 inputSize:(struct CGSize { double x0; double x1; })arg2 canvasSize:(struct CGSize { double x0; double x1; })arg3 paddingSize:(struct CGSize { double x0; double x1; })arg4;
- (void)positionCalculateWithSource:(id)arg0 vertices:(float *)arg1 inputSize:(struct CGSize { double x0; double x1; })arg2 canvasSize:(struct CGSize { double x0; double x1; })arg3;
- (void)setTranspEdgeFramebuffer:(id)arg0;
- (float *)updateSecondFrameBufferVertics;
- (void)p_updateSource;
- (BOOL)p_checkSkipCanvas;
- (id)initShader:(id)arg0;
- (void)p_initCanvasRender;
- (long long)curSourceID;
- (void)setCurSourceID:(long long)arg0;
- (BOOL)hasVideoAnimation;
- (struct CGSize { double x0; double x1; })gCanvasSize;
- (void)setGCanvasSize:(struct CGSize { double x0; double x1; })arg0;
- (BOOL)enableCanvasAutoRotate;
- (id)initWithConfig:(id)arg0 observable:(id /* block */)arg1 canvasSize:(struct CGSize { double x0; double x1; })arg2;
- (const float *)canvasVertices;
- (void)updateColorSpaceInfo:(id)arg0;
- (void)setSrcManager:(id)arg0;
- (id)srcManager;
- (void)setCanvasAnimatedRenderer:(id)arg0;
- (void)setEnableCanvasAutoRotate:(BOOL)arg0;
- (void)setHasVideoAnimation:(BOOL)arg0;
- (void)sourceManagerChanged;
- (BOOL)changeCanvasConfig:(id)arg0 canvasSize:(struct CGSize { double x0; double x1; })arg1;
- (BOOL)forceDrawCanvas;
- (BOOL)isAnimatedReady;
- (void)p_transformCalculateWithRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0 inputSize:(struct CGSize { double x0; double x1; })arg1 source:(id)arg2 vertices:(float *)arg3 canvasSize:(struct CGSize { double x0; double x1; })arg4;
- (void)p_transformCalculateWithRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0 source:(id)arg1 vertices:(float *)arg2 canvasSize:(struct CGSize { double x0; double x1; })arg3;
- (id)transpEdgeRenderer;
- (void)setTranspEdgeRenderer:(id)arg0;
- (void)setFillMode:(unsigned long long)arg0;
- (unsigned long long)fillMode;
- (id /* block */)observable;
- (void)setConfig:(id)arg0;
- (id)source;
- (void).cxx_destruct;
- (void)setRenderer:(id)arg0;
- (void)setCurrentTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg0;
- (id)config;
- (void)setCanvasSize:(struct CGSize { double x0; double x1; })arg0;
- (struct { long long x0; int x1; unsigned int x2; long long x3; })currentTime;
- (void)setSource:(id)arg0;
- (struct CGSize { double x0; double x1; })canvasSize;
- (void)setObservable:(id /* block */)arg0;
- (id)renderer;
- (void)initializeAttributes;

@end
