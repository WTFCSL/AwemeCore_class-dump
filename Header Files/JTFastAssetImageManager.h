//
//     Generated by private class-dump
//

@class NSMutableDictionary, NSMutableOrderedSet, NSMutableSet, NSObject, NSCache;
@protocol OS_dispatch_queue, FastAssetImageDelegate;

@interface JTFastAssetImageManager : NSObject {
    struct _opaque_pthread_rwlock_t { long long __sig; char __opaque[192]; } _rwLock;
    BOOL _isRunning;
    BOOL _hasLoadFile;
    BOOL _lruEnabled;
    BOOL _hasAddNoti;
    int _imageTableFD;
    id<FastAssetImageDelegate> _delegate;
    NSObject<OS_dispatch_queue> *_operationQueue;
    NSCache *_memCache;
    double _screenScale;
    unsigned long long _tableFileMaxSize;
    unsigned long long _tableFileSize;
    unsigned long long _tableDataOffet;
    NSMutableDictionary *_sourceInfoMap;
    NSMutableDictionary *_removedImageSourceMap;
    NSMutableDictionary *_uuidMappedData;
    NSMutableOrderedSet *_lruUUIDSet;
    NSMutableSet *_inUseSet;
}

@property (retain, nonatomic) NSObject<OS_dispatch_queue> *operationQueue;
@property (retain, nonatomic) NSCache *memCache;
@property (nonatomic) double screenScale;
@property BOOL isRunning;
@property BOOL hasLoadFile;
@property (nonatomic) BOOL lruEnabled;
@property (nonatomic) BOOL hasAddNoti;
@property (nonatomic) int imageTableFD;
@property (nonatomic) unsigned long long tableFileMaxSize;
@property unsigned long long tableFileSize;
@property unsigned long long tableDataOffet;
@property (retain, nonatomic) NSMutableDictionary *sourceInfoMap;
@property (retain, nonatomic) NSMutableDictionary *removedImageSourceMap;
@property (retain, nonatomic) NSMutableDictionary *uuidMappedData;
@property (retain, nonatomic) NSMutableOrderedSet *lruUUIDSet;
@property (retain, nonatomic) NSMutableSet *inUseSet;
@property (weak, nonatomic) id<FastAssetImageDelegate> delegate;

+ (id)metaFileVersion;
+ (id)shared;

- (id)memCache;
- (void)setMemCache:(id)arg0;
- (id)getImageWithImageName:(id)arg0 bundle:(id)arg1;
- (void)cacheBundleImageWithImageName:(id)arg0 bundle:(id)arg1 image:(id)arg2;
- (BOOL)hasAddNoti;
- (void)receiveMemoryWarning:(id)arg0;
- (void)setHasAddNoti:(BOOL)arg0;
- (void)setTableFileMaxSize:(unsigned long long)arg0;
- (void)p_loadSavedImageDataWithoutStartCheck;
- (void)setHasLoadFile:(BOOL)arg0;
- (id)sourceInfoMap;
- (id)uuidMappedData;
- (void)setTableDataOffet:(unsigned long long)arg0;
- (void)setTableFileSize:(unsigned long long)arg0;
- (void)setLruEnabled:(BOOL)arg0;
- (id)p_imageItemFromLocalWithImageUUID:(id)arg0;
- (BOOL)p_cacheImageWithImage:(id)arg0 imageDescription:(id)arg1 imageUUID:(id)arg2;
- (id)p_createImageItemWithImage:(id)arg0 imageUUID:(id)arg1 description:(id)arg2;
- (BOOL)lruEnabled;
- (void)p_updateLastUsedImageUUID:(id)arg0;
- (void)p_saveMetadata;
- (void)p_logError:(unsigned long long)arg0 description:(id)arg1;
- (id)p_imageItemForImageUUID:(id)arg0;
- (id)inUseSet;
- (BOOL)p_canAccessCachedData;
- (void)p_loadSavedImageDataIfNeed;
- (unsigned long long)tableDataOffet;
- (id)p_imageItemAtOffset:(long long)arg0 length:(long long)arg1 effectiveDataLength:(long long)arg2 imageDataLength:(unsigned long long)arg3 imageUUID:(id)arg4;
- (unsigned long long)tableFileSize;
- (unsigned long long)tableFileMaxSize;
- (void)p_deleteLastUsedUUID;
- (id)p_getCanReusedTableItemWithSize:(unsigned long long)arg0;
- (id)removedImageSourceMap;
- (BOOL)hasLoadFile;
- (void)p_loadSavedImageDataIfNeedIMP;
- (BOOL)p_appIsUpdate;
- (BOOL)p_loadSourceInfoData;
- (BOOL)p_loadImageTableWithMapTable;
- (id)lruUUIDSet;
- (void)setImageTableFD:(int)arg0;
- (id)p_lastUsedImageUUID;
- (void)p_deleteCacheImageUUID:(id)arg0;
- (BOOL)fastAssetImageEnabled;
- (void)configMaxCachedFileSize:(unsigned long long)arg0;
- (void)setupForNextLaunch;
- (void)prepareCachedData;
- (void)removeLocalCacheFile;
- (void)enableRemoveInactivityImage;
- (void)enableUIImageOptimization;
- (id)imageWithImageUUID:(id)arg0;
- (void)cacheImage:(id)arg0 forUUID:(id)arg1;
- (int)imageTableFD;
- (void)setSourceInfoMap:(id)arg0;
- (void)setRemovedImageSourceMap:(id)arg0;
- (void)setUuidMappedData:(id)arg0;
- (void)setLruUUIDSet:(id)arg0;
- (void)setInUseSet:(id)arg0;
- (double)screenScale;
- (void)setIsRunning:(BOOL)arg0;
- (BOOL)isRunning;
- (id)init;
- (void)setOperationQueue:(id)arg0;
- (void).cxx_destruct;
- (void)stop;
- (id)operationQueue;
- (id)delegate;
- (void)setScreenScale:(double)arg0;
- (void)start;
- (void)setDelegate:(id)arg0;
- (void)dealloc;

@end
