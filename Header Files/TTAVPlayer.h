//
//     Generated by private class-dump
//

@class NSLock, NSString, UIImage, NSDictionary, NSMutableString, NSMutableArray, NSObject, TTPlayerView;
@protocol OS_dispatch_queue, TTAVPlayerItemProtocol;

@interface TTAVPlayer : NSObject <TTAVPlayerProtocol> {
    struct Light<com::ss::ttm::player::TTPlayer> { struct TTPlayer *mValue; } _player;
    TTPlayerView *_playerView;
    struct RefPtr<com::ss::ttm::AVOsWrapper> { struct AVOsWrapper *mValue; } _osApp;
    BOOL _prepared;
    float _volume;
    int _playerErrorCode;
    NSMutableString *_playerErrorInfo;
    NSString *_bufferInfo;
    NSString *_voiceInfo;
    id _observer;
    id _interruptObserver;
    struct VideoProcessorMetal { void /* function */ **x0; id x1; int x2; struct mutex { struct _opaque_pthread_mutex_t { long long x0; char x1[56]; } x0; } x3; id x4; id x5; id x6; struct MetalTextureBuffer *x7; struct VideoFrame *x8; int x9; double x10; double x11; double x12; } *_videoProcessor;
    struct RefPtr<com::ss::ttm::player::TraitObject> { struct TraitObject *mValue; } mPtrVP;
    BOOL _isUseSDR2HDR;
    BOOL _ignoreAudioInterruption;
    BOOL _isPlayingBeforeInterruption;
    BOOL _looping;
    BOOL _isCapturing;
    BOOL _isPrepared;
    BOOL _isPlayerOpened;
    BOOL _mPlayCalled;
    BOOL _mEnableCurrentPlayTimeAsync;
    float _speed;
    int _identity;
    int _medialoaderNativeRegistered;
    int _hlsproxyNativeRegistered;
    int _srExtraMode;
    NSObject<TTAVPlayerItemProtocol> *_currentItem;
    long long _playbackState;
    long long _loadState;
    unsigned long long _stallReason;
    NSMutableArray *_effectParamArray;
    id /* block */ _packetDidReceiveCallback;
    id /* block */ _packetDidReceiveWithPacketInfoCallback;
    id /* block */ _frameWillRenderCallback;
    id /* block */ _frameDidReceiveBinarySeiCallback;
    id /* block */ _seiImmediatlyCallback;
    id /* block */ _abrDecisionInfoCallback;
    id /* block */ _bufferCallback;
    id /* block */ _strategyParamsCallback;
    id /* block */ _captureCompletionCallback;
    id /* block */ _seekCompletionBlock;
    id /* block */ _renderSeekCompleteBlock;
    id /* block */ _playNextCompletionBlock;
    id /* block */ _switchStreamCompletionBlock;
    id /* block */ _screenshotCompletionBlock;
    NSDictionary *_header;
    NSString *_audioFilePath;
    NSString *_videoFilePath;
    NSString *_mp4FilePath;
    NSObject<OS_dispatch_queue> *_notifyQueue;
    UIImage *_attachedPic;
    long long _playerSRType;
    NSLock *_playCalledLock;
    struct { long long value; int timescale; unsigned int flags; long long epoch; } _mCurTime;
}

@property (copy, nonatomic) id /* block */ packetDidReceiveCallback;
@property (copy, nonatomic) id /* block */ packetDidReceiveWithPacketInfoCallback;
@property (copy, nonatomic) id /* block */ frameWillRenderCallback;
@property (copy, nonatomic) id /* block */ frameDidReceiveBinarySeiCallback;
@property (copy, nonatomic) id /* block */ seiImmediatlyCallback;
@property (copy, nonatomic) id /* block */ abrDecisionInfoCallback;
@property (copy, nonatomic) id /* block */ bufferCallback;
@property (copy, nonatomic) id /* block */ strategyParamsCallback;
@property (copy, nonatomic) id /* block */ captureCompletionCallback;
@property (copy, nonatomic) id /* block */ seekCompletionBlock;
@property (copy, nonatomic) id /* block */ renderSeekCompleteBlock;
@property (copy, nonatomic) id /* block */ playNextCompletionBlock;
@property (copy, nonatomic) id /* block */ switchStreamCompletionBlock;
@property (copy, nonatomic) id /* block */ screenshotCompletionBlock;
@property BOOL ignoreAudioInterruption;
@property BOOL isPlayingBeforeInterruption;
@property (nonatomic) BOOL looping;
@property (nonatomic) BOOL isCapturing;
@property (retain, nonatomic) NSDictionary *header;
@property (nonatomic) int identity;
@property (copy, nonatomic) NSString *audioFilePath;
@property (copy, nonatomic) NSString *videoFilePath;
@property (copy, nonatomic) NSString *mp4FilePath;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *notifyQueue;
@property (retain, nonatomic) UIImage *attachedPic;
@property (nonatomic) int medialoaderNativeRegistered;
@property (nonatomic) int hlsproxyNativeRegistered;
@property (nonatomic) long long playerSRType;
@property (nonatomic) int srExtraMode;
@property (nonatomic) BOOL isPrepared;
@property (nonatomic) BOOL isPlayerOpened;
@property (nonatomic) BOOL mPlayCalled;
@property (retain, nonatomic) NSLock *playCalledLock;
@property (nonatomic) struct { long long value; int timescale; unsigned int flags; long long epoch; } mCurTime;
@property (nonatomic) BOOL mEnableCurrentPlayTimeAsync;
@property (retain, nonatomic) NSObject<TTAVPlayerItemProtocol> *currentItem;
@property (nonatomic, getter=isMuted) BOOL muted;
@property (nonatomic, getter=isHardwareDecode) BOOL hardwareDecode;
@property (nonatomic) float volume;
@property (nonatomic) float speed;
@property (nonatomic) long long playbackState;
@property (nonatomic) long long loadState;
@property (nonatomic) unsigned long long stallReason;
@property (nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } normalizeCropArea;
@property (retain, nonatomic) NSMutableArray *effectParamArray;
@property (nonatomic) BOOL isUseSDR2HDR;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (int)registerMdlProtocolHandle:(void *)arg0;
+ (void)setLogFileEnabled:(BOOL)arg0;
+ (id)playerVersion;
+ (long long)iPlayerVersion;
+ (BOOL)supportsSSL;
+ (void)setStackSizeOptimized:(BOOL)arg0;
+ (void)configThreadWaitMilliSeconds:(int)arg0;
+ (void)setGlobalValue:(id)arg0 forKey:(int)arg1;
+ (id)getGlobalValue:(int)arg0;
+ (long long)getDemuxerFactory:(int)arg0;
+ (id)playerWithURL:(id)arg0 options:(id)arg1;
+ (id)playerWithURL:(id)arg0 options:(id)arg1 params:(id)arg2;
+ (id)playerWithFileHandle:(id)arg0 offset:(long long)arg1 contentLen:(long long)arg2;
+ (id)playerWithItem:(id)arg0;
+ (id)playerWithItem:(id)arg0 options:(id)arg1;
+ (id)playerWithItem:(id)arg0 options:(id)arg1 params:(id)arg2;
+ (void)initialize;
+ (id)versionInfo;
+ (void)setValue:(id)arg0;
+ (id)playerWithURL:(id)arg0;
+ (BOOL)isMetalCapable;

- (void)setIsCapturing:(BOOL)arg0;
- (void)setFloatValue:(float)arg0 forKey:(int)arg1;
- (void)setHardwareDecode:(BOOL)arg0;
- (float)getFloatValueForKey:(int)arg0;
- (id)getStringValueForKey:(int)arg0;
- (BOOL)isHardwareDecode;
- (struct __CVBuffer { } *)copyPixelBuffer;
- (BOOL)ignoreAudioInterruption;
- (void)setIgnoreAudioInterruption:(BOOL)arg0;
- (void)setIntValue:(int)arg0 forKey:(int)arg1;
- (void)handleNotify:(id)arg0;
- (id)videoFilePath;
- (void)releaseVideoProcessorIfNeeded;
- (void)audioSessionDidChangeInterruptionType:(id)arg0;
- (id)initWithURL:(id)arg0 options:(id)arg1 params:(id)arg2;
- (id)initWithFileHandle:(id)arg0 offset:(long long)arg1 contentLen:(long long)arg2;
- (id)initWithPlayerItem:(id)arg0 options:(id)arg1;
- (id)initWithPlayerItem:(id)arg0 options:(id)arg1 params:(id)arg2;
- (void)replaceCurrentItemWithPlayerItem:(id)arg0 options:(id)arg1;
- (void)setupVideoProcessorIfNeeded;
- (void)setMPlayCalled:(BOOL)arg0;
- (BOOL)isPlayerOpened;
- (void)setVideoProcessor:(struct VideoProcessorMetal { void /* function */ **x0; id x1; int x2; struct mutex { struct _opaque_pthread_mutex_t { long long x0; char x1[56]; } x0; } x3; id x4; id x5; id x6; struct MetalTextureBuffer *x7; struct VideoFrame *x8; int x9; double x10; double x11; double x12; } *)arg0;
- (void)setIsUseSDR2HDR:(BOOL)arg0;
- (void)setIsPlayerOpened:(BOOL)arg0;
- (void)setSeekCompletionBlock:(id /* block */)arg0;
- (void)seekToTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg0 flag:(long long)arg1;
- (void)setRenderSeekCompleteBlock:(id /* block */)arg0;
- (void)seekToTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg0 completionHandler:(id /* block */)arg1 flag:(long long)arg2;
- (void)setSwitchStreamCompletionBlock:(id /* block */)arg0;
- (void)addHeader;
- (void)onNotify:(id)arg0 withObject:(id)arg1 userInfo:(id)arg2;
- (void)_seekComplete:(int)arg0;
- (id /* block */)switchStreamCompletionBlock;
- (id)playCalledLock;
- (BOOL)mPlayCalled;
- (id)attachedPic;
- (void)setAttachedPic:(id)arg0;
- (void)handleNotify:(id)arg0 playID:(int)arg1;
- (void)setStallReason:(unsigned long long)arg0;
- (void)paseLogInfo:(id)arg0;
- (id /* block */)playNextCompletionBlock;
- (void)setPlayNextCompletionBlock:(id /* block */)arg0;
- (void)_renderSeekComplete:(BOOL)arg0;
- (id)buildErrorInfo;
- (id /* block */)seekCompletionBlock;
- (id /* block */)renderSeekCompleteBlock;
- (void)setIsPlayingBeforeInterruption:(BOOL)arg0;
- (BOOL)isPlayingBeforeInterruption;
- (void)setPacketDidReceiveCallback:(id /* block */)arg0;
- (id /* block */)packetDidReceiveCallback;
- (void)setPacketDidReceiveWithPacketInfoCallback:(id /* block */)arg0;
- (id /* block */)packetDidReceiveWithPacketInfoCallback;
- (void)setFrameWillRenderCallback:(id /* block */)arg0;
- (id /* block */)frameWillRenderCallback;
- (void)setFrameDidReceiveBinarySeiCallback:(id /* block */)arg0;
- (id /* block */)frameDidReceiveBinarySeiCallback;
- (void)setSeiImmediatlyCallback:(id /* block */)arg0;
- (id /* block */)seiImmediatlyCallback;
- (void)setAbrDecisionInfoCallback:(id /* block */)arg0;
- (id /* block */)abrDecisionInfoCallback;
- (void)setStrategyParamsCallback:(id /* block */)arg0;
- (id /* block */)strategyParamsCallback;
- (void)setPlayerSRType:(long long)arg0;
- (void)setAudioFilePath:(id)arg0;
- (void)setVideoFilePath:(id)arg0;
- (void)setMp4FilePath:(id)arg0;
- (void)closeWithoutRelease;
- (void)seekToTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg0 completionHandler:(id /* block */)arg1 renderCompleteHandler:(id /* block */)arg2;
- (void)seekToTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg0 completionHandler:(id /* block */)arg1 renderCompleteHandler:(id /* block */)arg2 flag:(long long)arg3;
- (void)switchStreamBitrate:(unsigned long long)arg0 type:(long long)arg1 completionHandler:(id /* block */)arg2;
- (long long)getInt64Value:(long long)arg0 forKey:(int)arg1;
- (void)setValueVoidPTR:(void *)arg0 forKey:(int)arg1;
- (void)setValueString:(id)arg0 forKey:(int)arg1;
- (void)setTraitObject:(int)arg0 andObj:(id)arg1;
- (float)getFloatValueForKeyType:(int)arg0 forType:(int)arg1;
- (id)getStringValueForKeyType:(int)arg0 forType:(int)arg1;
- (int)getIntValueForKeyType:(int)arg0 forType:(int)arg1;
- (void)setCacheFile:(id)arg0 mode:(int)arg1;
- (void)setViewRotation:(long long)arg0;
- (void)setAutoRotation:(BOOL)arg0;
- (void)rotateCamera:(struct CGPoint { double x0; double x1; })arg0;
- (void)setDrmCreater:(void /* function */ *)arg0;
- (void)setLoadControlInterface:(id)arg0;
- (void)setMaskInfoInterface:(id)arg0;
- (void)setAIBarrageInfoInterface:(id)arg0;
- (void)setSubInfoInterface:(id)arg0;
- (id)getSubtitleContent:(long long)arg0 Params:(id)arg1;
- (void)resetPlayerVideoProcessor;
- (id)getStreamInfo;
- (unsigned long long)stallReason;
- (void)buildFilePath;
- (id)parseCommentString:(id)arg0;
- (id)effectParamArray;
- (void)setEffectParamArray:(id)arg0;
- (id /* block */)captureCompletionCallback;
- (void)setCaptureCompletionCallback:(id /* block */)arg0;
- (id /* block */)screenshotCompletionBlock;
- (void)setScreenshotCompletionBlock:(id /* block */)arg0;
- (id)mp4FilePath;
- (int)medialoaderNativeRegistered;
- (void)setMedialoaderNativeRegistered:(int)arg0;
- (int)hlsproxyNativeRegistered;
- (void)setHlsproxyNativeRegistered:(int)arg0;
- (long long)playerSRType;
- (int)srExtraMode;
- (void)setSrExtraMode:(int)arg0;
- (void)setPlayCalledLock:(id)arg0;
- (struct { long long x0; int x1; unsigned int x2; long long x3; })mCurTime;
- (void)setMCurTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg0;
- (BOOL)mEnableCurrentPlayTimeAsync;
- (void)setMEnableCurrentPlayTimeAsync:(BOOL)arg0;
- (long long)ttplayer;
- (BOOL)isUseSDR2HDR;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })cropAreaFrame;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })normalizeCropArea;
- (int)getIntValue:(int)arg0 forKey:(int)arg1;
- (void)setCropAreaFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0;
- (void)setNormalizeCropArea:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0;
- (long long)toPlayerViewRenderType:(int)arg0;
- (id)notifyQueue;
- (long long)playbackState;
- (id)init;
- (void)setCurrentItem:(id)arg0;
- (void)resetError;
- (void).cxx_destruct;
- (long long)loadState;
- (void)setIdentity:(int)arg0;
- (float)volume;
- (void)create;
- (void)setMuted:(BOOL)arg0;
- (void)shutdown;
- (void)close;
- (void)stop;
- (id)currentItem;
- (id)header;
- (id)initWithURL:(id)arg0;
- (BOOL)isCapturing;
- (void)setSpeed:(float)arg0;
- (id)initWithPlayerItem:(id)arg0;
- (void)close:(BOOL)arg0;
- (int)identity;
- (void)prepare;
- (void)setHeader:(id)arg0;
- (struct { long long x0; int x1; unsigned int x2; long long x3; })currentTime;
- (void)setVolume:(float)arg0;
- (BOOL)isPrepared;
- (void)dealloc;
- (void)setLooping:(BOOL)arg0;
- (void)play;
- (void)pause;
- (void)setValue:(id)arg0;
- (id)initWithURL:(id)arg0 options:(id)arg1;
- (void)pause:(BOOL)arg0;
- (void)seekToTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg0;
- (id).cxx_construct;
- (float)speed;
- (BOOL)isMuted;
- (void)setValue:(int)arg0 forKey:(int)arg1;
- (void)setPlaybackState:(long long)arg0;
- (BOOL)looping;
- (void)setContentURL:(id)arg0;
- (void)setNotifyQueue:(id)arg0;
- (void)replaceCurrentItemWithPlayerItem:(id)arg0;
- (void)seekToTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg0 completionHandler:(id /* block */)arg1;
- (id /* block */)bufferCallback;
- (void)setBufferCallback:(id /* block */)arg0;
- (void)setLoop:(BOOL)arg0;
- (void)setIsPrepared:(BOOL)arg0;
- (void)setLoadState:(long long)arg0;
- (void)setAudioDevice:(int)arg0;
- (id)audioFilePath;
- (id)getIPAddress;

@end
