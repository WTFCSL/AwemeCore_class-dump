//
//     Generated by private class-dump
//

@class RTVXRCapturePrivilegeToken, NSMutableDictionary, RxScheduler, RxMultipleDelegate, NSString, RTVVoipMonitor, NSObject;
@protocol RTVSessionPreviewProcotol, RTVAuthCheckerInterface, RxInjector, RTVXRStateRecorder, RTVXRControllerInjector, RTVXRCaptureControllerObserver, RTVXREngine, RTVXRRoomSessionControllerInterface, RTVMonitor, RTVUserProfileManagerInterface;

@interface RTVXRCaptureController : NSObject <RTVXRCaptureController, RTVXREngineDelegate> {
    BOOL active;
    id<RxInjector> _injector;
    id<RTVXRControllerInjector> _controllerInjector;
    id<RTVSessionPreviewProcotol> _session;
    id<RTVXRStateRecorder> _xrStateRecorder;
    id<RTVUserProfileManagerInterface> _profileManager;
    RxMultipleDelegate<RTVXRCaptureControllerObserver> *_observers;
    id<RTVAuthCheckerInterface> _authChecker;
    id<RTVXREngine> _xrEngine;
    id<RTVXRRoomSessionControllerInterface> _roomController;
    RTVVoipMonitor *_voipMonitor;
    id<RTVMonitor> _exceptionMonitor;
    RxScheduler *_scheduler;
    NSObject *_resumeCameraToken;
    RTVXRCapturePrivilegeToken *_cameraPrivilegeToken;
    RTVXRCapturePrivilegeToken *_micophonePrivilegeToken;
    NSMutableDictionary *_isCameraOffOrMutedMap;
    NSMutableDictionary *_isVideoInShowStateMap;
    NSMutableDictionary *_isVideoShowStateUpdateMap;
}

@property (readonly, weak, nonatomic) id<RxInjector> injector;
@property (readonly, weak, nonatomic) id<RTVXRControllerInjector> controllerInjector;
@property (readonly, weak, nonatomic) id<RTVSessionPreviewProcotol> session;
@property (readonly, weak, nonatomic) id<RTVXRStateRecorder> xrStateRecorder;
@property (readonly, nonatomic) id<RTVUserProfileManagerInterface> profileManager;
@property (readonly, nonatomic) RxMultipleDelegate<RTVXRCaptureControllerObserver> *observers;
@property (readonly, nonatomic) id<RTVAuthCheckerInterface> authChecker;
@property (readonly, weak, nonatomic) id<RTVXREngine> xrEngine;
@property (readonly, weak, nonatomic) id<RTVXRRoomSessionControllerInterface> roomController;
@property (readonly, weak, nonatomic) RTVVoipMonitor *voipMonitor;
@property (readonly, nonatomic) id<RTVMonitor> exceptionMonitor;
@property (readonly, nonatomic) RxScheduler *scheduler;
@property (retain, nonatomic) NSObject *resumeCameraToken;
@property (retain) RTVXRCapturePrivilegeToken *cameraPrivilegeToken;
@property (retain) RTVXRCapturePrivilegeToken *micophonePrivilegeToken;
@property (retain, nonatomic) NSMutableDictionary *isCameraOffOrMutedMap;
@property (retain, nonatomic) NSMutableDictionary *isVideoInShowStateMap;
@property (retain, nonatomic) NSMutableDictionary *isVideoShowStateUpdateMap;
@property (readonly, nonatomic) NSString *currentProfileIMID;
@property (nonatomic, getter=isActive) BOOL active;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (void)rxAwakeFromPropertyInjection;
- (void)rtv_awakeFromControllerInjector;
- (void)__applicationWillResignActive;
- (id)exceptionMonitor;
- (id)voipMonitor;
- (id)controllerInjector;
- (id)currentProfileIMID;
- (void)renderBusinessHandler:(id)arg0 context:(id)arg1;
- (void)__log:(id)arg0;
- (id)xrStateRecorder;
- (BOOL)isCameraOff;
- (id)roomController;
- (id)enableVideoWithToken:(id)arg0 reason:(id)arg1;
- (id)disableVideoWithReason:(id)arg0;
- (id)enableAudioWithToken:(id)arg0 reason:(id)arg1;
- (id)disableAudioWithReason:(id)arg0;
- (id)openCameraWithToken:(id)arg0 reason:(id)arg1;
- (id)closeCameraWithReason:(id)arg0;
- (id)openMicrophoneWithToken:(id)arg0 reason:(id)arg1;
- (id)closeMicrophoneWithReason:(id)arg0;
- (id)requestPrivilegeForOpenCaptureWithReason:(id)arg0 captureType:(long long)arg1;
- (id)checkHasPrivilegeForOpenCaptureWithToken:(id)arg0 captureType:(long long)arg1;
- (void)enableAudioVolumeReport:(BOOL)arg0;
- (void)setRTCEngineParameters:(id)arg0;
- (id)isCameraOffOrMutedOfUID:(id)arg0;
- (id)isVideoInShowStateOfUID:(id)arg0;
- (id)isVideoShowStateUpdateOfUID:(id)arg0;
- (id)xrEngine;
- (id)__requestCameraAuthorization;
- (void)xrEngine:(id)arg0 didVideoMuted:(BOOL)arg1 byUid:(id)arg2;
- (void)xrEngine:(id)arg0 didReceiveSpeakerAudioVolumUpdates:(id)arg1 totalVolume:(unsigned long long)arg2;
- (void)xrEngine:(id)arg0 onRemoteVideoStateChanged:(id)arg1 videoState:(long long)arg2 stateChangeReason:(long long)arg3;
- (void)xrEngine:(id)arg0 onLocalVideoStateChanged:(long long)arg1 streamState:(long long)arg2 withStreamError:(long long)arg3;
- (id)authChecker;
- (void)__observe;
- (id)__isControlActionEnable:(long long)arg0;
- (void)__handleControlActionDisable:(long long)arg0;
- (id)resumeCameraToken;
- (void)setResumeCameraToken:(id)arg0;
- (void)__handleRTVWillResignActive;
- (void)__handleRTVDidBecomeActive;
- (void)__applicationDidBecomeActive;
- (void)__logInfo:(id)arg0;
- (id)micophonePrivilegeToken;
- (void)__markTokenExpire:(id)arg0 reason:(id)arg1;
- (id)muteMicrophone:(BOOL)arg0 reason:(id)arg1 token:(id)arg2;
- (id)cameraPrivilegeToken;
- (id)setCameraOff:(BOOL)arg0 reason:(id)arg1 token:(id)arg2;
- (id)isCameraOffOrMutedMap;
- (id)isVideoInShowStateMap;
- (id)isVideoShowStateUpdateMap;
- (void)__xrCaptureControllerDidChangeToCameraOff:(BOOL)arg0;
- (void)__updateIsCameraOffOrMutedMapWithKey:(id)arg0 value:(id)arg1;
- (void)__updateIsVideoShowStateUpdateMapWithKey:(id)arg0 value:(id)arg1;
- (void)__updateIsVideoInShowStateMapWithKey:(id)arg0 value:(id)arg1;
- (id)__requestPrivilegeForOpenCaptureWithReason:(id)arg0 captureType:(long long)arg1;
- (void)setCameraPrivilegeToken:(id)arg0;
- (void)setMicophonePrivilegeToken:(id)arg0;
- (void)__logEvent:(id)arg0 log:(id)arg1;
- (void)setIsCameraOffOrMutedMap:(id)arg0;
- (void)setIsVideoInShowStateMap:(id)arg0;
- (void)setIsVideoShowStateUpdateMap:(id)arg0;
- (void).cxx_destruct;
- (id)session;
- (id)observers;
- (id)scheduler;
- (id)injector;
- (BOOL)isActive;
- (void)addObserver:(id)arg0;
- (void)setActive:(BOOL)arg0;
- (void)dealloc;
- (void)removeObserver:(id)arg0;
- (id)sessionContext;
- (BOOL)isMicrophoneMuted;
- (id)profileManager;

@end
