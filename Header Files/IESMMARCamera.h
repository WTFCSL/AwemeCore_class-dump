//
//     Generated by private class-dump
//

@class EAGLContext, ARSession, CIContext, NSObject, ARFrame, IESMMARPose, IESMMARModelAnchor, NSString, IESMMARCameraConfiguration, IESMMARCameraRendererWrapper, NSArray, IESMMCaptureKitConfig, HTSGLContext, NSError, CADisplayLink;
@protocol OS_dispatch_queue, IESMMARCameraDelegate, IESMMARCameraRenderer;

@interface IESMMARCamera : IESMMCaptureBase <ARSessionDelegate, VECameraCaptureProtocol> {
    BOOL _isModelLoaded;
    BOOL _shouldOutputBufferTransformed;
    BOOL _isProcessingFrame;
    float _maxWhiteBalanceGain;
    long long _state;
    struct __CVPixelBufferPool { } *_pixelBufferPool;
    id /* block */ _captureActionBlock;
    long long _currentStabilizationMode;
    NSArray *_virtualDeviceSwitchOverVideoZoomFactors;
    double _videoZoomFactorUpscaleThreshold;
    id /* block */ _torchChangeBlock;
    id /* block */ _subjectAreaDidChangeNotification;
    long long _rearPreferredStabilizationMode;
    double _minAvailableVideoZoomFactor;
    double _maxAvailableVideoZoomFactor;
    long long _frontPreferredStabilizationMode;
    id /* block */ _faceBoundsCallbackBlock;
    NSString *_deviceType;
    IESMMCaptureKitConfig *_configuration;
    long long _whiteBalanceMode;
    id /* block */ _onWorldMapStatusDidChangeCallback;
    id /* block */ _onUpdateFrameCallback;
    id /* block */ _onAddedAnchorAction;
    id /* block */ _onRemovedAnchorAction;
    id /* block */ _onUpdatedAnchorAction;
    id /* block */ _broadcastingAnchorUpdatedAction;
    id /* block */ _onEventBroadcastingAction;
    id /* block */ _on3DModelLoaded;
    id<IESMMARCameraDelegate> _delegate;
    id<IESMMARCameraRenderer> _renderer;
    NSError *_error;
    long long _videoOrientation;
    EAGLContext *_glContext;
    IESMMARCameraConfiguration *_innerConfiguration;
    ARSession *_arSession;
    CIContext *_ciContext;
    CADisplayLink *_displayLink;
    ARFrame *_lastFrame;
    unsigned long long _minimumPixelBufferPoolBufferCount;
    NSObject<OS_dispatch_queue> *_videoOutputQueue;
    void *_videoOutputQueueContextKey;
    long long _lastWorldMappingStatus;
    IESMMARModelAnchor *_modelAnchor;
    HTSGLContext *_mainContext;
    struct CGSize { double width; double height; } _objectOperation;
}

@property (retain, nonatomic) IESMMARCameraConfiguration *innerConfiguration;
@property (retain, nonatomic) ARSession *arSession;
@property long long state;
@property (retain, nonatomic) NSError *error;
@property (nonatomic) BOOL isModelLoaded;
@property (retain, nonatomic) CIContext *ciContext;
@property (retain, nonatomic) CADisplayLink *displayLink;
@property (weak, nonatomic) ARFrame *lastFrame;
@property (readonly, nonatomic) struct __CVPixelBufferPool { } *pixelBufferPool;
@property (nonatomic) unsigned long long minimumPixelBufferPoolBufferCount;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *videoOutputQueue;
@property (nonatomic) void *videoOutputQueueContextKey;
@property (nonatomic) long long lastWorldMappingStatus;
@property (retain, nonatomic) IESMMARModelAnchor *modelAnchor;
@property (nonatomic) struct CGSize { double width; double height; } objectOperation;
@property BOOL isProcessingFrame;
@property (retain, nonatomic) HTSGLContext *mainContext;
@property (copy, nonatomic) id /* block */ onWorldMapStatusDidChangeCallback;
@property (copy, nonatomic) id /* block */ onUpdateFrameCallback;
@property (copy, nonatomic) id /* block */ onAddedAnchorAction;
@property (copy, nonatomic) id /* block */ onRemovedAnchorAction;
@property (copy, nonatomic) id /* block */ onUpdatedAnchorAction;
@property (copy, nonatomic) id /* block */ broadcastingAnchorUpdatedAction;
@property (copy, nonatomic) id /* block */ onEventBroadcastingAction;
@property (copy, nonatomic) id /* block */ on3DModelLoaded;
@property (weak, nonatomic) id<IESMMARCameraDelegate> delegate;
@property (weak, nonatomic) id<IESMMARCameraRenderer> renderer;
@property (readonly, nonatomic, getter=isRunning) BOOL running;
@property (readonly, copy, nonatomic) IESMMARCameraConfiguration *arCameraConfiguration;
@property (nonatomic) long long videoOrientation;
@property (readonly, copy, nonatomic) NSArray *anchors;
@property (readonly, copy, nonatomic) IESMMARPose *cameraPose;
@property (readonly, nonatomic) struct { void /* unknown type, empty encoding */ x0[3]; } cameraIntrinsics;
@property (readonly, nonatomic) struct { void /* unknown type, empty encoding */ x0[4]; } projectionMatrix;
@property (readonly, nonatomic) long long worldMappingStatus;
@property (readonly, nonatomic) long long trackingState;
@property (readonly, nonatomic) long long trackingStateReason;
@property (retain, nonatomic) EAGLContext *glContext;
@property (nonatomic) BOOL shouldOutputBufferTransformed;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) NSArray *virtualDeviceSwitchOverVideoZoomFactors;
@property (readonly, nonatomic) double videoZoomFactorUpscaleThreshold;
@property (readonly, nonatomic) double minAvailableVideoZoomFactor;
@property (readonly, nonatomic) double maxAvailableVideoZoomFactor;
@property (readonly, nonatomic) NSString *deviceType;
@property (readonly, nonatomic) long long currentStabilizationMode;
@property (nonatomic) long long frontPreferredStabilizationMode;
@property (nonatomic) long long rearPreferredStabilizationMode;
@property (copy, nonatomic) id /* block */ videoAttachmentsCallback;
@property (copy, nonatomic) id /* block */ videoOutputCallback;
@property (copy, nonatomic) id /* block */ captureActionBlock;
@property (copy, nonatomic) id /* block */ subjectAreaDidChangeNotification;
@property (copy, nonatomic) id /* block */ torchChangeBlock;
@property (copy, nonatomic) id /* block */ faceBoundsCallbackBlock;
@property (nonatomic) unsigned long long cameraInfoRequirement;
@property (copy, nonatomic) id /* block */ cameraInfoBlock;
@property (retain, nonatomic) IESMMCaptureKitConfig *configuration;
@property (retain, nonatomic) HTSGLContext *context;
@property (nonatomic) BOOL capturePaused;
@property (nonatomic, getter=isCaptureWithAudio) BOOL captureWithAudio;
@property (nonatomic) unsigned long long frameCount;
@property (retain, nonatomic) IESMMARCameraRendererWrapper *arRendererWrapper;
@property (nonatomic) long long whiteBalanceMode;
@property (readonly, nonatomic) float maxWhiteBalanceGain;

+ (id)sharedInstanceWithConfig:(id)arg0;
+ (void)releaseCaptureKit;
+ (void)setActiveCamera:(id)arg0;
+ (id)activeCamera;
+ (id)sharedInstance;
+ (BOOL)isMultiCamSupported;

- (void)pauseCameraCapture;
- (void)resumeCameraCapture;
- (void)stopCameraCapture:(id)arg0;
- (long long)currentCameraPosition;
- (id)initWithCameraConfiguration:(id)arg0;
- (void)switchCameraPosition:(id)arg0;
- (void)setFrameRateWithMinimum:(unsigned long long)arg0 maximum:(unsigned long long)arg1;
- (void)setTorchEnable:(BOOL)arg0;
- (BOOL)cameraSetZoomFactor:(double)arg0;
- (void)setSessionPreset:(id)arg0 then:(id /* block */)arg1;
- (id /* block */)captureActionBlock;
- (void)switchCameraFormatToDolbyVision:(BOOL)arg0;
- (id /* block */)subjectAreaDidChangeNotification;
- (void)setFocusMode:(long long)arg0 pointValue:(id)arg1 then:(id /* block */)arg2;
- (void)setExposureMode:(long long)arg0 pointValue:(id)arg1 then:(id /* block */)arg2;
- (id /* block */)faceBoundsCallbackBlock;
- (BOOL)resetOrientation:(long long)arg0;
- (void)releaseCapture;
- (void)disableHighFrameRateFpsAndResetToPreset:(id)arg0;
- (id)currentDeviceFormats;
- (void)setDeviceFormat:(id)arg0 then:(id /* block */)arg1;
- (void)setCaptureActionBlock:(id /* block */)arg0;
- (void)setSubjectAreaDidChangeNotification:(id /* block */)arg0;
- (id /* block */)torchChangeBlock;
- (void)setTorchChangeBlock:(id /* block */)arg0;
- (void)setFaceBoundsCallbackBlock:(id /* block */)arg0;
- (double)currentCameraZoomFactor;
- (BOOL)cameraZoomSupported;
- (double)maxCameraZoomFactor;
- (double)maxExposureBias;
- (double)minExposureBias;
- (void)changeExposureBias:(double)arg0;
- (void)setMaxZoomFactor:(double)arg0;
- (long long)frontPreferredStabilizationMode;
- (void)setFrontPreferredStabilizationMode:(long long)arg0;
- (long long)rearPreferredStabilizationMode;
- (void)setRearPreferredStabilizationMode:(long long)arg0;
- (BOOL)exposureAtPoint:(struct CGPoint { double x0; double x1; })arg0;
- (BOOL)cameraRampToZoomFactor:(double)arg0 withRate:(double)arg1;
- (BOOL)isCaptureInterruptted;
- (BOOL)isSupportFlashMode:(long long)arg0;
- (id)getRealTimeCaptureFrameRate;
- (void)switchCameraFormatToPhotoCapture:(BOOL)arg0;
- (void)turnLensSharpen:(BOOL)arg0;
- (struct CGPoint { double x0; double x1; })exposurePoint;
- (id)currentSystemPressureState;
- (void)getCurrentDeviceFormatsSafty:(id /* block */)arg0;
- (void)setActiveColorSpace:(unsigned long long)arg0 completionHandler:(id /* block */)arg1;
- (void)setProcessSyncFlag:(BOOL)arg0;
- (void)turnBachFaceDetect:(BOOL)arg0;
- (void)turnRhythmicMotion:(BOOL)arg0;
- (int)currentProcessType;
- (void)updateCameraProcessParams:(id)arg0 complete:(id /* block */)arg1;
- (void)turnShakingDetect:(BOOL)arg0 param:(id)arg1 withResult:(id /* block */)arg2;
- (void)turnImageDefinitionDetect:(BOOL)arg0 param:(id)arg1 withResult:(id /* block */)arg2;
- (void)turnQrcodeDetect:(BOOL)arg0 param:(id)arg1 completeResult:(id /* block */)arg2 zoomFactor:(id /* block */)arg3 needSelect:(id /* block */)arg4;
- (void)qrcodeDetectResetZoomFactor:(float)arg0 byUser:(BOOL)arg1;
- (void)turnSystemEnigma:(BOOL)arg0 param:(id)arg1 completeResult:(id /* block */)arg2;
- (void)turnScan:(BOOL)arg0 param:(id)arg1 completeResult:(id /* block */)arg2;
- (void)switchMultiCam:(long long)arg0;
- (void)setMultiCaptureKitUseParallelQueue:(BOOL)arg0;
- (id)cameraZoomSupportedInfo;
- (id)supportedBaseFocalLengthArray;
- (void)setSkipBinnedFormatInMultiCam:(long long)arg0;
- (BOOL)checkConfig:(id)arg0;
- (void)setRecorderConfig:(id)arg0 cameraComplete:(id /* block */)arg1;
- (void)processExternalVideoInput:(struct opaqueCMSampleBuffer { } *)arg0;
- (void)setCiContext:(id)arg0;
- (BOOL)needProcess;
- (void)closeProcess;
- (BOOL)focusAtPoint:(struct CGPoint { double x0; double x1; })arg0;
- (void)stopCameraCapture;
- (void)startCameraCapture;
- (void *)videoOutputQueueContextKey;
- (id)videoOutputQueue;
- (id)innerConfiguration;
- (void)setInnerConfiguration:(id)arg0;
- (long long)IESMMARTrackingStateReasonConvert:(long long)arg0;
- (void)setIsModelLoaded:(BOOL)arg0;
- (id /* block */)on3DModelLoaded;
- (void)setLastWorldMappingStatus:(long long)arg0;
- (id /* block */)onWorldMapStatusDidChangeCallback;
- (void)stopCameraCaptureWithCompleteBlock:(id /* block */)arg0;
- (void)flushPixelBufferPool;
- (void)delayForWaitingOperationForAVCaptureSession;
- (void)createARSessionIfNeeded;
- (id)arConfiguration;
- (void)startDisplayLink;
- (void)runARSession;
- (void)setModelAnchor:(id)arg0;
- (struct CGSize { double x0; double x1; })objectOperation;
- (void)setObjectOperation:(struct CGSize { double x0; double x1; })arg0;
- (id)modelAnchor;
- (BOOL)isProcessingFrame;
- (void)setIsProcessingFrame:(BOOL)arg0;
- (void)outputWithARFrame:(id)arg0;
- (void)runAsyncOnVideoOutputQueue:(id /* block */)arg0;
- (BOOL)shouldOutputBufferTransformed;
- (struct __CVBuffer { } *)transformedPixelBufferWithFrame:(id)arg0;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })displayTransformForOriginOutputRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0;
- (void)setupPixelBufferPoolWithPixelBufferAttributes:(id)arg0 error:(id *)arg1;
- (unsigned long long)minimumPixelBufferPoolBufferCount;
- (void)releasePixelBufferPool;
- (void)captureImageWithTracker:(id)arg0 completionHandler:(id /* block */)arg1;
- (void)captureHDImageWithTracker:(id)arg0 completionHandler:(id /* block */)arg1;
- (void)turnEnigma:(BOOL)arg0 param:(id)arg1 completeResult:(id /* block */)arg2 zoomFactor:(id /* block */)arg3;
- (void)turnEnigma:(BOOL)arg0 param:(id)arg1 completeResults:(id /* block */)arg2;
- (BOOL)resetOrientation:(long long)arg0 then:(id /* block */)arg1;
- (void)setMirror:(BOOL)arg0 then:(id /* block */)arg1;
- (void)commitConfiguration:(id)arg0;
- (void)setVideoOutputQueue:(id)arg0 key:(void *)arg1;
- (void)restartARSession;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })displayTransform;
- (void)setOnWorldMapStatusDidChangeCallback:(id /* block */)arg0;
- (id /* block */)onUpdateFrameCallback;
- (void)setOnUpdateFrameCallback:(id /* block */)arg0;
- (id /* block */)onAddedAnchorAction;
- (void)setOnAddedAnchorAction:(id /* block */)arg0;
- (id /* block */)onRemovedAnchorAction;
- (void)setOnRemovedAnchorAction:(id /* block */)arg0;
- (id /* block */)onUpdatedAnchorAction;
- (void)setOnUpdatedAnchorAction:(id /* block */)arg0;
- (void)setBroadcastingAnchorUpdatedAction:(id /* block */)arg0;
- (void)setOnEventBroadcastingAction:(id /* block */)arg0;
- (void)setOn3DModelLoaded:(id /* block */)arg0;
- (BOOL)isModelLoaded;
- (void)setShouldOutputBufferTransformed:(BOOL)arg0;
- (void)setMinimumPixelBufferPoolBufferCount:(unsigned long long)arg0;
- (void)setVideoOutputQueue:(id)arg0;
- (void)setVideoOutputQueueContextKey:(void *)arg0;
- (long long)lastWorldMappingStatus;
- (id)arCameraConfiguration;
- (id /* block */)broadcastingAnchorUpdatedAction;
- (void)on3DModelModifiedWithName:(id)arg0 operation:(struct CGSize { double x0; double x1; })arg1;
- (id /* block */)onEventBroadcastingAction;
- (void)notifyModelLoaded:(BOOL)arg0;
- (void)switchMultiCam:(long long)arg0 fromMode:(long long)arg1 needRelease:(BOOL)arg2;
- (void)chooseBestFormatWithMaxFps:(long long)arg0 minFps:(long long)arg1;
- (void)forceStopCameraCaptureWithCompleteBlock:(id /* block */)arg0 withPrivacyCert:(id)arg1;
- (BOOL)isCaptureRunning;
- (void)setCurrentVEExposureMode:(long long)arg0;
- (BOOL)enableSystemAutoFaceAE:(BOOL)arg0;
- (float)getCurrentFrameRate;
- (id)getCameraProperty;
- (long long)currentStabilizationMode;
- (BOOL)isCaptureConfigReady;
- (void)cameraSetZoomFactor:(double)arg0 frontZoomFactor:(double)arg1;
- (void)setEnableSystemDetect:(BOOL)arg0;
- (BOOL)hasFlash;
- (float)ISO;
- (id)activeFormat;
- (struct { long long x0; int x1; unsigned int x2; long long x3; })exposureDuration;
- (BOOL)isRunning;
- (void)setDisplayLink:(id)arg0;
- (void)setResolution:(struct CGSize { double x0; double x1; })arg0;
- (id)init;
- (struct __CVPixelBufferPool { } *)pixelBufferPool;
- (unsigned long long)primaryConstituentDeviceRestrictedSwitchingBehaviorConditions;
- (BOOL)setFlashMode:(long long)arg0;
- (void)setArSession:(id)arg0;
- (long long)videoOrientation;
- (void)addAnchor:(id)arg0;
- (id)deviceType;
- (void)session:(id)arg0 didUpdateFrame:(id)arg1;
- (id)hitTest:(struct CGPoint { double x0; double x1; })arg0;
- (void)setVideoOrientation:(long long)arg0;
- (void).cxx_destruct;
- (id)virtualDeviceSwitchOverVideoZoomFactors;
- (void)setRenderer:(id)arg0;
- (struct CGPoint { double x0; double x1; })focusPoint;
- (long long)state;
- (double)exposureBias;
- (BOOL)isWhiteBalanceModeSupported:(long long)arg0;
- (BOOL)setFocusMode:(long long)arg0;
- (void)setState:(long long)arg0;
- (void)sessionInterruptionEnded:(id)arg0;
- (id)arSession;
- (void)sessionWasInterrupted:(id)arg0;
- (void)session:(id)arg0 didFailWithError:(id)arg1;
- (unsigned long long)activeColorSpace;
- (float)maxWhiteBalanceGain;
- (id)initWithConfiguration:(id)arg0;
- (BOOL)isMultiCamSession;
- (struct { float x0; float x1; float x2; })deviceWhiteBalanceGainsForTemperatureAndTintValues:(struct { float x0; float x1; })arg0;
- (double)maxAvailableVideoZoomFactor;
- (void)setExposureModeCustomWithDuration:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg0 ISO:(float)arg1 completionHandler:(id /* block */)arg2;
- (void)removeAnchor:(id)arg0;
- (struct { float x0; float x1; })temperatureAndTintValuesForDeviceWhiteBalanceGains:(struct { float x0; float x1; float x2; })arg0;
- (void)setWhiteBalanceModeLockedWithDeviceWhiteBalanceGains:(struct { float x0; float x1; float x2; })arg0 completionHandler:(id /* block */)arg1;
- (BOOL)setExposureMode:(long long)arg0;
- (id)delegate;
- (id)fallbackPrimaryConstituentDevices;
- (void)setFrameRate:(unsigned long long)arg0;
- (id)activePrimaryConstituentDevice;
- (id)configuration;
- (struct { long long x0; int x1; unsigned int x2; long long x3; })activeVideoMaxFrameDuration;
- (void)stopDisplayLink;
- (BOOL)setPrimaryConstituentDeviceSwitchingBehavior:(long long)arg0 restrictedSwitchingBehaviorConditions:(unsigned long long)arg1;
- (id)ciContext;
- (long long)whiteBalanceMode;
- (id)mainContext;
- (id)displayLink;
- (BOOL)isAdjustingFocus;
- (BOOL)hasTorch;
- (void)setError:(id)arg0;
- (void)setSessionPreset:(id)arg0;
- (id)supportedFallbackPrimaryConstituentDevices;
- (long long)primaryConstituentDeviceSwitchingBehavior;
- (float)maxISO;
- (struct { long long x0; int x1; unsigned int x2; long long x3; })activeVideoMinFrameDuration;
- (double)minAvailableVideoZoomFactor;
- (void)setDelegate:(id)arg0;
- (void)dealloc;
- (void)session:(id)arg0 didUpdateAnchors:(id)arg1;
- (id)renderer;
- (id)error;
- (float)minISO;
- (void)setWhiteBalanceMode:(long long)arg0;
- (void)setConfiguration:(id)arg0;
- (void)render;
- (void)clearProperties;
- (long long)trackingState;
- (id)cameraPose;
- (struct { void /* unknown type, empty encoding */ x0[3]; })cameraIntrinsics;
- (double)videoZoomFactorUpscaleThreshold;
- (struct CGSize { double x0; double x1; })highResolutionStillImageDimensions;
- (BOOL)isVirtualDevice;
- (id)constituentDevices;
- (struct CGSize { double x0; double x1; })imageResolution;
- (long long)trackingStateReason;
- (void)session:(id)arg0 cameraDidChangeTrackingState:(id)arg1;
- (void)session:(id)arg0 didOutputAudioSampleBuffer:(struct opaqueCMSampleBuffer { } *)arg1;
- (void)session:(id)arg0 didAddAnchors:(id)arg1;
- (void)session:(id)arg0 didRemoveAnchors:(id)arg1;
- (void)setLastFrame:(id)arg0;
- (id)lastFrame;
- (id)anchors;
- (void)setMainContext:(id)arg0;
- (id)glContext;
- (struct { void /* unknown type, empty encoding */ x0[4]; })projectionMatrix;
- (struct { void /* unknown type, empty encoding */ x0[4]; })projectionMatrixForOrientation:(long long)arg0 viewportSize:(struct CGSize { double x0; double x1; })arg1 zNear:(double)arg2 zFar:(double)arg3;
- (struct { void /* unknown type, empty encoding */ x0[4]; })viewMatrixForOrientation:(long long)arg0;
- (id)hitTest:(struct CGPoint { double x0; double x1; })arg0 types:(unsigned long long)arg1;
- (long long)worldMappingStatus;
- (void)getCurrentWorldMapWithCompletionHandler:(id /* block */)arg0;
- (void)setMirror:(BOOL)arg0;
- (void)setGlContext:(id)arg0;

@end
