//
//     Generated by private class-dump
//

@class NSMutableDictionary, NSRegularExpression, NBMetadataHelper, NSDictionary, NSLock, CTTelephonyNetworkInfo;

@interface NBPhoneNumberUtil : NSObject {
    NSLock *_entireStringCacheLock;
    NSMutableDictionary *_entireStringRegexCache;
    NSLock *_lockPatternCache;
    NSMutableDictionary *_regexPatternCache;
    NSRegularExpression *_CAPTURING_DIGIT_PATTERN;
    NSRegularExpression *_VALID_ALPHA_PHONE_PATTERN;
    NBMetadataHelper *_helper;
}

@property (retain, nonatomic) NSLock *entireStringCacheLock;
@property (retain, nonatomic) NSMutableDictionary *entireStringRegexCache;
@property (retain, nonatomic) NSLock *lockPatternCache;
@property (retain, nonatomic) NSMutableDictionary *regexPatternCache;
@property (retain, nonatomic) NSRegularExpression *CAPTURING_DIGIT_PATTERN;
@property (retain, nonatomic) NSRegularExpression *VALID_ALPHA_PHONE_PATTERN;
@property (retain, nonatomic) NBMetadataHelper *helper;
@property (readonly, nonatomic) CTTelephonyNetworkInfo *telephonyNetworkInfo;
@property (readonly, nonatomic) NSDictionary *DIGIT_MAPPINGS;

+ (void)initialize;
+ (id)sharedInstance;

- (BOOL)isNumeric:(id)arg0;
- (BOOL)isNaN:(id)arg0;
- (id)init;
- (void).cxx_destruct;
- (void)setHelper:(id)arg0;
- (id)helper;
- (id)regularExpressionWithPattern:(id)arg0 options:(unsigned long long)arg1 error:(id *)arg2;
- (id)normalize:(id)arg0;
- (id)errorWithObject:(id)arg0 withDomain:(id)arg1;
- (id)entireRegularExpressionWithPattern:(id)arg0 options:(unsigned long long)arg1 error:(id *)arg2;
- (id)componentsSeparatedByRegex:(id)arg0 regex:(id)arg1;
- (int)stringPositionByRegex:(id)arg0 regex:(id)arg1;
- (int)indexOfStringByString:(id)arg0 target:(id)arg1;
- (id)replaceFirstStringByRegex:(id)arg0 regex:(id)arg1 withTemplate:(id)arg2;
- (id)replaceStringByRegex:(id)arg0 regex:(id)arg1 withTemplate:(id)arg2;
- (id)matchFirstByRegex:(id)arg0 regex:(id)arg1;
- (id)matchesByRegex:(id)arg0 regex:(id)arg1;
- (id)matchedStringByRegex:(id)arg0 regex:(id)arg1;
- (BOOL)isStartingStringByRegex:(id)arg0 regex:(id)arg1;
- (id)stringByReplacingOccurrencesString:(id)arg0 withMap:(id)arg1 removeNonMatches:(BOOL)arg2;
- (BOOL)isAllDigits:(id)arg0;
- (id)getNationalSignificantNumber:(id)arg0;
- (void)initRegularExpressionSet;
- (id)DIGIT_MAPPINGS;
- (void)initNormalizationMappings;
- (id)extractPossibleNumber:(id)arg0;
- (BOOL)isViablePhoneNumber:(id)arg0;
- (void)normalizeSB:(id *)arg0;
- (id)normalizeDigitsOnly:(id)arg0;
- (id)normalizeDiallableCharsOnly:(id)arg0;
- (id)convertAlphaCharactersInNumber:(id)arg0;
- (int)getLengthOfGeographicalAreaCode:(id)arg0 error:(id *)arg1;
- (int)getLengthOfGeographicalAreaCode:(id)arg0;
- (int)getLengthOfNationalDestinationCode:(id)arg0 error:(id *)arg1;
- (int)getLengthOfNationalDestinationCode:(id)arg0;
- (id)normalizeHelper:(id)arg0 normalizationReplacements:(id)arg1 removeNonMatches:(BOOL)arg2;
- (BOOL)formattingRuleHasFirstGroupOnly:(id)arg0;
- (BOOL)isNumberGeographical:(id)arg0;
- (BOOL)isValidRegionCode:(id)arg0;
- (BOOL)hasValidCountryCallingCode:(id)arg0;
- (id)format:(id)arg0 numberFormat:(long long)arg1 error:(id *)arg2;
- (id)format:(id)arg0 numberFormat:(long long)arg1;
- (id)formatByPattern:(id)arg0 numberFormat:(long long)arg1 userDefinedFormats:(id)arg2 error:(id *)arg3;
- (id)formatByPattern:(id)arg0 numberFormat:(long long)arg1 userDefinedFormats:(id)arg2;
- (id)formatNationalNumberWithCarrierCode:(id)arg0 carrierCode:(id)arg1 error:(id *)arg2;
- (id)formatNationalNumberWithCarrierCode:(id)arg0 carrierCode:(id)arg1;
- (id)getMetadataForRegionOrCallingCode:(id)arg0 regionCode:(id)arg1;
- (id)formatNationalNumberWithPreferredCarrierCode:(id)arg0 fallbackCarrierCode:(id)arg1 error:(id *)arg2;
- (id)formatNationalNumberWithPreferredCarrierCode:(id)arg0 fallbackCarrierCode:(id)arg1;
- (id)formatNumberForMobileDialing:(id)arg0 regionCallingFrom:(id)arg1 withFormatting:(BOOL)arg2 error:(id *)arg3;
- (id)formatNumberForMobileDialing:(id)arg0 regionCallingFrom:(id)arg1 withFormatting:(BOOL)arg2;
- (id)formatOutOfCountryCallingNumber:(id)arg0 regionCallingFrom:(id)arg1 error:(id *)arg2;
- (id)formatOutOfCountryCallingNumber:(id)arg0 regionCallingFrom:(id)arg1;
- (id)prefixNumberWithCountryCallingCode:(id)arg0 phoneNumberFormat:(long long)arg1 formattedNationalNumber:(id)arg2 formattedExtension:(id)arg3;
- (id)formatInOriginalFormat:(id)arg0 regionCallingFrom:(id)arg1 error:(id *)arg2;
- (id)formatInOriginalFormat:(id)arg0 regionCallingFrom:(id)arg1;
- (BOOL)rawInputContainsNationalPrefix:(id)arg0 nationalPrefix:(id)arg1 regionCode:(id)arg2;
- (BOOL)hasUnexpectedItalianLeadingZero:(id)arg0;
- (BOOL)hasFormattingPatternForNumber:(id)arg0;
- (id)formatOutOfCountryKeepingAlphaChars:(id)arg0 regionCallingFrom:(id)arg1 error:(id *)arg2;
- (id)formatOutOfCountryKeepingAlphaChars:(id)arg0 regionCallingFrom:(id)arg1;
- (id)formatNsn:(id)arg0 metadata:(id)arg1 phoneNumberFormat:(long long)arg2 carrierCode:(id)arg3;
- (id)chooseFormattingPatternForNumber:(id)arg0 nationalNumber:(id)arg1;
- (id)formatNsnUsingPattern:(id)arg0 formattingPattern:(id)arg1 numberFormat:(long long)arg2 carrierCode:(id)arg3;
- (id)getExampleNumber:(id)arg0 error:(id *)arg1;
- (id)getExampleNumberForType:(id)arg0 type:(long long)arg1 error:(id *)arg2;
- (id)getExampleNumberForNonGeoEntity:(id)arg0 error:(id *)arg1;
- (id)maybeGetFormattedExtension:(id)arg0 metadata:(id)arg1 numberFormat:(long long)arg2;
- (id)getNumberDescByType:(id)arg0 type:(long long)arg1;
- (long long)getNumberType:(id)arg0;
- (long long)getNumberTypeHelper:(id)arg0 metadata:(id)arg1;
- (BOOL)isNumberMatchingDesc:(id)arg0 numberDesc:(id)arg1;
- (BOOL)isValidNumber:(id)arg0;
- (BOOL)isValidNumberForRegion:(id)arg0 regionCode:(id)arg1;
- (id)getRegionCodeForNumber:(id)arg0;
- (id)getRegionCodeForNumberFromRegionList:(id)arg0 regionCodes:(id)arg1;
- (id)getRegionCodeForCountryCode:(id)arg0;
- (id)getRegionCodesForCountryCode:(id)arg0;
- (id)getCountryCodeForRegion:(id)arg0;
- (id)getCountryCodeForValidRegion:(id)arg0 error:(id *)arg1;
- (id)getNddPrefixForRegion:(id)arg0 stripNonDigits:(BOOL)arg1;
- (BOOL)isNANPACountry:(id)arg0;
- (BOOL)isLeadingZeroPossible:(id)arg0;
- (BOOL)isAlphaNumber:(id)arg0;
- (BOOL)isPossibleNumber:(id)arg0 error:(id *)arg1;
- (BOOL)isPossibleNumber:(id)arg0;
- (long long)validateNumberLength:(id)arg0 metadata:(id)arg1;
- (long long)validateNumberLength:(id)arg0 metadata:(id)arg1 type:(long long)arg2;
- (long long)testNumberLength:(id)arg0 desc:(id)arg1;
- (long long)isPossibleNumberWithReason:(id)arg0 error:(id *)arg1;
- (long long)isPossibleNumberWithReason:(id)arg0;
- (BOOL)isPossibleNumberString:(id)arg0 regionDialingFrom:(id)arg1 error:(id *)arg2;
- (BOOL)truncateTooLongNumber:(id)arg0;
- (id)extractCountryCode:(id)arg0 nationalNumber:(id *)arg1;
- (id)getSupportedRegions;
- (id)maybeExtractCountryCode:(id)arg0 metadata:(id)arg1 nationalNumber:(id *)arg2 keepRawInput:(BOOL)arg3 phoneNumber:(id *)arg4 error:(id *)arg5;
- (BOOL)descHasPossibleNumberData:(id)arg0;
- (BOOL)parsePrefixAsIdd:(id)arg0 sourceString:(id *)arg1;
- (long long)maybeStripInternationalPrefixAndNormalize:(id *)arg0 possibleIddPrefix:(id)arg1;
- (BOOL)maybeStripNationalPrefixAndCarrierCode:(id *)arg0 metadata:(id)arg1 carrierCode:(id *)arg2;
- (id)maybeStripExtension:(id *)arg0;
- (BOOL)checkRegionForParsing:(id)arg0 defaultRegion:(id)arg1;
- (id)parse:(id)arg0 defaultRegion:(id)arg1 error:(id *)arg2;
- (id)parseWithPhoneCarrierRegion:(id)arg0 error:(id *)arg1;
- (id)telephonyNetworkInfo;
- (id)countryCodeByCarrier;
- (id)parseAndKeepRawInput:(id)arg0 defaultRegion:(id)arg1 error:(id *)arg2;
- (void)setItalianLeadingZerosForPhoneNumber:(id)arg0 phoneNumber:(id *)arg1;
- (id)parseHelper:(id)arg0 defaultRegion:(id)arg1 keepRawInput:(BOOL)arg2 checkRegion:(BOOL)arg3 error:(id *)arg4;
- (void)buildNationalNumberForParsing:(id)arg0 nationalNumber:(id *)arg1;
- (long long)isNumberMatch:(id)arg0 second:(id)arg1 error:(id *)arg2;
- (long long)isNumberMatch:(id)arg0 second:(id)arg1;
- (BOOL)isNationalNumberSuffixOfTheOther:(id)arg0 second:(id)arg1;
- (BOOL)canBeInternationallyDialled:(id)arg0 error:(id *)arg1;
- (BOOL)canBeInternationallyDialled:(id)arg0;
- (BOOL)matchesEntirely:(id)arg0 string:(id)arg1;
- (id)entireStringCacheLock;
- (void)setEntireStringCacheLock:(id)arg0;
- (id)entireStringRegexCache;
- (void)setEntireStringRegexCache:(id)arg0;
- (id)lockPatternCache;
- (void)setLockPatternCache:(id)arg0;
- (id)regexPatternCache;
- (void)setRegexPatternCache:(id)arg0;
- (id)CAPTURING_DIGIT_PATTERN;
- (void)setCAPTURING_DIGIT_PATTERN:(id)arg0;
- (id)VALID_ALPHA_PHONE_PATTERN;
- (void)setVALID_ALPHA_PHONE_PATTERN:(id)arg0;

@end
