//
//     Generated by private class-dump
//

@class VERenderer, NSMutableDictionary, IESEffectVideoAnimatedRenderer, NSDictionary, HTSGLFramebuffer, NSMutableArray;

@interface IESMMMultiTrackFilter : HTSGLFilter {
    BOOL _forceUseEffectRender;
    long long _inputCount;
    NSDictionary *_assetSources;
    NSDictionary *_assetAnimateInfos;
    long long _hasReceivedCount;
    long long _hasSetTextureCount;
    NSMutableDictionary *_inputFramebuffers;
    IESEffectVideoAnimatedRenderer *_renderer;
    HTSGLFramebuffer *_transpEdgeFramebuffer;
    HTSGLFramebuffer *_subTrackFramebuffer;
    VERenderer *_transpEdgeRenderer;
    NSMutableArray *_activeHanderKeys;
    struct CGSize { double width; double height; } _backgroundTextureSize;
    struct { long long value; int timescale; unsigned int flags; long long epoch; } _firstFrameTime;
}

@property (nonatomic) long long hasReceivedCount;
@property (nonatomic) long long hasSetTextureCount;
@property (retain, nonatomic) NSMutableDictionary *inputFramebuffers;
@property (nonatomic) struct { long long value; int timescale; unsigned int flags; long long epoch; } firstFrameTime;
@property (retain, nonatomic) IESEffectVideoAnimatedRenderer *renderer;
@property (nonatomic) struct CGSize { double width; double height; } backgroundTextureSize;
@property (retain, nonatomic) HTSGLFramebuffer *transpEdgeFramebuffer;
@property (retain, nonatomic) HTSGLFramebuffer *subTrackFramebuffer;
@property (retain, nonatomic) VERenderer *transpEdgeRenderer;
@property (retain, nonatomic) NSMutableArray *activeHanderKeys;
@property (nonatomic) long long inputCount;
@property (retain, nonatomic) NSDictionary *assetSources;
@property (retain, nonatomic) NSDictionary *assetAnimateInfos;
@property (nonatomic) BOOL forceUseEffectRender;

- (void)renderToTextureWithVertices:(const float *)arg0 textureCoordinates:(const float *)arg1;
- (void)setInputFramebuffer:(id)arg0 atIndex:(long long)arg1;
- (void)setInputSize:(struct CGSize { double x0; double x1; })arg0 atIndex:(long long)arg1;
- (long long)nextAvailableTextureIndex;
- (void)newFrameReadyAtTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg0 atIndex:(long long)arg1 exceptionBlock:(id /* block */)arg2;
- (struct { long long x0; int x1; unsigned int x2; long long x3; })firstFrameTime;
- (void)setFirstFrameTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg0;
- (id)assetAnimateInfos;
- (struct CGSize { double x0; double x1; })backgroundTextureSize;
- (void)setBackgroundTextureSize:(struct CGSize { double x0; double x1; })arg0;
- (void)setAssetAnimateInfos:(id)arg0;
- (id)getkeyFrameInfoWithPts:(unsigned long long)arg0 withVideoTrackID:(unsigned long long)arg1;
- (void)setEffectAnimatedRenderer:(id)arg0;
- (void)updateKeyFrameInfo:(id)arg0 withVideoTrackID:(unsigned long long)arg1;
- (void)setForceUseEffectRender:(BOOL)arg0;
- (void)setAssetSources:(id)arg0;
- (void)renderTranspEdge:(double)arg0 vertices:(float *)arg1 inputFramebuffer:(id)arg2;
- (id)transpEdgeFramebuffer;
- (void)positionCalculateWithSource:(id)arg0 vertices:(float *)arg1 inputSize:(struct CGSize { double x0; double x1; })arg2 canvasSize:(struct CGSize { double x0; double x1; })arg3 paddingSize:(struct CGSize { double x0; double x1; })arg4;
- (void)positionCalculateWithSource:(id)arg0 vertices:(float *)arg1 inputSize:(struct CGSize { double x0; double x1; })arg2 canvasSize:(struct CGSize { double x0; double x1; })arg3;
- (void)setTranspEdgeFramebuffer:(id)arg0;
- (void)setInputFramebuffers:(id)arg0;
- (void)setHasReceivedCount:(long long)arg0;
- (void)setHasSetTextureCount:(long long)arg0;
- (void)setActiveHanderKeys:(id)arg0;
- (long long)hasSetTextureCount;
- (id)getKeyByVideoTrackId:(long long)arg0;
- (id)inputFramebuffers;
- (long long)hasReceivedCount;
- (void)setSubTrackFramebuffer:(id)arg0;
- (id)subTrackFramebuffer;
- (id)assetSources;
- (id)activeHanderKeys;
- (BOOL)p_checkUseEffectRender:(id)arg0 source:(id)arg1;
- (void)drawUsingEffectRenderer:(id)arg0;
- (void)drawWithoutEffectRender:(id)arg0;
- (BOOL)forceUseEffectRender;
- (BOOL)isAnimatedReady;
- (void)p_transformCalculateWithRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0 inputSize:(struct CGSize { double x0; double x1; })arg1 source:(id)arg2 vertices:(float *)arg3 canvasSize:(struct CGSize { double x0; double x1; })arg4;
- (void)p_transformCalculateWithRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0 source:(id)arg1 vertices:(float *)arg2 canvasSize:(struct CGSize { double x0; double x1; })arg3;
- (void)updateAssetSource:(id)arg0;
- (id)transpEdgeRenderer;
- (void)setTranspEdgeRenderer:(id)arg0;
- (id)initWithContext:(id)arg0;
- (void).cxx_destruct;
- (void)setRenderer:(id)arg0;
- (void)setInputCount:(long long)arg0;
- (void)dealloc;
- (long long)inputCount;
- (id)renderer;

@end
