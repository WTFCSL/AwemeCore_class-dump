//
//     Generated by private class-dump
//

@interface GXStyleModel : NSObject {
    BOOL _fitContent;
    long long _display;
    long long _flexWrap;
    long long _overflow;
    long long _alignSelf;
    long long _alignItems;
    long long _alignContent;
    long long _positionType;
    long long _flexDirection;
    long long _justifyContent;
    long long _direction;
    double _flexGrow;
    double _flexShrink;
    struct { int dimen_type; float dimen_value; } _flexBasis;
    double _aspectRatio;
    double _recordFlexGrow;
    struct { struct { int dimen_type; float dimen_value; } width; struct { int dimen_type; float dimen_value; } height; } _size;
    struct { struct { int dimen_type; float dimen_value; } width; struct { int dimen_type; float dimen_value; } height; } _minSize;
    struct { struct { int dimen_type; float dimen_value; } width; struct { int dimen_type; float dimen_value; } height; } _maxSize;
    struct { struct { int dimen_type; float dimen_value; } width; struct { int dimen_type; float dimen_value; } height; } _defaultSize;
    struct { struct { int dimen_type; float dimen_value; } width; struct { int dimen_type; float dimen_value; } height; } _recordSize;
    struct { struct { int dimen_type; float dimen_value; } width; struct { int dimen_type; float dimen_value; } height; } _recordMinSize;
    struct { struct { int dimen_type; float dimen_value; } left; struct { int dimen_type; float dimen_value; } right; struct { int dimen_type; float dimen_value; } top; struct { int dimen_type; float dimen_value; } bottom; } _border;
    struct { struct { int dimen_type; float dimen_value; } left; struct { int dimen_type; float dimen_value; } right; struct { int dimen_type; float dimen_value; } top; struct { int dimen_type; float dimen_value; } bottom; } _position;
    struct { struct { int dimen_type; float dimen_value; } left; struct { int dimen_type; float dimen_value; } right; struct { int dimen_type; float dimen_value; } top; struct { int dimen_type; float dimen_value; } bottom; } _margin;
    struct { struct { int dimen_type; float dimen_value; } left; struct { int dimen_type; float dimen_value; } right; struct { int dimen_type; float dimen_value; } top; struct { int dimen_type; float dimen_value; } bottom; } _padding;
}

@property (nonatomic) long long display;
@property (nonatomic) long long flexWrap;
@property (nonatomic) long long overflow;
@property (nonatomic) long long alignSelf;
@property (nonatomic) long long alignItems;
@property (nonatomic) struct { struct { int dimen_type; float dimen_value; } left; struct { int dimen_type; float dimen_value; } right; struct { int dimen_type; float dimen_value; } top; struct { int dimen_type; float dimen_value; } bottom; } border;
@property (nonatomic) long long alignContent;
@property (nonatomic) long long positionType;
@property (nonatomic) long long flexDirection;
@property (nonatomic) long long justifyContent;
@property (nonatomic) long long direction;
@property (nonatomic) struct { struct { int dimen_type; float dimen_value; } left; struct { int dimen_type; float dimen_value; } right; struct { int dimen_type; float dimen_value; } top; struct { int dimen_type; float dimen_value; } bottom; } position;
@property (nonatomic) struct { struct { int dimen_type; float dimen_value; } left; struct { int dimen_type; float dimen_value; } right; struct { int dimen_type; float dimen_value; } top; struct { int dimen_type; float dimen_value; } bottom; } margin;
@property (nonatomic) struct { struct { int dimen_type; float dimen_value; } left; struct { int dimen_type; float dimen_value; } right; struct { int dimen_type; float dimen_value; } top; struct { int dimen_type; float dimen_value; } bottom; } padding;
@property (nonatomic) struct { struct { int dimen_type; float dimen_value; } width; struct { int dimen_type; float dimen_value; } height; } size;
@property (nonatomic) struct { struct { int dimen_type; float dimen_value; } width; struct { int dimen_type; float dimen_value; } height; } minSize;
@property (nonatomic) struct { struct { int dimen_type; float dimen_value; } width; struct { int dimen_type; float dimen_value; } height; } maxSize;
@property (nonatomic) struct { struct { int dimen_type; float dimen_value; } width; struct { int dimen_type; float dimen_value; } height; } defaultSize;
@property (nonatomic) double flexGrow;
@property (nonatomic) double flexShrink;
@property (nonatomic) struct { int dimen_type; float dimen_value; } flexBasis;
@property (nonatomic) double aspectRatio;
@property (nonatomic) BOOL fitContent;
@property (nonatomic) double recordFlexGrow;
@property (nonatomic) struct { struct { int dimen_type; float dimen_value; } width; struct { int dimen_type; float dimen_value; } height; } recordSize;
@property (nonatomic) struct { struct { int dimen_type; float dimen_value; } width; struct { int dimen_type; float dimen_value; } height; } recordMinSize;

+ (id)defaultStyleModel;

- (void)setAlignContent:(long long)arg0;
- (void)setAlignSelf:(long long)arg0;
- (void)setAlignItems:(long long)arg0;
- (void)setJustifyContent:(long long)arg0;
- (void)setFlexBasis:(struct { int x0; float x1; })arg0;
- (void)setFlexShrink:(double)arg0;
- (void)setFlexGrow:(double)arg0;
- (void)setFlexWrap:(long long)arg0;
- (void)setFlexDirection:(long long)arg0;
- (long long)positionType;
- (void)setPositionType:(long long)arg0;
- (long long)flexDirection;
- (long long)alignSelf;
- (double)flexShrink;
- (long long)alignItems;
- (long long)justifyContent;
- (double)flexGrow;
- (void)setRecordMinSize:(struct { struct { int x0; float x1; } x0; struct { int x0; float x1; } x1; })arg0;
- (struct { struct { int x0; float x1; } x0; struct { int x0; float x1; } x1; })recordSize;
- (BOOL)fitContent;
- (void)setFitContent:(BOOL)arg0;
- (void)setRecordSize:(struct { struct { int x0; float x1; } x0; struct { int x0; float x1; } x1; })arg0;
- (void)setRecordFlexGrow:(double)arg0;
- (struct { struct { int x0; float x1; } x0; struct { int x0; float x1; } x1; })recordMinSize;
- (double)recordFlexGrow;
- (struct { int x0; float x1; })flexBasis;
- (long long)flexWrap;
- (long long)alignContent;
- (void)setAspectRatio:(double)arg0;
- (void)setDisplay:(long long)arg0;
- (struct { struct { int x0; float x1; } x0; struct { int x0; float x1; } x1; struct { int x0; float x1; } x2; struct { int x0; float x1; } x3; })margin;
- (void)setPadding:(struct { struct { int x0; float x1; } x0; struct { int x0; float x1; } x1; struct { int x0; float x1; } x2; struct { int x0; float x1; } x3; })arg0;
- (struct { struct { int x0; float x1; } x0; struct { int x0; float x1; } x1; })maxSize;
- (struct { struct { int x0; float x1; } x0; struct { int x0; float x1; } x1; })minSize;
- (void)setMaxSize:(struct { struct { int x0; float x1; } x0; struct { int x0; float x1; } x1; })arg0;
- (struct { struct { int x0; float x1; } x0; struct { int x0; float x1; } x1; struct { int x0; float x1; } x2; struct { int x0; float x1; } x3; })position;
- (long long)direction;
- (void)setPosition:(struct { struct { int x0; float x1; } x0; struct { int x0; float x1; } x1; struct { int x0; float x1; } x2; struct { int x0; float x1; } x3; })arg0;
- (double)aspectRatio;
- (void)setBorder:(struct { struct { int x0; float x1; } x0; struct { int x0; float x1; } x1; struct { int x0; float x1; } x2; struct { int x0; float x1; } x3; })arg0;
- (void)setMargin:(struct { struct { int x0; float x1; } x0; struct { int x0; float x1; } x1; struct { int x0; float x1; } x2; struct { int x0; float x1; } x3; })arg0;
- (struct { struct { int x0; float x1; } x0; struct { int x0; float x1; } x1; struct { int x0; float x1; } x2; struct { int x0; float x1; } x3; })border;
- (struct { struct { int x0; float x1; } x0; struct { int x0; float x1; } x1; })size;
- (struct { struct { int x0; float x1; } x0; struct { int x0; float x1; } x1; })defaultSize;
- (void)setSize:(struct { struct { int x0; float x1; } x0; struct { int x0; float x1; } x1; })arg0;
- (struct { struct { int x0; float x1; } x0; struct { int x0; float x1; } x1; struct { int x0; float x1; } x2; struct { int x0; float x1; } x3; })padding;
- (void)setMinSize:(struct { struct { int x0; float x1; } x0; struct { int x0; float x1; } x1; })arg0;
- (long long)display;
- (void)setDirection:(long long)arg0;
- (void)setDefaultSize:(struct { struct { int x0; float x1; } x0; struct { int x0; float x1; } x1; })arg0;
- (long long)overflow;
- (void)setOverflow:(long long)arg0;

@end
