//
//     Generated by private class-dump
//

@interface LSLiveAudioPitchShifter : NSObject {
    struct unique_ptr<mammon::NonRealtimePitchShifterFactory, std::default_delete<mammon::NonRealtimePitchShifterFactory>> { struct __compressed_pair<mammon::NonRealtimePitchShifterFactory *, std::default_delete<mammon::NonRealtimePitchShifterFactory>> { struct NonRealtimePitchShifterFactory *__value_; } __ptr_; } _factory;
    struct unique_ptr<mammon::NonRealtimeEffect, std::default_delete<mammon::NonRealtimeEffect>> { struct __compressed_pair<mammon::NonRealtimeEffect *, std::default_delete<mammon::NonRealtimeEffect>> { struct NonRealtimeEffect *__value_; } __ptr_; } _processor;
    void *bus_array;
    struct unique_ptr<float[], std::default_delete<float[]>> { struct __compressed_pair<float *, std::default_delete<float[]>> { float *__value_; } __ptr_; } _data;
    struct unique_ptr<float[], std::default_delete<float[]>> { struct __compressed_pair<float *, std::default_delete<float[]>> { float *__value_; } __ptr_; } _data1;
    struct unique_ptr<float[], std::default_delete<float[]>> { struct __compressed_pair<float *, std::default_delete<float[]>> { float *__value_; } __ptr_; } _data2;
    float *_inData[2];
    struct vector<mammon::Bus, std::allocator<mammon::Bus>> { struct Bus *__begin_; struct Bus *__end_; struct __compressed_pair<mammon::Bus *, std::allocator<mammon::Bus>> { struct Bus *__value_; } __end_cap_; } _input_bus;
    struct AudioBufferQueue { char *bufferData; unsigned int dataSize; } _srcQueue;
    id /* block */ _audiobufferCallback;
}

@property (copy, nonatomic) id /* block */ audiobufferCallback;

- (id)initWithSample:(int)arg0 channels:(int)arg1;
- (void)processAudioData:(short *)arg0 dataSize:(unsigned int)arg1 channels:(int)arg2 inNumberFrames:(unsigned int)arg3 isEndFrame:(BOOL)arg4;
- (id /* block */)audiobufferCallback;
- (void)processBufferList:(struct AudioBufferList { unsigned int x0; struct AudioBuffer { unsigned int x0; unsigned int x1; void *x2; } x1[1]; } *)arg0 inNumberFrames:(unsigned int)arg1 isEndFrame:(BOOL)arg2;
- (void)setAudiobufferCallback:(id /* block */)arg0;
- (void)setPitch:(double)arg0;
- (void).cxx_destruct;
- (void)dealloc;
- (id).cxx_construct;

@end
