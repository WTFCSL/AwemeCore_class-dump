//
//     Generated by private class-dump
//

@class NSURL;

@interface IESMMBGFFSyncPlayer : IESMMBGVideoPlayer {
    struct atomic<bool> { struct __cxx_atomic_impl<bool, std::__cxx_atomic_base_impl<bool>> { _Atomic BOOL __a_value; } __a_; } m_bEOF;
    struct atomic<bool> { struct __cxx_atomic_impl<bool, std::__cxx_atomic_base_impl<bool>> { _Atomic BOOL __a_value; } __a_; } isStoped;
    struct atomic<bool> { struct __cxx_atomic_impl<bool, std::__cxx_atomic_base_impl<bool>> { _Atomic BOOL __a_value; } __a_; } isPlaying;
    struct atomic<bool> { struct __cxx_atomic_impl<bool, std::__cxx_atomic_base_impl<bool>> { _Atomic BOOL __a_value; } __a_; } isPlayerSeeking;
    struct mutex { struct _opaque_pthread_mutex_t { long long __sig; char __opaque[56]; } __m_; } m_mtxRunloop;
    struct shared_ptr<ITETaskQueue> { struct ITETaskQueue *__ptr_; struct __shared_weak_count *__cntrl_; } mProcessQueue;
    struct shared_ptr<ITEVideoReader> { struct ITEVideoReader *__ptr_; struct __shared_weak_count *__cntrl_; } mVideoReader;
    struct TEBlockingQueue<std::shared_ptr<ITEVideoFrame>> { void /* function */ **_vptr$TEBlockingQueue; struct mutex { struct _opaque_pthread_mutex_t { long long __sig; char __opaque[56]; } __m_; } m_oOperate; struct condition_variable { struct _opaque_pthread_cond_t { long long __sig; char __opaque[40]; } __cv_; } m_cvProducer; struct condition_variable { struct _opaque_pthread_cond_t { long long __sig; char __opaque[40]; } __cv_; } m_cvConsumer; struct list<std::shared_ptr<ITEVideoFrame>, std::allocator<std::shared_ptr<ITEVideoFrame>>> { struct __list_node_base<std::shared_ptr<ITEVideoFrame>, void *> { void *__prev_; void *__next_; } __end_; struct __compressed_pair<unsigned long, std::allocator<std::__list_node<std::shared_ptr<ITEVideoFrame>, void *>>> { unsigned long long __value_; } __size_alloc_; } m_queue; unsigned long long m_uCapacity; BOOL m_bIsActive; } m_cache;
    struct mutex { struct _opaque_pthread_mutex_t { long long __sig; char __opaque[56]; } __m_; } m_mtxLastFrame;
    struct atomic<long long> { struct __cxx_atomic_impl<long long, std::__cxx_atomic_base_impl<long long>> { _Atomic long long __a_value; } __a_; } m_lastVideoTimestamp;
    struct shared_ptr<ITEVideoFrame> { struct ITEVideoFrame *__ptr_; struct __shared_weak_count *__cntrl_; } m_spLastFrame;
    float _rate;
    NSURL *_url;
    id /* block */ _completeBlock;
}

@property (nonatomic) float rate;
@property (retain, nonatomic) NSURL *url;
@property (copy, nonatomic) id /* block */ completeBlock;

- (struct __CVBuffer { } *)copyPixelBuffer;
- (id)currentUrl;
- (void)setVideoURL:(id)arg0 rate:(float)arg1 completeBlock:(id /* block */)arg2 didPlayToEndBlock:(id /* block */)arg3;
- (void)setCompleteBlock:(id /* block */)arg0;
- (id /* block */)completeBlock;
- (void)setVideoURL:(id)arg0 rate:(float)arg1 completeBlock:(id /* block */)arg2;
- (void)changeRate:(float)arg0 completeBlock:(id /* block */)arg1;
- (void)seekToTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg0 completeBlock:(id /* block */)arg1;
- (struct __CVBuffer { } *)copyPixelBufferInterval:(double)arg0;
- (long long)getLastTime;
- (struct __CVBuffer { } *)getLastFrame;
- (BOOL)createVideoReader;
- (void)releaseVideoReader;
- (void)decodeFramesLoop;
- (long long)decodeSeekToTime:(long long)arg0;
- (id)init;
- (void).cxx_destruct;
- (void)stop;
- (void)setUrl:(id)arg0;
- (void)enterBackground;
- (void)setRate:(float)arg0;
- (float)rate;
- (struct { long long x0; int x1; unsigned int x2; long long x3; })currentTime;
- (void)enterForeground;
- (void)dealloc;
- (void)play;
- (void)pause;
- (id)url;
- (id).cxx_construct;
- (void)setLastFrame:(struct shared_ptr<ITEVideoFrame> { struct ITEVideoFrame *x0; struct __shared_weak_count *x1; })arg0;

@end
