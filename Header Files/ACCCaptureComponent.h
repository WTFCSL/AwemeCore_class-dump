//
//     Generated by private class-dump
//

@class ACCCaptureViewModel, NSString, UIImageView, UIView, ACCGroupedPredicate, ACCPowerTracker;
@protocol ACCRecorderViewContainer, ACCRecordDualService, ACCCameraService, ACCRecordFlowService, ACCRecordAuthService, ACCCameraFactory, ACCBeautyService, ACCRecordARService, CKBeautyService, ACCRecordPropService, ACCFilterService, ACCRecordFrameRatioService, ACCCameraKitService, ACCTextLoadingViewProtcol, ACCRecordSwitchModeService, ACCRecordTrackService;

@interface ACCCaptureComponent : ACCFeatureComponent <ACCRecordConfigAudioHandler, ACCCameraLifeCircleEvent, ACCCameraControlEvent, ACCEffectEvent, CAAnimationDelegate, ACCRecordSwitchModeServiceSubscriber, ACCRecordFlowServiceSubscriber, ACCPerfDegradeProtocol, ACCCreativePathMessage> {
    BOOL _isFirstAppear;
    BOOL _isComponentAppear;
    BOOL _hasInitialRender;
    ACCGroupedPredicate *_startVideoCaptureOnWillAppearPredicate;
    ACCGroupedPredicate *_startAudioCaptureOnWillAppearPredicate;
    ACCGroupedPredicate *_startVideoCaptureOnAuthorizedPredicate;
    ACCGroupedPredicate *_startAudioCaptureOnAuthorizedPredicate;
    ACCGroupedPredicate *_shouldStartSamplingPredicate;
    id<ACCRecorderViewContainer> _viewContainer;
    id<ACCCameraService> _cameraService;
    id<ACCCameraFactory> _cameraFactory;
    id<ACCRecordFlowService> _flowService;
    id<ACCRecordTrackService> _trackService;
    id<ACCRecordSwitchModeService> _switchModeService;
    id<ACCRecordARService> _arService;
    id<ACCRecordAuthService> _authService;
    id<ACCBeautyService> _beautyService;
    id<CKBeautyService> _ckBeautyService;
    id<ACCFilterService> _filterService;
    id<ACCRecordPropService> _propService;
    id<ACCRecordDualService> _dualService;
    id<ACCRecordFrameRatioService> _frameRatioService;
    id<ACCCameraKitService> _cameraKitService;
    ACCCaptureViewModel *_viewModel;
    UIView<ACCTextLoadingViewProtcol> *_loadingView;
    UIView *_blockView;
    UIImageView *_lastFrameImageView;
    ACCPowerTracker *_powerTracker;
}

@property (retain, nonatomic) id<ACCRecorderViewContainer> viewContainer;
@property (retain, nonatomic) id<ACCCameraService> cameraService;
@property (retain, nonatomic) id<ACCCameraFactory> cameraFactory;
@property (retain, nonatomic) id<ACCRecordFlowService> flowService;
@property (retain, nonatomic) id<ACCRecordTrackService> trackService;
@property (retain, nonatomic) id<ACCRecordSwitchModeService> switchModeService;
@property (retain, nonatomic) id<ACCRecordARService> arService;
@property (retain, nonatomic) id<ACCRecordAuthService> authService;
@property (retain, nonatomic) id<ACCBeautyService> beautyService;
@property (retain, nonatomic) id<CKBeautyService> ckBeautyService;
@property (retain, nonatomic) id<ACCFilterService> filterService;
@property (retain, nonatomic) id<ACCRecordPropService> propService;
@property (retain, nonatomic) id<ACCRecordDualService> dualService;
@property (retain, nonatomic) id<ACCRecordFrameRatioService> frameRatioService;
@property (retain, nonatomic) id<ACCCameraKitService> cameraKitService;
@property (retain, nonatomic) ACCGroupedPredicate *startVideoCaptureOnWillAppearPredicate;
@property (retain, nonatomic) ACCGroupedPredicate *startAudioCaptureOnWillAppearPredicate;
@property (retain, nonatomic) ACCGroupedPredicate *startVideoCaptureOnAuthorizedPredicate;
@property (retain, nonatomic) ACCGroupedPredicate *startAudioCaptureOnAuthorizedPredicate;
@property (retain, nonatomic) ACCGroupedPredicate *shouldStartSamplingPredicate;
@property (nonatomic) BOOL isFirstAppear;
@property (nonatomic) BOOL isComponentAppear;
@property (retain, nonatomic) ACCCaptureViewModel *viewModel;
@property (retain, nonatomic) UIView<ACCTextLoadingViewProtcol> *loadingView;
@property (retain, nonatomic) UIView *blockView;
@property (weak, nonatomic) UIImageView *lastFrameImageView;
@property (retain, nonatomic) ACCPowerTracker *powerTracker;
@property (nonatomic) BOOL hasInitialRender;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (void)switchCameraPosition:(long long)arg0;
- (void)setIsFirstAppear:(BOOL)arg0;
- (void)stopCameraCapture;
- (id)cameraService;
- (void)setCameraService:(id)arg0;
- (void)componentDidMount;
- (void)componentDidUnmount;
- (void)componentDidAppear;
- (void)componentWillDisappear;
- (unsigned long long)preferredLoadPhase;
- (void)componentWillAppear;
- (void)componentWillUnmount;
- (id)serviceBinding;
- (void)setFilterService:(id)arg0;
- (id)filterService;
- (void)bindServices:(id)arg0;
- (void)buildCameraIfNeeded;
- (id)cameraFactory;
- (void)setCameraFactory:(id)arg0;
- (id)flowService;
- (id)switchModeService;
- (id)trackService;
- (void)flowServiceWillBeginTakePicture;
- (void)switchModeServiceDidChangeMode:(id)arg0 oldMode:(id)arg1;
- (void)cameraService:(id)arg0 startVideoCaptureWithError:(id)arg1;
- (void)cameraService:(id)arg0 stopVideoCaptureWithError:(id)arg1;
- (void)onCreateCameraCompleteWithCamera:(id)arg0;
- (void)cameraService:(id)arg0 pauseRecordWithError:(id)arg1;
- (void)cameraService:(id)arg0 startRecordWithError:(id)arg1;
- (void)cameraService:(id)arg0 didReachMaxTimeVideoRecordWithError:(id)arg1;
- (void)setFlowService:(id)arg0;
- (void)setTrackService:(id)arg0;
- (void)setSwitchModeService:(id)arg0;
- (void)trackPreviewPerformanceWithNextAction:(id)arg0;
- (id)beautyService;
- (void)onCameraFirstFrameDidRender:(id)arg0;
- (id)authService;
- (void)setAuthService:(id)arg0;
- (void)setBeautyService:(id)arg0;
- (void)p_bindViewModelObserver;
- (void)onDegradedWithPerfType:(unsigned int)arg0 degradeType:(unsigned long long)arg1 degradeLevel:(unsigned long long)arg2;
- (void)resetCameraZoomFactor;
- (id)cameraKitService;
- (id)ckBeautyService;
- (void)setCameraKitService:(id)arg0;
- (void)setCkBeautyService:(id)arg0;
- (id)propService;
- (void)setPropService:(id)arg0;
- (void)onEffectMessageReceived:(id)arg0;
- (void)onAppWillEnterForeground:(id)arg0;
- (void)setFrameRatioService:(id)arg0;
- (id)frameRatioService;
- (void)didFinishConfigAudioWithSetMusicCompletion:(id /* block */)arg0;
- (void)onWillSwitchToCameraPosition:(long long)arg0;
- (void)onDidSwitchToCameraPosition:(long long)arg0;
- (void)onDidStopVideoCapture:(BOOL)arg0;
- (id)dualService;
- (void)setDualService:(id)arg0;
- (void)switchStreamConfigIfNeed;
- (id)startAudioCaptureOnAuthorizedPredicate;
- (BOOL)couldStartCaptureWhenComponentMount;
- (void)startVideoCaptureIfCheckAPPState:(BOOL)arg0 token:(id)arg1;
- (void)p_bindViewModels;
- (void)addLastCaptureFrameIfNeeded;
- (void)addCameraConfigBlockIfNeeded;
- (void)setIsComponentAppear:(BOOL)arg0;
- (id)powerTracker;
- (void)p_resetCameraOutputSizeIfNeeded:(id /* block */)arg0;
- (id)startVideoCaptureOnWillAppearPredicate;
- (id)startAudioCaptureOnWillAppearPredicate;
- (id)arService;
- (BOOL)p_shouldCheckTopController;
- (BOOL)isComponentAppear;
- (id)startVideoCaptureOnAuthorizedPredicate;
- (void)stopSampling:(id)arg0;
- (void)startSamplingIfNeeded;
- (void)p_shouldBlockInteraction:(BOOL)arg0;
- (void)removeLastFrameWhenCaptureStart;
- (void)recordInitialCameraInfoIfNeeded;
- (void)setBlockView:(id)arg0;
- (id)shouldStartSamplingPredicate;
- (id)lastFrameImageView;
- (void)setLastFrameImageView:(id)arg0;
- (void)p_removeLastFrameView:(id)arg0;
- (BOOL)hasInitialRender;
- (void)setHasInitialRender:(BOOL)arg0;
- (void)p_handleAVAuth;
- (void)p_dealWithEffectMessage:(id)arg0;
- (void)p_resetCapturePresetWhenConsumptionDegrade;
- (BOOL)shouldAddCornerWithRecordModePhotoM;
- (void)setStartVideoCaptureOnWillAppearPredicate:(id)arg0;
- (void)setStartAudioCaptureOnWillAppearPredicate:(id)arg0;
- (void)setStartVideoCaptureOnAuthorizedPredicate:(id)arg0;
- (void)setStartAudioCaptureOnAuthorizedPredicate:(id)arg0;
- (void)setShouldStartSamplingPredicate:(id)arg0;
- (void)setArService:(id)arg0;
- (void)setPowerTracker:(id)arg0;
- (void).cxx_destruct;
- (void)setViewModel:(id)arg0;
- (void)startAudioCapture;
- (id)viewModel;
- (BOOL)isFirstAppear;
- (id)loadingView;
- (void)setLoadingView:(id)arg0;
- (id)viewContainer;
- (void)setViewContainer:(id)arg0;
- (id)blockView;

@end
