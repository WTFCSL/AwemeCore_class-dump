//
//     Generated by private class-dump
//

@class LSLiveEffectAlgorithm, NSObject, NSString, EAGLContext, LSLiveEffectConfig, NSMutableArray;
@protocol OS_dispatch_queue;

@interface LSLiveEffectProcessor : LSLiveEffectProcessorInterface {
    void *renderMsgManager;
    const char *local_func_key;
    int _effectTrackHandleIndex;
    EAGLContext *_glContext;
    unsigned long long _usedEffect;
    LSLiveEffectConfig *_config;
    LSLiveEffectAlgorithm *_algorithm;
    void *_renderMangerHandle;
    void *_renderPhoneMangerHandle;
    void *_earMonitorEffectHandle;
    NSMutableArray *_effectTrackHandles;
    id /* block */ _fetchEffectDetectResultCallback;
    id /* block */ _messageHandler;
    unsigned long long _algorithmProcessRequirement;
    unsigned long long _algorithmResultRequirement;
    NSObject<OS_dispatch_queue> *_queue;
    id /* block */ _effectAlgorithmResultBlock;
    NSString *_effectLicense;
}

@property (nonatomic) EAGLContext *glContext;
@property (nonatomic) unsigned long long usedEffect;
@property (retain, nonatomic) LSLiveEffectConfig *config;
@property (retain, nonatomic) LSLiveEffectAlgorithm *algorithm;
@property (nonatomic) void *renderMangerHandle;
@property (nonatomic) void *renderPhoneMangerHandle;
@property (nonatomic) void *earMonitorEffectHandle;
@property (retain, nonatomic) NSMutableArray *effectTrackHandles;
@property (nonatomic) int effectTrackHandleIndex;
@property (copy, nonatomic) id /* block */ fetchEffectDetectResultCallback;
@property (copy, nonatomic) id /* block */ messageHandler;
@property (nonatomic) unsigned long long algorithmProcessRequirement;
@property (nonatomic) unsigned long long algorithmResultRequirement;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *queue;
@property (copy, nonatomic) id /* block */ effectAlgorithmResultBlock;
@property (copy, nonatomic) NSString *effectLicense;

+ (id)effectVersion;
+ (void)setEffectABInfoWithKey:(id)arg0 value:(id)arg1 dataType:(int)arg2;
+ (id)getEffectABInfoWithLicense:(id)arg0;
+ (void)load;

- (void)setAlgorithmResultRequirement:(unsigned long long)arg0 withCallbackBlock:(id /* block */)arg1;
- (void)setAlgorithmResultRequirement:(unsigned long long)arg0 withCallbackBlock:(id /* block */)arg1;
- (void)setMaxStickerMemoryCache:(unsigned long long)arg0;
- (void)setMaxStickerMemoryCache:(unsigned long long)arg0;
- (void *)getEffectHandle;
- (void *)getEffectHandle;
- (int)applyEffect:(id)arg0 type:(long long)arg1;
- (int)applyEffect:(id)arg0 type:(long long)arg1;
- (int)applyEffectKey:(id)arg0 image:(id)arg1;
- (int)applyEffectKey:(id)arg0 image:(id)arg1;
- (BOOL)handleTouchDown:(struct CGPoint { double x0; double x1; })arg0 withType:(unsigned long long)arg1;
- (BOOL)handleTouchUp:(struct CGPoint { double x0; double x1; })arg0 withType:(unsigned long long)arg1;
- (BOOL)handlePanEventWithTranslation:(struct CGPoint { double x0; double x1; })arg0 location:(struct CGPoint { double x0; double x1; })arg1;
- (BOOL)handleLongPressEventWithLocation:(struct CGPoint { double x0; double x1; })arg0;
- (BOOL)handleScaleEvent:(double)arg0;
- (BOOL)setHandDetectLowpower:(BOOL)arg0;
- (BOOL)setHandDetectLowpower:(BOOL)arg0;
- (BOOL)updatFaceDectectIntervalTime:(int)arg0;
- (BOOL)updatFaceDectectIntervalTime:(int)arg0;
- (BOOL)setMattingDetectModel:(BOOL)arg0;
- (BOOL)setMattingDetectModel:(BOOL)arg0;
- (void)setAlgorithmRequirement:(unsigned long long)arg0 algorithmParam:(unsigned long long)arg1 enableDetect:(BOOL)arg2;
- (void)setAlgorithmRequirement:(unsigned long long)arg0 algorithmParam:(unsigned long long)arg1 enableDetect:(BOOL)arg2;
- (void)setEffectCacheDirectory:(id)arg0;
- (void)updateConfig:(id)arg0;
- (void)setRenderMangerHandle:(void *)arg0;
- (void *)renderMangerHandle;
- (unsigned long long)usedEffect;
- (unsigned long long)usedEffect;
- (void)setAlgorithmProcessRequirement:(unsigned long long)arg0;
- (unsigned long long)algorithmProcessRequirement;
- (void)setAlgorithmResultRequirement:(unsigned long long)arg0;
- (void)resetFacePointBlock:(id /* block */)arg0;
- (void)resetFacePointBlock:(id /* block */)arg0;
- (void)resetEffectMsgListnerBlock:(id /* block */)arg0;
- (void)resetEffectMsgListnerBlock:(id /* block */)arg0;
- (void)resetBachAlgorithmContourBlock:(id /* block */)arg0;
- (void)resetBachAlgorithmContourBlock:(id /* block */)arg0;
- (void)resetBachAlgorithmUncompressContourBlock:(id /* block */)arg0;
- (void)resetBachAlgorithmUncompressContourBlock:(id /* block */)arg0;
- (void)setEffectContourInfoHelperDataSource:(id)arg0;
- (void)updateAlgorithmResultAccordMsg:(unsigned long long)arg0;
- (void)updateAlgorithmResultAccordMsg:(unsigned long long)arg0;
- (BOOL)effectAddBachAlgorithmConfig:(id)arg0;
- (BOOL)effectAddBachAlgorithmConfig:(id)arg0;
- (BOOL)setRoiInfoBlock:(id /* block */)arg0;
- (int)getFaceCount;
- (int)getFaceCount;
- (void)setUsedEffect:(unsigned long long)arg0;
- (void)setUsedEffect:(unsigned long long)arg0;
- (unsigned long long)algorithmResultRequirement;
- (void)handleEffectMsgCallback:(unsigned long long)arg0 :(unsigned long long)arg1 :(unsigned long long)arg2 :(id)arg3;
- (void)setOperateSemaphore:(id)arg0;
- (id)initWithConfig:(id)arg0 context:(id)arg1;
- (void)setEffectABLicense:(id)arg0;
- (void)init_effect:(void *)arg0 withWidth:(int)arg1 withHeight:(int)arg2;
- (void)setContourInfoHelper:(id)arg0;
- (void)addRenderMessageListener;
- (void)addLocalLogFunc;
- (void)setLogToFabricFunc;
- (id)operateSemaphore;
- (struct bef_cloud_rendering_extended_output_data { BOOL x0; double x1; unsigned int x2; } *)cloudRenderExData;
- (void)setCloudRenderExData:(struct bef_cloud_rendering_extended_output_data { BOOL x0; double x1; unsigned int x2; } *)arg0;
- (void)p_initEffectSDK:(BOOL)arg0;
- (void)p_initEffectAlgorith;
- (void)removeMessageReceiveFun;
- (void)removeRenderMessageListener;
- (void)removeLocalLogFunc;
- (long long)contourInfoCount;
- (id)contourInfoHelper;
- (void)setContourInfoCount:(long long)arg0;
- (id)rawDataPixelFromRGBA8888WithImage:(id)arg0;
- (int)getEffectRotateTypeWithImage:(id)arg0;
- (void)handleLogToFileCallback:(int)arg0 msg:(const char *)arg1;
- (void)handleEffectBuryPointCallback:(const char *)arg0 msg:(const char *)arg1;
- (int)setComposerMode:(int)arg0 orderType:(int)arg1;
- (int)updateComposerNode2:(const char *)arg0 tag:(const char *)arg1 value:(double)arg2;
- (id)getComposerNodePath;
- (int)executeComposerCommand:(unsigned long long)arg0 forNodes:(id)arg1 withTags:(id)arg2;
- (int)executeComposerCommand:(unsigned long long)arg0 forNodes:(id)arg1;
- (int)replaceComposerNodes:(id)arg0 withNewNodes:(id)arg1 andTags:(id)arg2;
- (int)executeEffectCommand:(long long)arg0 params:(id)arg1 callback:(id /* block */)arg2;
- (int)setColorIntensity:(float)arg0;
- (int)audioEarMonitorEffectProcess:(float **)arg0 outBuffer:(float **)arg1 samplesPerChannel:(int)arg2 realSamplesPerChannel:(int *)arg3 channels:(int)arg4 sampleRate:(int)arg5;
- (void)switchFilterWithPathOne:(id)arg0 pathTwo:(id)arg1 progress:(double)arg2 leftIntensity:(float)arg3 rightIntensity:(float)arg4;
- (void)setMusicNodeFilepath:(id)arg0;
- (id /* block */)musicPlayTimeRequestCallback;
- (void)setMusicPlayTimeRequestCallback:(id /* block */)arg0;
- (BOOL)handleEffectTouchEvent:(struct CGPoint { double x0; double x1; })arg0 pointerId:(unsigned int)arg1 force:(float)arg2 majorRadius:(float)arg3 eventType:(unsigned long long)arg4 pointerCount:(int)arg5;
- (id)getEffectABLicense;
- (void)fetchEffectDetectPhotoContentWithImage:(id)arg0 algorithmType:(id)arg1 isLastPhone:(BOOL)arg2 callback:(id /* block */)arg3;
- (void)setEffectRenderCacheTextureWithImage:(id)arg0 algorithmType:(id)arg1;
- (int)getEffectCapturedImage:(void *)arg0 withKey:(id)arg1;
- (void)releaseEffectCapturedImage:(void *)arg0;
- (BOOL)releaseSDK;
- (BOOL)releaseSDK;
- (int)p_processFakeFaceWithHanle:(void *)arg0 srcTexture:(int)arg1 dstTexture:(int)arg2 timeStamp:(double)arg3;
- (int)p_processFakeFaceWithHanle:(void *)arg0 srcTexture:(int)arg1 dstTexture:(int)arg2 timeStamp:(double)arg3;
- (BOOL)effectProcessingWithTexture:(unsigned int)arg0 dstTexture:(unsigned int)arg1 timeStamp:(double)arg2;
- (BOOL)effectProcessingWithTexture:(unsigned int)arg0 dstTexture:(unsigned int)arg1 timeStamp:(double)arg2;
- (BOOL)effectProcessingWithFBO:(id)arg0 dstFBO:(id)arg1 frameTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg2 forceDetect:(BOOL)arg3;
- (BOOL)effectProcessingWithFBO:(id)arg0 dstFBO:(id)arg1 frameTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg2 forceDetect:(BOOL)arg3;
- (BOOL)setAuxWithTexture:(unsigned int)arg0 key:(id)arg1 width:(unsigned int)arg2 height:(unsigned int)arg3;
- (BOOL)setAuxWithTexture:(unsigned int)arg0 key:(id)arg1 width:(unsigned int)arg2 height:(unsigned int)arg3;
- (void)getFaceInfo:(void *)arg0;
- (void)getFaceInfo:(void *)arg0;
- (void)getAnimatedEmoticonsInfo:(void *)arg0;
- (void)getAnimatedEmoticonsInfo:(void *)arg0;
- (void)getExpressionInfo:(void *)arg0;
- (void)getExpressionInfo:(void *)arg0;
- (int)setSpeechRecognitionKeywords:(id)arg0;
- (int)setSpeechRecognitionKeywords:(id)arg0;
- (id)getSpeechRecognitionKeywords;
- (id)getSpeechRecognitionKeywords;
- (int)recognizeAudio:(const short *)arg0 samplePerChannel:(int)arg1 realSamplesPerChannel:(int *)arg2;
- (int)recognizeAudio:(const short *)arg0 samplePerChannel:(int)arg1 realSamplesPerChannel:(int *)arg2;
- (BOOL)enableAudioRecognize;
- (BOOL)enableAudioRecognize;
- (int)setRenderCacheStringValue:(id)arg0 jsonStr:(id)arg1;
- (int)setRenderCacheStringValue:(id)arg0 jsonStr:(id)arg1;
- (int)setRendercacheIntValue:(id)arg0 intValue:(int)arg1;
- (int)setRendercacheIntValue:(id)arg0 intValue:(int)arg1;
- (int)set_effect_set_audio_config:(id)arg0;
- (int)set_effect_set_audio_config:(id)arg0;
- (int)remove_effect_audio_config;
- (int)remove_effect_audio_config;
- (int)get_audio_effect_status;
- (int)get_audio_effect_status;
- (int)audioEffectProcess:(float **)arg0 outBuffer:(float **)arg1 samplesPerChannel:(int)arg2 realSamplesPerChannel:(int *)arg3 channels:(int)arg4 sampleRate:(int)arg5;
- (int)audioEffectProcess:(float **)arg0 outBuffer:(float **)arg1 samplesPerChannel:(int)arg2 realSamplesPerChannel:(int *)arg3 channels:(int)arg4 sampleRate:(int)arg5;
- (int)updateComposerNode:(id)arg0 tag:(id)arg1 value:(double)arg2;
- (int)updateComposerNode:(id)arg0 tag:(id)arg1 value:(double)arg2;
- (int)updateComposerMultipleNodes:(int)arg0 paths:(id)arg1 keys:(id)arg2 values:(id)arg3;
- (int)updateComposerMultipleNodes:(int)arg0 paths:(id)arg1 keys:(id)arg2 values:(id)arg3;
- (void)applyIntensity:(struct LSLiveIntensityParam_t { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; float x10; float x11; float x12; float x13; float x14; float x15; float x16; float x17; float x18; float x19; float x20; float x21; float x22; float x23; float x24; float x25; float x26; float x27; float x28; float x29; float x30; float x31; float x32; })arg0 type:(long long)arg1;
- (void)applyIntensity:(struct LSLiveIntensityParam_t { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; float x10; float x11; float x12; float x13; float x14; float x15; float x16; float x17; float x18; float x19; float x20; float x21; float x22; float x23; float x24; float x25; float x26; float x27; float x28; float x29; float x30; float x31; float x32; })arg0 type:(long long)arg1;
- (void)applyReshape:(id)arg0 withIntensity:(struct LSLiveIntensityParam_t { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; float x10; float x11; float x12; float x13; float x14; float x15; float x16; float x17; float x18; float x19; float x20; float x21; float x22; float x23; float x24; float x25; float x26; float x27; float x28; float x29; float x30; float x31; float x32; })arg1;
- (void)applyReshape:(id)arg0 withIntensity:(struct LSLiveIntensityParam_t { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; float x10; float x11; float x12; float x13; float x14; float x15; float x16; float x17; float x18; float x19; float x20; float x21; float x22; float x23; float x24; float x25; float x26; float x27; float x28; float x29; float x30; float x31; float x32; })arg1;
- (void)switchFilterWithPathOne:(id)arg0 pathTwo:(id)arg1 progress:(double)arg2;
- (void)switchFilterWithPathOne:(id)arg0 pathTwo:(id)arg1 progress:(double)arg2;
- (int)composerCheckNodeExclusionWithNodePath:(id)arg0 nodeTag:(id)arg1 result:(int *)arg2;
- (int)composerCheckNodeExclusionWithNodePath:(id)arg0 nodeTag:(id)arg1 result:(int *)arg2;
- (int)composerExclusionCompareWithNewNodePath:(id)arg0 oldNodePath:(id)arg1 nodeKey:(id)arg2 result:(int *)arg3;
- (int)composerExclusionCompareWithNewNodePath:(id)arg0 oldNodePath:(id)arg1 nodeKey:(id)arg2 result:(int *)arg3;
- (int)resetFrameCostStatistics;
- (int)resetFrameCostStatistics;
- (id)getFrameCostStatistics;
- (id)getFrameCostStatistics;
- (float)getFilterIntensity:(id)arg0;
- (float)getFilterIntensity:(id)arg0;
- (void)pauseEffect:(long long)arg0;
- (void)pauseEffect:(long long)arg0;
- (void)resumeEffect:(long long)arg0;
- (void)resumeEffect:(long long)arg0;
- (void)sendMessage:(unsigned long long)arg0 param1:(unsigned long long)arg1;
- (void)sendMessage:(unsigned long long)arg0 param1:(unsigned long long)arg1;
- (void)sendMessage:(unsigned long long)arg0 param1:(unsigned long long)arg1 param2:(unsigned long long)arg2;
- (void)sendMessage:(unsigned long long)arg0 param1:(unsigned long long)arg1 param2:(unsigned long long)arg2;
- (void)sendMessage:(unsigned long long)arg0 param1:(unsigned long long)arg1 param2:(unsigned long long)arg2 userInfo:(id)arg3;
- (void)sendMessage:(unsigned long long)arg0 param1:(unsigned long long)arg1 param2:(unsigned long long)arg2 userInfo:(id)arg3;
- (void)setAudioPlayerFactory:(void *)arg0;
- (void)setAudioPlayerFactory:(void *)arg0;
- (int)setEffectInputText:(id)arg0 arg1:(int)arg1 arg2:(int)arg2 arg3:(id)arg3;
- (int)setEffectInputText:(id)arg0 arg1:(int)arg1 arg2:(int)arg2 arg3:(id)arg3;
- (int)setEffectNotifyKeyboardHide:(BOOL)arg0;
- (int)setEffectNotifyKeyboardHide:(BOOL)arg0;
- (int)effectGetETData:(id *)arg0 withType:(int)arg1;
- (int)effectGetETData:(id *)arg0 withType:(int)arg1;
- (int)effectResetETDataWithType:(int)arg0;
- (int)effectResetETDataWithType:(int)arg0;
- (void)setDoubleViewRect:(double)arg0 leftY:(double)arg1 width:(double)arg2 height:(double)arg3;
- (void)setDoubleViewRect:(double)arg0 leftY:(double)arg1 width:(double)arg2 height:(double)arg3;
- (id)acquireEffectTrackHandle;
- (id)acquireEffectTrackHandle;
- (void)recycleEffectTrackHandle:(id)arg0;
- (void)recycleEffectTrackHandle:(id)arg0;
- (void)updateAlgorithmUsedEffectFlagByTrackHandle;
- (void)updateAlgorithmUsedEffectFlagByTrackHandle;
- (void *)renderPhoneMangerHandle;
- (void)setRenderPhoneMangerHandle:(void *)arg0;
- (void *)earMonitorEffectHandle;
- (void)setEarMonitorEffectHandle:(void *)arg0;
- (id)effectTrackHandles;
- (void)setEffectTrackHandles:(id)arg0;
- (int)effectTrackHandleIndex;
- (void)setEffectTrackHandleIndex:(int)arg0;
- (id /* block */)fetchEffectDetectResultCallback;
- (void)setFetchEffectDetectResultCallback:(id /* block */)arg0;
- (id /* block */)effectAlgorithmResultBlock;
- (void)setEffectAlgorithmResultBlock:(id /* block */)arg0;
- (id)effectLicense;
- (void)setEffectLicense:(id)arg0;
- (id /* block */)messageHandler;
- (id)algorithm;
- (void)setLogLevel:(int)arg0;
- (void)setLogLevel:(int)arg0;
- (void)setConfig:(id)arg0;
- (void)sendMessage:(unsigned long long)arg0;
- (void)sendMessage:(unsigned long long)arg0;
- (void).cxx_destruct;
- (id)config;
- (BOOL)handleTouchEvent:(struct CGPoint { double x0; double x1; })arg0;
- (id)initWithConfig:(id)arg0;
- (void)setMessageHandler:(id /* block */)arg0;
- (void)initial;
- (void)setAlgorithm:(id)arg0;
- (id)queue;
- (void)dealloc;
- (void)setQueue:(id)arg0;
- (id)glContext;
- (BOOL)handleRotationEvent:(double)arg0;
- (void)setGlContext:(id)arg0;

@end
