//
//     Generated by private class-dump
//

@class NSThread, NSString, NSNumber, NSObject;
@protocol RTVMonitor, RTVXREngine, OS_dispatch_semaphore, RxInjector, RTVSettingsManager;

@interface __RTVXREngineAudioMixer : NSObject <RTVXREngineDelegate, RTVXREngineAudioMixerInterface> {
    struct unique_ptr<avframework::FFmpegAudioResampler, std::default_delete<avframework::FFmpegAudioResampler>> { struct __compressed_pair<avframework::FFmpegAudioResampler *, std::default_delete<avframework::FFmpegAudioResampler>> { struct FFmpegAudioResampler *__value_; } __ptr_; } _audioResampler;
    struct Mutex { int _type; union { struct mutex { struct _opaque_pthread_mutex_t { long long __sig; char __opaque[56]; } __m_; } _plain; struct recursive_mutex { struct _opaque_pthread_mutex_t { long long __sig; char __opaque[56]; } __m_; } _recursive; } ; } _lock;
    BOOL _playoutMixConfiged;
    BOOL _isPaused;
    BOOL _resumeAudioMix;
    BOOL _fixPauseAudioMix;
    BOOL _applicationActive;
    BOOL _skipAudioPush;
    BOOL _hasPausePushThread;
    BOOL _optimizeAudioMixWhenPause;
    BOOL _sampleFormatChanged;
    BOOL _enableFixAudioWrite;
    int _sampleFormat;
    id<RxInjector> _injector;
    long long _audioSampleRate;
    long long _audioChannelNum;
    NSThread *_thread;
    id<RTVXREngine> _XREngine;
    id<RTVSettingsManager> _settingManager;
    id<RTVMonitor> _rtvMonitor;
    double _audioVolumeGain;
    double _pushTimeInterval;
    NSString *_currentOperatorID;
    unsigned long long _currentCreateIndex;
    NSNumber *_mixPauseStateBeforeResignActive;
    NSObject<OS_dispatch_semaphore> *_signal;
    long long _audioWriteFrameNumLimit;
}

@property (nonatomic) long long audioSampleRate;
@property (nonatomic) long long audioChannelNum;
@property (retain, nonatomic) NSThread *thread;
@property (readonly, weak, nonatomic) id<RTVXREngine> XREngine;
@property (nonatomic) BOOL playoutMixConfiged;
@property (readonly, nonatomic) id<RTVSettingsManager> settingManager;
@property (retain, nonatomic) id<RTVMonitor> rtvMonitor;
@property (nonatomic) BOOL isPaused;
@property (nonatomic) double audioVolumeGain;
@property (nonatomic) double pushTimeInterval;
@property (nonatomic) BOOL resumeAudioMix;
@property (copy, nonatomic) NSString *currentOperatorID;
@property (nonatomic) unsigned long long currentCreateIndex;
@property (nonatomic) BOOL fixPauseAudioMix;
@property (retain, nonatomic) NSNumber *mixPauseStateBeforeResignActive;
@property (nonatomic) BOOL applicationActive;
@property (nonatomic) BOOL skipAudioPush;
@property (readonly, nonatomic) NSObject<OS_dispatch_semaphore> *signal;
@property (nonatomic) BOOL hasPausePushThread;
@property (nonatomic) BOOL optimizeAudioMixWhenPause;
@property (nonatomic) int sampleFormat;
@property (nonatomic) BOOL sampleFormatChanged;
@property (nonatomic) BOOL enableFixAudioWrite;
@property (nonatomic) long long audioWriteFrameNumLimit;
@property (readonly, weak, nonatomic) id<RxInjector> injector;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (struct AFDEngineAudioWrapper { void /* function */ *x0; void /* function */ *x1; void /* function */ *x2; void /* function */ *x3; void *x4; } *)audioWrapper;
- (void)rxAwakeFromPropertyInjection;
- (id)audioWrapperV2;
- (int)playerAudioOpen:(struct TTAudioMediaInfo { int x0; int x1; int x2; int x3; int x4; int x5; long long x6; } *)arg0;
- (int)playerAudioWrite:(struct TTAudioFrameInfo { char **x0; int x1; int x2; long long x3; } *)arg0;
- (void)playerAudioPause;
- (void)playerAudioResume;
- (void)playerAudioFlush;
- (void)playerAudioClose;
- (int)playerAudioGetLatency;
- (void)__log:(id)arg0;
- (BOOL)useAudioWrapperV2;
- (id)XREngine;
- (BOOL)releaseWithOperatorID:(id)arg0;
- (BOOL)tryObtainWithOperatorID:(id)arg0;
- (void)resumePushAudioMixingStream;
- (void)pausePushAudioMixingStream:(BOOL)arg0;
- (void)changeCachedMixPauseStateWhenResignActive:(BOOL)arg0;
- (void)configAudioPushTimeInterval:(double)arg0;
- (void)adjustAudioVolumeGain:(double)arg0;
- (void)updateAudioFrameFormat:(long long)arg0;
- (BOOL)startAudioPlayoutMixStreamWithSampleRate:(long long)arg0 channelNum:(long long)arg1;
- (BOOL)startAudioPlayoutMixStreamIfNeed;
- (BOOL)stopAudioPlayoutMixStream;
- (BOOL)pushAudioMixingStreamData:(float **)arg0 frameNum:(long long)arg1;
- (BOOL)pushAudioMixingNewStreamData:(char **)arg0 frameNum:(long long)arg1;
- (unsigned long long)currentCreateIndex;
- (id)rtvMonitor;
- (void)xrEngineWillBeginSetupInteractConfig:(id)arg0;
- (void)xrEngineDidFinishSetupInteractConfig:(id)arg0;
- (void)xrEngine:(id)arg0 didLeaveRoom:(id)arg1;
- (BOOL)hasPausePushThread;
- (void)setCurrentCreateIndex:(unsigned long long)arg0;
- (void)__appDidBecomeActive;
- (void)__appWillResignActive;
- (void)setCurrentOperatorID:(id)arg0;
- (id)currentOperatorID;
- (void)setAudioVolumeGain:(double)arg0;
- (void)setPushTimeInterval:(double)arg0;
- (long long)audioChannelNum;
- (int)sampleFormat;
- (void)setSampleFormat:(int)arg0;
- (void)setSampleFormatChanged:(BOOL)arg0;
- (BOOL)__useRTCNewAudioMixing;
- (double)audioVolumeGain;
- (void)setAudioChannelNum:(long long)arg0;
- (void)__initialAudioStreamProcessor:(long long)arg0 chaneNum:(long long)arg1;
- (BOOL)playoutMixConfiged;
- (void)setPlayoutMixConfiged:(BOOL)arg0;
- (void)setHasPausePushThread:(BOOL)arg0;
- (BOOL)fixPauseAudioMix;
- (BOOL)skipAudioPush;
- (BOOL)optimizeAudioMixWhenPause;
- (BOOL)__isAudioMixing;
- (BOOL)enableAudioMixingInbackground;
- (void)setMixPauseStateBeforeResignActive:(id)arg0;
- (BOOL)sampleFormatChanged;
- (int)__sampleFormat;
- (id)mixPauseStateBeforeResignActive;
- (void)setResumeAudioMix:(BOOL)arg0;
- (void)setSkipAudioPush:(BOOL)arg0;
- (BOOL)resumeAudioMix;
- (BOOL)enableFixAudioWrite;
- (long long)audioWriteFrameNumLimit;
- (void)renderXREngine:(id)arg0;
- (void)setRtvMonitor:(id)arg0;
- (double)pushTimeInterval;
- (void)setFixPauseAudioMix:(BOOL)arg0;
- (void)setOptimizeAudioMixWhenPause:(BOOL)arg0;
- (void)setEnableFixAudioWrite:(BOOL)arg0;
- (void)setAudioWriteFrameNumLimit:(long long)arg0;
- (id)signal;
- (void)setApplicationActive:(BOOL)arg0;
- (void).cxx_destruct;
- (id)injector;
- (id)thread;
- (BOOL)isPaused;
- (void)dealloc;
- (void)setIsPaused:(BOOL)arg0;
- (id).cxx_construct;
- (void)setAudioSampleRate:(long long)arg0;
- (long long)audioSampleRate;
- (id)settingManager;
- (BOOL)applicationActive;
- (void)setThread:(id)arg0;

@end
