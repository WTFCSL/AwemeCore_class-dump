//
//     Generated by private class-dump
//

@class NSString, NSMutableDictionary, NSData, BDImageDecoderConfig;

@interface BDImageDecoderWebP : NSObject <BDImageDecoder> {
    struct WebPDemuxer { } *_webPDemux;
    struct CGContext { } *_blendContext;
    unsigned long long _lastBlendIndex;
    struct CGColorSpace { } *_imageColorSpace;
    NSMutableDictionary *_durations;
    struct _opaque_pthread_mutex_t { long long __sig; char __opaque[56]; } _durations_lock;
    struct _opaque_pthread_mutex_t { long long __sig; char __opaque[56]; } _lock;
    BOOL _hasIncrementalData;
    BOOL _finished;
    NSData *_data;
    NSString *_filePath;
    unsigned long long _imageNum;
    unsigned long long _loopNum;
    unsigned long long _sizeType;
    BDImageDecoderConfig *_config;
    long long _orientation;
    struct CGSize { double width; double height; } _originSize;
    struct CGSize { double width; double height; } _canvasSize;
}

@property (retain, nonatomic) NSData *data;
@property (copy, nonatomic) NSString *filePath;
@property unsigned long long imageNum;
@property unsigned long long loopNum;
@property (nonatomic) struct CGSize { double width; double height; } originSize;
@property (nonatomic) struct CGSize { double width; double height; } canvasSize;
@property (nonatomic) unsigned long long sizeType;
@property (retain, nonatomic) BDImageDecoderConfig *config;
@property BOOL hasIncrementalData;
@property BOOL finished;
@property long long orientation;
@property (readonly, nonatomic) unsigned long long codeType;
@property (readonly, nonatomic) BOOL progressiveDownloading;
@property (readonly, nonatomic) long long imageOrientation;
@property (readonly, nonatomic) unsigned long long imageCount;
@property (readonly, nonatomic) unsigned long long loopCount;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (BOOL)canDecode:(id)arg0;
+ (BOOL)supportProgressDecode:(id)arg0;
+ (BOOL)supportStaticProgressDecode:(unsigned long long)arg0;
+ (BOOL)isAnimatedImage:(id)arg0;

- (struct CGSize { double x0; double x1; })originSize;
- (void)setOriginSize:(struct CGSize { double x0; double x1; })arg0;
- (struct CGImage { } *)copyImageAtIndex:(unsigned long long)arg0;
- (id)initWithData:(id)arg0 config:(id)arg1;
- (void)setHasIncrementalData:(BOOL)arg0;
- (BOOL)hasIncrementalData;
- (id)initWithContentOfFile:(id)arg0;
- (BOOL)progressiveDownloading;
- (id)initWithIncrementalData:(id)arg0 config:(id)arg1;
- (void)changeDecoderWithData:(id)arg0 finished:(BOOL)arg1;
- (void)setLoopNum:(unsigned long long)arg0;
- (unsigned long long)loopNum;
- (void)setImageNum:(unsigned long long)arg0;
- (unsigned long long)imageNum;
- (BOOL)isFullOpaqueImage;
- (void)initializeContextIfNeed;
- (struct CGContext { } *)blendContext;
- (unsigned long long)exifOrientation;
- (void)setFinished:(BOOL)arg0;
- (id)data;
- (void)setConfig:(id)arg0;
- (id)filePath;
- (void).cxx_destruct;
- (long long)imageOrientation;
- (void)setFilePath:(id)arg0;
- (id)config;
- (void)setData:(id)arg0;
- (long long)orientation;
- (void)setCanvasSize:(struct CGSize { double x0; double x1; })arg0;
- (void)setOrientation:(long long)arg0;
- (unsigned long long)imageCount;
- (void)dealloc;
- (struct CGSize { double x0; double x1; })canvasSize;
- (BOOL)finished;
- (id)initWithData:(id)arg0;
- (unsigned long long)loopCount;
- (double)frameDelayAtIndex:(unsigned long long)arg0;
- (unsigned long long)codeType;
- (unsigned long long)sizeType;
- (void)setSizeType:(unsigned long long)arg0;
- (struct CGColorSpace { } *)imageColorSpace;

@end
