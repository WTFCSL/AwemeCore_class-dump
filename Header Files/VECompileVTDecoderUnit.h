//
//     Generated by private class-dump
//

@class VEVideoConfig, NSString, HTSVideoData, NSCondition, NSLock, NSMutableArray;
@protocol VEVideoProcessDelegate;

@interface VECompileVTDecoderUnit : NSObject <VEVideoProcessDelegate> {
    struct opaqueCMFormatDescription { } *_vtDesc;
    int _vtcount;
    BOOL _asyncMode;
    BOOL _closedForBackground;
    BOOL _isLensFillFrame;
    BOOL _veabtest_enableAgfxMetal;
    unsigned int _pixelFormat;
    int _maxRefFrames;
    int _maxVtbCacheSize;
    int _isHDRVideo;
    id<VEVideoProcessDelegate> _videoDownstream;
    unsigned long long _readerType;
    HTSVideoData *_videoData;
    struct OpaqueVTDecompressionSession { } *_videoDecodeSession;
    long long _status;
    NSLock *_frameInfoLock;
    NSMutableArray *_frameInfoArrays;
    NSMutableArray *_frameInfoPointers;
    VEVideoConfig *_videoConfig;
    NSCondition *_sessionReadyCond;
    struct { long long value; int timescale; unsigned int flags; long long epoch; } _lastVideoFrameTime;
}

@property (retain, nonatomic) HTSVideoData *videoData;
@property (nonatomic) struct OpaqueVTDecompressionSession { } *videoDecodeSession;
@property (nonatomic) struct { long long value; int timescale; unsigned int flags; long long epoch; } lastVideoFrameTime;
@property (nonatomic) long long status;
@property (nonatomic) BOOL asyncMode;
@property (nonatomic) int maxRefFrames;
@property (nonatomic) int maxVtbCacheSize;
@property (retain, nonatomic) NSLock *frameInfoLock;
@property (retain, nonatomic) NSMutableArray *frameInfoArrays;
@property (retain, nonatomic) NSMutableArray *frameInfoPointers;
@property (nonatomic) int isHDRVideo;
@property (retain, nonatomic) VEVideoConfig *videoConfig;
@property BOOL closedForBackground;
@property (retain, nonatomic) NSCondition *sessionReadyCond;
@property (nonatomic) BOOL isLensFillFrame;
@property (nonatomic) BOOL veabtest_enableAgfxMetal;
@property (weak, nonatomic) id<VEVideoProcessDelegate> videoDownstream;
@property (nonatomic) unsigned long long readerType;
@property (readonly, nonatomic) unsigned int pixelFormat;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (BOOL)veabtest_enableAgfxMetal;
- (id)videoConfig;
- (void)setVideoConfig:(id)arg0;
- (id)videoData;
- (void)setVideoData:(id)arg0;
- (BOOL)isContainsPointer:(id)arg0;
- (void)releaseFrameInfo:(id)arg0;
- (void)vtDecodeCallback:(id)arg0 flags:(unsigned int)arg1 buffer:(struct __CVBuffer { } *)arg2;
- (void)setVeabtest_enableAgfxMetal:(BOOL)arg0;
- (BOOL)isLensFillFrame;
- (id)frameInfoLock;
- (id)frameInfoArrays;
- (id)frameInfoPointers;
- (void)decodeFinish;
- (id)getFrameInfo;
- (BOOL)closedForBackground;
- (struct OpaqueVTDecompressionSession { } *)videoDecodeSession;
- (void)setClosedForBackground:(BOOL)arg0;
- (id)videoDownstream;
- (void)setVideoDecodeSession:(struct OpaqueVTDecompressionSession { } *)arg0;
- (BOOL)asyncMode;
- (void)setAsyncMode:(BOOL)arg0;
- (int)maxVtbCacheSize;
- (void)setMaxVtbCacheSize:(int)arg0;
- (void)setFrameInfoLock:(id)arg0;
- (void)setFrameInfoArrays:(id)arg0;
- (void)setFrameInfoPointers:(id)arg0;
- (void)setIsHDRVideo:(int)arg0;
- (id)sessionReadyCond;
- (void)setSessionReadyCond:(id)arg0;
- (void)setIsLensFillFrame:(BOOL)arg0;
- (BOOL)initVTSessions:(id)arg0;
- (struct { long long x0; int x1; unsigned int x2; long long x3; })lastVideoFrameTime;
- (void)setLastVideoFrameTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg0;
- (BOOL)processSampleData:(id)arg0;
- (void)setMaxRefFrames:(int)arg0;
- (int)maxRefFrames;
- (void)flushSession;
- (id)initWithDesc:(struct opaqueCMFormatDescription { } *)arg0;
- (void)setVideoDownstream:(id)arg0;
- (void)setReaderType:(unsigned long long)arg0;
- (unsigned long long)readerType;
- (id)init;
- (BOOL)setConfig:(id)arg0;
- (void).cxx_destruct;
- (long long)status;
- (void)enterBackground;
- (void)setStatus:(long long)arg0;
- (void)enterForeground;
- (unsigned int)pixelFormat;
- (void)dealloc;
- (void)closeSession;
- (int)isHDRVideo;
- (void)resetSession;
- (BOOL)decode:(id)arg0;

@end
