//
//     Generated by private class-dump
//

@class __end_, __end_cap_, __begin_;

@interface IESLiveTaskQueue : NSObject {
    struct deque<void (^)(), std::allocator<void (^)()>> { struct __split_buffer<void (^__strong *)(), std::allocator<void (^__strong *)()>> { id /* block */ **__first_; id /* block */ **__begin_; id /* block */ **__end_; struct __compressed_pair<void (^__strong **)(), std::allocator<void (^__strong *)()>> { id /* block */ **__value_; } __end_cap_; } __map_; unsigned long long __start_; struct __compressed_pair<unsigned long, std::allocator<void (^)()>> { unsigned long long __value_; } __size_; } _deque;
    struct deque<NSString *, std::allocator<NSString *>> { struct __split_buffer<NSString *__strong *, std::allocator<NSString *__strong *>> { __begin_ ***__first_; __end_ ***x0; __end_cap_ ***x1; struct __compressed_pair<NSString *__strong **, std::allocator<NSString *__strong *>> { id **__value_; } x2; } __map_; unsigned long long __start_; struct __compressed_pair<unsigned long, std::allocator<NSString *>> { unsigned long long __value_; } __size_; } _dequeID;
    struct _opaque_pthread_mutex_t { long long __sig; char __opaque[56]; } _lock;
}

- (void)addTask:(id /* block */)arg0 taskID:(id)arg1;
- (id)init;
- (void).cxx_destruct;
- (void)addTask:(id /* block */)arg0;
- (BOOL)isEmpty;
- (void)dealloc;
- (id).cxx_construct;
- (void)clearTasks;
- (id)runTask;

@end
