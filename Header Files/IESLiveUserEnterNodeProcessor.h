//
//     Generated by private class-dump
//

@class HTSEventContext, HTSLiveUserEnterConfiguration, IESLiveUserEnterQueue, IESLiveComponentContext;
@protocol IESLiveRoomServiceAdapter;

@interface IESLiveUserEnterNodeProcessor : NSObject {
    BOOL _hasReportedLimitedNode;
    HTSLiveUserEnterConfiguration *_configuration;
    IESLiveComponentContext *_componentContext;
    id<IESLiveRoomServiceAdapter> _room;
    HTSEventContext *_trackContext;
    IESLiveUserEnterQueue *_workQueue;
}

@property (retain, nonatomic) IESLiveUserEnterQueue *workQueue;
@property (nonatomic) BOOL hasReportedLimitedNode;
@property (retain, nonatomic) HTSLiveUserEnterConfiguration *configuration;
@property (retain, nonatomic) IESLiveComponentContext *componentContext;
@property (retain, nonatomic) id<IESLiveRoomServiceAdapter> room;
@property (retain, nonatomic) HTSEventContext *trackContext;

- (id)trackContext;
- (void)setTrackContext:(id)arg0;
- (id)componentContext;
- (void)setComponentContext:(id)arg0;
- (BOOL)isInValidTime:(id)arg0;
- (id)createNodeWithMessage:(id)arg0;
- (BOOL)enableUserEnterWithMessage:(id)arg0;
- (BOOL)enablePopNode:(id)arg0;
- (BOOL)replaceNodeIfNeed:(id)arg0;
- (void)clearComboNodeDataWithSeq:(id)arg0;
- (id)checkNextComboNode:(id)arg0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })viewFrameWithNode:(id)arg0;
- (void)createNodeViewWithNode:(id)arg0 frame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg1 completion:(id /* block */)arg2;
- (void)nodeViewDidClickedWithNode:(id)arg0;
- (void)nodeViewDidAddedToContainerWithNode:(id)arg0;
- (void)nodeViewDismissedWithNode:(id)arg0;
- (void)checkNodeCounts;
- (void)trackHighLevelMessageClickWithNode:(id)arg0;
- (BOOL)hasReportedLimitedNode;
- (void)setHasReportedLimitedNode:(BOOL)arg0;
- (void)bindWorkQueue:(id)arg0;
- (void)processUserEnterMessage:(id)arg0;
- (void)produceUserEnterViewWithNode:(id)arg0 completion:(id /* block */)arg1;
- (BOOL)conditionToReplaceNode:(id)arg0 newNode:(id)arg1;
- (void)setWorkQueue:(id)arg0;
- (id)workQueue;
- (void).cxx_destruct;
- (id)configuration;
- (void)setConfiguration:(id)arg0;
- (id)room;
- (void)setRoom:(id)arg0;

@end
