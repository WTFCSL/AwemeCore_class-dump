//
//     Generated by private class-dump
//

@class NSHashTable, IESLiveSmallWindowPlayerView, NSString, IESLiveSmallWindowView, IESLiveSmallWindowStore, NSDictionary, IESLiveGCDTimer, IESLiveInteractSmallWindowOuterView, NSPointerArray, NSNumber, IESLiveSmallWindowOuterPlayerView;
@protocol IESLiveSmallWindowActions;

@interface IESLiveSmallWindowManager : NSObject <IESLiveSmallWindowService> {
    NSDictionary *_allowList;
    BOOL _selfManage;
    BOOL _needBackToLastPos;
    BOOL _disableSmallWindow;
    BOOL _isMultiLinkMic;
    BOOL _useTapActionOnly;
    BOOL _didHideWindow;
    BOOL _manualHideSmallWindow;
    BOOL _isInRoom;
    BOOL _isOuterInteract;
    BOOL _liveShouldResponseTap;
    BOOL _interactSmallWindowExistBeforeEnter;
    BOOL _isRequestingForShowOutPip;
    BOOL _isClickToEnterLive;
    id<IESLiveSmallWindowActions> _smallwindowDelegate;
    double _hideDelayTime;
    id /* block */ _muteStateAction;
    IESLiveSmallWindowPlayerView *_smallPlayerView;
    IESLiveSmallWindowOuterPlayerView *_outerSmallPlayerView;
    IESLiveInteractSmallWindowOuterView *_interactSmallWindowOuterView;
    IESLiveSmallWindowView *_windowView;
    double _presetTopOffset;
    IESLiveSmallWindowStore *_store;
    NSDictionary *_enterRoomContext;
    NSString *_currentSmallWindowFrom;
    NSHashTable *_shownSmallWindowVCS;
    id /* block */ _tapSmallWindowAction;
    id /* block */ _closeWindowCompletion;
    NSPointerArray *_roomDIStack;
    IESLiveGCDTimer *_showTimer;
    NSNumber *_isNeedChangeMuted;
    struct CGPoint { double x; double y; } _lastDismissPos;
}

@property (readonly, nonatomic) NSDictionary *allowList;
@property (copy, nonatomic) id /* block */ muteStateAction;
@property (retain, nonatomic) IESLiveSmallWindowPlayerView *smallPlayerView;
@property (retain, nonatomic) IESLiveSmallWindowOuterPlayerView *outerSmallPlayerView;
@property (retain, nonatomic) IESLiveInteractSmallWindowOuterView *interactSmallWindowOuterView;
@property (retain, nonatomic) IESLiveSmallWindowView *windowView;
@property (nonatomic) struct CGPoint { double x; double y; } lastDismissPos;
@property (nonatomic) double presetTopOffset;
@property (retain, nonatomic) IESLiveSmallWindowStore *store;
@property (copy, nonatomic) NSDictionary *enterRoomContext;
@property (nonatomic) BOOL manualHideSmallWindow;
@property (copy, nonatomic) NSString *currentSmallWindowFrom;
@property (retain, nonatomic) NSHashTable *shownSmallWindowVCS;
@property (copy, nonatomic) id /* block */ tapSmallWindowAction;
@property (copy, nonatomic) id /* block */ closeWindowCompletion;
@property (nonatomic) BOOL isInRoom;
@property (nonatomic) BOOL isOuterInteract;
@property (nonatomic) BOOL didHideWindow;
@property (nonatomic) BOOL liveShouldResponseTap;
@property (retain) NSPointerArray *roomDIStack;
@property (retain, nonatomic) IESLiveGCDTimer *showTimer;
@property (nonatomic) BOOL interactSmallWindowExistBeforeEnter;
@property (retain, nonatomic) NSNumber *isNeedChangeMuted;
@property (nonatomic) BOOL isRequestingForShowOutPip;
@property (nonatomic) BOOL isClickToEnterLive;
@property (nonatomic) BOOL selfManage;
@property (weak, nonatomic) id<IESLiveSmallWindowActions> smallwindowDelegate;
@property (nonatomic) BOOL needBackToLastPos;
@property (nonatomic) BOOL disableSmallWindow;
@property (nonatomic) BOOL isMultiLinkMic;
@property (nonatomic) BOOL useTapActionOnly;
@property (nonatomic) double hideDelayTime;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (id)sharedInstance;

- (void)setShowTimer:(id)arg0;
- (void)showSmallLiveWindowFrom:(id)arg0;
- (void)hideSmallLiveWindow;
- (void)registerAllowListVCClass:(Class)arg0 withTag:(id)arg1;
- (void)unregisterAllowListVCClass:(Class)arg0;
- (void)setSmallWindowHiddenCompletion:(id /* block */)arg0;
- (void)setTapSmallWindowAction:(id /* block */)arg0;
- (void)setTapSmallWindowAction:(id /* block */)arg0 liveResponse:(BOOL)arg1;
- (void)setSmallWindowMuteStateDidChangedAction:(id /* block */)arg0;
- (BOOL)hasWindowView;
- (void)resumeSmallWindowStream;
- (void)setSelfManage:(BOOL)arg0;
- (void)startVideoRendering;
- (void)pauseSmallWindowStream;
- (void)setUseTapActionOnly:(BOOL)arg0;
- (void)showSmallLiveWindowFrom:(id)arg0 withRoomID:(id)arg1 metaParams:(id)arg2 preferOptions:(id)arg3 callTrace:(id)arg4 completion:(id /* block */)arg5;
- (void)showSmallLiveWindowFrom:(id)arg0 withRoomID:(id)arg1 metaParams:(id)arg2;
- (void)transferSmallLiveToView:(id)arg0;
- (void)returnSmallLiveToService;
- (void)setSmallWindowMute:(BOOL)arg0;
- (void)clearSmallwindowActionBlock;
- (void)resumeMiniWindow;
- (void)stopVideoRendering;
- (void)setSmallLiveWindowTop:(double)arg0;
- (void)showSmallLiveWindowFrom:(id)arg0 extraParam:(id)arg1;
- (void)showSmallLiveWindowFrom:(id)arg0 extraParam:(id)arg1 callTrace:(id)arg2 completion:(id /* block */)arg3;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })getSmallWindowViewRect;
- (BOOL)selfManage;
- (BOOL)useTapActionOnly;
- (void)pauseMiniWindow;
- (BOOL)didHideWindow;
- (id)windowView;
- (void)setWindowView:(id)arg0;
- (BOOL)manualHideSmallWindow;
- (void)hideSmallWindow;
- (id)targetDowngradeQualitySDKKeyWithBuzType:(long long)arg0;
- (void)smoothlySwitchResolutionToSDKKey:(id)arg0 forceSwitchIfFailed:(BOOL)arg1 switchReason:(long long)arg2 smallWindowBuzType:(long long)arg3 completion:(id /* block */)arg4 switchResultCompletion:(id /* block */)arg5;
- (BOOL)shouldDowngradeSmallWindowQualityWithBuzType:(long long)arg0;
- (void)showSmallLiveWindowFrom:(id)arg0 extraParam:(id)arg1 preferOptions:(id)arg2 callTrace:(id)arg3 completion:(id /* block */)arg4;
- (void)clearSmallWindowWithCurrentRoom:(id)arg0;
- (void)showSmallWindowFrom:(id)arg0 completion:(id /* block */)arg1;
- (id)shownSmallWindowVCS;
- (BOOL)hasPlayerView;
- (BOOL)vcIsSupportSmallWindow:(id)arg0;
- (id)fromInfo:(id)arg0;
- (void)switchResolution:(id)arg0 complete:(id /* block */)arg1;
- (id)smallwindowDelegate;
- (void)setSmallwindowDelegate:(id)arg0;
- (BOOL)needBackToLastPos;
- (void)setNeedBackToLastPos:(BOOL)arg0;
- (BOOL)disableSmallWindow;
- (void)setDisableSmallWindow:(BOOL)arg0;
- (BOOL)isMultiLinkMic;
- (void)setIsMultiLinkMic:(BOOL)arg0;
- (BOOL)isOuterInteract;
- (double)hideDelayTime;
- (void)setHideDelayTime:(double)arg0;
- (void)setMuteStateAction:(id /* block */)arg0;
- (id /* block */)muteStateAction;
- (BOOL)disableBusinessUseMiniWindowWithFrom:(id)arg0;
- (id)currentAudienceVCRoomModel;
- (void)clearSmallWindow;
- (void)setIsInRoom:(BOOL)arg0;
- (id)htsLiveStreamPlayerProvider;
- (void)setDidHideWindow:(BOOL)arg0;
- (void)setIsNeedChangeMuted:(id)arg0;
- (void)setIsRequestingForShowOutPip:(BOOL)arg0;
- (double)presetTopOffset;
- (id)outerSmallPlayerView;
- (void)preShowWithRoomID:(id)arg0 finished:(id /* block */)arg1;
- (BOOL)isInRoom;
- (id)smallPlayerView;
- (void)showSmallWindowFrom:(id)arg0 preferOptions:(id)arg1 completion:(id /* block */)arg2;
- (void)setCurrentSmallWindowFrom:(id)arg0;
- (id)htsLiveViewHierarchyProvider;
- (id)allowListForBusinessUseMiniWindow;
- (BOOL)disableBusinessUseFunWithoutSmallWindow;
- (BOOL)disableUseLazyLoadingAsStatus;
- (BOOL)isRequestingForShowOutPip;
- (void)smallWindowMuteStateChanged:(BOOL)arg0;
- (id)roomDIStack;
- (id)smallWindowContainer;
- (void)showInRoomSmallWindowFrom:(id)arg0 preferOptions:(id)arg1;
- (void)setInteractSmallWindowExistBeforeEnter:(BOOL)arg0;
- (void)showInteractOuterSmallWindowFrom:(id)arg0;
- (void)showOuterSmallWindowFrom:(id)arg0;
- (struct CGPoint { double x0; double x1; })lastDismissPos;
- (id /* block */)tapSmallWindowAction;
- (void)setLiveShouldResponseTap:(BOOL)arg0;
- (id)interactSmallWindowOuterView;
- (void)setInteractSmallWindowOuterView:(id)arg0;
- (void)setPresetTopOffset:(double)arg0;
- (void)setLastDismissPos:(struct CGPoint { double x0; double x1; })arg0;
- (id /* block */)closeWindowCompletion;
- (void)setManualHideSmallWindow:(BOOL)arg0;
- (void)setIsOuterInteract:(BOOL)arg0;
- (void)bindingPlayerView;
- (void)liveEndedAction;
- (BOOL)liveShouldResponseTap;
- (id)isNeedChangeMuted;
- (void)smallWindowTapCloseAction;
- (void)smallWindowTapConentAction;
- (id)currentSmallWindowFrom;
- (id)playerResolutionService;
- (void)_trackSmallWindowAutoSmoothToSDKKey:(id)arg0 forceSwitchIfFailed:(BOOL)arg1 switchReason:(long long)arg2 smallWindowBuzType:(long long)arg3 duration:(double)arg4 success:(BOOL)arg5 errorCode:(long long)arg6 stage:(long long)arg7 prevReso:(id)arg8 curReso:(id)arg9 userInfo:(id)arg10;
- (void)setSmallPlayerView:(id)arg0;
- (void)setOuterSmallPlayerView:(id)arg0;
- (id)enterRoomContext;
- (void)setEnterRoomContext:(id)arg0;
- (void)setShownSmallWindowVCS:(id)arg0;
- (void)setCloseWindowCompletion:(id /* block */)arg0;
- (void)setRoomDIStack:(id)arg0;
- (BOOL)interactSmallWindowExistBeforeEnter;
- (BOOL)isClickToEnterLive;
- (void)setIsClickToEnterLive:(BOOL)arg0;
- (id)init;
- (void).cxx_destruct;
- (id)store;
- (id)allowList;
- (void)setStore:(id)arg0;
- (id)showTimer;

@end
