//
//     Generated by private class-dump
//

@class UIView, NSString, CADisplayLink, UIImage, AVAssetWriter, NSURL, NSDictionary, AVCaptureSession, NSObject, AVAssetWriterInput, AVAssetWriterInputPixelBufferAdaptor;
@protocol OS_dispatch_queue, HTSLiveStreamPlayerProviderAdapter, OS_dispatch_semaphore;

@interface IESLiveVSScreenRecorder : NSObject <AVCaptureAudioDataOutputSampleBufferDelegate, IESLiveVSScreenRecorderProtocol> {
    NSObject<OS_dispatch_queue> *_session_queue;
    NSObject<OS_dispatch_queue> *_render_queue;
    NSObject<OS_dispatch_queue> *_audio_queue;
    NSObject<OS_dispatch_semaphore> *_render_semaphore;
    BOOL _isAudioAvailable;
    BOOL _playerPixelEnabled;
    double _maxDuration;
    AVAssetWriter *_writer;
    AVAssetWriterInput *_videoWriterInput;
    AVAssetWriterInput *_audioWriterInput;
    AVAssetWriterInputPixelBufferAdaptor *_bufferAdaptor;
    AVCaptureSession *_session;
    UIView *_targetView;
    double _canvasScale;
    CADisplayLink *_displayLink;
    struct CGColorSpace { } *_colorSpace;
    double _initialFrameStamp;
    UIImage *_cover;
    NSURL *_outputFileURL;
    id /* block */ _completed;
    NSDictionary *_configs;
    id<HTSLiveStreamPlayerProviderAdapter> _player;
    UIImage *_watermarkImage;
    unsigned long long _nullBufferCount;
    struct CGSize { double width; double height; } _canvasSize;
    struct { long long value; int timescale; unsigned int flags; long long epoch; } _beginTime;
    struct { long long value; int timescale; unsigned int flags; long long epoch; } _endTime;
}

@property (retain, nonatomic) AVAssetWriter *writer;
@property (retain, nonatomic) AVAssetWriterInput *videoWriterInput;
@property (retain, nonatomic) AVAssetWriterInput *audioWriterInput;
@property (retain, nonatomic) AVAssetWriterInputPixelBufferAdaptor *bufferAdaptor;
@property (retain, nonatomic) AVCaptureSession *session;
@property (nonatomic) BOOL isAudioAvailable;
@property (weak, nonatomic) UIView *targetView;
@property (nonatomic) struct CGSize { double width; double height; } canvasSize;
@property (nonatomic) double canvasScale;
@property (retain, nonatomic) CADisplayLink *displayLink;
@property (nonatomic) struct CGColorSpace { } *colorSpace;
@property (nonatomic) double initialFrameStamp;
@property (nonatomic) struct { long long value; int timescale; unsigned int flags; long long epoch; } beginTime;
@property (nonatomic) struct { long long value; int timescale; unsigned int flags; long long epoch; } endTime;
@property (retain, nonatomic) UIImage *cover;
@property (retain, nonatomic) NSURL *outputFileURL;
@property (copy, nonatomic) id /* block */ completed;
@property (copy, nonatomic) NSDictionary *configs;
@property (nonatomic) BOOL playerPixelEnabled;
@property (retain, nonatomic) id<HTSLiveStreamPlayerProviderAdapter> player;
@property (retain, nonatomic) UIImage *watermarkImage;
@property (nonatomic) unsigned long long nullBufferCount;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) double seconds;
@property (nonatomic) double maxDuration;
@property (readonly, nonatomic) BOOL isRecording;

- (id)cover;
- (void)setCover:(id)arg0;
- (void)setConfigs:(id)arg0;
- (BOOL)setupVideoInput;
- (void)setWatermarkImage:(id)arg0;
- (id)watermarkImage;
- (void)requestAudioPermission;
- (BOOL)setupAudioInput:(struct opaqueCMFormatDescription { } *)arg0;
- (void)setPlayerPixelEnabled:(BOOL)arg0;
- (void)recreateWarterMarkWithScale:(double)arg0;
- (void)startAudioCaptureSession;
- (void)stopAudioCaptureSession;
- (id)audioWriterInput;
- (void)monitorException:(id)arg0 code:(long long)arg1 description:(id)arg2;
- (void)setInitialFrameStamp:(double)arg0;
- (void)setBufferAdaptor:(id)arg0;
- (void)setAudioWriterInput:(id)arg0;
- (BOOL)playerPixelEnabled;
- (double)initialFrameStamp;
- (struct __CVBuffer { } *)copyFromVideoPlayerAndRedraw;
- (id)bufferAdaptor;
- (unsigned long long)nullBufferCount;
- (BOOL)backgroundDrawEnabled;
- (void)setNullBufferCount:(unsigned long long)arg0;
- (id)initWithTargetView:(id)arg0 completed:(id /* block */)arg1;
- (void)updateTargetView:(id)arg0;
- (BOOL)isAudioAvailable;
- (void)renderVideoCover:(id)arg0;
- (void)setIsAudioAvailable:(BOOL)arg0;
- (void)setDisplayLink:(id)arg0;
- (void)setCompleted:(id /* block */)arg0;
- (void)abort;
- (BOOL)isRecording;
- (id /* block */)completed;
- (void).cxx_destruct;
- (void)setColorSpace:(struct CGColorSpace { } *)arg0;
- (void)setSession:(id)arg0;
- (id)targetView;
- (id)session;
- (void)stop;
- (void)setBeginTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg0;
- (void)setPlayer:(id)arg0;
- (double)seconds;
- (struct { long long x0; int x1; unsigned int x2; long long x3; })endTime;
- (void)setTargetView:(id)arg0;
- (void)setCanvasSize:(struct CGSize { double x0; double x1; })arg0;
- (struct CGColorSpace { } *)colorSpace;
- (BOOL)prepare;
- (double)canvasScale;
- (void)cancel;
- (id)displayLink;
- (void)start;
- (void)dealloc;
- (void)setEndTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg0;
- (void)setWriter:(id)arg0;
- (void)reset;
- (struct CGSize { double x0; double x1; })canvasSize;
- (id)writer;
- (struct { long long x0; int x1; unsigned int x2; long long x3; })beginTime;
- (void)captureOutput:(id)arg0 didOutputSampleBuffer:(struct opaqueCMSampleBuffer { } *)arg1 fromConnection:(id)arg2;
- (id)player;
- (id)outputFileURL;
- (void)setOutputFileURL:(id)arg0;
- (void)setCanvasScale:(double)arg0;
- (double)maxDuration;
- (void)setMaxDuration:(double)arg0;
- (id)videoWriterInput;
- (void)setVideoWriterInput:(id)arg0;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })videoTransform;
- (id)configs;
- (void)didCaptureFrame:(id)arg0;

@end
