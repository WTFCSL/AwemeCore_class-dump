//
//     Generated by private class-dump
//

@interface ACCVideoDataCanvasStateUtils : NSObject

+ (struct CGSize { double x0; double x1; })coverSizeInEditStateWithPublishModel:(id)arg0;
+ (id)publishStateImageWithEditStateImage:(id)arg0 publishModel:(id)arg1;
+ (BOOL)enableCanvasStateWithPublishModel:(id)arg0;
+ (id)generateEditCanvasStateWithPublishModel:(id)arg0;
+ (unsigned long long)applyEditCanvasState:(id)arg0 publishModel:(id)arg1;
+ (id)canvasConfigWithPublishViewModel:(id)arg0;
+ (unsigned long long)applyPublishCanvasState:(id)arg0 publishModel:(id)arg1 publishType:(unsigned long long)arg2;
+ (id)generatePublishCanvasStateWithPublishModel:(id)arg0;
+ (void)updateEditCanvasStateIfAssetsChanged:(id)arg0 newVideoData:(id)arg1 originalVideoData:(id)arg2;
+ (BOOL)enableCanvasStatePerformanceOptimize;
+ (BOOL)hasCanvasEdit:(id)arg0;
+ (struct CGSize { double x0; double x1; })publishMaxLimitResolution:(id)arg0 isWatermark:(BOOL)arg1;
+ (BOOL)canExportAsOriginalSize:(id)arg0;
+ (struct CGSize { double x0; double x1; })coverSizeInPublishStateWithPublishModel:(id)arg0;
+ (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })playerFrameInContainerSize:(struct CGSize { double x0; double x1; })arg0 contentSize:(struct CGSize { double x0; double x1; })arg1 contentMode:(long long)arg2;
+ (id)convertRatioLocationModel:(id)arg0 fromPlayerSize:(struct CGSize { double x0; double x1; })arg1 toPlayerSize:(struct CGSize { double x0; double x1; })arg2;
+ (id)getCanvasSourceWithVideo:(id)arg0 asset:(id)arg1;
+ (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })editStandPlayerFrameWithPublishModel:(id)arg0;
+ (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })editOriginalContentFrameWithPublishModel:(id)arg0;
+ (struct CGSize { double x0; double x1; })sizeOfContent:(id)arg0;
+ (id)getCanvasSourceWithVideo:(id)arg0;
+ (BOOL)hasCanvasEditIgnoreCrop:(id)arg0;
+ (BOOL)isValidFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0;
+ (id)convertLocationForGlobalWithModel:(id)arg0 fromPlayerSize:(struct CGSize { double x0; double x1; })arg1 toPlayerSize:(struct CGSize { double x0; double x1; })arg2;
+ (struct CGSize { double x0; double x1; })editMaxLimitResolution:(id)arg0;
+ (id)editCanvasRules;
+ (id)publishCanvasRules;
+ (void)setImageDecodingSizeWithPublishModel:(id)arg0 canvasState:(id)arg1;
+ (struct CGSize { double x0; double x1; })croppedContentSizeWithVideoData:(id)arg0 contentSize:(struct CGSize { double x0; double x1; })arg1;
+ (struct CGSize { double x0; double x1; })croppedImageSizeWithPublishModel:(id)arg0;
+ (struct CGSize { double x0; double x1; })croppedVideoSizeWithPublishModel:(id)arg0;
+ (struct CGSize { double x0; double x1; })croppedContentSizeWithPublishModel:(id)arg0;
+ (BOOL)enableConfigureImageDecodingSizeSeparatelyWithPublishModel:(id)arg0;
+ (struct CGSize { double x0; double x1; })getPhotoEditCanvasSizeWithContentSize:(struct CGSize { double x0; double x1; })arg0 standCanvasSize:(struct CGSize { double x0; double x1; })arg1 minCanvasSize:(struct CGSize { double x0; double x1; })arg2;
+ (void)convertLocationModelsWithPublishModel:(id)arg0;
+ (id)reset9V16StickerLocation:(id)arg0 fromPlayerSize:(struct CGSize { double x0; double x1; })arg1 toPlayerSize:(struct CGSize { double x0; double x1; })arg2;

@end
