//
//     Generated by private class-dump
//

@class MTKTextureLoader, NSThread, NSCondition, NSError, NSLock, NSObject;
@protocol OS_dispatch_queue, MTLDevice, MTLTexture;

@interface IESMMPosterNNSR : NSObject {
    void *operationQueueKey;
    BOOL _skipProcess;
    struct ILensEngineInterface { void /* function */ **x0; } *_lenEngine;
    struct ILensFlowGraphInterface { void /* function */ **x0; } *_flowGraph;
    struct vector<PosterSREvent *, std::allocator<PosterSREvent *>> { struct PosterSREvent **__begin_; struct PosterSREvent **__end_; struct __compressed_pair<PosterSREvent **, std::allocator<PosterSREvent *>> { struct PosterSREvent **__value_; } __end_cap_; } eventQue;
    id<MTLDevice> _device;
    id<MTLTexture> _rgbaTex;
    MTKTextureLoader *_loader;
    BOOL _isInitFinished;
    BOOL _isLoop;
    NSError *_error;
    NSObject<OS_dispatch_queue> *_operationQueue;
    NSLock *_predictLock;
    NSCondition *_eventCondition;
    NSThread *_NetForwardThread;
}

@property (retain, nonatomic) NSObject<OS_dispatch_queue> *operationQueue;
@property (retain, nonatomic) NSLock *predictLock;
@property (retain, nonatomic) NSCondition *eventCondition;
@property (nonatomic) BOOL isInitFinished;
@property (retain, nonatomic) NSThread *NetForwardThread;
@property (retain, nonatomic) NSError *error;
@property (nonatomic) BOOL isLoop;

+ (id)sharedInstance;
+ (void)releaseSharedInstance;

- (void)runAsync:(id /* block */)arg0;
- (BOOL)isNeedsImageSR:(id)arg0;
- (BOOL)isInitFinished;
- (void)Net_Forward:(id)arg0 completetion:(id /* block */)arg1;
- (void)setIsLoop:(BOOL)arg0;
- (void)setIsInitFinished:(BOOL)arg0;
- (void *)imageDataFromUIImage:(id)arg0 width:(int *)arg1 height:(int *)arg2 isNeedsPoster:(BOOL *)arg3;
- (void)Net_Forward;
- (void)init_model;
- (void)pushEvent:(id)arg0 inTex:(id)arg1 completetion:(id /* block */)arg2;
- (id)eventCondition;
- (id)process:(id)arg0 inTex:(id)arg1 outNeedsProcess:(BOOL *)arg2 outError:(id *)arg3;
- (BOOL)isNeedsPostProcess:(int)arg0 height:(int)arg1 outW:(int *)arg2 outH:(int *)arg3;
- (id)predictLock;
- (void)setPredictLock:(id)arg0;
- (void)setEventCondition:(id)arg0;
- (id)NetForwardThread;
- (void)setNetForwardThread:(id)arg0;
- (id)init;
- (void)setOperationQueue:(id)arg0;
- (void).cxx_destruct;
- (BOOL)isLoop;
- (id)operationQueue;
- (void)setError:(id)arg0;
- (void)dealloc;
- (void)notification:(id)arg0;
- (id).cxx_construct;
- (id)error;
- (struct PosterSREvent { id x0; void *x1; id x2; int x3; int x4; id /* block */ x5; } *)getEvent;

@end
