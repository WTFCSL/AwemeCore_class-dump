//
//     Generated by private class-dump
//

@class NSString, NSMutableDictionary, NSDictionary;
@protocol IESMMEffectHelperProtocol, IESMMTrackerHelperProtocol;

@interface IESMMTrackerManager : IESMMObject {
    BOOL _previewHaveStart;
    BOOL _recordHaveStart;
    BOOL _processHasStart;
    BOOL _haveInit;
    BOOL _haveStartCompositeTime;
    BOOL _haveStartGenerateThumbnail;
    BOOL _haveStartImportCropFile;
    BOOL _useHMD;
    BOOL _isRecording;
    BOOL _isRecordFirstFrame;
    BOOL _multiCamPreviewHaveStarted;
    BOOL _startApplySticker;
    BOOL _isCalLagFirstFrame;
    BOOL _editorPlaying;
    BOOL _sHasEventToFrequencyInitialized;
    float _recordStartTime;
    float _recordStopTime;
    float _micBufferDuration;
    float _micChannelCount;
    float _micSampleRate;
    float _musicBufferDuration;
    float _musicChannelCount;
    float _musicSampleRate;
    float _processStartTime;
    float _processStopTime;
    float _processTotalTime;
    float _initStartTimeValue;
    float _initStopTimeValue;
    float _compositeStartSystemTime;
    float _compositeSystemStopTime;
    float _compositePauseStartSystemTime;
    float _compositePauseTotalTime;
    float _importGenerateThumbnailStartSystemTime;
    float _importGenerateThumbnailStopSystemTime;
    float _importCropFileStartSystemTime;
    float _importCropFileStopSystemTime;
    float _multiCamPreviewFpsStartTime;
    float _multiCamPreviewFpsStopTime;
    float _cameraFpsConfig;
    id /* block */ _IESMMTrackerBlock;
    id /* block */ _appLogTrackerBlock;
    id /* block */ _performanceTrackerBlock;
    NSString *_appId;
    long long _firstNFrame;
    long long _recordCount;
    NSString *_reportVid;
    long long _mergeStatus;
    long long _vtEncodeStatus;
    double _firstRenderTime;
    double _updateVideoTime;
    double _firstDecodeTime;
    double _initEditorTime;
    long long _editorMode;
    double _micXRunStartTime;
    double _micXRunCurrentTime;
    long long _micXRunCount;
    double _musicXRunStartTime;
    double _musicXRunCurrentTime;
    long long _musicXRunCount;
    double _cameraStartTime;
    double _device_cameraWillStartTime;
    double _device_cameraWillStopTime;
    double _device_micWillStartTime;
    double _device_micWillStopTime;
    double _device_flashModeWillChangeTime;
    double _previewFpsStartTime;
    double _previewFpsStopTime;
    long long _previewFrameCount;
    long long _generateFrameCount;
    double _recordFpsStartTime;
    double _recordFpsStopTime;
    long long _recordFrameCount;
    long long _processFrameCount;
    double _lastPointEndTime;
    unsigned long long _recorderFrameCount;
    double _playerStartTime;
    NSMutableDictionary *_contextDic;
    NSMutableDictionary *_importVideoDic;
    NSMutableDictionary *_recordVideoDic;
    NSMutableDictionary *_preViewDic;
    NSMutableDictionary *_previewDict2;
    NSMutableDictionary *_recordVideoDic2;
    NSMutableDictionary *_editPlayerDict;
    NSMutableDictionary *_compostionDic;
    NSMutableDictionary *_compositionDic2;
    NSMutableDictionary *_pre_record_compostionDic;
    NSMutableDictionary *_cameraDic;
    NSString *_bundleName;
    double _recordFPS;
    double _previewFPS;
    double _recordFirstFrameTime;
    double _previewFirstFrameTime;
    NSDictionary *_defaultPar;
    id<IESMMEffectHelperProtocol> _effectHelper;
    id<IESMMTrackerHelperProtocol> _trackerHelper;
    long long _recordLagCount;
    long long _recordLagMaxDuration;
    long long _recordTotalLagDuration;
    long long _recordSlightLagCount;
    long long _recordNormalLagCount;
    long long _recordSeriousLagCount;
    long long _previewLagCount;
    long long _previewSeriousLagCount;
    long long _previewLagMaxDuration;
    long long _previewTotalLagDuration;
    long long _lastPreviewFrameTime;
    long long _previewLagFrameCount;
    long long _last30PreviewFrameTime;
    double _last30PreviewFrameFPS;
    long long _previewStartTime;
    double _previewTotalNFrameInterval;
    double _previewFirstTwoFrameInterval;
    double _recordTotalNFrameInterval;
    double _recordFirstTwoFrameInterval;
    long long _recordPreviewFrameCount;
    long long _multiCamFirstPreviewFrameCount;
    long long _multiCamSecondPreviewFrameCount;
    long long _multiCamFirstPreviewDropFrameCount;
    long long _multiCamSecondPreviewDropFrameCount;
    double _multiCamFirstPreviewFPS;
    double _multiCamSecondPreviewFPS;
    long long _applyStickerLagCount;
    long long _applyStickerLagTotalDuration;
    long long _frameCount;
    long long _lagCount;
    long long _seriousLagCount;
    long long _totalLagDuration;
    long long _maxLagDuration;
    double _editorStartTime;
    double _editorStopTime;
    double _editorPlayFPS;
    long long _editorFrameCount;
    double _editorTotalNFrameInterval;
    double _editorMaxFrameInterval;
    long long _editorLagCount;
    long long _editorSeriousLagCount;
    long long _editorLagDuration;
    double _lastEditorPreviewTime;
    double _editorPreviewStartTime;
    long long _editorPreviewFrameCount;
    NSMutableDictionary *_sEventToFrequency;
    double _editorPreviewLogStartTime;
    NSMutableDictionary *_eventParams;
    NSMutableDictionary *_switchEffectTimeStamp;
    struct { long long value; int timescale; unsigned int flags; long long epoch; } _lastRecordFrameTime;
    struct { long long value; int timescale; unsigned int flags; long long epoch; } _firstFrameTime;
    struct { long long value; int timescale; unsigned int flags; long long epoch; } _lastFrameTime;
    struct IESMMRecorderCostStat { double avgRecorderProcessCost; double avgEffectProcessCost; double avgRecorderRenderScreenCost; double avgNextFrameArrivedInterval; double avgExposureTime; } _recorderCostStat;
}

@property (nonatomic) double cameraStartTime;
@property (nonatomic) double device_cameraWillStartTime;
@property (nonatomic) double device_cameraWillStopTime;
@property (nonatomic) double device_micWillStartTime;
@property (nonatomic) double device_micWillStopTime;
@property (nonatomic) double device_flashModeWillChangeTime;
@property (nonatomic) double previewFpsStartTime;
@property (nonatomic) double previewFpsStopTime;
@property (nonatomic) long long previewFrameCount;
@property (nonatomic) BOOL previewHaveStart;
@property (nonatomic) long long generateFrameCount;
@property (nonatomic) double recordFpsStartTime;
@property (nonatomic) double recordFpsStopTime;
@property (nonatomic) long long recordFrameCount;
@property (nonatomic) BOOL recordHaveStart;
@property (nonatomic) float processStartTime;
@property (nonatomic) float processStopTime;
@property (nonatomic) float processTotalTime;
@property (nonatomic) long long processFrameCount;
@property (nonatomic) BOOL processHasStart;
@property (nonatomic) struct IESMMRecorderCostStat { double avgRecorderProcessCost; double avgEffectProcessCost; double avgRecorderRenderScreenCost; double avgNextFrameArrivedInterval; double avgExposureTime; } recorderCostStat;
@property (nonatomic) double lastPointEndTime;
@property (nonatomic) unsigned long long recorderFrameCount;
@property (nonatomic) float initStartTimeValue;
@property (nonatomic) float initStopTimeValue;
@property (nonatomic) BOOL haveInit;
@property (nonatomic) float compositeStartSystemTime;
@property (nonatomic) float compositeSystemStopTime;
@property (nonatomic) BOOL haveStartCompositeTime;
@property (nonatomic) float compositePauseStartSystemTime;
@property (nonatomic) float compositePauseTotalTime;
@property (nonatomic) float importGenerateThumbnailStartSystemTime;
@property (nonatomic) float importGenerateThumbnailStopSystemTime;
@property (nonatomic) BOOL haveStartGenerateThumbnail;
@property (nonatomic) float importCropFileStartSystemTime;
@property (nonatomic) float importCropFileStopSystemTime;
@property (nonatomic) BOOL haveStartImportCropFile;
@property (nonatomic) double playerStartTime;
@property (retain, nonatomic) NSMutableDictionary *contextDic;
@property (retain, nonatomic) NSMutableDictionary *importVideoDic;
@property (retain, nonatomic) NSMutableDictionary *recordVideoDic;
@property (retain, nonatomic) NSMutableDictionary *preViewDic;
@property (retain, nonatomic) NSMutableDictionary *previewDict2;
@property (retain, nonatomic) NSMutableDictionary *recordVideoDic2;
@property (retain, nonatomic) NSMutableDictionary *editPlayerDict;
@property (retain, nonatomic) NSMutableDictionary *compostionDic;
@property (retain, nonatomic) NSMutableDictionary *compositionDic2;
@property (retain, nonatomic) NSMutableDictionary *pre_record_compostionDic;
@property (retain, nonatomic) NSMutableDictionary *cameraDic;
@property (nonatomic) BOOL useHMD;
@property (retain, nonatomic) NSString *bundleName;
@property (nonatomic) double recordFPS;
@property (nonatomic) double previewFPS;
@property (nonatomic) double recordFirstFrameTime;
@property (nonatomic) double previewFirstFrameTime;
@property (retain, nonatomic) NSDictionary *defaultPar;
@property (retain, nonatomic) id<IESMMEffectHelperProtocol> effectHelper;
@property (retain, nonatomic) id<IESMMTrackerHelperProtocol> trackerHelper;
@property (nonatomic) long long recordLagCount;
@property (nonatomic) long long recordLagMaxDuration;
@property (nonatomic) long long recordTotalLagDuration;
@property (nonatomic) BOOL isRecording;
@property (nonatomic) struct { long long value; int timescale; unsigned int flags; long long epoch; } lastRecordFrameTime;
@property (nonatomic) BOOL isRecordFirstFrame;
@property (nonatomic) long long recordSlightLagCount;
@property (nonatomic) long long recordNormalLagCount;
@property (nonatomic) long long recordSeriousLagCount;
@property (nonatomic) long long previewLagCount;
@property (nonatomic) long long previewSeriousLagCount;
@property (nonatomic) long long previewLagMaxDuration;
@property (nonatomic) long long previewTotalLagDuration;
@property (nonatomic) long long lastPreviewFrameTime;
@property (nonatomic) long long previewLagFrameCount;
@property (nonatomic) long long last30PreviewFrameTime;
@property (nonatomic) double last30PreviewFrameFPS;
@property (nonatomic) long long previewStartTime;
@property (nonatomic) double previewTotalNFrameInterval;
@property (nonatomic) double previewFirstTwoFrameInterval;
@property (nonatomic) double recordTotalNFrameInterval;
@property (nonatomic) double recordFirstTwoFrameInterval;
@property (nonatomic) long long recordPreviewFrameCount;
@property (nonatomic) float multiCamPreviewFpsStartTime;
@property (nonatomic) float multiCamPreviewFpsStopTime;
@property (nonatomic) long long multiCamFirstPreviewFrameCount;
@property (nonatomic) long long multiCamSecondPreviewFrameCount;
@property (nonatomic) BOOL multiCamPreviewHaveStarted;
@property (nonatomic) long long multiCamFirstPreviewDropFrameCount;
@property (nonatomic) long long multiCamSecondPreviewDropFrameCount;
@property (nonatomic) double multiCamFirstPreviewFPS;
@property (nonatomic) double multiCamSecondPreviewFPS;
@property (nonatomic) long long applyStickerLagCount;
@property (nonatomic) long long applyStickerLagTotalDuration;
@property (nonatomic) BOOL startApplySticker;
@property (nonatomic) float cameraFpsConfig;
@property (nonatomic) long long frameCount;
@property (nonatomic) long long lagCount;
@property (nonatomic) long long seriousLagCount;
@property (nonatomic) long long totalLagDuration;
@property (nonatomic) long long maxLagDuration;
@property (nonatomic) struct { long long value; int timescale; unsigned int flags; long long epoch; } firstFrameTime;
@property (nonatomic) struct { long long value; int timescale; unsigned int flags; long long epoch; } lastFrameTime;
@property (nonatomic) BOOL isCalLagFirstFrame;
@property (nonatomic) double editorStartTime;
@property (nonatomic) double editorStopTime;
@property (nonatomic) double editorPlayFPS;
@property (nonatomic) long long editorFrameCount;
@property (nonatomic) BOOL editorPlaying;
@property (nonatomic) double editorTotalNFrameInterval;
@property (nonatomic) double editorMaxFrameInterval;
@property (nonatomic) long long editorLagCount;
@property (nonatomic) long long editorSeriousLagCount;
@property (nonatomic) long long editorLagDuration;
@property (nonatomic) double lastEditorPreviewTime;
@property (nonatomic) double editorPreviewStartTime;
@property (nonatomic) long long editorPreviewFrameCount;
@property (nonatomic) BOOL sHasEventToFrequencyInitialized;
@property (retain, nonatomic) NSMutableDictionary *sEventToFrequency;
@property (nonatomic) double editorPreviewLogStartTime;
@property (copy, nonatomic) NSMutableDictionary *eventParams;
@property (retain, nonatomic) NSMutableDictionary *switchEffectTimeStamp;
@property (copy, nonatomic) id /* block */ IESMMTrackerBlock;
@property (copy, nonatomic) id /* block */ appLogTrackerBlock;
@property (copy, nonatomic) id /* block */ performanceTrackerBlock;
@property (copy, nonatomic) NSString *appId;
@property (nonatomic) float recordStartTime;
@property (nonatomic) float recordStopTime;
@property (nonatomic) long long firstNFrame;
@property (nonatomic) long long recordCount;
@property (copy, nonatomic) NSString *reportVid;
@property (nonatomic) long long mergeStatus;
@property (nonatomic) long long vtEncodeStatus;
@property (nonatomic) double firstRenderTime;
@property (nonatomic) double updateVideoTime;
@property (nonatomic) double firstDecodeTime;
@property (nonatomic) double initEditorTime;
@property (nonatomic) long long editorMode;
@property (nonatomic) double micXRunStartTime;
@property (nonatomic) double micXRunCurrentTime;
@property (nonatomic) long long micXRunCount;
@property (nonatomic) float micBufferDuration;
@property (nonatomic) float micChannelCount;
@property (nonatomic) float micSampleRate;
@property (nonatomic) double musicXRunStartTime;
@property (nonatomic) double musicXRunCurrentTime;
@property (nonatomic) long long musicXRunCount;
@property (nonatomic) float musicBufferDuration;
@property (nonatomic) float musicChannelCount;
@property (nonatomic) float musicSampleRate;

+ (void)configureMMTracker:(id)arg0;
+ (id)effectSDKCommit;
+ (id)getEffectVersion;
+ (id)getEditorVersion;
+ (id)shareInstance;

- (void)localConfigureMMTracker:(id)arg0;
- (float)recordStartTime;
- (void)setRecordStartTime:(float)arg0;
- (struct { long long x0; int x1; unsigned int x2; long long x3; })firstFrameTime;
- (void)setFirstFrameTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg0;
- (void)postTracker:(id)arg0 value:(id)arg1 status:(long long)arg2;
- (void)setEventParams:(id)arg0;
- (void)setFirstRenderTime:(double)arg0;
- (void)appLogOnEvent:(id)arg0 params:(id)arg1 eventType:(id)arg2;
- (id /* block */)appLogTrackerBlock;
- (void)setAppLogTrackerBlock:(id /* block */)arg0;
- (float)getPlayFps;
- (void)postServiceType:(long long)arg0 key:(id)arg1 value:(id)arg2;
- (void)trackDeviceStateOnEvent:(id)arg0 state:(int)arg1;
- (BOOL)useHMD;
- (void)setUseHMD:(BOOL)arg0;
- (id)trackerHelper;
- (id)effectHelper;
- (void)setDefaultPar:(id)arg0;
- (void)postTracker:(id)arg0 value:(id)arg1;
- (void)setContextDic:(id)arg0;
- (void)setEffectHelperIntance:(id)arg0;
- (void)resetRecorderCostStat;
- (id)preViewDic;
- (void)setMultiCamFirstPreviewDropFrameCount:(long long)arg0;
- (void)setMultiCamSecondPreviewDropFrameCount:(long long)arg0;
- (void)setMultiCamFirstPreviewFPS:(double)arg0;
- (void)setMultiCamSecondPreviewFPS:(double)arg0;
- (void)setMultiCamPreviewFpsStartTime:(float)arg0;
- (void)setMultiCamPreviewFpsStopTime:(float)arg0;
- (void)setMultiCamFirstPreviewFrameCount:(long long)arg0;
- (void)setMultiCamSecondPreviewFrameCount:(long long)arg0;
- (float)multiCamPreviewFpsStartTime;
- (void)setMultiCamPreviewHaveStarted:(BOOL)arg0;
- (BOOL)multiCamPreviewHaveStarted;
- (long long)multiCamFirstPreviewFrameCount;
- (long long)multiCamSecondPreviewFrameCount;
- (long long)multiCamFirstPreviewDropFrameCount;
- (long long)multiCamSecondPreviewDropFrameCount;
- (float)multiCamPreviewFpsStopTime;
- (double)multiCamFirstPreviewFPS;
- (double)multiCamSecondPreviewFPS;
- (void)setPreviewFpsStartTime:(double)arg0;
- (double)previewFpsStartTime;
- (void)setPreviewHaveStart:(BOOL)arg0;
- (BOOL)previewHaveStart;
- (double)previewFirstFrameTime;
- (void)setPreviewFirstFrameTime:(double)arg0;
- (void)setPreviewFrameCount:(long long)arg0;
- (void)setPreviewFpsStopTime:(double)arg0;
- (double)previewFpsStopTime;
- (void)setPreviewFPS:(double)arg0;
- (double)previewFPS;
- (id)previewDict2;
- (long long)generateFrameCount;
- (void)setRecordPreviewFrameCount:(long long)arg0;
- (id)recordVideoDic;
- (void)setGenerateFrameCount:(long long)arg0;
- (BOOL)processHasStart;
- (long long)processFrameCount;
- (float)processTotalTime;
- (id)recordVideoDic2;
- (void)setProcessFrameCount:(long long)arg0;
- (void)setProcessTotalTime:(float)arg0;
- (void)setProcessStopTime:(float)arg0;
- (void)setProcessHasStart:(BOOL)arg0;
- (void)setRecordFpsStartTime:(double)arg0;
- (void)setRecordHaveStart:(BOOL)arg0;
- (double)recordFpsStartTime;
- (BOOL)recordHaveStart;
- (double)recordFirstFrameTime;
- (void)setRecordFirstFrameTime:(double)arg0;
- (long long)recordFrameCount;
- (void)setRecordFrameCount:(long long)arg0;
- (void)setRecordFpsStopTime:(double)arg0;
- (double)recordFpsStopTime;
- (void)setRecordStopTime:(float)arg0;
- (void)setRecordFPS:(double)arg0;
- (double)recordFPS;
- (float)processStopTime;
- (BOOL)haveInit;
- (void)setInitStartTimeValue:(float)arg0;
- (void)setHaveInit:(BOOL)arg0;
- (void)recordPlayerFirstRender;
- (void)setInitStopTimeValue:(float)arg0;
- (float)initStartTimeValue;
- (float)initStopTimeValue;
- (void)setPlayerStartTime:(double)arg0;
- (double)playerStartTime;
- (id)editPlayerDict;
- (id)compositionDic2;
- (id)compostionDic;
- (void)setCompositeStartSystemTime:(float)arg0;
- (void)setHaveStartCompositeTime:(BOOL)arg0;
- (void)setCompositePauseStartSystemTime:(float)arg0;
- (void)setCompositePauseTotalTime:(float)arg0;
- (BOOL)haveStartCompositeTime;
- (void)setCompositeSystemStopTime:(float)arg0;
- (float)compositeSystemStopTime;
- (float)compositeStartSystemTime;
- (float)compositePauseTotalTime;
- (float)compositePauseStartSystemTime;
- (id)pre_record_compostionDic;
- (void)setRecordVideoDic:(id)arg0;
- (id)importVideoDic;
- (id /* block */)IESMMTrackerBlock;
- (void)setImportVideoDic:(id)arg0;
- (void)setPreViewDic:(id)arg0;
- (void)setCompostionDic:(id)arg0;
- (id)contextDic;
- (id)reportVid;
- (void)clearComposTracker;
- (void)setPre_record_compostionDic:(id)arg0;
- (id)defaultPar;
- (void)trackRecordVideo;
- (void)trackImpportCropVideo;
- (void)trackPreViewDic;
- (void)trackCompostionDic;
- (void)postRecordFinishTracker;
- (void)postPreAndRecordAndCompostionTracker;
- (void)postComposFinishTracker;
- (BOOL)skipReportByAppAndFrequencyControl:(id)arg0;
- (void)iesAppLogOnEvent:(id)arg0 params:(id)arg1 eventType:(id)arg2;
- (void)appLogOnEvent2IES:(id)arg0 params:(id)arg1 eventType:(id)arg2;
- (void)iesAppLogOnEvent:(id)arg0 params:(id)arg1 eventType:(id)arg2 toBusiness:(BOOL)arg3;
- (void)appLogOnEvent2IES:(id)arg0 params:(id)arg1 eventType:(id)arg2 toBusiness:(BOOL)arg3;
- (id /* block */)performanceTrackerBlock;
- (long long)recordLagCount;
- (long long)recordLagMaxDuration;
- (long long)recordTotalLagDuration;
- (void)setRecordLagCount:(long long)arg0;
- (void)setRecordSlightLagCount:(long long)arg0;
- (void)setRecordNormalLagCount:(long long)arg0;
- (void)setRecordSeriousLagCount:(long long)arg0;
- (void)setRecordTotalLagDuration:(long long)arg0;
- (void)setRecordLagMaxDuration:(long long)arg0;
- (void)setLastRecordFrameTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg0;
- (void)setIsRecordFirstFrame:(BOOL)arg0;
- (void)setRecordFirstTwoFrameInterval:(double)arg0;
- (void)setRecordTotalNFrameInterval:(double)arg0;
- (double)recordFirstTwoFrameInterval;
- (long long)firstNFrame;
- (double)recordTotalNFrameInterval;
- (void)updateRecordLagCount;
- (void)updateRecordLagTotalDuration:(long long)arg0;
- (void)updateRecordSlightLagCount;
- (void)updateRecordNormalLagCount;
- (void)updateRecordSeriousLagCount;
- (long long)getRecordLagMaxDuration;
- (void)updateRecordLagMaxDuration:(long long)arg0;
- (long long)previewLagCount;
- (long long)previewSeriousLagCount;
- (long long)previewLagMaxDuration;
- (long long)previewTotalLagDuration;
- (void)setPreviewFirstTwoFrameInterval:(double)arg0;
- (double)previewFirstTwoFrameInterval;
- (double)previewTotalNFrameInterval;
- (void)setPreviewTotalNFrameInterval:(double)arg0;
- (long long)previewStartTime;
- (void)setPreviewStartTime:(long long)arg0;
- (BOOL)startApplySticker;
- (long long)applyStickerLagCount;
- (void)setApplyStickerLagCount:(long long)arg0;
- (long long)applyStickerLagTotalDuration;
- (void)setApplyStickerLagTotalDuration:(long long)arg0;
- (void)setPreviewLagCount:(long long)arg0;
- (void)setPreviewSeriousLagCount:(long long)arg0;
- (void)setPreviewTotalLagDuration:(long long)arg0;
- (void)setPreviewLagMaxDuration:(long long)arg0;
- (void)setPreviewLagFrameCount:(long long)arg0;
- (void)setLast30PreviewFrameTime:(long long)arg0;
- (void)setLast30PreviewFrameFPS:(double)arg0;
- (long long)previewLagFrameCount;
- (long long)recordPreviewFrameCount;
- (long long)getPreviewDuration;
- (long long)lastPreviewFrameTime;
- (void)setStartApplySticker:(BOOL)arg0;
- (void)resetEditorParameters;
- (long long)editorPreviewFrameCount;
- (void)setEditorPreviewFrameCount:(long long)arg0;
- (double)lastEditorPreviewTime;
- (double)editorMaxFrameInterval;
- (void)setEditorMaxFrameInterval:(double)arg0;
- (double)editorTotalNFrameInterval;
- (void)setEditorTotalNFrameInterval:(double)arg0;
- (long long)editorLagCount;
- (void)setEditorLagCount:(long long)arg0;
- (long long)editorLagDuration;
- (void)setEditorLagDuration:(long long)arg0;
- (long long)editorSeriousLagCount;
- (void)setEditorSeriousLagCount:(long long)arg0;
- (void)setEditorPreviewStartTime:(double)arg0;
- (void)setLastEditorPreviewTime:(double)arg0;
- (float)getEditorPreviewCurFrameRate;
- (void)appLogOnEvent:(id)arg0 params:(id)arg1 eventType:(id)arg2 toBusiness:(BOOL)arg3;
- (void)setEditorPreviewLogStartTime:(double)arg0;
- (double)editorPreviewStartTime;
- (double)editorPreviewLogStartTime;
- (void)setEditorMode:(long long)arg0;
- (void)setDevice_cameraWillStartTime:(double)arg0;
- (double)device_cameraWillStartTime;
- (void)setDevice_cameraWillStopTime:(double)arg0;
- (double)device_cameraWillStopTime;
- (void)setDevice_micWillStartTime:(double)arg0;
- (double)device_micWillStartTime;
- (void)setDevice_micWillStopTime:(double)arg0;
- (double)device_micWillStopTime;
- (void)setDevice_flashModeWillChangeTime:(double)arg0;
- (double)device_flashModeWillChangeTime;
- (double)micXRunStartTime;
- (void)setMicXRunStartTime:(double)arg0;
- (void)setMicXRunCount:(long long)arg0;
- (double)micXRunCurrentTime;
- (void)setMicXRunCurrentTime:(double)arg0;
- (long long)micXRunCount;
- (double)musicXRunStartTime;
- (void)setMusicXRunStartTime:(double)arg0;
- (void)setMusicXRunCount:(long long)arg0;
- (double)musicXRunCurrentTime;
- (void)setMusicXRunCurrentTime:(double)arg0;
- (long long)musicXRunCount;
- (id)switchEffectTimeStamp;
- (void)setSwitchEffectTimeStamp:(id)arg0;
- (id)getRuntimeMemoryInfo;
- (void)postDelegateTracker:(id)arg0 value:(id)arg1;
- (void)previewResolution:(float)arg0 height:(float)arg1;
- (void)multiCamPreviewFpsReset;
- (void)multiCamFirstPreviewFrameArrive;
- (void)multiCamSecondPreviewFrameArrive;
- (void)multiCamFirstPreviewFrameDropped;
- (void)multiCamSecondPreviewFrameDropped;
- (void)multiCamPreviewFpsStop;
- (double)getMultiCamFirstPreviewFPS;
- (double)getMultiCamSecondPreviewFPS;
- (long long)getMultiCamFirstPreviewLagCount;
- (double)getMultiCamFirstPreviewFrameCount;
- (long long)getMultiCamSecondPreviewLagCount;
- (void)previewFpsStart;
- (void)previewFrameArrive;
- (void)previewFpsdStop;
- (void)frameGenerate;
- (void)recordFpsStart;
- (void)recordFrameArrive;
- (void)recordFpsdStop;
- (void)processFrameStartTime;
- (void)processFrameArrive;
- (void)processFrameStopTime;
- (void)receiveCaptureFrame;
- (void)beforeEffectProcess;
- (void)afterEffectProcess;
- (void)updateExposureTime:(double)arg0;
- (struct IESMMRecorderCostStat { double x0; double x1; double x2; double x3; double x4; })getRecorderCostStat;
- (void)startInit;
- (void)firstFrameRender;
- (void)recordPlayerStart;
- (void)recordEditReverseTime:(double)arg0 duration:(double)arg1 useCache:(BOOL)arg2;
- (void)recordEditReverseError:(id)arg0;
- (void)recordEditAllocNum;
- (void)recordEditErrorCode:(int)arg0;
- (void)recordComposEndWaterMark:(BOOL)arg0;
- (void)recordComposEffect:(id)arg0;
- (void)recordComposInfoSticker:(id)arg0;
- (void)compositeFile:(id)arg0;
- (void)compositeStartTime;
- (void)compositeStopTime;
- (void)compositePauseStartTime;
- (void)compositePauseStopTime;
- (double)getCompositePauseTotalTime;
- (void)postTracker;
- (void)postPreViewTracker;
- (void)postRecordTracker;
- (void)clearRecordTracker;
- (void)postCompostionTracker;
- (void)postTracker:(long long)arg0;
- (double)getRecordFPS;
- (double)getPreviewFPS;
- (double)getRecordFirstFrameTime;
- (double)getPreviewFirstFrameTime;
- (void)addParams:(id)arg0 forEvent:(id)arg1;
- (void)setAppLogCallback:(id)arg0 callback:(id /* block */)arg1;
- (void)performanceOnEvent:(id)arg0 params:(id)arg1;
- (void)setPerformanceCallback:(id /* block */)arg0;
- (double)getSlightLagRate;
- (double)getNormalLagRate;
- (double)getSeriousLageRate;
- (long long)getRecordLagCount;
- (long long)getRecordLagTotalDuration;
- (void)resetRecordLagParams;
- (void)calRecordLag:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg0;
- (void)updatePreviewLagCount:(long long)arg0;
- (void)updatePreviewLagMaxDuration:(long long)arg0;
- (void)updatePreviewLagTotalDuration:(long long)arg0;
- (long long)getPreviewLagCount;
- (long long)getPreviewSeriousLagCount;
- (long long)getPreviewLagMaxDuration;
- (long long)getPreviewLagTotalDuration;
- (void)calPreviewLag:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg0 firstFrame:(BOOL)arg1;
- (void)resetPreviewLagParams;
- (double)getPreviewFirstTwoFrameInterval;
- (double)getPreviewFirstNFrameAvgInterval;
- (double)getRecordFirstTwoFrameInterval;
- (double)getRecordFirstNFrameAvgInterval;
- (double)getPreviewPureFps;
- (double)getLast30PreviewFrameFPS;
- (long long)getApplyStickerLagCount;
- (long long)getApplyStickerLagTotalDuration;
- (void)startApplyStickerLag;
- (void)endApplyStickerLag;
- (void)updateCameraFpsConfig:(float)arg0;
- (void)resetPreviewLagStatistics;
- (void)calPreviewLag:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg0;
- (void)postPreviewLagTracker:(BOOL)arg0;
- (void)updatePlayStartTime:(double)arg0;
- (double)getPlayStartTime;
- (void)updatePlayStopTime:(double)arg0;
- (double)getPlayStopTime;
- (void)updateEditorFrameCount;
- (void)resetEditorFrameCount;
- (void)updatePlayFps:(float)arg0;
- (void)editorPreviewFrameArrive;
- (long long)getEditorLagCount;
- (long long)getEditorSeriousLagCount;
- (long long)getEditorLagDuration;
- (float)getEditorPreviewFrameRate;
- (double)getEditorMaxFrameInterval;
- (double)getEditorFirstNFrameAvgInterval;
- (void)reportEditorFirstFrameTime:(double)arg0 mode:(long long)arg1;
- (void)reportEditorPreloadTime:(double)arg0 readerType:(long long)arg1;
- (void)trackFlashStateOnEvent:(id)arg0 state:(int)arg1;
- (void)trackFaceAEModeOnEvent:(id)arg0 device:(id)arg1 sysVer:(id)arg2 faceAE:(BOOL)arg3 sysAutoFaceAE:(BOOL)arg4;
- (void)micXRunArrive:(BOOL)arg0;
- (void)clearMicXRun;
- (void)musicXRunArrive:(BOOL)arg0;
- (void)clearMusicXRun;
- (id)getSwitchEffectTimeStamp;
- (void)setClientCallVESwitchEffectTimeStamp:(id)arg0 timestamp:(unsigned long long)arg1;
- (void)setVECallSwitchEffectTimeStamp:(id)arg0 timestamp:(unsigned long long)arg1;
- (void)setIESMMTrackerBlock:(id /* block */)arg0;
- (void)setPerformanceTrackerBlock:(id /* block */)arg0;
- (float)recordStopTime;
- (void)setFirstNFrame:(long long)arg0;
- (void)setReportVid:(id)arg0;
- (long long)vtEncodeStatus;
- (void)setVtEncodeStatus:(long long)arg0;
- (double)firstRenderTime;
- (double)updateVideoTime;
- (void)setUpdateVideoTime:(double)arg0;
- (double)firstDecodeTime;
- (void)setFirstDecodeTime:(double)arg0;
- (double)initEditorTime;
- (void)setInitEditorTime:(double)arg0;
- (float)micBufferDuration;
- (void)setMicBufferDuration:(float)arg0;
- (float)micChannelCount;
- (void)setMicChannelCount:(float)arg0;
- (float)micSampleRate;
- (void)setMicSampleRate:(float)arg0;
- (float)musicBufferDuration;
- (void)setMusicBufferDuration:(float)arg0;
- (float)musicChannelCount;
- (void)setMusicChannelCount:(float)arg0;
- (float)musicSampleRate;
- (void)setMusicSampleRate:(float)arg0;
- (double)cameraStartTime;
- (void)setCameraStartTime:(double)arg0;
- (struct IESMMRecorderCostStat { double x0; double x1; double x2; double x3; double x4; })recorderCostStat;
- (void)setRecorderCostStat:(struct IESMMRecorderCostStat { double x0; double x1; double x2; double x3; double x4; })arg0;
- (double)lastPointEndTime;
- (void)setLastPointEndTime:(double)arg0;
- (unsigned long long)recorderFrameCount;
- (void)setRecorderFrameCount:(unsigned long long)arg0;
- (float)importGenerateThumbnailStartSystemTime;
- (void)setImportGenerateThumbnailStartSystemTime:(float)arg0;
- (float)importGenerateThumbnailStopSystemTime;
- (void)setImportGenerateThumbnailStopSystemTime:(float)arg0;
- (BOOL)haveStartGenerateThumbnail;
- (void)setHaveStartGenerateThumbnail:(BOOL)arg0;
- (float)importCropFileStartSystemTime;
- (void)setImportCropFileStartSystemTime:(float)arg0;
- (float)importCropFileStopSystemTime;
- (void)setImportCropFileStopSystemTime:(float)arg0;
- (BOOL)haveStartImportCropFile;
- (void)setHaveStartImportCropFile:(BOOL)arg0;
- (void)setPreviewDict2:(id)arg0;
- (void)setRecordVideoDic2:(id)arg0;
- (void)setEditPlayerDict:(id)arg0;
- (void)setCompositionDic2:(id)arg0;
- (id)cameraDic;
- (void)setCameraDic:(id)arg0;
- (void)setEffectHelper:(id)arg0;
- (void)setTrackerHelper:(id)arg0;
- (struct { long long x0; int x1; unsigned int x2; long long x3; })lastRecordFrameTime;
- (BOOL)isRecordFirstFrame;
- (long long)recordSlightLagCount;
- (long long)recordNormalLagCount;
- (long long)recordSeriousLagCount;
- (void)setLastPreviewFrameTime:(long long)arg0;
- (long long)last30PreviewFrameTime;
- (double)last30PreviewFrameFPS;
- (float)cameraFpsConfig;
- (void)setCameraFpsConfig:(float)arg0;
- (long long)lagCount;
- (void)setLagCount:(long long)arg0;
- (long long)seriousLagCount;
- (void)setSeriousLagCount:(long long)arg0;
- (long long)totalLagDuration;
- (void)setTotalLagDuration:(long long)arg0;
- (long long)maxLagDuration;
- (void)setMaxLagDuration:(long long)arg0;
- (BOOL)isCalLagFirstFrame;
- (void)setIsCalLagFirstFrame:(BOOL)arg0;
- (double)editorStartTime;
- (void)setEditorStartTime:(double)arg0;
- (double)editorStopTime;
- (void)setEditorStopTime:(double)arg0;
- (double)editorPlayFPS;
- (void)setEditorPlayFPS:(double)arg0;
- (long long)editorFrameCount;
- (void)setEditorFrameCount:(long long)arg0;
- (BOOL)editorPlaying;
- (void)setEditorPlaying:(BOOL)arg0;
- (BOOL)sHasEventToFrequencyInitialized;
- (void)setSHasEventToFrequencyInitialized:(BOOL)arg0;
- (id)sEventToFrequency;
- (void)setSEventToFrequency:(id)arg0;
- (void)setAppId:(id)arg0;
- (id)init;
- (float)processStartTime;
- (BOOL)isRecording;
- (void).cxx_destruct;
- (void)setIsRecording:(BOOL)arg0;
- (void)setProcessStartTime:(float)arg0;
- (long long)frameCount;
- (id)bundleName;
- (void)setBundleName:(id)arg0;
- (void)setRecordCount:(long long)arg0;
- (long long)recordCount;
- (id)appId;
- (void)setFrameCount:(long long)arg0;
- (void)setRecordingState:(BOOL)arg0;
- (void)setMergeStatus:(long long)arg0;
- (long long)mergeStatus;
- (long long)editorMode;
- (void)initData;
- (long long)previewFrameCount;
- (struct { long long x0; int x1; unsigned int x2; long long x3; })lastFrameTime;
- (void)setLastFrameTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg0;
- (id)eventParams;

@end
