//
//     Generated by private class-dump
//

@class JSWorkerBridgeEngine, NSString;
@protocol WorkerDelegate, MessageCallback, ErrorCallback;

@interface JsWorkerIOS : NSObject {
    struct atomic<bool> { struct __cxx_atomic_impl<bool, std::__cxx_atomic_base_impl<bool>> { _Atomic BOOL __a_value; } __a_; } is_running_;
    BOOL use_jscore_;
    BOOL is_multi_thread_;
    NSString *cache_path_;
    NSString *biz_name_;
    struct shared_ptr<vmsdk::worker::WorkerDelegateIOS> { struct WorkerDelegateIOS *__ptr_; struct __shared_weak_count *__cntrl_; } worker_delegate_;
    struct shared_ptr<vmsdk::worker::Worker> { struct Worker *__ptr_; struct __shared_weak_count *__cntrl_; } worker_;
    struct shared_ptr<vmsdk::piper::ModuleManagerDarwin> { struct ModuleManagerDarwin *__ptr_; struct __shared_weak_count *__cntrl_; } module_manager_;
    struct shared_ptr<vmsdk::piper::ModuleDelegateImpl> { struct ModuleDelegateImpl *__ptr_; struct __shared_weak_count *__cntrl_; } module_delegate_;
    struct shared_ptr<vmsdk::runtime::TaskRunnerManufacture> { struct TaskRunnerManufacture *__ptr_; struct __shared_weak_count *__cntrl_; } task_runner_manufacture_;
    struct shared_ptr<vmsdk::runtime::JSRuntime> { struct JSRuntime *__ptr_; struct __shared_weak_count *__cntrl_; } js_runtime_;
    JsWorkerIOS *js_worker_ios_;
    id<MessageCallback> _onMessageCallback;
    id<ErrorCallback> _onErrorCallback;
    id<WorkerDelegate> _workerDelegate;
}

@property (readonly, nonatomic) JSWorkerBridgeEngine *tt_engine;
@property (weak) id<MessageCallback> onMessageCallback;
@property (weak) id<ErrorCallback> onErrorCallback;
@property (weak, nonatomic) id<WorkerDelegate> workerDelegate;

+ (id)genCodeCache:(id)arg0 useJSCore:(BOOL)arg1;

- (void)onMessage:(id)arg0;
- (void)tt_installBridgeEngine:(id)arg0;
- (id)tt_engine;
- (void)setTt_engine:(id)arg0;
- (id)onMessageCallback;
- (void)setOnMessageCallback:(id)arg0;
- (void)registerModule:(Class)arg0 param:(id)arg1;
- (id)init:(unsigned char)arg0 param:(id)arg1 isMutiThread:(unsigned char)arg2 biz_name:(id)arg3;
- (void)setOnErrorCallback:(id)arg0;
- (void *)getWorkerNapiEnv;
- (void)postOnJSRunner:(id /* block */)arg0;
- (void)setGlobalProperties:(id)arg0;
- (void)initJSBridge;
- (void)evaluateJavaScript:(id)arg0;
- (void)evaluateJavaScript:(id)arg0 param:(id)arg1;
- (void)tt_installIESBridgeEngine:(id)arg0;
- (id)invokeJavaScriptModuleSync:(id)arg0 methodName:(id)arg1 params:(id)arg2;
- (id)init:(unsigned char)arg0 param:(id)arg1;
- (id)init:(unsigned char)arg0 param:(id)arg1 isMutiThread:(unsigned char)arg2;
- (id)invokeJavaScriptFunctionSync:(id)arg0 params:(id)arg1;
- (void *)getTaskRunnerManufacture;
- (void *)getWorker;
- (void)evaluateCodeCache:(id)arg0;
- (void)postOnJSRunnerDelay:(id /* block */)arg0 delayMilliseconds:(long long)arg1;
- (void)invokeJavaScriptModule:(id)arg0 methodName:(id)arg1 params:(id)arg2;
- (void)invokeJavaScriptFunction:(id)arg0 params:(id)arg1;
- (id)FetchJsWithUrlSync:(id)arg0;
- (void)Fetch:(id)arg0 param:(id)arg1 bodyData:(const void *)arg2 bodyLength:(int)arg3 delPtr:(void *)arg4;
- (id)getCacheFilePath;
- (id)onErrorCallback;
- (void)registerModule:(Class)arg0;
- (BOOL)isRunning;
- (void)terminate;
- (id)init;
- (void).cxx_destruct;
- (id)init:(unsigned char)arg0;
- (void)setWorkerDelegate:(id)arg0;
- (void)dealloc;
- (id).cxx_construct;
- (id)workerDelegate;
- (void)onError:(id)arg0;
- (void)setContextName:(id)arg0;
- (void)postMessage:(id)arg0;

@end
