//
//     Generated by private class-dump
//

@class UIView, NSString, TVLPlayableURL, TVLRetryer, NSDictionary, TVLDNSParser, NSMutableArray, TVLPlayer, TVLPlayerItem;
@protocol TVLPlayerControllerDelegate;

@interface TVLController : NSObject <TVLDNSParserDelegate, TVLPlayerController> {
    long long _frameDroppingTerminatedDTS;
    NSDictionary *_ipMappingTable;
    NSDictionary *_hostIpList;
    BOOL _shouldStopRetry;
    BOOL _shouldUseLiveDNS;
    BOOL _preferredToHTTPDNS;
    BOOL _shouldTryAllResolvedIPAddresses;
    BOOL _shouldTryCachedAddresses;
    BOOL _shouldCacheUrlIPAddressAfterStartRender;
    BOOL _isStalling;
    BOOL _cacheHitted;
    BOOL _isPrepared;
    BOOL _hasShowedFirstFrame;
    BOOL _hasTriedOriginalURL;
    BOOL _callPlay;
    BOOL _callPrepare;
    BOOL _hasCallStop;
    long long _retryMaximumTimesInStall;
    double _retryMaximumDuration;
    double _retryTimeIntervalInStall;
    double _retryTimeIntervalInError;
    TVLPlayerItem *_currentItem;
    TVLPlayer *_player;
    id<TVLPlayerControllerDelegate> _delegate;
    id /* block */ _optimumNodeInfoRequest;
    NSDictionary *_extraRequestHeaderByUser;
    long long _playerDebugState;
    TVLDNSParser *_parser;
    NSString *_currentPlayURL;
    NSString *_videoFormat;
    NSString *_level;
    NSString *_parsedHostname;
    NSMutableArray *_availableParsedIPAddresses;
    TVLPlayableURL *_playableURL;
    unsigned long long _imageLayoutType;
    NSDictionary *_optimumNodeInfo;
    TVLRetryer *_retryer;
}

@property (retain, nonatomic) TVLDNSParser *parser;
@property (retain, nonatomic) NSString *currentPlayURL;
@property (retain, nonatomic) NSString *videoFormat;
@property (retain, nonatomic) NSString *level;
@property (copy, nonatomic) NSString *parsedHostname;
@property (retain, nonatomic) NSMutableArray *availableParsedIPAddresses;
@property (nonatomic, getter=isCacheHitted) BOOL cacheHitted;
@property (nonatomic) BOOL isPrepared;
@property (nonatomic) BOOL hasShowedFirstFrame;
@property (nonatomic) BOOL hasTriedOriginalURL;
@property (nonatomic) BOOL callPlay;
@property (nonatomic) BOOL callPrepare;
@property (nonatomic) BOOL hasCallStop;
@property (retain, nonatomic) TVLPlayableURL *playableURL;
@property (nonatomic) unsigned long long imageLayoutType;
@property (retain, nonatomic) NSDictionary *optimumNodeInfo;
@property (retain, nonatomic) TVLRetryer *retryer;
@property (nonatomic) long long frameDroppingTerminatedDTS;
@property (nonatomic) long long retryMaximumTimesInStall;
@property (nonatomic) double retryMaximumDuration;
@property (nonatomic) double retryTimeIntervalInStall;
@property (nonatomic) double retryTimeIntervalInError;
@property (nonatomic) BOOL shouldStopRetry;
@property (retain, nonatomic) TVLPlayerItem *currentItem;
@property (retain, nonatomic) TVLPlayer *player;
@property (readonly, nonatomic) UIView *playerView;
@property (weak, nonatomic) id<TVLPlayerControllerDelegate> delegate;
@property (readonly, nonatomic) BOOL isPlaying;
@property (nonatomic) BOOL shouldUseLiveDNS;
@property (copy, nonatomic) id /* block */ optimumNodeInfoRequest;
@property (nonatomic, getter=isPreferredToHTTPDNS) BOOL preferredToHTTPDNS;
@property (nonatomic) BOOL shouldTryAllResolvedIPAddresses;
@property (retain, nonatomic) NSDictionary *ipMappingTable;
@property (retain, nonatomic) NSDictionary *extraRequestHeaderByUser;
@property (retain, nonatomic) NSDictionary *hostIpList;
@property (nonatomic) long long playerDebugState;
@property (nonatomic) BOOL shouldTryCachedAddresses;
@property (nonatomic) BOOL shouldCacheUrlIPAddressAfterStartRender;
@property (nonatomic) BOOL isStalling;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (void)hookCacheOfHostIsHitted;
+ (void)hookPlayerDidStopStalling;
+ (void)hookPlayerDidStartStallingWithReason;
+ (void)hookUpdateOptimumNodeInfo;
+ (void)hookPrepareToPlay;
+ (void)hookRetryWithResetPlayer;
+ (void)hookStartRender;
+ (void)hookHostReplacement;
+ (void)hookRetryAvailableParsedUrl;
+ (void)hookRetryOriginalUrl;
+ (void)load;

- (unsigned long long)imageLayoutType;
- (void)setImageLayoutType:(unsigned long long)arg0;
- (void)onStreamDryup:(id)arg0;
- (void)setCurrentPlayURL:(id)arg0;
- (id)currentPlayURL;
- (void)setPlayableURL:(id)arg0;
- (id)playableURL;
- (void)recieveError:(id)arg0;
- (void)loadStateChanged:(id)arg0;
- (id)initWithOwnPlayer:(BOOL)arg0;
- (float)getFloatValueForKey:(int)arg0;
- (id)getStringValueForKey:(int)arg0;
- (long long)getIntValueForKey:(int)arg0;
- (void)setIsStalling:(BOOL)arg0;
- (BOOL)isStalling;
- (void)setShouldUseLiveDNS:(BOOL)arg0;
- (BOOL)shouldUseLiveDNS;
- (id /* block */)optimumNodeInfoRequest;
- (void)setOptimumNodeInfoRequest:(id /* block */)arg0;
- (void)setHasTriedOriginalURL:(BOOL)arg0;
- (void)setParsedHostname:(id)arg0;
- (id)availableParsedIPAddresses;
- (void)setOptimumNodeInfo:(id)arg0;
- (void)setCacheHitted:(BOOL)arg0;
- (void)updateOptimumNodeInfo;
- (BOOL)isLocalPlayURL:(id)arg0;
- (void)tvl_prepareToPlayURL:(id)arg0 withHost:(id)arg1 withGivenIp:(id)arg2;
- (void)didFinishParsingHostname:(id)arg0 withParesedAddresses:(id)arg1 error:(id)arg2;
- (id)optimumNodeInfo;
- (id)tvl_IPAddressesForOptimumNode:(id)arg0;
- (void)cacheOfHost:(id)arg0 isHitted:(BOOL)arg1;
- (void)setPlayerDebugState:(long long)arg0;
- (void)resetControllerStates;
- (void)setHasShowedFirstFrame:(BOOL)arg0;
- (void)reportToApplication:(id)arg0;
- (void)reportErrorToDebug:(id)arg0;
- (id)tvl_replaceHostnameOfPlayURL:(id)arg0 withParsedHostname:(id)arg1 parsedIPAddress:(id)arg2;
- (void)setAvailableParsedIPAddresses:(id)arg0;
- (void)tvl_prepareToPlayURL:(id)arg0 withOptions:(id)arg1 withGivenIp:(id)arg2;
- (id)parameterizedPlayURLWithURLAbsoluteString:(id)arg0;
- (void)updatePlayeyWithDecryptedKey;
- (long long)frameDroppingTerminatedDTS;
- (id)generateRtsUrl:(id)arg0;
- (id)prepareLiveIOPlayUrl:(id)arg0 withOptions:(id)arg1 withGivenIp:(id)arg2;
- (void)tryNextURLWithError:(id)arg0;
- (double)retryMaximumDuration;
- (void)retryWithResetPlayerWithReason:(long long)arg0 timeInterval:(double)arg1 maximumTimes:(long long)arg2 maximumDuration:(double)arg3;
- (BOOL)shouldRetryWithReason:(long long)arg0 times:(long long)arg1 duration:(double)arg2;
- (BOOL)hasCallStop;
- (void)retryWithResetPlayer;
- (BOOL)hasShowedFirstFrame;
- (id)parsedHostname;
- (void)retryAvailableParsedUrl:(id)arg0 withGivenIp:(id)arg1;
- (BOOL)hasTriedOriginalURL;
- (void)retryOriginalUrl;
- (double)retryTimeIntervalInStall;
- (long long)retryMaximumTimesInStall;
- (BOOL)shouldCacheUrlIPAddressAfterStartRender;
- (id)tvl_evaluatorSymbolForOptimumNode:(id)arg0;
- (id)tvl_IPAddressForOptimumNode:(id)arg0;
- (void)refetchLiveInfo;
- (id)hostIpList;
- (void)setHostIpList:(id)arg0;
- (id)extraRequestHeaderByUser;
- (void)setShouldTryCachedAddresses:(BOOL)arg0;
- (void)setShouldCacheUrlIPAddressAfterStartRender:(BOOL)arg0;
- (BOOL)isCacheHitted;
- (BOOL)callPlay;
- (void)setCallPlay:(BOOL)arg0;
- (BOOL)callPrepare;
- (void)setCallPrepare:(BOOL)arg0;
- (void)setHasCallStop:(BOOL)arg0;
- (id)tvl_hook_tvl_replaceHostnameOfPlayURL:(id)arg0 withParsedHostname:(id)arg1 parsedIPAddress:(id)arg2;
- (void)tvl_hook_startRender;
- (void)tvl_hook_retryWithResetPlayer;
- (void)tvl_hook_updateOptimumNodeInfo;
- (void)tvl_hook_cacheOfHost:(id)arg0 isHitted:(BOOL)arg1;
- (void)tvl_hook_player:(id)arg0 didStartStallingWithReason:(long long)arg1;
- (void)tvl_hook_playerDidStopStalling:(id)arg0;
- (void)tvl_hook_tvl_prepareToPlayURL:(id)arg0 withOptions:(id)arg1 withGivenIp:(id)arg2;
- (void)configAutoTestScript;
- (void)tvl_hook_retryAvailableParsedUrl:(id)arg0 withGivenIp:(id)arg1;
- (void)tvl_hook_retryOriginalUrl;
- (void)parser:(id)arg0 didCancelParsingHostname:(id)arg1;
- (BOOL)shouldTryCachedAddresses;
- (void)parser:(id)arg0 didFinishParsingHostname:(id)arg1 withParesedAddresses:(id)arg2 error:(id)arg3;
- (void)setFrameDroppingTerminatedDTS:(long long)arg0;
- (id)retryer;
- (void)setExtraRequestHeaderByUser:(id)arg0;
- (BOOL)isControllerOfPlayer:(id)arg0;
- (void)notifyStopToLiveIo;
- (void)setRetryer:(id)arg0;
- (double)retryTimeIntervalInError;
- (BOOL)shouldStopRetry;
- (void)setShouldStopRetry:(BOOL)arg0;
- (long long)playerDebugState;
- (void)setPreferredToHTTPDNS:(BOOL)arg0;
- (BOOL)isPreferredToHTTPDNS;
- (void)setRetryMaximumDuration:(double)arg0;
- (void)setRetryTimeIntervalInError:(double)arg0;
- (void)setRetryTimeIntervalInStall:(double)arg0;
- (void)setRetryMaximumTimesInStall:(long long)arg0;
- (void)initLutFilterWhenNeeded;
- (BOOL)shouldTryAllResolvedIPAddresses;
- (void)setShouldTryAllResolvedIPAddresses:(BOOL)arg0;
- (id)ipMappingTable;
- (void)setIpMappingTable:(id)arg0;
- (void)player:(id)arg0 videoSizeDidChange:(struct CGSize { double x0; double x1; })arg1;
- (void)onReceiveSeiMessage:(id)arg0;
- (void)handleRenderStall:(id)arg0;
- (void)startAudioRender;
- (void)startVideoRender;
- (void)onReadyToPlay:(id)arg0 videoCodecID:(int)arg1 audioCodecID:(int)arg2;
- (void)player:(id)arg0 playerItemStatusDidChange:(long long)arg1;
- (void)player:(id)arg0 didStartStallingWithReason:(long long)arg1;
- (void)playerDidStopStalling:(id)arg0;
- (void)setLevel:(id)arg0;
- (id)videoFormat;
- (void)updateProgress;
- (void)handleError:(id)arg0;
- (id)parser;
- (void)setCurrentItem:(id)arg0;
- (void)resume;
- (id)level;
- (void).cxx_destruct;
- (void)setMuted:(BOOL)arg0;
- (void)close;
- (void)stop;
- (id)currentItem;
- (void)setPlayer:(id)arg0;
- (void)close:(BOOL)arg0;
- (id)delegate;
- (void)prepare;
- (BOOL)isPlaying;
- (id)playerView;
- (void)setDelegate:(id)arg0;
- (BOOL)isPrepared;
- (void)play;
- (void)pause;
- (void)reset;
- (BOOL)isMuted;
- (void)setValue:(int)arg0 forKey:(int)arg1;
- (id)player;
- (int)getCurrentTime;
- (void)setParser:(id)arg0;
- (void)setVideoFormat:(id)arg0;
- (void)prepareToPlay:(id)arg0;
- (void)resetPlayer;
- (void)setIsPrepared:(BOOL)arg0;
- (id)initWithPlayerType:(unsigned long long)arg0;
- (void)takeScreenShot:(id /* block */)arg0;
- (id)getIPAddress;

@end
