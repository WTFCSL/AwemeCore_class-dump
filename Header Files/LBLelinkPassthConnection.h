//
//     Generated by private class-dump
//

@class NSString, LBLelinkPassthPositiveSocket, LBLelinkPassthReverseSocket, LBInnerLelinkDeviceModel;
@protocol LBLelinkPassthConnectionDelegate;

@interface LBLelinkPassthConnection : NSObject <LBLelinkPassthPositiveSocketDelegate, LBLelinkPassthReverseSocketDelegate, LBLelinkPassthReverseSocketControlDelegate> {
    BOOL _connected;
    LBInnerLelinkDeviceModel *_deviceModel;
    LBLelinkPassthPositiveSocket *_passthPositiveSocket;
    LBLelinkPassthReverseSocket *_passthReverseSocket;
    id<LBLelinkPassthConnectionDelegate> _delegate;
    NSString *_sessionId;
    NSString *_tid;
    NSString *_sm;
}

@property (nonatomic, getter=isConnected) BOOL connected;
@property (copy, nonatomic) NSString *sm;
@property (retain, nonatomic) LBInnerLelinkDeviceModel *deviceModel;
@property (retain, nonatomic) LBLelinkPassthPositiveSocket *passthPositiveSocket;
@property (retain, nonatomic) LBLelinkPassthReverseSocket *passthReverseSocket;
@property (weak, nonatomic) id<LBLelinkPassthConnectionDelegate> delegate;
@property (copy, nonatomic) NSString *sessionId;
@property (copy, nonatomic) NSString *tid;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (void)setTid:(id)arg0;
- (void)disConnect;
- (id)initWithDeviceModel:(id)arg0 delegate:(id)arg1;
- (void)connectWithInnerLelinkDeviceModel:(id)arg0;
- (id)sm;
- (void)passthRightsQuery;
- (void)passthJournalFileWithEid:(id)arg0 euqid:(id)arg1 et:(id)arg2;
- (void)passthPerformedMirrorActionType:(long long)arg0;
- (void)passthEventReverseControl;
- (void)passthListenRemoteControlSwitch:(BOOL)arg0;
- (void)passthMicroAppPlugAppId:(id)arg0 type:(long long)arg1 pluginUrl:(id)arg2 pluginproof:(id)arg3 loginInfo:(id)arg4;
- (void)passthMicroAppMessageWithAppId:(id)arg0 type:(long long)arg1 content:(id)arg2;
- (void)passthMicroAppCloseWithType:(long long)arg0;
- (void)passthSwitchTemporaryPrivateMode:(BOOL)arg0;
- (void)passthWaterRabbitUseDataDic:(id)arg0;
- (void)passthSendContorMessageWithContorType:(long long)arg0 contorCommands:(id)arg1;
- (void)passthQueryMirrorAndPushPortSet;
- (void)lelinkBaseSocketDisconnect:(id)arg0;
- (void)setSm:(id)arg0;
- (void)lelinkBaseSocket:(id)arg0 connectSucceedToHost:(id)arg1 port:(unsigned short)arg2;
- (void)lelinkBaseSocket:(id)arg0 onError:(id)arg1;
- (void)lelinkBaseSocketVerifySecondReply:(id)arg0;
- (void)lelinkBaseSocketDisconnect:(id)arg0 error:(id)arg1;
- (id)passthPositiveSocket;
- (id)passthReverseSocket;
- (void)lelinkPassthConnectionErrorWithReport:(id)arg0 et:(id)arg1;
- (void)lelinkPassthWaterRabbitSocket:(id)arg0 body:(id)arg1;
- (void)lelinkPassthReverseSocket:(id)arg0 collectServiceBodyDic:(id)arg1;
- (void)lelinkPassthReverseSocket:(id)arg0 cloudFunctionBodyDic:(id)arg1;
- (void)passthFavorityServiceWithName:(id)arg0;
- (void)lelinkPassthConnectionErrorWithUpload:(id)arg0 et:(id)arg1;
- (void)setPassthPositiveSocket:(id)arg0;
- (void)setPassthReverseSocket:(id)arg0;
- (void)lelinkPassthPositiveSocketConnectReply:(id)arg0;
- (void)passthCloudMirroRoomId:(id)arg0 type:(id)arg1;
- (void)lelinkPassthReverseSocketReverseReply:(id)arg0;
- (void)lelinkPassthReverseSocket:(id)arg0 decoderList:(id)arg1;
- (void)lelinkPassthReverseSocket:(id)arg0 rightsSynchronous:(id)arg1;
- (void)lelinkPassthReverseSocketConnect:(id)arg0 sm:(id)arg1;
- (void)lelinkPassthReverseSocket:(id)arg0 body:(id)arg1;
- (void)lelinkPassthReverseSocket:(id)arg0 mirrorActionTypeNumber:(id)arg1;
- (void)lelinkPassthReverseSocket:(id)arg0 eventReverseControlBodyDic:(id)arg1;
- (void)lelinkPassthReverseSocket:(id)arg0 remoteControlEventDic:(id)arg1;
- (void)lelinkPassthReverseSocket:(id)arg0 microAppMessageBodyDic:(id)arg1;
- (void)lelinkPassthReverseSocket:(id)arg0 microAppCloseDic:(id)arg1;
- (void)lelinkPassthReverseSocket:(id)arg0 queryMirrorAndPushReplySet:(id)arg1;
- (void)connect;
- (void)setDeviceModel:(id)arg0;
- (id)init;
- (void)setConnected:(BOOL)arg0;
- (void)setSessionId:(id)arg0;
- (void).cxx_destruct;
- (id)deviceModel;
- (id)sessionId;
- (BOOL)isConnected;
- (id)delegate;
- (void)setDelegate:(id)arg0;
- (void)dealloc;
- (id)tid;

@end
