//
//     Generated by private class-dump
//

@class NSString, TempoFlexLayoutProxy;
@protocol TempoFlexLayoutDataSource;

@interface TempoFlexLayout : NSObject {
    BOOL _isEnabled;
    BOOL _isIncludedInLayout;
    BOOL _sizeToFits;
    BOOL _adjustBaseline;
    struct YGNode { } *_node;
    NSString *_nodeID;
    id<TempoFlexLayoutDataSource> _dataSource;
    TempoFlexLayoutProxy *_layoutProxy;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _frame;
}

@property (readonly, nonatomic) struct YGNode { } *node;
@property (copy, nonatomic) NSString *nodeID;
@property (retain, nonatomic) TempoFlexLayoutProxy *layoutProxy;
@property (weak, nonatomic) id<TempoFlexLayoutDataSource> dataSource;
@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } frame;
@property (nonatomic, setter=setIncludedInLayout:) BOOL isIncludedInLayout;
@property (nonatomic, setter=setEnabled:) BOOL isEnabled;
@property (nonatomic) BOOL sizeToFits;
@property (nonatomic) BOOL adjustBaseline;
@property (nonatomic) int direction;
@property (nonatomic) int flexDirection;
@property (nonatomic) int justifyContent;
@property (nonatomic) int alignContent;
@property (nonatomic) int alignItems;
@property (nonatomic) int alignSelf;
@property (nonatomic) int position;
@property (nonatomic) int flexWrap;
@property (nonatomic) int overflow;
@property (nonatomic) int display;
@property (nonatomic) double flex;
@property (nonatomic) double flexGrow;
@property (nonatomic) double flexShrink;
@property (nonatomic) struct YGValue { float x0; int x1; } flexBasis;
@property (nonatomic) struct YGValue { float x0; int x1; } left;
@property (nonatomic) struct YGValue { float x0; int x1; } top;
@property (nonatomic) struct YGValue { float x0; int x1; } right;
@property (nonatomic) struct YGValue { float x0; int x1; } bottom;
@property (nonatomic) struct YGValue { float x0; int x1; } start;
@property (nonatomic) struct YGValue { float x0; int x1; } end;
@property (nonatomic) struct YGValue { float x0; int x1; } marginLeft;
@property (nonatomic) struct YGValue { float x0; int x1; } marginTop;
@property (nonatomic) struct YGValue { float x0; int x1; } marginRight;
@property (nonatomic) struct YGValue { float x0; int x1; } marginBottom;
@property (nonatomic) struct YGValue { float x0; int x1; } marginStart;
@property (nonatomic) struct YGValue { float x0; int x1; } marginEnd;
@property (nonatomic) struct YGValue { float x0; int x1; } marginHorizontal;
@property (nonatomic) struct YGValue { float x0; int x1; } marginVertical;
@property (nonatomic) struct YGValue { float x0; int x1; } margin;
@property (nonatomic) struct YGValue { float x0; int x1; } paddingLeft;
@property (nonatomic) struct YGValue { float x0; int x1; } paddingTop;
@property (nonatomic) struct YGValue { float x0; int x1; } paddingRight;
@property (nonatomic) struct YGValue { float x0; int x1; } paddingBottom;
@property (nonatomic) struct YGValue { float x0; int x1; } paddingStart;
@property (nonatomic) struct YGValue { float x0; int x1; } paddingEnd;
@property (nonatomic) struct YGValue { float x0; int x1; } paddingHorizontal;
@property (nonatomic) struct YGValue { float x0; int x1; } paddingVertical;
@property (nonatomic) struct YGValue { float x0; int x1; } padding;
@property (nonatomic) double borderLeftWidth;
@property (nonatomic) double borderTopWidth;
@property (nonatomic) double borderRightWidth;
@property (nonatomic) double borderBottomWidth;
@property (nonatomic) double borderStartWidth;
@property (nonatomic) double borderEndWidth;
@property (nonatomic) double borderWidth;
@property (nonatomic) struct YGValue { float x0; int x1; } width;
@property (nonatomic) struct YGValue { float x0; int x1; } height;
@property (nonatomic) struct YGValue { float x0; int x1; } minWidth;
@property (nonatomic) struct YGValue { float x0; int x1; } minHeight;
@property (nonatomic) struct YGValue { float x0; int x1; } maxWidth;
@property (nonatomic) struct YGValue { float x0; int x1; } maxHeight;
@property (nonatomic) double aspectRatio;
@property (readonly, nonatomic) int resolvedDirection;
@property (readonly, nonatomic) struct CGSize { double x0; double x1; } intrinsicSize;
@property (readonly, nonatomic) unsigned long long numberOfChildren;
@property (readonly, nonatomic) BOOL isLeaf;
@property (readonly, nonatomic) BOOL isDirty;

+ (void)initialize;

- (void)setAlignContent:(int)arg0;
- (void)setAlignSelf:(int)arg0;
- (void)setAlignItems:(int)arg0;
- (void)setJustifyContent:(int)arg0;
- (void)setFlexBasis:(struct YGValue { float x0; int x1; })arg0;
- (void)setFlexShrink:(double)arg0;
- (void)setFlexGrow:(double)arg0;
- (void)setFlexWrap:(int)arg0;
- (void)setFlex:(double)arg0;
- (void)setPaddingVertical:(struct YGValue { float x0; int x1; })arg0;
- (void)setPaddingHorizontal:(struct YGValue { float x0; int x1; })arg0;
- (void)setPaddingEnd:(struct YGValue { float x0; int x1; })arg0;
- (void)setPaddingStart:(struct YGValue { float x0; int x1; })arg0;
- (void)setMarginVertical:(struct YGValue { float x0; int x1; })arg0;
- (void)setMarginHorizontal:(struct YGValue { float x0; int x1; })arg0;
- (void)setMarginEnd:(struct YGValue { float x0; int x1; })arg0;
- (void)setMarginStart:(struct YGValue { float x0; int x1; })arg0;
- (id)initWithNodeID:(id)arg0;
- (void)applyLayoutPreservingOrigin:(BOOL)arg0 dimensionFlexibility:(long long)arg1;
- (void)setSizeToFits:(BOOL)arg0;
- (void)setFlexDirection:(int)arg0;
- (void)setAdjustBaseline:(BOOL)arg0;
- (int)flexDirection;
- (int)alignSelf;
- (double)flex;
- (double)flexShrink;
- (int)alignItems;
- (int)justifyContent;
- (double)flexGrow;
- (struct YGValue { float x0; int x1; })flexBasis;
- (int)flexWrap;
- (int)alignContent;
- (struct YGValue { float x0; int x1; })marginStart;
- (struct YGValue { float x0; int x1; })marginEnd;
- (struct YGValue { float x0; int x1; })paddingStart;
- (struct YGValue { float x0; int x1; })paddingEnd;
- (void)applyLayoutPreservingOrigin:(BOOL)arg0;
- (void)setIncludedInLayout:(BOOL)arg0;
- (struct YGValue { float x0; int x1; })marginHorizontal;
- (struct YGValue { float x0; int x1; })marginVertical;
- (BOOL)isIncludedInLayout;
- (struct CGSize { double x0; double x1; })calculateLayoutWithSize:(struct CGSize { double x0; double x1; })arg0;
- (void)setLayoutProxy:(id)arg0;
- (struct YGValue { float x0; int x1; })paddingHorizontal;
- (struct YGValue { float x0; int x1; })paddingVertical;
- (double)borderStartWidth;
- (void)setBorderStartWidth:(double)arg0;
- (double)borderEndWidth;
- (void)setBorderEndWidth:(double)arg0;
- (BOOL)sizeToFits;
- (BOOL)adjustBaseline;
- (id)layoutProxy;
- (void)setEnd:(struct YGValue { float x0; int x1; })arg0;
- (struct YGValue { float x0; int x1; })left;
- (void)setAspectRatio:(double)arg0;
- (struct YGValue { float x0; int x1; })end;
- (void)setDisplay:(int)arg0;
- (struct YGValue { float x0; int x1; })margin;
- (struct YGNode { } *)node;
- (void)setPadding:(struct YGValue { float x0; int x1; })arg0;
- (struct YGValue { float x0; int x1; })right;
- (BOOL)isDirty;
- (struct YGValue { float x0; int x1; })paddingLeft;
- (void)setDataSource:(id)arg0;
- (double)borderWidth;
- (void)applyLayout;
- (id)dataSource;
- (void)setStart:(struct YGValue { float x0; int x1; })arg0;
- (struct YGValue { float x0; int x1; })minWidth;
- (void).cxx_destruct;
- (struct YGValue { float x0; int x1; })paddingTop;
- (void)setMaxWidth:(struct YGValue { float x0; int x1; })arg0;
- (struct YGValue { float x0; int x1; })height;
- (void)setPaddingRight:(struct YGValue { float x0; int x1; })arg0;
- (void)setPaddingBottom:(struct YGValue { float x0; int x1; })arg0;
- (int)position;
- (int)direction;
- (void)setPosition:(int)arg0;
- (BOOL)isEnabled;
- (void)setMinHeight:(struct YGValue { float x0; int x1; })arg0;
- (void)setPaddingTop:(struct YGValue { float x0; int x1; })arg0;
- (struct YGValue { float x0; int x1; })paddingBottom;
- (struct YGValue { float x0; int x1; })maxWidth;
- (void)setPaddingLeft:(struct YGValue { float x0; int x1; })arg0;
- (void)setBorderWidth:(double)arg0;
- (struct YGValue { float x0; int x1; })paddingRight;
- (double)aspectRatio;
- (void)setMaxHeight:(struct YGValue { float x0; int x1; })arg0;
- (void)setTop:(struct YGValue { float x0; int x1; })arg0;
- (struct YGValue { float x0; int x1; })top;
- (void)setMargin:(struct YGValue { float x0; int x1; })arg0;
- (int)resolvedDirection;
- (void)setBottom:(struct YGValue { float x0; int x1; })arg0;
- (void)setWidth:(struct YGValue { float x0; int x1; })arg0;
- (void)setMinWidth:(struct YGValue { float x0; int x1; })arg0;
- (void)setEnabled:(BOOL)arg0;
- (struct YGValue { float x0; int x1; })padding;
- (void)setFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0;
- (struct YGValue { float x0; int x1; })maxHeight;
- (struct YGValue { float x0; int x1; })start;
- (void)setHeight:(struct YGValue { float x0; int x1; })arg0;
- (id)nodeID;
- (void)dealloc;
- (struct YGValue { float x0; int x1; })width;
- (int)display;
- (struct YGValue { float x0; int x1; })bottom;
- (void)setDirection:(int)arg0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame;
- (struct YGValue { float x0; int x1; })minHeight;
- (struct YGValue { float x0; int x1; })marginTop;
- (void)setMarginTop:(struct YGValue { float x0; int x1; })arg0;
- (void)setLeft:(struct YGValue { float x0; int x1; })arg0;
- (struct CGSize { double x0; double x1; })intrinsicSize;
- (unsigned long long)numberOfChildren;
- (void)setNodeID:(id)arg0;
- (BOOL)isLeaf;
- (void)markDirty;
- (void)setRight:(struct YGValue { float x0; int x1; })arg0;
- (double)borderTopWidth;
- (void)setBorderTopWidth:(double)arg0;
- (double)borderRightWidth;
- (void)setBorderRightWidth:(double)arg0;
- (double)borderBottomWidth;
- (void)setBorderBottomWidth:(double)arg0;
- (double)borderLeftWidth;
- (void)setBorderLeftWidth:(double)arg0;
- (struct YGValue { float x0; int x1; })marginRight;
- (void)setMarginRight:(struct YGValue { float x0; int x1; })arg0;
- (struct YGValue { float x0; int x1; })marginBottom;
- (void)setMarginBottom:(struct YGValue { float x0; int x1; })arg0;
- (struct YGValue { float x0; int x1; })marginLeft;
- (void)setMarginLeft:(struct YGValue { float x0; int x1; })arg0;
- (int)overflow;
- (void)setOverflow:(int)arg0;

@end
