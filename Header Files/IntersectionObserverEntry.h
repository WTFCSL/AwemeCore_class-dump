//
//     Generated by private class-dump
//

@class NSString;

@interface IntersectionObserverEntry : NSObject {
    BOOL _isIntersecting;
    float _intersectionRatio;
    double _time;
    NSString *_relativeToId;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _relativeRect;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _boundingClientRect;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _intersectionRect;
}

@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } relativeRect;
@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } boundingClientRect;
@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } intersectionRect;
@property (nonatomic) float intersectionRatio;
@property (nonatomic) BOOL isIntersecting;
@property (nonatomic) double time;
@property (nonatomic) NSString *relativeToId;

- (id)rectToDictionary:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })boundingClientRect;
- (void)setBoundingClientRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0;
- (float)intersectionRatio;
- (void)setIntersectionRatio:(float)arg0;
- (BOOL)isIntersecting;
- (void)setIsIntersecting:(BOOL)arg0;
- (id)relativeToId;
- (void)setRelativeToId:(id)arg0;
- (double)time;
- (void)setTime:(double)arg0;
- (id)toDictionary;
- (void)update;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })relativeRect;
- (void)setRelativeRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0;
- (void)setIntersectionRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })intersectionRect;

@end
