//
//     Generated by private class-dump
//

@class UIColor, NSString, UIFont, NSRegularExpression, NSMutableArray, YYTextBorder;

@interface YYTextSimpleMarkdownParser : NSObject <YYTextParser> {
    UIFont *_font;
    NSMutableArray *_headerFonts;
    UIFont *_boldFont;
    UIFont *_italicFont;
    UIFont *_boldItalicFont;
    UIFont *_monospaceFont;
    YYTextBorder *_border;
    NSRegularExpression *_regexEscape;
    NSRegularExpression *_regexHeader;
    NSRegularExpression *_regexH1;
    NSRegularExpression *_regexH2;
    NSRegularExpression *_regexBreakline;
    NSRegularExpression *_regexEmphasis;
    NSRegularExpression *_regexStrong;
    NSRegularExpression *_regexStrongEmphasis;
    NSRegularExpression *_regexUnderline;
    NSRegularExpression *_regexStrikethrough;
    NSRegularExpression *_regexInlineCode;
    NSRegularExpression *_regexLink;
    NSRegularExpression *_regexLinkRefer;
    NSRegularExpression *_regexList;
    NSRegularExpression *_regexBlockQuote;
    NSRegularExpression *_regexCodeBlock;
    NSRegularExpression *_regexNotEmptyLine;
    double _fontSize;
    double _headerFontSize;
    UIColor *_textColor;
    UIColor *_controlTextColor;
    UIColor *_headerTextColor;
    UIColor *_inlineTextColor;
    UIColor *_codeTextColor;
    UIColor *_linkTextColor;
}

@property (nonatomic) double fontSize;
@property (nonatomic) double headerFontSize;
@property (retain, nonatomic) UIColor *textColor;
@property (retain, nonatomic) UIColor *controlTextColor;
@property (retain, nonatomic) UIColor *headerTextColor;
@property (retain, nonatomic) UIColor *inlineTextColor;
@property (retain, nonatomic) UIColor *codeTextColor;
@property (retain, nonatomic) UIColor *linkTextColor;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (void)setColorWithBrightTheme;
- (unsigned long long)lenghOfBeginWhiteInString:(id)arg0 withRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })arg1;
- (unsigned long long)lenghOfBeginChar:(unsigned short)arg0 inString:(id)arg1 withRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })arg2;
- (unsigned long long)lenghOfEndWhiteInString:(id)arg0 withRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })arg1;
- (BOOL)parseText:(id)arg0 selectedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)arg1;
- (void)setColorWithDarkTheme;
- (id)controlTextColor;
- (void)setControlTextColor:(id)arg0;
- (id)inlineTextColor;
- (void)setInlineTextColor:(id)arg0;
- (id)codeTextColor;
- (void)setCodeTextColor:(id)arg0;
- (id)init;
- (void).cxx_destruct;
- (void)setFontSize:(double)arg0;
- (double)fontSize;
- (void)setTextColor:(id)arg0;
- (void)_updateFonts;
- (id)textColor;
- (void)setHeaderTextColor:(id)arg0;
- (id)headerTextColor;
- (void)setHeaderFontSize:(double)arg0;
- (double)headerFontSize;
- (id)linkTextColor;
- (void)setLinkTextColor:(id)arg0;
- (void)initRegex;

@end
