//
//     Generated by private class-dump
//

@interface IESECWebImageUtils : NSObject

+ (id)filterSafeURLs:(id)arg0;
+ (id)safeURL:(id)arg0;
+ (id)getBizTagWithURL:(id)arg0;
+ (BOOL)enableRequestPerformance;
+ (id)findImageTemplateForUrl:(id)arg0;
+ (BOOL)enableRemakeTemplate;
+ (id)findServiceForUrl:(id)arg0;
+ (id)getSceneTagWithURL:(id)arg0;
+ (id)remakeTemplateForImageUrlArray:(id)arg0 bizTag:(id)arg1 sceneTag:(id)arg2 preferredSize:(struct CGSize { double x0; double x1; })arg3 isPreview:(BOOL)arg4;
+ (BOOL)enablePreloadAllFrame;
+ (id)optimizeConfigValueForKey:(id)arg0;
+ (BOOL)optimizeConfigBoolValueForKey:(id)arg0;
+ (id)templateWidthOptions;
+ (long long)optimizePreferredSizeOffset;
+ (BOOL)useSystemPreferredSizeScale;
+ (BOOL)enableUrlRemakeCache;
+ (id)getUrlQueryItem:(id)arg0 url:(id)arg1;
+ (id)safeURLStr:(id)arg0;
+ (unsigned long long)imageTemplateLocationForUrl:(id)arg0;
+ (BOOL)enableEcomTemplateForUrl:(id)arg0;
+ (id)identifierForImageUrl:(id)arg0 bizTag:(id)arg1 sceneTag:(id)arg2 preferredSize:(struct CGSize { double x0; double x1; })arg3;
+ (id)remakeImageUrl:(id)arg0 templateRule:(id)arg1 preferredSize:(struct CGSize { double x0; double x1; })arg2;
+ (struct { long long x0; long long x1; })optimizePreferredSize:(struct CGSize { double x0; double x1; })arg0;
+ (id)p_matchString:(id)arg0 pattern:(id)arg1;
+ (id)p_subString:(id)arg0 range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })arg1;
+ (id)p_createTemplateStr:(id)arg0 templateFormat:(id)arg1 preferredSize:(struct CGSize { double x0; double x1; })arg2;
+ (struct { long long x0; long long x1; })optimizePreferredSize:(struct CGSize { double x0; double x1; })arg0 templateFormat:(id)arg1 scale:(double)arg2;
+ (BOOL)containImageTemplateForUrl:(id)arg0;
+ (id)errorWithDomain:(id)arg0 code:(long long)arg1 description:(id)arg2;

@end
