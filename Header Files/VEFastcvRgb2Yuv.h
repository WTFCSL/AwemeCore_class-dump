//
//     Generated by private class-dump
//

@interface VEFastcvRgb2Yuv : NSObject {
    struct UMat { struct GPUContext *x0; int x1; int x2; int x3; int x4; int x5; BOOL x6; struct MatStep { unsigned long long *x0; unsigned long long x1[2]; } x7; int x8; void *x9; } *_tmpContextMat;
    struct GPUContext { void *x0; void *x1; void *x2; int x3; struct OpSupportBits { unsigned int x0; unsigned long long x1; void *x2; } x4; BOOL x5; char *x6; void *x7; } *_gpuContext;
    int _pixelBufferPoolWidth;
    int _pixelBufferPoolHeight;
    unsigned int _pixelBufferPoolPixelFormat;
    struct __CVPixelBufferPool { } *_pixelBufferPool;
}

@property (nonatomic) struct __CVPixelBufferPool { } *pixelBufferPool;
@property (nonatomic) int pixelBufferPoolWidth;
@property (nonatomic) int pixelBufferPoolHeight;
@property (nonatomic) unsigned int pixelBufferPoolPixelFormat;

- (struct __CVBuffer { } *)cropPixelBuffer:(struct __CVBuffer { } *)arg0 rect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg1 onGpu:(BOOL)arg2;
- (struct __CVBuffer { } *)cropAndScalePixelBuffer:(struct __CVBuffer { } *)arg0 destSize:(struct CGSize { double x0; double x1; })arg1;
- (struct __CVBuffer { } *)genYuvPixelBuffer:(unsigned long long)arg0 frameHeight:(unsigned long long)arg1 pixelFormat:(unsigned int)arg2;
- (void)cvt_fastcv_8bit:(struct __CVBuffer { } *)arg0 yuv8biPixelBuffer:(struct __CVBuffer { } *)arg1 gpuContext:(struct GPUContext { void *x0; void *x1; void *x2; int x3; struct OpSupportBits { unsigned int x0; unsigned long long x1; void *x2; } x4; BOOL x5; char *x6; void *x7; } *)arg2 transColorSpace:(int)arg3;
- (void)cvt_fastcv_10bit:(struct __CVBuffer { } *)arg0 yuv10biPixelBuffer:(struct __CVBuffer { } *)arg1 gpuContext:(struct GPUContext { void *x0; void *x1; void *x2; int x3; struct OpSupportBits { unsigned int x0; unsigned long long x1; void *x2; } x4; BOOL x5; char *x6; void *x7; } *)arg2 transColorSpace:(int)arg3;
- (struct __CVBuffer { } *)convert10BitRGBA2YUVFastCV:(struct __CVBuffer { } *)arg0 transColorSpace:(int)arg1;
- (struct __CVBuffer { } *)convert8BitRGBA2YUVFastCV:(struct __CVBuffer { } *)arg0 transColorSpace:(int)arg1;
- (struct __CVBuffer { } *)convertRGBA2BGRAFastCV:(struct __CVBuffer { } *)arg0;
- (void)crop_fastcv:(struct __CVBuffer { } *)arg0 pixelBuffer:(struct __CVBuffer { } *)arg1 gpuContext:(struct GPUContext { void *x0; void *x1; void *x2; int x3; struct OpSupportBits { unsigned int x0; unsigned long long x1; void *x2; } x4; BOOL x5; char *x6; void *x7; } *)arg2 isRGBA:(BOOL)arg3 crop:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg4;
- (void)crop_fastcv:(struct __CVBuffer { } *)arg0 pixelBuffer:(struct __CVBuffer { } *)arg1 isRGBA:(BOOL)arg2 crop:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg3;
- (void)cropAndScale_fastcv:(struct __CVBuffer { } *)arg0 pixelBuffer:(struct __CVBuffer { } *)arg1 gpuContext:(struct GPUContext { void *x0; void *x1; void *x2; int x3; struct OpSupportBits { unsigned int x0; unsigned long long x1; void *x2; } x4; BOOL x5; char *x6; void *x7; } *)arg2 isRGBA:(BOOL)arg3;
- (struct __CVBuffer { } *)convertRGBA2YUVFastCV:(struct __CVBuffer { } *)arg0;
- (struct __CVBuffer { } *)convertBGRA2RGBAFastCV:(struct __CVBuffer { } *)arg0;
- (void)downsampleCVPixelBuffer:(struct __CVBuffer { } *)arg0 targetbuffer:(struct __CVBuffer { } *)arg1 resizetype:(int)arg2;
- (unsigned int)pixelBufferPoolPixelFormat;
- (void)setPixelBufferPoolPixelFormat:(unsigned int)arg0;
- (struct __CFDictionary { } *)buffer_attributes_create:(int)arg0 height:(int)arg1 pix_fmt:(unsigned int)arg2;
- (int)pixelBufferPoolWidth;
- (void)setPixelBufferPoolWidth:(int)arg0;
- (int)pixelBufferPoolHeight;
- (void)setPixelBufferPoolHeight:(int)arg0;
- (struct __CVBuffer { } *)convertRGBA2YUVFastCV:(struct __CVBuffer { } *)arg0 transColorSpace:(int)arg1;
- (id)init;
- (struct __CVPixelBufferPool { } *)pixelBufferPool;
- (void)dealloc;
- (void)setPixelBufferPool:(struct __CVPixelBufferPool { } *)arg0;

@end
