//
//     Generated by private class-dump
//

@class NSDictionary;

@interface IESLivePKFrequencyControlManager : NSObject {
    BOOL _disableFrequencyControl;
    double _startPKControlIntervalForStartTooMuch;
    long long _initiativeEndPKTimesLimit;
    double _startPKControlIntervalForEndTooMuch;
    double _continuousRefusedLimitInterval;
    long long _refusedPKTimesLimit;
    double _startPKControlIntervalForRefusedTooMuch;
}

@property (nonatomic) BOOL disableFrequencyControl;
@property (nonatomic) double lastStartPKTime;
@property (nonatomic) long long initiativeEndPKTimes;
@property (copy, nonatomic) NSDictionary *refusedDic;
@property (nonatomic) double startPKControlIntervalForStartTooMuch;
@property (nonatomic) long long initiativeEndPKTimesLimit;
@property (nonatomic) double startPKControlIntervalForEndTooMuch;
@property (nonatomic) double continuousRefusedLimitInterval;
@property (nonatomic) long long refusedPKTimesLimit;
@property (nonatomic) double startPKControlIntervalForRefusedTooMuch;

+ (id)managerWithDiContext:(id)arg0;

- (BOOL)controlStartPKWithInvitedUID:(id)arg0 successHanlder:(id /* block */)arg1;
- (void)countBehaviorForBad:(unsigned long long)arg0;
- (BOOL)controlShowTipForPKState:(long long)arg0;
- (void)countBehaviorForGood:(unsigned long long)arg0;
- (void)setLastStartPKTime:(double)arg0;
- (void)setStartPKControlIntervalForStartTooMuch:(double)arg0;
- (void)setInitiativeEndPKTimesLimit:(long long)arg0;
- (void)setStartPKControlIntervalForEndTooMuch:(double)arg0;
- (void)setRefusedPKTimesLimit:(long long)arg0;
- (void)setStartPKControlIntervalForRefusedTooMuch:(double)arg0;
- (void)setContinuousRefusedLimitInterval:(double)arg0;
- (void)setDisableFrequencyControl:(BOOL)arg0;
- (void)setInitiativeEndPKTimes:(long long)arg0;
- (id)refusedDic;
- (void)setRefusedDic:(id)arg0;
- (long long)initiativeEndPKTimes;
- (BOOL)disableFrequencyControl;
- (double)lastStartPKTime;
- (double)startPKControlIntervalForStartTooMuch;
- (long long)initiativeEndPKTimesLimit;
- (double)startPKControlIntervalForEndTooMuch;
- (double)startPKControlIntervalForRefusedTooMuch;
- (void)p_controlRefusedTooMuch:(id)arg0;
- (void)p_resetRefusedTooMuch:(id)arg0;
- (long long)refusedPKTimesLimit;
- (double)continuousRefusedLimitInterval;
- (id)init;

@end
