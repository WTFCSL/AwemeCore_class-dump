//
//     Generated by private class-dump
//

@class HybridWebKitParams, NSString, UIView, HybridContext, NSDictionary, HybridWebFalconMonitorInterceptor, HybridWebViewLifeCycleDispatcher, UIProgressView, HybridObserver;
@protocol HybridRuntimeProtocol, HybridJSBServiceProtocol, HybridWebKitSCCServiceProtocol, HybridKitViewLifecycleProtocol;

@interface HybridIESWebView : IESWKWebView <WKNavigationDelegate, IESWebViewCommonDelegate, HybridWebViewProtocol> {
    HybridObserver<HybridKitViewLifecycleProtocol> *_lifeCycleObservers;
    BOOL isCached;
    BOOL isReused;
    BOOL isPrecreated;
    BOOL _ignoreCachePolicy;
    BOOL _disableBounces;
    BOOL _disableAllBounces;
    BOOL _disableAllLocations;
    BOOL _useSystemUA;
    BOOL _showProgressBar;
    BOOL _useWebviewTitle;
    BOOL _showWebViewURL;
    BOOL _didReportFirstScreen;
    BOOL _isPerformLoadRequest;
    id<HybridKitViewLifecycleProtocol> _lifecycleDelegate;
    unsigned long long loadState;
    id<HybridJSBServiceProtocol> bridgeService;
    id<HybridRuntimeProtocol> runtime;
    id<HybridWebKitSCCServiceProtocol> sccService;
    NSString *_requestURL;
    double _containerInitCost;
    double _resourceLoadInitTime;
    NSDictionary *_templateResData;
    id _reporter;
    NSString *_enterFrom;
    NSString *_reactID;
    NSDictionary *_routeParamDict;
    HybridWebKitParams *_params;
    NSString *_staticTitle;
    UIProgressView *_progressView;
    HybridWebFalconMonitorInterceptor *_falconMonitor;
    HybridWebViewLifeCycleDispatcher *_lifeCycleDispatcher;
    NSString *_webUUID;
}

@property (retain, nonatomic) id reporter;
@property (copy, nonatomic) NSString *enterFrom;
@property (nonatomic) BOOL ignoreCachePolicy;
@property (nonatomic) BOOL disableBounces;
@property (nonatomic) BOOL disableAllBounces;
@property (nonatomic) BOOL disableAllLocations;
@property (nonatomic) BOOL useSystemUA;
@property (copy, nonatomic) NSString *reactID;
@property (nonatomic) BOOL showProgressBar;
@property (retain, nonatomic) NSDictionary *routeParamDict;
@property (retain, nonatomic) HybridWebKitParams *params;
@property (nonatomic) BOOL useWebviewTitle;
@property (nonatomic) BOOL showWebViewURL;
@property (copy, nonatomic) NSString *staticTitle;
@property (nonatomic) BOOL didReportFirstScreen;
@property (retain, nonatomic) UIProgressView *progressView;
@property (retain, nonatomic) HybridWebFalconMonitorInterceptor *falconMonitor;
@property (retain, nonatomic) HybridWebViewLifeCycleDispatcher *lifeCycleDispatcher;
@property (retain, nonatomic) NSString *webUUID;
@property (nonatomic) BOOL isPerformLoadRequest;
@property (copy, nonatomic) NSString *requestURL;
@property (nonatomic) double containerInitCost;
@property (nonatomic) double resourceLoadInitTime;
@property (retain, nonatomic) NSDictionary *templateResData;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (retain, nonatomic) id<HybridRuntimeProtocol> runtime;
@property (retain, nonatomic) id<HybridWebKitSCCServiceProtocol> sccService;
@property (readonly, copy, nonatomic) NSString *containerID;
@property (readonly, nonatomic) UIView *rawView;
@property (readonly, nonatomic) id kitBridge;
@property (weak, nonatomic) id<HybridKitViewLifecycleProtocol> lifecycleDelegate;
@property (readonly, nonatomic) HybridObserver<HybridKitViewLifecycleProtocol> *lifeCycleObservers;
@property (nonatomic) unsigned long long loadState;
@property (nonatomic) BOOL isCached;
@property (nonatomic) BOOL isReused;
@property (nonatomic) BOOL isPrecreated;
@property (retain, nonatomic) id<HybridJSBServiceProtocol> bridgeService;
@property (nonatomic) double estimatedProgress;
@property (readonly, nonatomic) HybridContext *context;

+ (void)registerCustomUserAgentOnce;

- (void)setEnterFrom:(id)arg0;
- (id)enterFrom;
- (void)setupMonitor;
- (void)registerXBridgeMethod:(id)arg0;
- (void)sendEvent:(id)arg0 params:(id)arg1;
- (id)reactID;
- (void)setReactID:(id)arg0;
- (id)rawView;
- (id)lifecycleDelegate;
- (void)setLifecycleDelegate:(id)arg0;
- (void)sendEvent:(id)arg0 params:(id)arg1 callback:(id /* block */)arg2;
- (void)onShow:(id)arg0;
- (void)onHide:(id)arg0;
- (id)globalProps;
- (void)configWithParams:(id)arg0;
- (void)registerXBridgeMethodInstance:(id)arg0;
- (void)configGlobalProps:(id)arg0;
- (void)setupBridge;
- (void)setupNotification;
- (void)registerUserAgent:(id /* block */)arg0;
- (BOOL)disableAllBounces;
- (void)setDisableAllBounces:(BOOL)arg0;
- (id)ies_namespace;
- (void)updateGlobalProps:(id)arg0;
- (void)reloadWithParams:(id)arg0;
- (id)kitBridge;
- (void)pauseAudioAndVideoPlay;
- (void)handleBroadcastNotification:(id)arg0;
- (void)setIgnoreCachePolicy:(BOOL)arg0;
- (void)setDisableBounces:(BOOL)arg0;
- (void)setupProgressView;
- (void)setupFalcon;
- (void)setLifeCycleDispatcher:(id)arg0;
- (id)lifeCycleDispatcher;
- (BOOL)disableBounces;
- (void)trackHybridWithTrigger:(id)arg0;
- (BOOL)disableAllLocations;
- (void)didRedirect;
- (void)setDisableAllLocations:(BOOL)arg0;
- (void)setUseSystemUA:(BOOL)arg0;
- (void)setRouteParamDict:(id)arg0;
- (void)notifyWebViewEvent:(id)arg0;
- (void)didReceiveShareRefreshNotification:(id)arg0;
- (void)webViewWillDisappear:(id)arg0;
- (BOOL)ignoreCachePolicy;
- (BOOL)useSystemUA;
- (id)routeParamDict;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0 configuration:(id)arg1 bridgeClass:(Class)arg2;
- (void)configWebView;
- (void)setupPrefetch;
- (void)setupLifeCycle;
- (id)falconMonitor;
- (void)setFalconMonitor:(id)arg0;
- (BOOL)didReportFirstScreen;
- (void)setDidReportFirstScreen:(BOOL)arg0;
- (id)lifeCycleObservers;
- (void)didTakeFromPrerenderCacheWithContext:(id)arg0;
- (BOOL)isPrecreated;
- (void)setIsPrecreated:(BOOL)arg0;
- (id)bridgeMethodInstanceWithName:(id)arg0;
- (void)superViewInDealloc;
- (id)bridgeService;
- (void)setBridgeService:(id)arg0;
- (BOOL)configWithURLParamDict:(id)arg0;
- (void)updateNavigationSubTitle;
- (void)setupSCCIfNeeded;
- (BOOL)useWebviewTitle;
- (BOOL)showWebViewURL;
- (id)webUUID;
- (void)setSccService:(id)arg0;
- (BOOL)isPerformLoadRequest;
- (void)setIsPerformLoadRequest:(BOOL)arg0;
- (void)setContainerInitCost:(double)arg0;
- (void)setResourceLoadInitTime:(double)arg0;
- (void)setTemplateResData:(id)arg0;
- (void)__disableBouncesForWebView:(id)arg0;
- (id)templateResData;
- (double)resourceLoadCost;
- (double)webViewContainerInitCost;
- (id)sccService;
- (double)containerInitCost;
- (double)resourceLoadInitTime;
- (void)__disableBouncesForSubView:(id)arg0;
- (BOOL)isMainFrame:(id)arg0;
- (void)setUseWebviewTitle:(BOOL)arg0;
- (void)setShowWebViewURL:(BOOL)arg0;
- (void)setWebUUID:(id)arg0;
- (void)removeFromSuperview;
- (void)addDelegate:(id)arg0;
- (id)webView;
- (void).cxx_destruct;
- (void)webView:(id)arg0 decidePolicyForNavigationAction:(id)arg1 decisionHandler:(id /* block */)arg2;
- (unsigned long long)loadState;
- (id)reporter;
- (void)load;
- (BOOL)gestureRecognizer:(id)arg0 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)arg1;
- (void)webView:(id)arg0 didReceiveServerRedirectForProvisionalNavigation:(id)arg1;
- (id)requestURL;
- (void)webView:(id)arg0 didCommitNavigation:(id)arg1;
- (id)progressView;
- (void)setProgressView:(id)arg0;
- (void)setReporter:(id)arg0;
- (id)context;
- (void)webView:(id)arg0 decidePolicyForNavigationResponse:(id)arg1 decisionHandler:(id /* block */)arg2;
- (void)setRequestURL:(id)arg0;
- (id)params;
- (void)dealloc;
- (id)progressTintColor;
- (void)webViewWebContentProcessDidTerminate:(id)arg0;
- (id)loadRequest:(id)arg0;
- (void)webView:(id)arg0 didFailLoadWithError:(id)arg1;
- (BOOL)webView:(id)arg0 shouldStartLoadWithRequest:(id)arg1 navigationType:(long long)arg2;
- (void)webViewDidStartLoad:(id)arg0;
- (void)webViewDidFinishLoad:(id)arg0;
- (BOOL)isCached;
- (void)setIsCached:(BOOL)arg0;
- (void)setParams:(id)arg0;
- (BOOL)showProgressBar;
- (void)setShowProgressBar:(BOOL)arg0;
- (id)runtime;
- (void)setStaticTitle:(id)arg0;
- (void)reloadWithContext:(id)arg0;
- (id)staticTitle;
- (void)setIsReused:(BOOL)arg0;
- (BOOL)isReused;
- (void)updateNavigationTitle;
- (void)setRuntime:(id)arg0;
- (void)setLoadState:(unsigned long long)arg0;

@end
