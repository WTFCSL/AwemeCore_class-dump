//
//     Generated by private class-dump
//

@class BDLargeImageMemoryCacheControl, MMKV, NSString, BDImageCacheConfig, BDAnimatedImageMemoryCacheControl;
@protocol BDDiskCache, BDMemoryCache;

@interface BDImageCache : NSObject {
    BOOL _userDefinedConfig;
    BOOL _mmkvInited;
    float _priority;
    NSString *_name;
    BDImageCacheConfig *_config;
    long long _separatedMode;
    id<BDMemoryCache> _memoryCache;
    id<BDDiskCache> _diskCache;
    MMKV *_imageExtendCache;
    id<BDDiskCache> _imageExtendCacheV2;
    NSString *_rootPath;
}

@property (class, nonatomic) long long enableLruOptimizationOptions;
@property (class, nonatomic) BOOL enableMemoryLruOptimization;

@property (retain, nonatomic) BDAnimatedImageMemoryCacheControl *animatedImageMemoryCacheControl;
@property (retain, nonatomic) BDLargeImageMemoryCacheControl *largeImageMemoryCacheControl;
@property (nonatomic) long long separatedMode;
@property (retain, nonatomic) id<BDMemoryCache> memoryCache;
@property (retain, nonatomic) id<BDDiskCache> diskCache;
@property (retain, nonatomic) MMKV *imageExtendCache;
@property (retain, nonatomic) id<BDDiskCache> imageExtendCacheV2;
@property BOOL mmkvInited;
@property (copy, nonatomic) NSString *rootPath;
@property (copy, nonatomic) NSString *name;
@property (nonatomic) float priority;
@property (copy, nonatomic) BDImageCacheConfig *config;

+ (void)setEnableLruOptimizationOptions:(long long)arg0;
+ (long long)enableLruOptimizationOptions;
+ (void)setEnableMemoryLruOptimization:(BOOL)arg0;
+ (BOOL)enableMemoryLruOptimization;
+ (id)sharedImageCache;

- (unsigned long long)containsImageForKey:(id)arg0;
- (id)imageForKey:(id)arg0 withType:(unsigned long long *)arg1;
- (void)setDiskCache:(id)arg0;
- (void)clearMemory;
- (void)setImage:(id)arg0 imageData:(id)arg1 forRequestKey:(id)arg2 withType:(unsigned long long)arg3;
- (void)removeImageForRequestKey:(id)arg0 withType:(unsigned long long)arg1;
- (BOOL)containsImageForRequestKey:(id)arg0 type:(unsigned long long)arg1;
- (id)imageForRequestKey:(id)arg0 withType:(unsigned long long *)arg1;
- (void)setImage:(id)arg0 forRequestKey:(id)arg1;
- (void)setImage:(id)arg0 imageData:(id)arg1 forRequestKey:(id)arg2 withType:(unsigned long long)arg3 callBack:(id /* block */)arg4;
- (void)saveImageToDisk:(id)arg0 data:(id)arg1 forRequestKey:(id)arg2;
- (void)saveImageToDisk:(id)arg0 data:(id)arg1 forRequestKey:(id)arg2 callBack:(id /* block */)arg3;
- (void)removeImageForRequestKey:(id)arg0;
- (void)removeImageFromDiskForRequestKey:(id)arg0 callBack:(id /* block */)arg1;
- (BOOL)containsImageForRequestKey:(id)arg0;
- (id)imageFromMemoryCacheForRequestKey:(id)arg0;
- (id)imageFromDiskCacheForRequestKey:(id)arg0;
- (id)imageForRequestKey:(id)arg0;
- (void)imageForRequestKey:(id)arg0 withType:(unsigned long long)arg1 withBlock:(id /* block */)arg2;
- (id)imageDataForRequestKey:(id)arg0;
- (void)imageDataForRequestKey:(id)arg0 withBlock:(id /* block */)arg1;
- (BOOL)_hasDiskCache;
- (id)imageFromData:(id)arg0 options:(long long)arg1;
- (id)imageFromData:(id)arg0 options:(long long)arg1 size:(struct CGSize { double x0; double x1; })arg2 cropRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg3;
- (id)imageFromData:(id)arg0 options:(long long)arg1 size:(struct CGSize { double x0; double x1; })arg2 cropRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg3 scale:(double)arg4;
- (id)imageFromData:(id)arg0 decoderConfig:(id)arg1 error:(id *)arg2;
- (id)initWithSeparatedMode:(long long)arg0;
- (id)initWithName:(id)arg0 separatedMode:(long long)arg1;
- (id)initWithMemoryCache:(id)arg0 diskStorePath:(id)arg1 config:(id)arg2 separatedMode:(long long)arg3;
- (void)setSeparatedMode:(long long)arg0;
- (BOOL)_hasMemoryCache;
- (void)removeImageInfoWithPathKey:(id)arg0;
- (void)setImageExtendCache:(id)arg0;
- (void)setMmkvInited:(BOOL)arg0;
- (id)initWithMemoryCache:(id)arg0 diskStorePath:(id)arg1 config:(id)arg2;
- (void)trimDiskCache;
- (void)setImage:(id)arg0 imageData:(id)arg1 forKey:(id)arg2 withType:(unsigned long long)arg3;
- (id)memoryCacheWrapper;
- (void)saveImageToDisk:(id)arg0 data:(id)arg1 forKey:(id)arg2;
- (void)saveImageToDisk:(id)arg0 data:(id)arg1 forKey:(id)arg2 callBack:(id /* block */)arg3;
- (void)setImageInfo:(id)arg0 forKey:(id)arg1 withInfoType:(id)arg2;
- (id)diskCacheWrapper;
- (id)cachePathForKey:(id)arg0;
- (void)removeImageForKey:(id)arg0 withType:(unsigned long long)arg1;
- (id)imageExtendCacheWrapper;
- (id)imageExtendCacheV2Wrapper;
- (unsigned long long)containsImageForKey:(id)arg0 type:(unsigned long long)arg1;
- (id)imageFromDiskCacheForKey:(id)arg0 options:(long long)arg1;
- (id)imageForKey:(id)arg0 withType:(unsigned long long *)arg1 options:(long long)arg2 size:(struct CGSize { double x0; double x1; })arg3 decryptBlock:(id /* block */)arg4;
- (id)imageForRequestKey:(id)arg0 withType:(unsigned long long *)arg1 decoderConfig:(id)arg2 decryptBlock:(id /* block */)arg3;
- (id)imageForRequestKey:(id)arg0 withType:(unsigned long long *)arg1 decoderConfig:(id)arg2 decryptBlock:(id /* block */)arg3 shouldDecodeImageBlock:(id /* block */)arg4;
- (BOOL)validImageInfoForKey:(id)arg0;
- (id)imageInfoForkey:(id)arg0 withInfoType:(id)arg1;
- (void)imageForKey:(id)arg0 withType:(unsigned long long)arg1 options:(long long)arg2 size:(struct CGSize { double x0; double x1; })arg3 withBlock:(id /* block */)arg4 decryptBlock:(id /* block */)arg5;
- (BOOL)mmkvInitedWrapper;
- (BOOL)actualUsingNewImageExtendCache;
- (id)_imageInfoForkey:(id)arg0 withInfoType:(id)arg1 usingNewCache:(BOOL)arg2;
- (id)diskConfigWrapper;
- (long long)separatedMode;
- (id)imageExtendCache;
- (id)imageExtendCacheV2;
- (BOOL)mmkvInited;
- (void)setCloudConfig:(id)arg0;
- (id)initWithStorePath:(id)arg0 inlineThreshold:(unsigned long long)arg1;
- (id)initWithMemoryCache:(id)arg0 storePath:(id)arg1 inlineThreshold:(unsigned long long)arg2;
- (void)setImage:(id)arg0 imageData:(id)arg1 forKey:(id)arg2 withType:(unsigned long long)arg3 callBack:(id /* block */)arg4;
- (void)removeImageFromDiskForKey:(id)arg0 callBack:(id /* block */)arg1;
- (id)imageFromMemoryCacheForKey:(id)arg0;
- (id)imageFromDiskCacheForKey:(id)arg0;
- (id)imageForKey:(id)arg0 withType:(unsigned long long *)arg1 options:(long long)arg2;
- (id)imageForKey:(id)arg0 withType:(unsigned long long *)arg1 options:(long long)arg2 size:(struct CGSize { double x0; double x1; })arg3;
- (void)imageForKey:(id)arg0 withType:(unsigned long long)arg1 withBlock:(id /* block */)arg2;
- (void)imageForKey:(id)arg0 withType:(unsigned long long)arg1 options:(long long)arg2 size:(struct CGSize { double x0; double x1; })arg3 withBlock:(id /* block */)arg4;
- (void)imageDataForKey:(id)arg0 withBlock:(id /* block */)arg1;
- (id)targetImageKey:(id)arg0 option:(long long)arg1 size:(struct CGSize { double x0; double x1; })arg2;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })smartCropRateRectForkey:(id)arg0;
- (void)clearDiskWithBlock:(id /* block */)arg0;
- (unsigned long long)totalDiskSize;
- (id)memoryConfigWrapper;
- (void)setImageExtendCacheV2:(id)arg0;
- (id)largeImageMemoryCacheControl;
- (void)setAnimatedImageMemoryCacheControl:(id)arg0;
- (void)setLargeImageMemoryCacheControl:(id)arg0;
- (id)animatedImageMemoryCacheControl;
- (id)init;
- (void)setConfig:(id)arg0;
- (void).cxx_destruct;
- (id)imageForKey:(id)arg0;
- (id)config;
- (id)initWithName:(id)arg0;
- (void)setPriority:(float)arg0;
- (void)applicationDidEnterBackground:(id)arg0;
- (id)diskCache;
- (id)rootPath;
- (void)setName:(id)arg0;
- (id)memoryCache;
- (void)dealloc;
- (float)priority;
- (id)name;
- (void)setImage:(id)arg0 forKey:(id)arg1;
- (id)imageDataForKey:(id)arg0;
- (void)removeImageForKey:(id)arg0;
- (id)imageFromData:(id)arg0;
- (void)setRootPath:(id)arg0;
- (void)setMemoryCache:(id)arg0;

@end
