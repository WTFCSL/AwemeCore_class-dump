//
//     Generated by private class-dump
//

@class NSArray, IESWaterMarkData, HTSGLFramebuffer, NSMutableArray;

@interface IESDynamicWatermarkFilter : HTSGLFilter {
    double _xPos;
    double _yPos;
    HTSGLFramebuffer *_secondInputFramebuffer;
    BOOL _panoramaMode;
    BOOL _isWaterMarkReady;
    BOOL _useCache;
    NSArray *_waterMarkDataArray;
    IESWaterMarkData *_waterMarkData;
    NSMutableArray *_waterMarkFramebufferArray;
    long long _refreshInterval;
    long long _waterMarkIndex;
    long long _waterMarkFrameCount;
    long long _waterMarkFrameIndex;
    struct CGPoint { double x; double y; } _waterMarkPoint;
    struct CGSize { double width; double height; } _waterMarkSize;
    struct CGSize { double width; double height; } _targetSize;
    struct CGSize { double width; double height; } _frameSize;
}

@property (retain, nonatomic) NSArray *waterMarkDataArray;
@property (retain, nonatomic) IESWaterMarkData *waterMarkData;
@property (retain, nonatomic) NSMutableArray *waterMarkFramebufferArray;
@property (nonatomic) struct CGSize { double width; double height; } targetSize;
@property (nonatomic) struct CGSize { double width; double height; } frameSize;
@property (nonatomic) long long refreshInterval;
@property (nonatomic) BOOL isWaterMarkReady;
@property (nonatomic) long long waterMarkIndex;
@property (nonatomic) long long waterMarkFrameCount;
@property (nonatomic) long long waterMarkFrameIndex;
@property (nonatomic) BOOL useCache;
@property (nonatomic) BOOL panoramaMode;
@property (nonatomic) struct CGPoint { double x; double y; } waterMarkPoint;
@property (nonatomic) struct CGSize { double width; double height; } waterMarkSize;

- (void)renderToTextureWithVertices:(const float *)arg0 textureCoordinates:(const float *)arg1;
- (void)setInputFramebuffer:(id)arg0 atIndex:(long long)arg1;
- (struct CGSize { double x0; double x1; })sizeOfFBO;
- (void)initializeRenderer:(id)arg0;
- (void)newFrameReadyAtTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg0 atIndex:(long long)arg1 exceptionBlock:(id /* block */)arg2;
- (id)waterMarkDataArray;
- (void)setIsWaterMarkReady:(BOOL)arg0;
- (void)setWaterMarkFrameCount:(long long)arg0;
- (void)setWaterMarkDataArray:(id)arg0;
- (void)setWaterMarkIndex:(long long)arg0;
- (void)setWaterMarkFramebufferArray:(id)arg0;
- (void)initWaterMarkFramebuffers;
- (id)waterMarkFramebufferArray;
- (long long)waterMarkIndex;
- (void)setWaterMarkData:(id)arg0;
- (id)waterMarkData;
- (void)setWaterMarkPoint:(struct CGPoint { double x0; double x1; })arg0;
- (void)setWaterMarkSize:(struct CGSize { double x0; double x1; })arg0;
- (void)setWaterMarkFrameIndex:(long long)arg0;
- (BOOL)renderUIImage:(id)arg0 toFramebuffer:(id)arg1;
- (BOOL)panoramaMode;
- (long long)waterMarkFrameIndex;
- (BOOL)isWaterMarkReady;
- (long long)waterMarkFrameCount;
- (void)updateWatermarkFramebuffer;
- (struct CGPoint { double x0; double x1; })waterMarkPoint;
- (struct CGSize { double x0; double x1; })waterMarkSize;
- (id)initWithwaterMarkDataArray:(id)arg0 useCache:(BOOL)arg1 context:(id)arg2;
- (long long)currentWaterMarkIndex:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg0;
- (void)setPanoramaMode:(BOOL)arg0;
- (struct CGSize { double x0; double x1; })targetSize;
- (id)initWithContext:(id)arg0;
- (void).cxx_destruct;
- (void)clearCache;
- (void)dealloc;
- (void)setTargetSize:(struct CGSize { double x0; double x1; })arg0;
- (long long)refreshInterval;
- (void)setRefreshInterval:(long long)arg0;
- (void)setFrameSize:(struct CGSize { double x0; double x1; })arg0;
- (BOOL)useCache;
- (void)setUseCache:(BOOL)arg0;
- (struct CGSize { double x0; double x1; })frameSize;
- (void)initializeAttributes;

@end
