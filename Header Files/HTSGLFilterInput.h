//
//     Generated by private class-dump
//

@class VEMVPRenderer, HTSGLFilterGroup, VELensColorTransAlgorithm;
@protocol IESMMEffectGroupProtocol;

@interface HTSGLFilterInput : HTSFilterInterface {
    int _imageBufferWidth;
    int _imageBufferHeight;
    BOOL _isEndProcessing;
    double _rotateAngle;
    BOOL _flipX;
    BOOL _flipY;
    BOOL _HasCheckedSkipRender;
    long long _fillMode;
    HTSGLFilterGroup<IESMMEffectGroupProtocol> *_effectGroup;
    VEMVPRenderer *_pixelBufferRenderer;
    VELensColorTransAlgorithm *_colorTransAlgorithm;
    struct CGSize { double width; double height; } _targetSize;
    struct { long long value; int timescale; unsigned int flags; long long epoch; } _realFramePts;
}

@property (retain, nonatomic) VEMVPRenderer *pixelBufferRenderer;
@property (retain, nonatomic) VELensColorTransAlgorithm *colorTransAlgorithm;
@property (nonatomic) struct CGSize { double width; double height; } targetSize;
@property (nonatomic) long long fillMode;
@property (nonatomic) struct { long long value; int timescale; unsigned int flags; long long epoch; } realFramePts;
@property (weak, nonatomic) HTSGLFilterGroup<IESMMEffectGroupProtocol> *effectGroup;

- (void)endProcessing;
- (void)processInputBuffer:(struct opaqueCMSampleBuffer { } *)arg0 withInfo:(id)arg1;
- (void)processInputBuffer:(struct __CVBuffer { } *)arg0 andFrametime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg1 withInfo:(id)arg2;
- (id)effectGroup;
- (void)generateOutputFramebufferWithSize:(struct CGSize { double x0; double x1; })arg0 sampleInfo:(id)arg1;
- (void)updateTargetsForVideoCameraUsingCacheTextureAtWidth:(int)arg0 height:(int)arg1 time:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg2;
- (void)releaseOutputFramebufferIfNeeded;
- (void)processInputBuffer:(struct opaqueCMSampleBuffer { } *)arg0;
- (void)processInputBufferOnQueue:(struct __CVBuffer { } *)arg0 andFrametime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg1;
- (BOOL)needColorTransfer:(struct __CVBuffer { } *)arg0 withInfo:(id)arg1;
- (id)generateStabOutputFrameBuffer:(struct CGSize { double x0; double x1; })arg0 sampleInfo:(id)arg1;
- (void)setEffectGroup:(id)arg0;
- (id)colorTransAlgorithm;
- (void)setColorTransAlgorithm:(id)arg0;
- (struct { long long x0; int x1; unsigned int x2; long long x3; })realFramePts;
- (void)setRealFramePts:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg0;
- (void)processInputBufferOnQueue:(struct __CVBuffer { } *)arg0 andFrametime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg1 withInfo:(id)arg2;
- (void)processInputFrameBuffer:(id)arg0 andFrametime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg1;
- (id)pixelBufferRenderer;
- (void)setPixelBufferRenderer:(id)arg0;
- (struct CGSize { double x0; double x1; })targetSize;
- (id)initWithContext:(id)arg0;
- (void)setFillMode:(long long)arg0;
- (long long)fillMode;
- (void).cxx_destruct;
- (void)dealloc;
- (void)setTargetSize:(struct CGSize { double x0; double x1; })arg0;

@end
