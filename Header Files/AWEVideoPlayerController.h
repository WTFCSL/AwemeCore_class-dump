//
//     Generated by private class-dump
//

@class NSMutableDictionary, AWEVideoResourceLoader, NSURL, NSObject, AVPlayerItemAccessLog, AVPlayerItemVideoOutput, UIView, AVPlayerItem, NSString, NSTimer, AVURLAsset, NSArray, AWEVideoPlayerView, AVPlayer;
@protocol OS_dispatch_queue, AWEVideoPlayerInternalDelegate, AWEVideoPlayerControllerDelegate;

@interface AWEVideoPlayerController : NSObject <AVAudioPlayerDelegate> {
    BOOL _useCache;
    BOOL _repeated;
    BOOL _truncateTailWhenRepeated;
    BOOL _muted;
    BOOL _ignoreAudioInterruption;
    BOOL _enableVideoOutput;
    BOOL _isPreparedToPlay;
    BOOL _isReadyForDisplay;
    BOOL _initialized;
    BOOL _currentUseCacheFlag;
    float _playbackRate;
    float _volume;
    long long _scalingMode;
    long long _rotateType;
    id<AWEVideoPlayerControllerDelegate> _delegate;
    id<AWEVideoPlayerInternalDelegate> _internalDelegate;
    long long _state;
    double _duration;
    double _playableDuration;
    long long _bufferingProgress;
    double _currentPlaybackRate;
    unsigned long long _errorStrategy;
    double _currentTimeScale;
    AWEVideoPlayerView *_contentView;
    AVPlayerItem *_currentItem;
    AVPlayerItemVideoOutput *_currentVideoOutput;
    AVPlayer *_player;
    AVURLAsset *_currentAsset;
    NSMutableDictionary *_metaFormateDict;
    long long _playbackState;
    long long _playerItemOrderID;
    NSTimer *_pollingTimer;
    AWEVideoResourceLoader *_resourceLoader;
    NSURL *_contentURL;
    NSURL *_cachePlayURL;
    NSString *_currentItemKey;
    NSArray *_contentURLStringList;
    long long _currentURLIndex;
    double _videoLoadBeginTime;
    struct __CVBuffer { } *_curPixelBuffer;
    NSMutableDictionary *_periodicTimeObserverDict;
    NSMutableDictionary *_boundaryTimeObserverDict;
    NSObject<OS_dispatch_queue> *_resourceLoaderQueue;
    NSMutableDictionary *_errorDict;
    NSMutableDictionary *_audioMixDict;
}

@property (nonatomic) long long state;
@property (nonatomic) double duration;
@property (nonatomic) double playableDuration;
@property (nonatomic) long long bufferingProgress;
@property (nonatomic) double currentPlaybackRate;
@property (nonatomic) double currentTimeScale;
@property (retain, nonatomic) AWEVideoPlayerView *contentView;
@property (retain, nonatomic) AVPlayerItem *currentItem;
@property (retain, nonatomic) AVPlayerItemVideoOutput *currentVideoOutput;
@property (retain, nonatomic) AVPlayer *player;
@property (retain, nonatomic) AVURLAsset *currentAsset;
@property (retain, nonatomic) NSMutableDictionary *metaFormateDict;
@property (nonatomic) BOOL isPreparedToPlay;
@property (nonatomic) BOOL isReadyForDisplay;
@property (nonatomic) BOOL initialized;
@property (nonatomic) long long playbackState;
@property (nonatomic) long long playerItemOrderID;
@property (retain, nonatomic) NSTimer *pollingTimer;
@property (retain, nonatomic) AWEVideoResourceLoader *resourceLoader;
@property (retain, nonatomic) NSURL *contentURL;
@property (retain, nonatomic) NSURL *cachePlayURL;
@property (copy, nonatomic) NSString *currentItemKey;
@property (copy, nonatomic) NSArray *contentURLStringList;
@property (nonatomic) long long currentURLIndex;
@property (nonatomic) double videoLoadBeginTime;
@property (nonatomic) struct __CVBuffer { } *curPixelBuffer;
@property (retain, nonatomic) NSMutableDictionary *periodicTimeObserverDict;
@property (retain, nonatomic) NSMutableDictionary *boundaryTimeObserverDict;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *resourceLoaderQueue;
@property (retain, nonatomic) NSMutableDictionary *errorDict;
@property (nonatomic) BOOL currentUseCacheFlag;
@property (retain, nonatomic) NSMutableDictionary *audioMixDict;
@property (readonly, nonatomic) UIView *view;
@property (nonatomic) BOOL useCache;
@property (nonatomic) BOOL repeated;
@property (nonatomic) BOOL truncateTailWhenRepeated;
@property (nonatomic) long long scalingMode;
@property (nonatomic) long long rotateType;
@property (nonatomic) BOOL muted;
@property (nonatomic) float playbackRate;
@property (nonatomic) BOOL ignoreAudioInterruption;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } videoFrame;
@property (readonly, nonatomic) struct CGSize { double x0; double x1; } videoOriginSize;
@property (nonatomic) float volume;
@property (nonatomic) BOOL enableVideoOutput;
@property (weak, nonatomic) id<AWEVideoPlayerControllerDelegate> delegate;
@property (weak, nonatomic) id<AWEVideoPlayerInternalDelegate> internalDelegate;
@property (readonly, nonatomic) double currentPlaybackTime;
@property (readonly, copy, nonatomic) AVURLAsset *currentPlayAsset;
@property (readonly, nonatomic) AVPlayerItemAccessLog *accessLog;
@property (readonly, nonatomic) NSArray *itemTracks;
@property (nonatomic) unsigned long long errorStrategy;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (void)setPerf_isaHook:(id)arg0;
- (id)perf_isaHook;
- (long long)rotateType;
- (void)setRotateType:(long long)arg0;
- (BOOL)enableVideoOutput;
- (void)setEnableVideoOutput:(BOOL)arg0;
- (BOOL)truncateTailWhenRepeated;
- (BOOL)ignoreAudioInterruption;
- (void)setIgnoreAudioInterruption:(BOOL)arg0;
- (struct CGSize { double x0; double x1; })videoOriginSize;
- (void)addVideoPlayWithURL:(id)arg0 forTimes:(id)arg1;
- (void)activePeriodicTimeObserver;
- (void)removePeriodicTimeObserver;
- (void)setTruncateTailWhenRepeated:(BOOL)arg0;
- (void)_playbackDidFailWithError:(id)arg0;
- (BOOL)_retryPlayIfNeeded;
- (void)prepareToPlayWithCacheEnabled:(BOOL)arg0 completion:(id /* block */)arg1;
- (void)_prepareToPlay;
- (void)_setupResourceLoaderQueue;
- (void)_prepareToPlayWithCacheEnabled:(BOOL)arg0 completion:(id /* block */)arg1;
- (void)reinitializePlayerWithAsset:(id)arg0 completion:(id /* block */)arg1;
- (void)_setupAudioPlayers;
- (id)_getVideoOutput;
- (void)_seekToTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg0 shouldPlay:(BOOL)arg1;
- (void)_resetInitialStates;
- (void)_addAVAudioSessionObservers;
- (void)_addPlaybackPollingTimer;
- (id)pollingTimer;
- (void)setPollingTimer:(id)arg0;
- (void)_setContentURLString:(id)arg0;
- (void)setContentURLStringList:(id)arg0;
- (id)periodicTimeObserverDict;
- (id)boundaryTimeObserverDict;
- (id)audioMixDict;
- (id)currentVideoOutput;
- (id)currentItemKey;
- (id)metaFormateDict;
- (void)_onReadyToPlay;
- (void)playbackDidFailWithError:(id)arg0;
- (void)_continuePlayFromWaiting;
- (void)_onLoadedTimeRangesChanged:(id)arg0;
- (void)_invalidatePlaybackPollingTimer;
- (void)setIsPreparedToPlay:(BOOL)arg0;
- (void)setBufferingProgress:(long long)arg0;
- (long long)bufferingProgress;
- (void)setCachePlayURL:(id)arg0;
- (void)setCurrentItemKey:(id)arg0;
- (void)_enumerateAllAudioPlayersWithBlock:(id /* block */)arg0;
- (void)setContentURLString:(id)arg0;
- (id)currentPlayAsset;
- (double)currentTimeScale;
- (id)itemTracks;
- (void)seekToTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg0 isAccurate:(BOOL)arg1 error:(id *)arg2 completionHandler:(id /* block */)arg3;
- (struct __CVBuffer { } *)copyPixelBufferForCurrentTime;
- (unsigned long long)errorStrategy;
- (void)setErrorStrategy:(unsigned long long)arg0;
- (void)setCurrentTimeScale:(double)arg0;
- (void)setCurrentVideoOutput:(id)arg0;
- (void)setMetaFormateDict:(id)arg0;
- (long long)playerItemOrderID;
- (void)setPlayerItemOrderID:(long long)arg0;
- (id)cachePlayURL;
- (id)contentURLStringList;
- (long long)currentURLIndex;
- (void)setCurrentURLIndex:(long long)arg0;
- (double)videoLoadBeginTime;
- (void)setVideoLoadBeginTime:(double)arg0;
- (struct __CVBuffer { } *)curPixelBuffer;
- (void)setCurPixelBuffer:(struct __CVBuffer { } *)arg0;
- (void)setPeriodicTimeObserverDict:(id)arg0;
- (void)setBoundaryTimeObserverDict:(id)arg0;
- (void)setResourceLoaderQueue:(id)arg0;
- (BOOL)currentUseCacheFlag;
- (void)setCurrentUseCacheFlag:(BOOL)arg0;
- (void)setAudioMixDict:(id)arg0;
- (void)loader:(id)arg0 didfinishWithError:(id)arg1;
- (void)perf_play;
- (void)perf_prepareToPlay;
- (BOOL)initialized;
- (void)setPlaybackRate:(float)arg0;
- (void)setInitialized:(BOOL)arg0;
- (long long)playbackState;
- (void)_stop;
- (double)currentPlaybackTime;
- (BOOL)isReadyForDisplay;
- (id)init;
- (void)setCurrentItem:(id)arg0;
- (void)_pause;
- (id)currentAsset;
- (void).cxx_destruct;
- (float)playbackRate;
- (BOOL)muted;
- (long long)state;
- (float)volume;
- (void)setState:(long long)arg0;
- (void)setMuted:(BOOL)arg0;
- (id)contentURL;
- (void)stop;
- (id)currentItem;
- (void)setResourceLoader:(id)arg0;
- (void)setPlayer:(id)arg0;
- (double)duration;
- (id)contentView;
- (id)delegate;
- (struct { long long x0; int x1; unsigned int x2; long long x3; })currentMediaTime;
- (void)setCurrentAsset:(id)arg0;
- (BOOL)isPlaying;
- (void)setVolume:(float)arg0;
- (id)internalDelegate;
- (void)setInternalDelegate:(id)arg0;
- (void)setDelegate:(id)arg0;
- (void)dealloc;
- (void)play;
- (id)resourceLoader;
- (void)pause;
- (void)observeValueForKeyPath:(id)arg0 ofObject:(id)arg1 change:(id)arg2 context:(void *)arg3;
- (id)view;
- (void)setPlaybackState:(long long)arg0;
- (id)player;
- (void)setDuration:(double)arg0;
- (void)setContentView:(id)arg0;
- (BOOL)useCache;
- (void)setUseCache:(BOOL)arg0;
- (BOOL)repeated;
- (void)setRepeated:(BOOL)arg0;
- (void)setContentURL:(id)arg0;
- (void)prepareToPlay;
- (void)audioPlayerDidFinishPlaying:(id)arg0 successfully:(BOOL)arg1;
- (long long)scalingMode;
- (void)setScalingMode:(long long)arg0;
- (void)_setupContentView;
- (id)accessLog;
- (BOOL)isPreparedToPlay;
- (double)currentPlaybackRate;
- (void)setCurrentPlaybackRate:(double)arg0;
- (double)playableDuration;
- (void)addPeriodicTimeObserverForInterval:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg0 usingBlock:(id /* block */)arg1;
- (void)playerItemPlaybackStalled:(id)arg0;
- (void)addPlayerObservers:(id)arg0;
- (void)removePlayerObservers:(id)arg0;
- (void)addPlayerItemObservers:(id)arg0;
- (void)removePlayerItemObservers:(id)arg0;
- (void)_play;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })videoFrame;
- (void)playerItemFailedToPlayToEndTime:(id)arg0;
- (void)_initializePlayer;
- (void)playerItemDidReachEnd:(id)arg0;
- (void)setIsReadyForDisplay:(BOOL)arg0;
- (id)resourceLoaderQueue;
- (id)errorDict;
- (void)setErrorDict:(id)arg0;
- (void)addBoundaryTimeObserverForTimes:(id)arg0 usingBlock:(id /* block */)arg1;
- (void)setPlayableDuration:(double)arg0;
- (void)_resetPlayer;

@end
