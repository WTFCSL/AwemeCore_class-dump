//
//     Generated by private class-dump
//

@class ACCPublishMusicTrackModel, NSString, IESMMVideoDataClipRange, NSArray, NSURL, NSData, NSDictionary, ACCMusicVolumeModel, ACCMusicTrimViewSnapShootModel, ACCRearMusicModel, ACCEditorMusicConfigAssembler, AVAsset;
@protocol ACCMusicModelProtocol, ACCAwemeModelProtocol, ACCWorkspaceReader, ACCPublishRepository, ACCRepoDataContext;

@interface AWERepoMusicModel : NSObject <AWERepositoryDraftProtocol, ACCRepositoryDraftContextDeprecated, ACCCreationDataAccess, ACCRepoRegister, NSCopying, ACCMusicRepoData, ACCRepositoryRequestParamsDeprecated, ACCRepositoryContextDeprecated, ACCRepositoryTrackContextDeprecated> {
    struct _HTSAudioRange { double location; double length; } _audioRange;
    BOOL _enableMusicLoop;
    BOOL _isLVAudioFrameModel;
    BOOL _openMusicBeatsByDefault;
    BOOL _useSuggestClipRange;
    BOOL _enableEditPageMusicLoop;
    BOOL _enableUseOriginMusic;
    BOOL _disableMusicModule;
    BOOL _postDownload;
    BOOL _showMusicCapsule;
    BOOL _needAIClip;
    BOOL _enableAIGCAsyncQueueMute;
    BOOL _hitAudioRangeChangeTestInImageAlbumMode;
    BOOL _hitVolumeChangeTestInImageAlbumMode;
    BOOL _isAutoSelected;
    BOOL _shouldRemoveMusicBeforeEditPage;
    BOOL _isFromAutoPlayMusicDetail;
    BOOL _hasShootPageAutoPlay;
    BOOL _uiHide;
    BOOL _openAlbumEnableInMusicDetail;
    BOOL _voiceVolumeDisable;
    id<ACCPublishRepository> _repoDeprecated;
    NSString *_musicSelectedFrom;
    id<ACCMusicModelProtocol> _music;
    id<ACCRepoDataContext> _dataContext;
    id<ACCWorkspaceReader> _workspaceReader;
    ACCRearMusicModel *_rearApplyMusic;
    ACCPublishMusicTrackModel *_musicTrackModel;
    ACCMusicTrimViewSnapShootModel *_imageMusicTrimStatusModel;
    long long _musicSelectFrom;
    long long _musicUsageConfirmation;
    NSString *_zipURI;
    AVAsset *_bgmAsset;
    IESMMVideoDataClipRange *_bgmClipRange;
    NSDictionary *_musicTrackInfo;
    NSArray *_musicList;
    NSString *_editPageNeedDelayLoadMusicId;
    id<ACCAwemeModelProtocol> _currentFeedModel;
    NSString *_musicEditedFrom;
    double _musicClipBeginTime;
    NSDictionary *_anchorCreatePlaylistInfo;
    NSString *_passthroughMusicID;
    NSURL *_bgmAssetURL;
    NSString *_strongBeatPath;
    id<ACCMusicModelProtocol> _weakBindMusic;
    NSString *_binURI;
    unsigned long long _editReplaceMusicMode;
    NSString *_replacedMusicID;
    double _autoContinuePlayStartTime;
    ACCEditorMusicConfigAssembler *_musicConfigAssembler;
    NSString *_bgmRelativePath;
    NSString *_strongBeatRelativePath;
    NSData *_musicJson;
    NSString *_userVoiceAudioVID;
    NSString *_editMusicUserVoiceAudioInfo;
    NSString *_similarMusicID;
    double _voiceVolume;
    double _musicVolume;
    ACCMusicVolumeModel *_volumeModel;
}

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (retain, nonatomic) id<ACCMusicModelProtocol> music;
@property (retain, nonatomic) ACCRearMusicModel *rearApplyMusic;
@property (retain, nonatomic) ACCPublishMusicTrackModel *musicTrackModel;
@property (nonatomic) struct _HTSAudioRange { double location; double length; } audioRange;
@property (retain, nonatomic) ACCMusicTrimViewSnapShootModel *imageMusicTrimStatusModel;
@property (nonatomic) long long musicSelectFrom;
@property (nonatomic) long long musicUsageConfirmation;
@property (copy, nonatomic) NSString *zipURI;
@property (nonatomic) BOOL isLVAudioFrameModel;
@property (retain, nonatomic) AVAsset *bgmAsset;
@property (copy, nonatomic) IESMMVideoDataClipRange *bgmClipRange;
@property (copy, nonatomic) NSString *musicSelectedFrom;
@property (retain, nonatomic) NSDictionary *musicTrackInfo;
@property (copy, nonatomic) NSArray *musicList;
@property (copy, nonatomic) NSString *editPageNeedDelayLoadMusicId;
@property (nonatomic) BOOL openMusicBeatsByDefault;
@property (retain, nonatomic) id<ACCAwemeModelProtocol> currentFeedModel;
@property (nonatomic) BOOL useSuggestClipRange;
@property (nonatomic) BOOL enableMusicLoop;
@property (nonatomic) BOOL enableEditPageMusicLoop;
@property (nonatomic) BOOL enableUseOriginMusic;
@property (copy, nonatomic) NSString *musicEditedFrom;
@property (nonatomic) double musicClipBeginTime;
@property (retain, nonatomic) NSDictionary *anchorCreatePlaylistInfo;
@property (nonatomic) BOOL disableMusicModule;
@property (nonatomic) BOOL postDownload;
@property (nonatomic) BOOL showMusicCapsule;
@property (copy, nonatomic) NSString *passthroughMusicID;
@property (nonatomic) BOOL needAIClip;
@property (nonatomic) BOOL enableAIGCAsyncQueueMute;
@property (nonatomic) BOOL hitAudioRangeChangeTestInImageAlbumMode;
@property (nonatomic) BOOL hitVolumeChangeTestInImageAlbumMode;
@property (retain, nonatomic) NSURL *bgmAssetURL;
@property (copy, nonatomic) NSString *strongBeatPath;
@property (retain, nonatomic) id<ACCMusicModelProtocol> weakBindMusic;
@property (copy, nonatomic) NSString *binURI;
@property (nonatomic) unsigned long long editReplaceMusicMode;
@property (copy, nonatomic) NSString *replacedMusicID;
@property (nonatomic) BOOL isAutoSelected;
@property (nonatomic) BOOL shouldRemoveMusicBeforeEditPage;
@property (nonatomic) double autoContinuePlayStartTime;
@property (nonatomic) BOOL isFromAutoPlayMusicDetail;
@property (nonatomic) BOOL hasShootPageAutoPlay;
@property (retain, nonatomic) ACCEditorMusicConfigAssembler *musicConfigAssembler;
@property (retain, nonatomic) NSString *bgmRelativePath;
@property (copy, nonatomic) NSString *strongBeatRelativePath;
@property (retain, nonatomic) NSData *musicJson;
@property (copy, nonatomic) NSString *userVoiceAudioVID;
@property (copy, nonatomic) NSString *editMusicUserVoiceAudioInfo;
@property (nonatomic) BOOL uiHide;
@property (copy, nonatomic) NSString *similarMusicID;
@property (nonatomic) BOOL openAlbumEnableInMusicDetail;
@property (nonatomic) double voiceVolume;
@property (nonatomic) double musicVolume;
@property (nonatomic) BOOL voiceVolumeDisable;
@property (retain, nonatomic) ACCMusicVolumeModel *volumeModel;
@property (weak, nonatomic) id<ACCRepoDataContext> dataContext;
@property (weak, nonatomic) id<ACCWorkspaceReader> workspaceReader;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) id<ACCMusicModelProtocol> backgroundMusic;
@property (weak, nonatomic) id<ACCPublishRepository> repoDeprecated;

+ (id)singlePhotoUseMusicCacheKey;
+ (id)repo_dataProtocol;

- (void)setMusicVolume:(double)arg0;
- (void)setShowMusicCapsule:(BOOL)arg0;
- (id)bgmClipRange;
- (void)setBgmClipRange:(id)arg0;
- (BOOL)enableMusicLoop;
- (void)setEnableMusicLoop:(BOOL)arg0;
- (id)strongBeatPath;
- (void)setStrongBeatPath:(id)arg0;
- (BOOL)useSuggestClipRange;
- (void)setUseSuggestClipRange:(BOOL)arg0;
- (BOOL)voiceVolumeDisable;
- (void)setVoiceVolumeDisable:(BOOL)arg0;
- (BOOL)disableMusicModule;
- (void)setDisableMusicModule:(BOOL)arg0;
- (BOOL)enableEditPageMusicLoop;
- (void)setEnableEditPageMusicLoop:(BOOL)arg0;
- (BOOL)postDownload;
- (void)setPostDownload:(BOOL)arg0;
- (BOOL)showMusicCapsule;
- (id)musicTrackInfo;
- (void)setMusicTrackInfo:(id)arg0;
- (id)volumeModel;
- (void)setVolumeModel:(id)arg0;
- (BOOL)isAutoSelected;
- (id)initWithDraft:(id)arg0;
- (id)musicSelectedFrom;
- (void)setMusicSelectedFrom:(id)arg0;
- (id)musicList;
- (void)setMusicList:(id)arg0;
- (id)acc_publishRequestParams:(id)arg0;
- (void)saveWithDraft:(id)arg0;
- (id)acc_publishTrackEventParams:(id)arg0;
- (id)repoDeprecated;
- (void)draftWillBeSavedWithID:(id)arg0;
- (void)modelDidRetrievedFromDraftWithID:(id)arg0;
- (void)setRepoDeprecated:(id)arg0;
- (struct _HTSAudioRange { double x0; double x1; })audioRange;
- (void)setAudioRange:(struct _HTSAudioRange { double x0; double x1; })arg0;
- (id)acc_referExtraParams;
- (id)dataContext;
- (void)setDataContext:(id)arg0;
- (double)autoContinuePlayStartTime;
- (void)setAutoContinuePlayStartTime:(double)arg0;
- (long long)musicSelectFrom;
- (void)setHitAudioRangeChangeTestInImageAlbumMode:(BOOL)arg0;
- (void)setHitVolumeChangeTestInImageAlbumMode:(BOOL)arg0;
- (id)workspaceReader;
- (void)setWorkspaceReader:(id)arg0;
- (BOOL)shouldEnableMusicLoop:(double)arg0;
- (void)setAnchorCreatePlaylistInfo:(id)arg0;
- (void)setUiHide:(BOOL)arg0;
- (void)setMusicClipBeginTime:(double)arg0;
- (void)setMusicSelectFrom:(long long)arg0;
- (void)setPassthroughMusicID:(id)arg0;
- (void)setNeedAIClip:(BOOL)arg0;
- (id)musicEditedFrom;
- (id)musicTrackModel;
- (id)zipURI;
- (id)binURI;
- (void)setBgmAsset:(id)arg0;
- (void)setIsLVAudioFrameModel:(BOOL)arg0;
- (void)setSimilarMusicID:(id)arg0;
- (id)musicConfigAssembler;
- (void)setRearApplyMusic:(id)arg0;
- (id)bgmAsset;
- (BOOL)enableUseOriginMusic;
- (void)setEnableUseOriginMusic:(BOOL)arg0;
- (id)imageMusicTrimStatusModel;
- (void)setImageMusicTrimStatusModel:(id)arg0;
- (void)setMusicEditedFrom:(id)arg0;
- (void)setEditPageNeedDelayLoadMusicId:(id)arg0;
- (void)setOpenMusicBeatsByDefault:(BOOL)arg0;
- (void)setEditReplaceMusicMode:(unsigned long long)arg0;
- (void)setReplacedMusicID:(id)arg0;
- (void)setUserVoiceAudioVID:(id)arg0;
- (void)setOpenAlbumEnableInMusicDetail:(BOOL)arg0;
- (double)musicClipBeginTime;
- (void)setIsFromAutoPlayMusicDetail:(BOOL)arg0;
- (BOOL)openAlbumEnableInMusicDetail;
- (void)resetMusicRange;
- (id)rearApplyMusic;
- (id)passthroughMusicID;
- (BOOL)isEditReplaceMusic;
- (unsigned long long)editReplaceMusicMode;
- (BOOL)needAIClip;
- (id)editPageNeedDelayLoadMusicId;
- (BOOL)shouldRemoveMusicBeforeEditPage;
- (id)editMusicUserVoiceAudioInfo;
- (id)userVoiceAudioVID;
- (void)setEditMusicUserVoiceAudioInfo:(id)arg0;
- (BOOL)isSimilarMusic;
- (long long)musicUsageConfirmation;
- (id)bgmAssetURL;
- (void)setZipURI:(id)arg0;
- (void)setBgmRelativePath:(id)arg0;
- (void)setStrongBeatRelativePath:(id)arg0;
- (void)setBinURI:(id)arg0;
- (id)strongBeatRelativePath;
- (BOOL)isLVAudioFrameModel;
- (id)bgmRelativePath;
- (BOOL)hitVolumeChangeTestInImageAlbumMode;
- (BOOL)hitAudioRangeChangeTestInImageAlbumMode;
- (id)similarMusicID;
- (void)setBgmAssetURL:(id)arg0;
- (void)setMusicJson:(id)arg0;
- (id)musicJson;
- (BOOL)shouldEditPageEnableMusicLoop:(double)arg0;
- (id)replacedMusicID;
- (BOOL)uiHide;
- (void)setCurrentFeedModel:(id)arg0;
- (id)currentFeedModel;
- (BOOL)hasBgm;
- (id)backgroundMusic;
- (BOOL)isFromAutoPlayMusicDetail;
- (BOOL)hasShootPageAutoPlay;
- (BOOL)shouldReplaceClipDurationWithMusicShootDuration:(double)arg0;
- (void)setEnableAIGCAsyncQueueMute:(BOOL)arg0;
- (BOOL)shouldEnableMusicLoop:(double)arg0 startLocation:(double)arg1;
- (BOOL)openMusicBeatsByDefault;
- (void)setMusicConfigAssembler:(id)arg0;
- (BOOL)enableAIGCAsyncQueueMute;
- (void)setWeakBindMusic:(id)arg0;
- (id)weakBindMusic;
- (id)anchorCreatePlaylistInfo;
- (void)setShouldRemoveMusicBeforeEditPage:(BOOL)arg0;
- (void)setupManagerWithService:(id)arg0 bizHandler:(id)arg1;
- (void)setIsAutoSelected:(BOOL)arg0;
- (BOOL)shouldChangeMusicSelectedFrom;
- (id)generateLocalAudioDraftFileName:(id)arg0;
- (BOOL)p_shouldShowMusicLoopComponent:(double)arg0 startLocation:(double)arg1;
- (void)setMusicTrackModel:(id)arg0;
- (void)setHasShootPageAutoPlay:(BOOL)arg0;
- (BOOL)hasEditMusicRange;
- (void)setMusicUsageConfirmation:(long long)arg0;
- (id)music;
- (id)init;
- (double)musicVolume;
- (void).cxx_destruct;
- (void)setMusic:(id)arg0;
- (id)copyWithZone:(struct _NSZone { } *)arg0;
- (double)voiceVolume;
- (void)setVoiceVolume:(double)arg0;
- (id)musicAsset;

@end
