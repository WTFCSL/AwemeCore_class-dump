//
//     Generated by private class-dump
//

@class AFDFrequencyTimeInterval;

@interface AFDFrequencyExitRule : AFDFrequencyRule {
    AFDFrequencyTimeInterval *_countPeriod;
    long long _neededCount;
    AFDFrequencyTimeInterval *_unavailablePeriod;
    AFDFrequencyTimeInterval *_unavailableDelay;
    AFDFrequencyTimeInterval *_distinctCountInterval;
}

@property (retain, nonatomic) AFDFrequencyTimeInterval *countPeriod;
@property (nonatomic) long long neededCount;
@property (retain, nonatomic) AFDFrequencyTimeInterval *unavailablePeriod;
@property (retain, nonatomic) AFDFrequencyTimeInterval *unavailableDelay;
@property (retain, nonatomic) AFDFrequencyTimeInterval *distinctCountInterval;

+ (id)filterDates:(id)arg0 inSameTimeInterval:(id)arg1 withDate:(id)arg2;

- (void)addCount;
- (void)setNeededCount:(long long)arg0;
- (void)setUnavailablePeriod:(id)arg0;
- (void)setDistinctCountInterval:(id)arg0;
- (void)setUnavailableDelay:(id)arg0;
- (id)recordedDates;
- (void)setCountPeriod:(id)arg0;
- (id)unavailablePeriod;
- (void)addUnavailableBeginDate:(id)arg0;
- (id)distinctCountInterval;
- (id)unavailableBeginDates;
- (id)unavailableDelay;
- (id)countPeriod;
- (long long)neededCount;
- (BOOL)available;
- (void).cxx_destruct;
- (id)initWithID:(id)arg0;
- (void)reset;
- (long long)currentCount;

@end
