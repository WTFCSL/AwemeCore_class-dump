//
//     Generated by private class-dump
//

@class NSObject, NSString, NSDictionary, FurionSmartServiceOutputData, FurionSmartServiceMonitor, FurionSmartServiceConfig;
@protocol OS_dispatch_queue, FurionSmartCommonServiceDelegate, FurionSmartEngineRunnerProtocol;

@interface FurionSmartCommonService : NSObject <FurionSmartCommonServiceProtocol> {
    struct _opaque_pthread_mutex_t { long long __sig; char __opaque[56]; } _lock;
    BOOL _serviceHasInit;
    BOOL _isRunning;
    id<FurionSmartCommonServiceDelegate> delegate;
    FurionSmartServiceMonitor *_monitor;
    NSString *_serviceName;
    id<FurionSmartEngineRunnerProtocol> _engineRunner;
    FurionSmartServiceConfig *_serviceConfig;
    long long _skipTimes;
    long long _lastRunTime;
    NSDictionary *_appSessionFactorsConfigMap;
    FurionSmartServiceOutputData *_lastResult;
    NSObject<OS_dispatch_queue> *_serviceRunQueue;
}

@property (retain, nonatomic) FurionSmartServiceMonitor *monitor;
@property (retain, nonatomic) NSString *serviceName;
@property (retain, nonatomic) id<FurionSmartEngineRunnerProtocol> engineRunner;
@property (retain, nonatomic) FurionSmartServiceConfig *serviceConfig;
@property (nonatomic) BOOL serviceHasInit;
@property (nonatomic) long long skipTimes;
@property (nonatomic) BOOL isRunning;
@property (nonatomic) long long lastRunTime;
@property (retain, nonatomic) NSDictionary *appSessionFactorsConfigMap;
@property (retain, nonatomic) FurionSmartServiceOutputData *lastResult;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *serviceRunQueue;
@property (weak, nonatomic) id<FurionSmartCommonServiceDelegate> delegate;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (void)setServiceConfig:(id)arg0;
- (id)serviceConfig;
- (void)configService:(id /* block */)arg0;
- (void)setAppSessionFactorsConfigMap:(id)arg0;
- (void)runWithConfigBuilder:(id /* block */)arg0 completion:(id /* block */)arg1;
- (long long)skipTimes;
- (void)setSkipTimes:(long long)arg0;
- (id)appSessionFactorsConfigMap;
- (BOOL)serviceHasInit;
- (void)setServiceHasInit:(BOOL)arg0;
- (void)addFactorConfigIfNeeded;
- (void)setServiceRunQueue:(id)arg0;
- (void)doServiceInit;
- (void)setEngineRunner:(id)arg0;
- (id)engineRunner;
- (BOOL)ignoreRunWithParams:(id)arg0;
- (id)serviceRunQueue;
- (void)_innerRunWithServiceRunKey:(id)arg0 config:(id)arg1 completion:(id /* block */)arg2;
- (void)setIsRunning:(BOOL)arg0;
- (BOOL)isRunning;
- (BOOL)enabled;
- (void).cxx_destruct;
- (id)monitor;
- (id)initWithServiceName:(id)arg0;
- (void)setMonitor:(id)arg0;
- (id)delegate;
- (id)serviceName;
- (void)prepare;
- (void)setDelegate:(id)arg0;
- (void)dealloc;
- (void)setServiceName:(id)arg0;
- (long long)lastRunTime;
- (void)setLastRunTime:(long long)arg0;
- (id)engineConfig;
- (id)lastResult;
- (void)setLastResult:(id)arg0;

@end
