//
//     Generated by private class-dump
//

@class NSMutableDictionary, RTVRetayableJetWebSocketClient, RTVJetRetryableHttpWebAccess, NSString;
@protocol RxInjector, RTVJetConfigManagerInterface;

@interface RTVJetWebAsyncCall : NSObject <RTVJetRequestRetryObserverProtocol> {
    struct Mutex { int _type; union { struct mutex { struct _opaque_pthread_mutex_t { long long __sig; char __opaque[56]; } __m_; } _plain; struct recursive_mutex { struct _opaque_pthread_mutex_t { long long __sig; char __opaque[56]; } __m_; } _recursive; } ; } _lock;
    int _method;
    int _service;
    NSString *_businessTag;
    NSString *_apiName;
    id _messageObject;
    NSString *_requestID;
    NSString *_skdVersion;
    unsigned long long _httpMaxTry;
    unsigned long long _webSocketMaxTry;
    double _backoffDuration;
    double _webSocketTimeout;
    unsigned long long _currentRetryCount;
    NSMutableDictionary *_timedDictionary;
    id<RTVJetConfigManagerInterface> _configManager;
    id<RxInjector> _injector;
    RTVJetRetryableHttpWebAccess *_httpWebAccess;
    RTVRetayableJetWebSocketClient *_webSocketClient;
}

@property (nonatomic) unsigned long long currentRetryCount;
@property (readonly, nonatomic) NSMutableDictionary *timedDictionary;
@property (readonly, nonatomic) id<RTVJetConfigManagerInterface> configManager;
@property (readonly, weak, nonatomic) id<RxInjector> injector;
@property (readonly, nonatomic) RTVJetRetryableHttpWebAccess *httpWebAccess;
@property (readonly, nonatomic) RTVRetayableJetWebSocketClient *webSocketClient;
@property (nonatomic) int service;
@property (copy, nonatomic) NSString *skdVersion;
@property (nonatomic) unsigned long long httpMaxTry;
@property (nonatomic) unsigned long long webSocketMaxTry;
@property (nonatomic) double backoffDuration;
@property (readonly, copy, nonatomic) NSString *businessTag;
@property (readonly, copy, nonatomic) NSString *apiName;
@property (readonly, nonatomic) int method;
@property (retain, nonatomic) id messageObject;
@property (readonly, copy, nonatomic) NSString *requestID;
@property (nonatomic) double webSocketTimeout;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (void)rxAwakeFromPropertyInjection;
- (void)setWebSocketTimeout:(double)arg0;
- (id)httpWebAccess;
- (void)setHttpMaxTry:(unsigned long long)arg0;
- (void)setWebSocketMaxTry:(unsigned long long)arg0;
- (void)setBackoffDuration:(double)arg0;
- (unsigned long long)httpMaxTry;
- (unsigned long long)webSocketMaxTry;
- (double)backoffDuration;
- (double)webSocketTimeout;
- (id)__monitorErrorInfoWithError:(id)arg0;
- (id)initWithApiName:(id)arg0 service:(int)arg1 method:(int)arg2 messageObject:(id)arg3 businessTag:(id)arg4;
- (id)messageObject;
- (void)setMessageObject:(id)arg0;
- (id)skdVersion;
- (id)webSocketClient;
- (id)sendWithWebSocket;
- (id)sendWithHttp;
- (void)urlRequestWillStart:(id)arg0 retryWithTimes:(unsigned long long)arg1;
- (void)urlRequestDidCompletion:(id)arg0 retryTimes:(unsigned long long)arg1 response:(id)arg2 error:(id)arg3;
- (id)businessTag;
- (void)configCall:(id)arg0;
- (void)setSkdVersion:(id)arg0;
- (void)__storeStartTimeForMarker:(id)arg0;
- (long long)__queryCostTimeForMarker:(id)arg0;
- (void)__trackRequestWithDuration:(long long)arg0 response:(id)arg1 error:(id)arg2;
- (id)__generateSequenceID;
- (id)__timeMarkerWithRetryTimes:(unsigned long long)arg0 requestType:(long long)arg1;
- (void)__monitorService:(id)arg0 metric:(id)arg1 category:(id)arg2;
- (id)timedDictionary;
- (void)wsRequestWillStart:(id)arg0 retryWithTimes:(unsigned long long)arg1;
- (void)wsRequestDidCompletion:(id)arg0 retryTimes:(unsigned long long)arg1 response:(id)arg2 error:(id)arg3;
- (id)execute;
- (id)requestID;
- (void).cxx_destruct;
- (void)setService:(int)arg0;
- (int)method;
- (id)injector;
- (id)configManager;
- (int)service;
- (id).cxx_construct;
- (unsigned long long)currentRetryCount;
- (void)setCurrentRetryCount:(unsigned long long)arg0;
- (id)apiName;

@end
