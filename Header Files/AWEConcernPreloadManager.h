//
//     Generated by private class-dump
//

@class NSString, NSTimer, AWEAwemeModel, AWESmartFeedResponseModel;
@protocol AWESmartFeedDataControllerProtocol;

@interface AWEConcernPreloadManager : NSObject <AWEUserMessage, AWEConcernPreloadManagerProtocol> {
    BOOL isInProgress;
    BOOL _canceled;
    BOOL _isAppInForeground;
    BOOL _hasHotFeedColdPredict;
    NSString *currentPageName;
    long long currentTabPosition;
    NSString *leftTabName;
    NSString *rightTabName;
    long long leftVideoCount;
    long long noticeCount;
    AWEAwemeModel *currentAwemeModel;
    AWESmartFeedResponseModel *preloadResponseModel;
    NSString *_noticeType;
    long long _followTabPosition;
    id<AWESmartFeedDataControllerProtocol> _preloadDataController;
    NSTimer *_timer;
    double _timeStampWhenColdLauch;
    double _expiredTimeStamp;
}

@property (retain, nonatomic) id<AWESmartFeedDataControllerProtocol> preloadDataController;
@property (retain, nonatomic) NSTimer *timer;
@property (nonatomic) double timeStampWhenColdLauch;
@property (nonatomic) double expiredTimeStamp;
@property (nonatomic) BOOL canceled;
@property (nonatomic) BOOL isAppInForeground;
@property (nonatomic) BOOL hasHotFeedColdPredict;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) long long noticeCount;
@property (nonatomic) long long leftVideoCount;
@property (nonatomic) long long followTabPosition;
@property (copy, nonatomic) NSString *noticeType;
@property (copy, nonatomic) NSString *leftTabName;
@property (copy, nonatomic) NSString *rightTabName;
@property (copy, nonatomic) NSString *currentPageName;
@property (nonatomic) long long currentTabPosition;
@property (retain, nonatomic) AWEAwemeModel *currentAwemeModel;
@property (nonatomic) BOOL isInProgress;
@property (retain, nonatomic) AWESmartFeedResponseModel *preloadResponseModel;

+ (id)allocWithZone:(struct _NSZone { } *)arg0;
+ (id)sharedInstance;

- (void)didFinishLogout;
- (void)didFinishUnFollowUser:(id)arg0 status:(long long)arg1 error:(id)arg2;
- (void)didFinishBlockUser:(id)arg0 status:(long long)arg1;
- (id)currentAwemeModel;
- (void)setNoticeType:(id)arg0;
- (void)registerNotification;
- (id)currentPageName;
- (id)preloadDataController;
- (void)setPreloadDataController:(id)arg0;
- (unsigned long long)awe_nunkiFollowTabPreloadDelayTime;
- (void)readFromStorage;
- (void)onVideoStartPlay:(id)arg0;
- (void)setPreloadResponseModel:(id)arg0;
- (void)setExpiredTimeStamp:(double)arg0;
- (id)responseKeyForCurrentUser;
- (id)expireTimeKeyForCurrentUser;
- (id)preloadResponseModel;
- (void)preloadFollowFeedWithCompletion:(id /* block */)arg0;
- (void)clearPreload;
- (double)timeStampWhenColdLauch;
- (void)trackPreloadMissWithReason:(unsigned long long)arg0;
- (void)predictWithColdLaunch:(BOOL)arg0;
- (double)expiredTimeStamp;
- (void)setFollowTabPosition:(long long)arg0;
- (long long)followTabPosition;
- (void)setLeftTabName:(id)arg0;
- (void)setRightTabName:(id)arg0;
- (void)removeItemWithAuthorID:(id)arg0;
- (long long)noticeCount;
- (id)leftTabName;
- (id)rightTabName;
- (void)setTimeStampWhenColdLauch:(double)arg0;
- (void)setHasHotFeedColdPredict:(BOOL)arg0;
- (void)saveToStorage;
- (BOOL)hasHotFeedColdPredict;
- (void)cancelPreload;
- (void)addPreloadResultToFakeRefreshList;
- (BOOL)preloadResultExpired;
- (BOOL)isExperimentOn;
- (BOOL)preloadResultReady;
- (id)featureParams;
- (void)configWithTabList:(id)arg0;
- (void)trackPreloadHitRate:(BOOL)arg0;
- (void)setNoticeCount:(long long)arg0;
- (long long)leftVideoCount;
- (void)setLeftVideoCount:(long long)arg0;
- (void)setCurrentPageName:(id)arg0;
- (long long)currentTabPosition;
- (void)setCurrentTabPosition:(long long)arg0;
- (void)setCurrentAwemeModel:(id)arg0;
- (id)timer;
- (id)init;
- (void)startTimer;
- (void).cxx_destruct;
- (void)stopTimer;
- (id)copyWithZone:(struct _NSZone { } *)arg0;
- (void)setIsInProgress:(BOOL)arg0;
- (BOOL)canceled;
- (BOOL)isInProgress;
- (void)setTimer:(id)arg0;
- (void)timerFired;
- (void)setCanceled:(BOOL)arg0;
- (void)dealloc;
- (id)mutableCopyWithZone:(struct _NSZone { } *)arg0;
- (id)noticeType;
- (void)appWillEnterForeground;
- (void)appDidEnterBackground;
- (void)setIsAppInForeground:(BOOL)arg0;
- (BOOL)isAppInForeground;

@end
