//
//     Generated by private class-dump
//

@class VEMVPRenderer, NSString, HTSGLContext, HTSGLFramebuffer;

@interface HTSRawDataOutputRender : NSObject <HTSGLInput> {
    struct CGSize { double width; double height; } _imageSize;
    unsigned long long _inputRotation;
    BOOL _outputBGRA;
    HTSGLFramebuffer *_originalFramebuffer;
    BOOL _hasReadFromTheCurrentFrame;
    char *_rawBytesForImage;
    BOOL _lockNextFramebuffer;
    BOOL _lockOutFramebuffer;
    struct __CVBuffer { } *_pixelBuf;
    BOOL _enable10bitRT;
    BOOL _enabled;
    BOOL _useNOcacheFrameBuffer;
    BOOL _enableMultiTrack;
    id /* block */ _newFrameAvailableBlock;
    NSString *_route;
    HTSGLContext *_context;
    HTSGLFramebuffer *_redrawedFramebuffer;
    struct __CVBuffer { } *_externalPixelBuffer;
    VEMVPRenderer *_textureMvpRenderer;
}

@property (retain, nonatomic) VEMVPRenderer *textureMvpRenderer;
@property (readonly) char *rawBytesForImage;
@property (copy, nonatomic) id /* block */ newFrameAvailableBlock;
@property (nonatomic) BOOL enabled;
@property (readonly, nonatomic) HTSGLContext *context;
@property (readonly, nonatomic) HTSGLFramebuffer *redrawedFramebuffer;
@property (nonatomic) struct __CVBuffer { } *externalPixelBuffer;
@property (nonatomic) BOOL useNOcacheFrameBuffer;
@property (nonatomic) BOOL enableMultiTrack;
@property (readonly) NSString *route;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (void)setInputRotation:(unsigned long long)arg0 atIndex:(long long)arg1;
- (void)setInputFramebuffer:(id)arg0 atIndex:(long long)arg1;
- (void)setInputSize:(struct CGSize { double x0; double x1; })arg0 atIndex:(long long)arg1;
- (void)endProcessing;
- (long long)nextAvailableTextureIndex;
- (struct CGSize { double x0; double x1; })maximumOutputSize;
- (BOOL)shouldIgnoreUpdatesToThisTarget;
- (void)newFrameReadyAtTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg0 atIndex:(long long)arg1 exceptionBlock:(id /* block */)arg2;
- (BOOL)wantsMonochromeInput;
- (void)setCurrentlyReceivingMonochromeInput:(BOOL)arg0;
- (BOOL)enableMultiTrack;
- (void)setEnableMultiTrack:(BOOL)arg0;
- (id)initWithImageSize:(struct CGSize { double x0; double x1; })arg0 resultsInBGRAFormat:(BOOL)arg1;
- (id /* block */)newFrameAvailableBlock;
- (void)setNewFrameAvailableBlock:(id /* block */)arg0;
- (char *)rawBytesForImage;
- (BOOL)useNOcacheFrameBuffer;
- (struct __CVBuffer { } *)externalPixelBuffer;
- (void)renderAtInternalSize;
- (struct GPUByteColorVector { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; })colorAtLocation:(struct CGPoint { double x0; double x1; })arg0;
- (id)getOriginalFramebuffer;
- (id)getRedrawedFrameBuffer;
- (id)getOutputFramebuffer;
- (struct __CVBuffer { } *)getRedrawedPixelBuffer;
- (struct __CVBuffer { } *)getOriginalPixelBuffer;
- (void)unlockOriginalFramebuffer;
- (id)redrawedFramebuffer;
- (void)setUseNOcacheFrameBuffer:(BOOL)arg0;
- (id)textureMvpRenderer;
- (void)setTextureMvpRenderer:(id)arg0;
- (id)initWithImageSize:(struct CGSize { double x0; double x1; })arg0 resultsInBGRAFormat:(BOOL)arg1 context:(id)arg2;
- (void)setExternalPixelBuffer:(struct __CVBuffer { } *)arg0;
- (BOOL)enabled;
- (void).cxx_destruct;
- (id)route;
- (id)context;
- (void)setEnabled:(BOOL)arg0;
- (void)dealloc;
- (void)setImageSize:(struct CGSize { double x0; double x1; })arg0;

@end
