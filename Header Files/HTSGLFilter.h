//
//     Generated by private class-dump
//

@class VERenderer, NSString, NSMutableDictionary, HTSGLContext, HTSGLFramebuffer, NSObject;
@protocol OS_dispatch_semaphore;

@interface HTSGLFilter : HTSFilterInterface <HTSGLInput> {
    HTSGLFramebuffer *_firstInputFramebuffer;
    float _backgroundColorRed;
    float _backgroundColorGreen;
    float _backgroundColorBlue;
    float _backgroundColorAlpha;
    BOOL _isEndProcessing;
    struct CGSize { double width; double height; } _currentFilterSize;
    unsigned long long _inputRotation;
    NSMutableDictionary *_uniformStateRestorationBlocks;
    NSObject<OS_dispatch_semaphore> *_imageCaptureSemaphore;
    VERenderer *_glRenderer;
    BOOL _preventRendering;
    BOOL _breakNextRendering;
    NSString *_route;
    struct __CVBuffer { } *_renderTarget;
    id /* block */ _exceptionBlock;
    struct CGSize { double width; double height; } _outputFrameSize;
}

@property struct __CVBuffer { } *renderTarget;
@property (nonatomic) BOOL preventRendering;
@property (nonatomic) BOOL breakNextRendering;
@property (nonatomic) struct CGSize { double width; double height; } outputFrameSize;
@property (copy, nonatomic) id /* block */ exceptionBlock;
@property (readonly) HTSGLContext *context;
@property (readonly) NSString *route;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (const float *)textureCoordinatesForRotation:(unsigned long long)arg0;

- (BOOL)preventRendering;
- (struct CGSize { double x0; double x1; })outputFrameSize;
- (void)renderToTextureWithVertices:(const float *)arg0 textureCoordinates:(const float *)arg1;
- (struct CGSize { double x0; double x1; })rotatedSize:(struct CGSize { double x0; double x1; })arg0 forIndex:(long long)arg1;
- (void)setupFilterForSize:(struct CGSize { double x0; double x1; })arg0;
- (void)setBackgroundColorRed:(float)arg0 green:(float)arg1 blue:(float)arg2 alpha:(float)arg3;
- (void)setInteger:(int)arg0 forUniformName:(id)arg1;
- (void)setFloat:(float)arg0 forUniformName:(id)arg1;
- (void)setSize:(struct CGSize { double x0; double x1; })arg0 forUniformName:(id)arg1;
- (void)setPoint:(struct CGPoint { double x0; double x1; })arg0 forUniformName:(id)arg1;
- (void)setFloatVec3:(struct HTSGPUVector3 { float x0; float x1; float x2; })arg0 forUniformName:(id)arg1;
- (void)setFloatVec4:(struct HTSGPUVector4 { float x0; float x1; float x2; float x3; })arg0 forUniform:(id)arg1;
- (void)setFloatArray:(float *)arg0 length:(int)arg1 forUniform:(id)arg2;
- (void)setPreventRendering:(BOOL)arg0;
- (void)setRenderTarget:(struct __CVBuffer { } *)arg0;
- (void)setOutputFrameSize:(struct CGSize { double x0; double x1; })arg0;
- (struct CGImage { } *)newCGImageFromCurrentlyProcessedOutput;
- (void)forceProcessingAtSize:(struct CGSize { double x0; double x1; })arg0;
- (void)forceProcessingAtSizeRespectingAspectRatio:(struct CGSize { double x0; double x1; })arg0;
- (void)useNextFrameForImageCapture;
- (void)setInputRotation:(unsigned long long)arg0 atIndex:(long long)arg1;
- (void)setInputFramebuffer:(id)arg0 atIndex:(long long)arg1;
- (void)newFrameReadyAtTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg0 atIndex:(long long)arg1;
- (void)setInputSize:(struct CGSize { double x0; double x1; })arg0 atIndex:(long long)arg1;
- (void)informTargetsAboutNewFrameAtTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg0;
- (struct CGSize { double x0; double x1; })sizeOfFBO;
- (void)endProcessing;
- (long long)nextAvailableTextureIndex;
- (struct CGSize { double x0; double x1; })maximumOutputSize;
- (void)initializeRenderer:(id)arg0;
- (struct CGImage { } *)newCGImageFromCurrentlyProcessedOutput:(struct __CFString { } *)arg0;
- (BOOL)breakNextRendering;
- (void)setMatrix3f:(struct HTSGPUMatrix3x3 { struct HTSGPUVector3 { float x0; float x1; float x2; } x0; struct HTSGPUVector3 { float x0; float x1; float x2; } x1; struct HTSGPUVector3 { float x0; float x1; float x2; } x2; })arg0 uniformName:(id)arg1;
- (void)setMatrix4f:(struct HTSGPUMatrix4x4 { struct HTSGPUVector4 { float x0; float x1; float x2; float x3; } x0; struct HTSGPUVector4 { float x0; float x1; float x2; float x3; } x1; struct HTSGPUVector4 { float x0; float x1; float x2; float x3; } x2; struct HTSGPUVector4 { float x0; float x1; float x2; float x3; } x3; })arg0 uniformName:(id)arg1;
- (void)setPointArray:(struct CGPoint { double x0; double x1; } *)arg0 length:(int)arg1 uniformName:(id)arg2;
- (void)setIntegerArray:(int *)arg0 length:(int)arg1 uniformName:(id)arg2;
- (id /* block */)exceptionBlock;
- (void)newFrameReadyAtTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg0 atIndex:(long long)arg1 exceptionBlock:(id /* block */)arg2;
- (BOOL)wantsMonochromeInput;
- (void)setExceptionBlock:(id /* block */)arg0;
- (void)resetRenderEnv;
- (void)setBreakNextRendering:(BOOL)arg0;
- (id)initWithContext:(id)arg0;
- (void).cxx_destruct;
- (id)route;
- (void)dealloc;
- (struct __CVBuffer { } *)renderTarget;
- (void)initializeAttributes;

@end
