//
//     Generated by private class-dump
//

@class LSAudioBufferQueue, LiveStreamCaptureConfig, LiveStreamSession, LSGLContext, LSGLPictureOutput, NSMutableArray, NSString, LiveStreamMultiTimerManager, LSGLPreviewView, NSArray, NSMutableDictionary, LiveCoreRenderFilter, NSObject, LiveStreamRawDataHelper, NSLock, LSGLEffectFilter, LiveVideoNoiseEvaluate, LiveStreamAudioRecord, LSGLSplitFilter, LSLiveAudioConverter, LSGLCropFilter, LSGLPictureMixer, LSGLPictureInput;
@protocol OS_dispatch_source, LiveStreamCaptureEffectDelegate, OS_dispatch_queue, LiveStreamCaptureDelegate, OS_dispatch_semaphore, LiveStreamAudioCatchDelegate, RTVEffectModelWrapper, LiveStreamCaptureAudioAuxDelegate;

@interface LiveStreamCapture : NSObject <RTVCameraWrapper, LiveStreamSessionAudioProtocol, LSGLPictureOutputDelegate, LSGLPreviewViewDelegate> {
    BOOL _enableEffect;
    BOOL _enableMixFilterEffect;
    LSGLPictureInput *_gl_input;
    LSGLPictureInput *_gl_externel_mix_input;
    LSGLPictureOutput *_gl_output;
    LSGLPictureOutput *_gl_output_bypass;
    LSGLEffectFilter *_gl_effect_filter;
    struct AudioStrangeInterface { void /* function */ **x0; } *_audioStrangeEffectFilter;
    LSGLEffectFilter *_gl_effect_mixed_filter;
    LSGLSplitFilter *_gl_split_filter;
    LSGLPictureMixer *_gl_mixer;
    LSGLPictureInput *_gl_movie_input;
    LSGLPreviewView *_gl_movie_render_view;
    LSGLCropFilter *_gl_single_crop_filter;
    LSGLCropFilter *_gl_input_callback_crop_filter;
    LSGLCropFilter *_gl_effect_callback_crop_filter;
    LiveVideoNoiseEvaluate *_video_noise_evaluate;
    BOOL _enable_single_view;
    BOOL _enable_externel_mix_single_view;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _crop_region_rect;
    BOOL _use_mixer;
    BOOL _use_output;
    unsigned long long _output_type;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _preview_crop_rect;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _preview_display_rect;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _karaokeCameraRect;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _karaokeMovieRect;
    NSMutableDictionary *_layer_input_map;
    struct CGSize { double width; double height; } _bypass_size;
    unsigned int _bypass_fmt;
    BOOL _isLandscapeVideo;
    unsigned long long _bypass_type;
    NSObject<OS_dispatch_queue> *_graph_queue;
    NSObject<OS_dispatch_queue> *_audio_queue;
    NSObject<OS_dispatch_queue> *_videocallback_queue;
    NSObject<OS_dispatch_queue> *_bypassVideoCallback_queue;
    NSObject<OS_dispatch_queue> *_bgmplayer_queue;
    NSObject<OS_dispatch_queue> *_push_frame_optimize_queue;
    void *LSCaptureQueueKey;
    void *LSCaptureAudioQueueKey;
    struct unique_ptr<LSLiveObserverInterface::ObserverInterface, std::default_delete<LSLiveObserverInterface::ObserverInterface>> { struct __compressed_pair<LSLiveObserverInterface::ObserverInterface *, std::default_delete<LSLiveObserverInterface::ObserverInterface>> { struct ObserverInterface *__value_; } __ptr_; } _audio_player_factory;
    struct mutex { struct _opaque_pthread_mutex_t { long long __sig; char __opaque[56]; } __m_; } _data_mutex;
    struct atomic<bool> { struct __cxx_atomic_impl<bool, std::__cxx_atomic_base_impl<bool>> { _Atomic BOOL __a_value; } __a_; } _b_can_input;
    struct mutex { struct _opaque_pthread_mutex_t { long long __sig; char __opaque[56]; } __m_; } _inputBufferCb_mutex;
    struct mutex { struct _opaque_pthread_mutex_t { long long __sig; char __opaque[56]; } __m_; } _effectBufferCb_mutex;
    struct mutex { struct _opaque_pthread_mutex_t { long long __sig; char __opaque[56]; } __m_; } _single_view_mutex;
    struct mutex { struct _opaque_pthread_mutex_t { long long __sig; char __opaque[56]; } __m_; } _mixer_mutex;
    struct composer_mode_type_t { int x0; int x1; } *composer_mode_type;
    NSMutableDictionary *effect_path_dict;
    NSArray *composer_nodes;
    struct unique_ptr<std::vector<composer_node_tag_value_t *>, std::default_delete<std::vector<composer_node_tag_value_t *>>> { struct __compressed_pair<std::vector<composer_node_tag_value_t *> *, std::default_delete<std::vector<composer_node_tag_value_t *>>> { void *__value_; } __ptr_; } node_models;
    BOOL _should_check_input_size;
    NSObject<OS_dispatch_source> *_perfCheckTimer;
    NSMutableArray *_previewFpsList;
    NSMutableArray *_summaryList;
    int _getPreviewFpsInterval;
    int _maxSummarySize;
    int _lastMetaFpsForPerfCheck;
    struct scoped_refptr<avframework::EstimateInterface<int>> { void *ptr_; } _inputFrameRateEstimator;
    struct scoped_refptr<avframework::EstimateInterface<int>> { void *ptr_; } _outputFrameRateEstimator;
    struct scoped_refptr<avframework::EstimateInterface<int>> { void *ptr_; } _previewFrameRateEstimator;
    struct scoped_refptr<avframework::EstimateInterface<int>> { void *ptr_; } _nilFrameRateEstimator;
    struct unique_ptr<avframework::AudioResample, std::default_delete<avframework::AudioResample>> { struct __compressed_pair<avframework::AudioResample *, std::default_delete<avframework::AudioResample>> { struct AudioResample *__value_; } __ptr_; } audio_recognize_resampler;
    struct unique_ptr<avframework::AudioFrame, std::default_delete<avframework::AudioFrame>> { struct __compressed_pair<avframework::AudioFrame *, std::default_delete<avframework::AudioFrame>> { struct AudioFrame *__value_; } __ptr_; } audio_frame_for_recognizing;
    BOOL speechRecognizeEanble;
    LSAudioBufferQueue *_audio_buffer_queue;
    BOOL _bgmPlaying;
    LSAudioBufferQueue *_movieAudioMixQueue;
    LSAudioBufferQueue *_movieAudioPlayQueue;
    BOOL _startMoviePlay;
    long long _startMoviePlayTimeStamp;
    struct AudioStatsManager { struct atomic<unsigned long long> { struct __cxx_atomic_impl<unsigned long long, std::__cxx_atomic_base_impl<unsigned long long>> { _Atomic unsigned long long __a_value; } __a_; } audio_frame_count_; struct mutex { struct _opaque_pthread_mutex_t { long long __sig; char __opaque[56]; } __m_; } audio_process_mutex_; long long audio_process_invoked_timestamp_; struct scoped_refptr<avframework::EstimateInterface<long long>> { void *ptr_; } audio_process_invoked_estimate_; struct mutex { struct _opaque_pthread_mutex_t { long long __sig; char __opaque[56]; } __m_; } cost_time_mutex_; struct scoped_refptr<avframework::EstimateInterface<long long>> { void *ptr_; } play_cost_time_estimate_; struct atomic<unsigned long long> { struct __cxx_atomic_impl<unsigned long long, std::__cxx_atomic_base_impl<unsigned long long>> { _Atomic unsigned long long __a_value; } __a_; } play_duration_; struct atomic<unsigned long long> { struct __cxx_atomic_impl<unsigned long long, std::__cxx_atomic_base_impl<unsigned long long>> { _Atomic unsigned long long __a_value; } __a_; } total_samples_time_; } _audioStatsManager;
    LSAudioBufferQueue *_karaokeAudioMixQueue;
    LSAudioBufferQueue *_karaokeAudioPlayQueue;
    struct unique_ptr<avframework::FFmpegAudioResampler, std::default_delete<avframework::FFmpegAudioResampler>> { struct __compressed_pair<avframework::FFmpegAudioResampler *, std::default_delete<avframework::FFmpegAudioResampler>> { struct FFmpegAudioResampler *__value_; } __ptr_; } _karaokeAudioResampler;
    struct mutex { struct _opaque_pthread_mutex_t { long long __sig; char __opaque[56]; } __m_; } _karaokeAudioMixQueueMutex;
    struct mutex { struct _opaque_pthread_mutex_t { long long __sig; char __opaque[56]; } __m_; } _karaokeAudioPlayQueueMutex;
    BOOL audioEffectProcessEnable;
    double initVideoPts;
    double initSystemTime;
    BOOL _useAudioTimeBase;
    BOOL _previewMirror;
    BOOL _streamMirror;
    BOOL _bypassMirror;
    LSGLPreviewView *_gl_remote_render_view;
    NSString *_gl_graph_description;
    double _nextFramePts;
    double _smoothedFramePts;
    struct unique_ptr<avframework::FFmpegAudioResampler, std::default_delete<avframework::FFmpegAudioResampler>> { struct __compressed_pair<avframework::FFmpegAudioResampler *, std::default_delete<avframework::FFmpegAudioResampler>> { struct FFmpegAudioResampler *__value_; } __ptr_; } _audioResampler;
    struct mutex { struct _opaque_pthread_mutex_t { long long __sig; char __opaque[56]; } __m_; } _movieAudioMixQueueMutex;
    struct mutex { struct _opaque_pthread_mutex_t { long long __sig; char __opaque[56]; } __m_; } _movieAudioPlayQueueMutex;
    struct __CVBuffer { } *_lastMovieImageBuffer;
    struct CGSize { double width; double height; } _lastCameraOutputSize;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _cameraLayerRect;
    struct CGSize { double width; double height; } _lastCameraInputSize;
    double _lastCameraInputTime;
    BOOL _enableVideoResOpt;
    BOOL _enableAddMixCheck;
    struct map<int, std::unique_ptr<OutAuxStreamInfo>, std::less<int>, std::allocator<std::pair<const int, std::unique_ptr<OutAuxStreamInfo>>>> { struct __tree<std::__value_type<int, std::unique_ptr<OutAuxStreamInfo>>, std::__map_value_compare<int, std::__value_type<int, std::unique_ptr<OutAuxStreamInfo>>, std::less<int>, true>, std::allocator<std::__value_type<int, std::unique_ptr<OutAuxStreamInfo>>>> { void *__begin_node_; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<int, std::unique_ptr<OutAuxStreamInfo>>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, std::__map_value_compare<int, std::__value_type<int, std::unique_ptr<OutAuxStreamInfo>>, std::less<int>, true>> { unsigned long long __value_; } __pair3_; } __tree_; } _audioOutAuxStreamInfoMap;
    struct mutex { struct _opaque_pthread_mutex_t { long long __sig; char __opaque[56]; } __m_; } _outAuxStreamMapMutex;
    LSLiveAudioConverter *_audioConverter;
    struct AudioStreamBasicDescription { double mSampleRate; unsigned int mFormatID; unsigned int mFormatFlags; unsigned int mBytesPerPacket; unsigned int mFramesPerPacket; unsigned int mBytesPerFrame; unsigned int mChannelsPerFrame; unsigned int mBitsPerChannel; unsigned int mReserved; } _audioStreamBasicDescription;
    struct unique_ptr<avframework::AudioCatchInterface, std::default_delete<avframework::AudioCatchInterface>> { struct __compressed_pair<avframework::AudioCatchInterface *, std::default_delete<avframework::AudioCatchInterface>> { struct AudioCatchInterface *__value_; } __ptr_; } _audioCatcher;
    struct unique_ptr<AudioCatchCallbackImpl, std::default_delete<AudioCatchCallbackImpl>> { struct __compressed_pair<AudioCatchCallbackImpl *, std::default_delete<AudioCatchCallbackImpl>> { struct AudioCatchCallbackImpl *__value_; } __ptr_; } _audioCatchCallback;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _croppedInputFrameRegion;
    struct CGSize { double width; double height; } _croppedInputFrameOriginSize;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _croppedEffectFrameRegion;
    struct CGSize { double width; double height; } _croppedEffectFrameOriginSize;
    struct map<std::string, avframework::scoped_refptr<avframework::EstimateInterface<int>>, std::less<std::string>, std::allocator<std::pair<const std::string, avframework::scoped_refptr<avframework::EstimateInterface<int>>>>> { struct __tree<std::__value_type<std::string, avframework::scoped_refptr<avframework::EstimateInterface<int>>>, std::__map_value_compare<std::string, std::__value_type<std::string, avframework::scoped_refptr<avframework::EstimateInterface<int>>>, std::less<std::string>, true>, std::allocator<std::__value_type<std::string, avframework::scoped_refptr<avframework::EstimateInterface<int>>>>> { void *__begin_node_; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<std::string, avframework::scoped_refptr<avframework::EstimateInterface<int>>>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, avframework::scoped_refptr<avframework::EstimateInterface<int>>>, std::less<std::string>, true>> { unsigned long long __value_; } __pair3_; } __tree_; } _effectAuxFrameRateEstimatorMap;
    LSGLPictureMixer *_gl_pre_mixer;
    BOOL _enable_gl_pre_mix;
    NSMutableDictionary *_pre_mix_layer_input_map;
    BOOL _enable_algorithm_sei;
    NSMutableDictionary *_effectTrackRenderViewMap;
    LiveCoreRenderFilter *_render_filter;
    BOOL _purgeMemoryIfNeeded;
    BOOL _unableMixerWithSameFrameBuffer;
    BOOL _mixOnClient;
    BOOL _movieInteractOnlyPlay;
    BOOL _karaokeRunning;
    BOOL _enableKTVCamera;
    BOOL _enablePipelineKTVCamera;
    BOOL _enablePanorama;
    BOOL _needPlayMovieInteractAudio;
    BOOL _cloudRenderPrelink;
    BOOL _renderOnSingleView;
    BOOL _enableGameTimeCheck;
    BOOL _openVideoFrameOptimize;
    BOOL _useingOnlyCameraVideoBufferMode;
    BOOL _dumpRecording;
    BOOL _shouldUpdateMetadata;
    BOOL _bRecordingWav;
    BOOL _movieVideoScaleModeChanged;
    BOOL _memoryOptSwitch;
    BOOL _stableReliabilityOptimizationMixer;
    BOOL _bypassSkipRender;
    int _cameraLayerId;
    int _cameraZOrder;
    unsigned int _inPixelFmt;
    int _previewFps;
    int _dropCount;
    LiveStreamSession *_session;
    id /* block */ _logCallback;
    id<LiveStreamCaptureDelegate> _commonDelegate;
    id<LiveStreamCaptureAudioAuxDelegate> _audioAuxDelegate;
    id<LiveStreamCaptureEffectDelegate> _effectDelegate;
    id /* block */ _videoRecordCallback;
    long long _videoFPS;
    double _inCapFPS;
    double _outCapFPS;
    long long _cameraPosition;
    id /* block */ _getCameraFacingBlock;
    id /* block */ _getCameraISOBlock;
    unsigned long long _inRotateMode;
    unsigned long long _inputFillMode;
    id<LiveStreamAudioCatchDelegate> _catchDelegate;
    long long _previewMode;
    unsigned long long _previewFillMode;
    long long _captureCropMode;
    id /* block */ _inputFrameCallback;
    id /* block */ _effectFrameCallback;
    id /* block */ _croppedInputFrameCallback;
    id /* block */ _croppedEffectFrameCallback;
    id /* block */ _firstFrameRenderCallback;
    id /* block */ _roiInfoCallback;
    id /* block */ _effectInfoBlck;
    long long _videoFrameOptimizeCacheMaxCount;
    NSMutableArray *_videoFrameOptimizeAppendCacheArrM;
    NSObject<OS_dispatch_semaphore> *_videoFrameOptimizeAppendSemaphore;
    id /* block */ _isOnlyCameraVideoBufferModeBlock;
    LiveStreamCaptureConfig *_captureConfig;
    LSGLPreviewView *_gl_render_view;
    LSGLContext *_context;
    id /* block */ _videoProcessedCallback;
    id /* block */ _bypassCallback;
    id /* block */ _speechRecognizeCallback;
    id _observer;
    LiveStreamRawDataHelper *_mp4RawDataHelper;
    LiveStreamAudioRecord *_audioFileWriter;
    NSString *_recordingFilePath;
    LiveStreamMultiTimerManager *_pushMovieTimerManager;
    long long _movieVideoScaleMode;
    double _expectTimeIntervalMS;
    long long _gameLastTimeValue;
    NSMutableDictionary *_keyMap;
    NSLock *_keyMapLock;
    NSMutableDictionary *_auxEffectMap;
    NSLock *_auxEffectMapLock;
    struct CGSize { double width; double height; } _outputSize;
    struct CGSize { double width; double height; } _lastMovieResolution;
}

@property (copy, nonatomic) id /* block */ effectMsgBlock;
@property (readonly, nonatomic) int karaokeMovieLayerId;
@property (nonatomic) int karaokeMovieZOrder;
@property (retain, nonatomic) id<RTVEffectModelWrapper> currentSticker;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) BOOL openVideoFrameOptimize;
@property (nonatomic) long long videoFrameOptimizeCacheMaxCount;
@property (retain, nonatomic) NSMutableArray *videoFrameOptimizeAppendCacheArrM;
@property (retain, nonatomic) NSObject<OS_dispatch_semaphore> *videoFrameOptimizeAppendSemaphore;
@property (copy, nonatomic) id /* block */ isOnlyCameraVideoBufferModeBlock;
@property (nonatomic) BOOL useingOnlyCameraVideoBufferMode;
@property (nonatomic) int cameraLayerId;
@property (retain, nonatomic) LiveStreamCaptureConfig *captureConfig;
@property (retain, nonatomic) LSGLPreviewView *gl_render_view;
@property (retain, nonatomic) LSGLContext *context;
@property (copy, nonatomic) id /* block */ videoProcessedCallback;
@property (copy, nonatomic) id /* block */ bypassCallback;
@property (copy, nonatomic) id /* block */ speechRecognizeCallback;
@property (retain, nonatomic) id observer;
@property (nonatomic) BOOL dumpRecording;
@property (nonatomic) BOOL shouldUpdateMetadata;
@property (retain, nonatomic) LiveStreamRawDataHelper *mp4RawDataHelper;
@property (nonatomic) BOOL bRecordingWav;
@property (retain, nonatomic) LiveStreamAudioRecord *audioFileWriter;
@property (retain, nonatomic) NSString *recordingFilePath;
@property (retain, nonatomic) LiveStreamMultiTimerManager *pushMovieTimerManager;
@property (nonatomic) long long movieVideoScaleMode;
@property (nonatomic) BOOL movieVideoScaleModeChanged;
@property (nonatomic) double expectTimeIntervalMS;
@property (nonatomic) struct CGSize { double width; double height; } lastMovieResolution;
@property (nonatomic) long long gameLastTimeValue;
@property (nonatomic) int dropCount;
@property (nonatomic) BOOL memoryOptSwitch;
@property (nonatomic) BOOL stableReliabilityOptimizationMixer;
@property (nonatomic) BOOL bypassSkipRender;
@property (retain, nonatomic) NSMutableDictionary *keyMap;
@property (retain, nonatomic) NSLock *keyMapLock;
@property (retain, nonatomic) NSMutableDictionary *auxEffectMap;
@property (retain, nonatomic) NSLock *auxEffectMapLock;
@property (nonatomic) BOOL purgeMemoryIfNeeded;
@property (nonatomic) BOOL unableMixerWithSameFrameBuffer;
@property (nonatomic) BOOL mixOnClient;
@property (nonatomic) BOOL movieInteractOnlyPlay;
@property (nonatomic) BOOL karaokeRunning;
@property (weak, nonatomic) LiveStreamSession *session;
@property (nonatomic) BOOL enableKTVCamera;
@property (nonatomic) BOOL enablePipelineKTVCamera;
@property (nonatomic) BOOL enablePanorama;
@property (nonatomic) BOOL needPlayMovieInteractAudio;
@property (copy, nonatomic) id /* block */ logCallback;
@property (weak, nonatomic) id<LiveStreamCaptureDelegate> commonDelegate;
@property (weak, nonatomic) id<LiveStreamCaptureAudioAuxDelegate> audioAuxDelegate;
@property (weak, nonatomic) id<LiveStreamCaptureEffectDelegate> effectDelegate;
@property (readonly, nonatomic) BOOL cloudRenderPrelink;
@property (copy, nonatomic) id /* block */ videoRecordCallback;
@property (nonatomic) long long videoFPS;
@property double inCapFPS;
@property double outCapFPS;
@property (nonatomic) long long cameraPosition;
@property (copy, nonatomic) id /* block */ getCameraFacingBlock;
@property (copy, nonatomic) id /* block */ getCameraISOBlock;
@property (nonatomic) int cameraZOrder;
@property (nonatomic) unsigned int inPixelFmt;
@property (nonatomic) unsigned long long inRotateMode;
@property (nonatomic) struct CGSize { double width; double height; } outputSize;
@property (nonatomic) BOOL renderOnSingleView;
@property (nonatomic) unsigned long long inputFillMode;
@property (nonatomic) BOOL enableGameTimeCheck;
@property (weak, nonatomic) id<LiveStreamAudioCatchDelegate> catchDelegate;
@property (nonatomic) long long previewMode;
@property (nonatomic) int previewFps;
@property (nonatomic) unsigned long long previewFillMode;
@property (readonly, nonatomic) struct CGSize { double x0; double x1; } previewOffsetScale;
@property (nonatomic) long long captureCropMode;
@property (copy, nonatomic) id /* block */ inputFrameCallback;
@property (copy, nonatomic) id /* block */ effectFrameCallback;
@property (copy, nonatomic) id /* block */ croppedInputFrameCallback;
@property (copy, nonatomic) id /* block */ croppedEffectFrameCallback;
@property (copy, nonatomic) id /* block */ firstFrameRenderCallback;
@property (copy, nonatomic) id /* block */ roiInfoCallback;
@property (copy, nonatomic) id /* block */ effectInfoBlck;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (id)getEffectABInfoWithLicense:(id)arg0;
+ (void)setEffectABInfo:(id)arg0 withLicense:(id)arg1;
+ (void)setResourceFinder:(void *)arg0;
+ (void)setResourceFinder:(void *)arg0;
+ (void)parseAndConfigEffectABInfo:(id)arg0 allABInfo:(id)arg1;
+ (id)parseWithJsonString:(id)arg0;
+ (BOOL)containsEffectModule;
+ (BOOL)containsEffectModule;
+ (void)clearEffectTrash;
+ (void)clearEffectTrash;
+ (void)resetContext;

- (void)setColorFilterIntensity:(float)arg0;
- (id /* block */)logCallback;
- (void)setLogCallback:(id /* block */)arg0;
- (void)setAlgorithmResultRequirement:(unsigned long long)arg0 withCallbackBlock:(id /* block */)arg1;
- (void)setMaxStickerMemoryCache:(unsigned long long)arg0;
- (void *)getEffectHandle;
- (void)applyEffect:(id)arg0 type:(long long)arg1;
- (void)applyEffectKey:(id)arg0 image:(id)arg1;
- (id)getCurrentComposerNodes;
- (BOOL)handleTouchDown:(struct CGPoint { double x0; double x1; })arg0 withType:(unsigned long long)arg1;
- (BOOL)handleTouchUp:(struct CGPoint { double x0; double x1; })arg0 withType:(unsigned long long)arg1;
- (BOOL)handlePanEventWithTranslation:(struct CGPoint { double x0; double x1; })arg0 location:(struct CGPoint { double x0; double x1; })arg1;
- (BOOL)handleLongPressEventWithLocation:(struct CGPoint { double x0; double x1; })arg0;
- (BOOL)handleScaleEvent:(double)arg0;
- (void)setAlgorithmRequirement:(unsigned long long)arg0 algorithmParam:(unsigned long long)arg1 enableDetect:(BOOL)arg2;
- (void)resetFacePointBlock:(id /* block */)arg0;
- (void)resetEffectMsgListnerBlock:(id /* block */)arg0;
- (void)resetBachAlgorithmContourBlock:(id /* block */)arg0;
- (void)resetBachAlgorithmUncompressContourBlock:(id /* block */)arg0;
- (void)setEffectContourInfoHelperDataSource:(id)arg0;
- (int)getFaceCount;
- (void)setEffectABLicense:(id)arg0;
- (int)setComposerMode:(int)arg0 orderType:(int)arg1;
- (int)replaceComposerNodes:(id)arg0 withNewNodes:(id)arg1 andTags:(id)arg2;
- (void)setMusicNodeFilepath:(id)arg0;
- (void)setMusicPlayTimeRequestCallback:(id /* block */)arg0;
- (BOOL)handleEffectTouchEvent:(struct CGPoint { double x0; double x1; })arg0 pointerId:(unsigned int)arg1 force:(float)arg2 majorRadius:(float)arg3 eventType:(unsigned long long)arg4 pointerCount:(int)arg5;
- (void)fetchEffectDetectPhotoContentWithImage:(id)arg0 algorithmType:(id)arg1 isLastPhone:(BOOL)arg2 callback:(id /* block */)arg3;
- (void)setEffectRenderCacheTextureWithImage:(id)arg0 algorithmType:(id)arg1;
- (void)releaseEffectCapturedImage:(struct LSLiveEffectImage { char *x0; int x1; int x2; int x3; int x4; unsigned long long x5; void *x6; })arg0;
- (BOOL)enableAudioRecognize;
- (int)setRenderCacheStringValue:(id)arg0 jsonStr:(id)arg1;
- (int)get_audio_effect_status;
- (int)updateComposerNode:(id)arg0 tag:(id)arg1 value:(double)arg2;
- (int)updateComposerMultipleNodes:(int)arg0 paths:(id)arg1 keys:(id)arg2 values:(id)arg3;
- (void)applyIntensity:(struct LSLiveIntensityParam_t { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; float x10; float x11; float x12; float x13; float x14; float x15; float x16; float x17; float x18; float x19; float x20; float x21; float x22; float x23; float x24; float x25; float x26; float x27; float x28; float x29; float x30; float x31; float x32; })arg0 type:(long long)arg1;
- (void)applyReshape:(id)arg0 withIntensity:(struct LSLiveIntensityParam_t { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; float x10; float x11; float x12; float x13; float x14; float x15; float x16; float x17; float x18; float x19; float x20; float x21; float x22; float x23; float x24; float x25; float x26; float x27; float x28; float x29; float x30; float x31; float x32; })arg1;
- (int)composerCheckNodeExclusionWithNodePath:(id)arg0 nodeTag:(id)arg1 result:(int *)arg2;
- (int)composerExclusionCompareWithNewNodePath:(id)arg0 oldNodePath:(id)arg1 nodeKey:(id)arg2 result:(int *)arg3;
- (int)resetFrameCostStatistics;
- (id)getFrameCostStatistics;
- (float)getFilterIntensity:(id)arg0;
- (void)pauseEffect:(long long)arg0;
- (void)resumeEffect:(long long)arg0;
- (void)sendMessage:(unsigned long long)arg0 param1:(unsigned long long)arg1;
- (void)sendMessage:(unsigned long long)arg0 param1:(unsigned long long)arg1 param2:(unsigned long long)arg2;
- (void)sendMessage:(unsigned long long)arg0 param1:(unsigned long long)arg1 param2:(unsigned long long)arg2 userInfo:(id)arg3;
- (int)setEffectInputText:(id)arg0 arg1:(int)arg1 arg2:(int)arg2 arg3:(id)arg3;
- (int)setEffectNotifyKeyboardHide:(BOOL)arg0;
- (int)effectGetETData:(id *)arg0 withType:(int)arg1;
- (int)effectResetETDataWithType:(int)arg0;
- (void)setDoubleViewRect:(double)arg0 leftY:(double)arg1 width:(double)arg2 height:(double)arg3;
- (id)acquireEffectTrackHandle;
- (void)recycleEffectTrackHandle:(id)arg0;
- (void)restoreEffectIfNeeded;
- (int)applyComposerNodes:(id)arg0;
- (void)setContourCalculateThreshold:(long long)arg0;
- (void)setEnableContourCalculate:(BOOL)arg0;
- (void)startSpeechRecognizing;
- (void)startSpeechRecognizing;
- (void)stopSpeechRecognizing;
- (void)stopSpeechRecognizing;
- (BOOL)isSpeechRecognizing;
- (BOOL)isSpeechRecognizing;
- (int)appendComposerNodes:(id)arg0;
- (int)removeComposerNodes:(id)arg0;
- (int)reloadComposerNodes:(id)arg0;
- (void)setEffectABInfo:(id)arg0;
- (void)onLinkMicAudio:(void *)arg0 size:(unsigned int)arg1 numberOfFrames:(int)arg2 numberOfchannels:(int)arg3 sampleRate:(int)arg4 pts:(long long)arg5;
- (void)handleFullLinkEnableDumpNotifications:(id)arg0;
- (void)stopPushKaraokeAudio;
- (void)setKaraokeVideoMixerDescription:(long long)arg0 withPosition:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg1;
- (void)setEnableKaraokeMovieAudioPitchShifter:(BOOL)arg0;
- (BOOL)isEnableKaraokeMovieAudioPitchShifter;
- (void)setKaraokeMoviePitch:(double)arg0;
- (void)setKaraokeVideoMixerDescription:(long long)arg0 zOrder:(int)arg1 withPosition:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg2;
- (id)resetMovieRenderView:(id)arg0;
- (void)pushKaraokeMovieBuffer:(struct __CVBuffer { } *)arg0 andCMTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg1;
- (void)pushKaraokeMovieAudioBuffer:(float **)arg0 samples:(int)arg1;
- (void)prepareKaraokeMovieAudio:(int)arg0 channels:(int)arg1;
- (void)setKaraokeMixVolume:(float)arg0 captureVolume:(float)arg1;
- (void)setKaraokePlayVolume:(float)arg0;
- (int)karaokeMovieZOrder;
- (void)setPreviewMirror:(BOOL)arg0;
- (BOOL)enableSingleView:(BOOL)arg0;
- (BOOL)fetchSingleViewStatus;
- (void)setSingleViewCropRegion:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0;
- (BOOL)startEffectBachAlgorithmWithConfig:(id)arg0;
- (BOOL)stopEffectBachAlgorithm;
- (void)setVideoRecordCallback:(id /* block */)arg0;
- (void)setInputFrameCallback:(id /* block */)arg0;
- (void)setEffectFrameCallback:(id /* block */)arg0;
- (BOOL)setCroppedInputFrameCallbackWithRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0 originSize:(struct CGSize { double x0; double x1; })arg1 callback:(id /* block */)arg2;
- (BOOL)setCroppedEffectFrameCallbackWithRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0 originSize:(struct CGSize { double x0; double x1; })arg1 callback:(id /* block */)arg2;
- (struct __CVBuffer { } *)getPixelBufferWithIsEffected:(BOOL)arg0;
- (id)getJpegDataWithIsEffected:(BOOL)arg0 compressionRatio:(double)arg1;
- (void)configureAudioCatcher:(id)arg0 durationMs:(long long)arg1 format:(unsigned long long)arg2 isPeriodCatch:(BOOL)arg3 totalDurationMsOnPeriodCatch:(long long)arg4 outSampleHz:(int)arg5 outChannel:(int)arg6;
- (void)stopAudioCatcher;
- (struct LSLiveEffectImage { char *x0; int x1; int x2; int x3; int x4; unsigned long long x5; void *x6; })getEffectCapturedImagewithKey:(id)arg0;
- (void)setEnablePipelineKTVCamera:(BOOL)arg0;
- (void)setMixOnClient:(BOOL)arg0;
- (BOOL)mixOnClient;
- (BOOL)enablePipelineKTVCamera;
- (void)pushVideoBuffer:(struct __CVBuffer { } *)arg0 andCMTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg1;
- (void)audioProcessEarMonitorData:(void *)arg0 size:(unsigned int)arg1 sampleRate:(int)arg2 timeStamp:(long long)arg3 mNumberChannels:(unsigned int)arg4 numberOfFrames:(int)arg5;
- (void)reportLog:(id)arg0 params:(id)arg1;
- (void)runSyncOnQueue:(id /* block */)arg0;
- (void)didApplicationWillTerminateNotification:(id)arg0;
- (long long)videoFPS;
- (id)resetPreviewView:(id)arg0;
- (void)switchFilterWithLeftPath:(id)arg0 rightPath:(id)arg1 progress:(double)arg2;
- (void)applyEffect:(id)arg0 type:(long long)arg1 enableFakeFace:(BOOL)arg2;
- (void)feedProcessBuffer:(struct AudioBufferList { unsigned int x0; struct AudioBuffer { unsigned int x0; unsigned int x1; void *x2; } x1[1]; } *)arg0 sampleFrames:(long long)arg1 elementIndex:(unsigned int)arg2 withMixerHandle:(id)arg3;
- (id)audioDrivePictureEffectHandler;
- (void)setEnableEffect:(BOOL)arg0;
- (void)setEnableEffect:(BOOL)arg0;
- (BOOL)processBGMPlayerAudio:(void *)arg0 dataSize:(unsigned int)arg1 inNumberFrames:(unsigned int)arg2;
- (id)bgmPlayerArray;
- (BOOL)movieInteractOnlyPlay;
- (id)mixerHandle;
- (void)setMixerHandle:(id)arg0;
- (id)moviePlayMixerHandle;
- (void)setMoviePlayMixerHandle:(id)arg0;
- (void)p_processOtherMixHandle:(struct AudioBufferList { unsigned int x0; struct AudioBuffer { unsigned int x0; unsigned int x1; void *x2; } x1[1]; } *)arg0 sampleFrames:(long long)arg1 elementIndex:(unsigned int)arg2 withMixerHandle:(id)arg3;
- (void)p_processOtherMixHandle:(struct AudioBufferList { unsigned int x0; struct AudioBuffer { unsigned int x0; unsigned int x1; void *x2; } x1[1]; } *)arg0 sampleFrames:(long long)arg1 elementIndex:(unsigned int)arg2 withMixerHandle:(id)arg3;
- (void)setBgmPlayer:(id)arg0;
- (void)setupAudioFactoryWithBlock:(id /* block */)arg0;
- (void)setupAudioFactoryWithBlock:(id /* block */)arg0;
- (id)bgmPlayer;
- (id)bgmPlayerImplArray;
- (id)getCaptureConfig;
- (void)p_switchFilter:(id)arg0 leftPath:(id)arg1 rightPath:(id)arg2 progress:(double)arg3;
- (void)p_switchFilterWithHandle:(id)arg0 LeftPath:(id)arg1 rightPath:(id)arg2 progress:(double)arg3 leftIntensity:(float)arg4 rightIntensity:(float)arg5;
- (float)p_getFilterIntensity:(id)arg0 filterPath:(id)arg1;
- (void)p_applyEffect:(id)arg0 path:(id)arg1 type:(long long)arg2;
- (void)p_applyEffectkey:(id)arg0 key:(id)arg1 image:(id)arg2;
- (void)p_applyEffect:(id)arg0 path:(id)arg1 type:(long long)arg2 enableFakeFace:(BOOL)arg3;
- (void)p_setColorFilter:(id)arg0 path:(id)arg1 intensity:(float)arg2;
- (void)p_getColorFilter:(id)arg0 filePath:(id)arg1 intensity:(float *)arg2;
- (void)p_setColorFilterIntensity:(id)arg0 Intensity:(float)arg1;
- (void)p_applyReshape:(id)arg0 path:(id)arg1 withIntensity:(struct LSLiveIntensityParam_t { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; float x10; float x11; float x12; float x13; float x14; float x15; float x16; float x17; float x18; float x19; float x20; float x21; float x22; float x23; float x24; float x25; float x26; float x27; float x28; float x29; float x30; float x31; float x32; })arg2;
- (void)p_setMaxStickerMemoryCache:(id)arg0 cache:(unsigned long long)arg1;
- (void)p_enableFakeFace:(id)arg0 enableFakeFace:(BOOL)arg1;
- (void)p_enableCloudRender:(id)arg0 enableCloudRender:(BOOL)arg1;
- (void)setupAudioResamplerIfNeeded;
- (void)recognizeAudio:(int)arg0;
- (void)audioEffectProcess:(short *)arg0 outBuffer:(short *)arg1 samplesPerChannel:(int)arg2 channels:(int)arg3 sampleRate:(int)arg4;
- (int)p_setComposerMode:(id)arg0 mode:(int)arg1 orderType:(int)arg2;
- (int)p_applyComposerNodes:(id)arg0 nodePath:(id)arg1 withTags:(id)arg2;
- (void)updateCachedComposerNodesWithCommand:(unsigned long long)arg0 nodePaths:(id)arg1 tags:(id)arg2;
- (int)p_applyComposerNodes:(id)arg0 nodePaths:(id)arg1;
- (int)p_updateComposerNode:(id)arg0 nodePaths:(id)arg1 tag:(id)arg2 value:(double)arg3;
- (int)p_applyComposerNodes:(id)arg0 nodePaths:(id)arg1 enableFakeFace:(BOOL)arg2;
- (int)p_replaceComposerNodes:(id)arg0 nodes:(id)arg1 withNewNodes:(id)arg2 andTags:(id)arg3;
- (void)replaceCachedComposerNodes:(id)arg0 withNewNodes:(id)arg1 andTags:(id)arg2;
- (int)p_applyComposerNodes:(id)arg0 nodePaths:(id)arg1 withTags:(id)arg2 enableFakeFace:(BOOL)arg3;
- (void)initialEffectCategory;
- (void)initialEffectCategory;
- (void)destructEffectModules;
- (void)destructEffectModules;
- (void)checkBufferInEffectCategory:(struct __CVBuffer { } *)arg0;
- (void)checkBufferInEffectCategory:(struct __CVBuffer { } *)arg0;
- (void)pauseEffectIfNeeded;
- (int)setRenderCacheIntValue:(id)arg0 intValue:(int)arg1;
- (void)setEffectAudioConfig:(id)arg0;
- (void)setEffectAudioConfig:(id)arg0;
- (void)setEffectAudioConfig:(id)arg0 resourcePath:(id)arg1;
- (void)removeEffectAudioConfig;
- (void)removeEffectAudioConfig;
- (BOOL)isEffectEnabled;
- (BOOL)isEffectEnabled;
- (BOOL)isEffectEnabled:(long long)arg0;
- (BOOL)isEffectEnabled:(long long)arg0;
- (void)setEnableEffect:(BOOL)arg0 type:(long long)arg1;
- (void)setBgmPlayerArray:(id)arg0;
- (void)setBgmPlayerImplArray:(id)arg0;
- (BOOL)processBGMPlayerAudio:(struct AudioBufferList { unsigned int x0; struct AudioBuffer { unsigned int x0; unsigned int x1; void *x2; } x1[1]; } *)arg0 inNumberFrames:(unsigned int)arg1 processedData:(struct AudioBufferList { unsigned int x0; struct AudioBuffer { unsigned int x0; unsigned int x1; void *x2; } x1[1]; } *)arg2 headphonesMonitoringData:(struct AudioBufferList { unsigned int x0; struct AudioBuffer { unsigned int x0; unsigned int x1; void *x2; } x1[1]; } *)arg3;
- (BOOL)isBGMPlaying;
- (BOOL)isBGMPlaying;
- (void)pushAudioData:(short *)arg0 size:(long long)arg1;
- (void)pushAudioData:(short *)arg0 size:(long long)arg1;
- (void)pushFLTAudioData:(float **)arg0 size:(long long)arg1;
- (void)pushFLTAudioData:(float **)arg0 size:(long long)arg1;
- (void)preparePushExtraAudio:(int)arg0 channels:(int)arg1;
- (void)preparePushExtraAudio:(int)arg0 channels:(int)arg1;
- (void)setMovieMixVolume:(float)arg0 captureVolume:(float)arg1;
- (void)setMovieMixVolume:(float)arg0 captureVolume:(float)arg1;
- (void)setMoviePlayVolume:(float)arg0;
- (void)setMoviePlayVolume:(float)arg0;
- (void)setMoviePlayVolume:(float)arg0 captureVolume:(float)arg1;
- (void)setMoviePlayVolume:(float)arg0 captureVolume:(float)arg1;
- (void)stopPushExtraAudio;
- (void)stopPushExtraAudio;
- (void)p_processExtraAudioData:(void *)arg0 size:(unsigned int)arg1 numberOfFrames:(unsigned int)arg2;
- (void)p_processExtraAudioData:(void *)arg0 size:(unsigned int)arg1 numberOfFrames:(unsigned int)arg2;
- (void)p_prcoessMoviePlayAudioData:(void *)arg0 size:(unsigned int)arg1 numberOfFrames:(int)arg2;
- (void)p_prcoessMoviePlayAudioData:(void *)arg0 size:(unsigned int)arg1 numberOfFrames:(int)arg2;
- (void)p_activeAudioPlayer:(id)arg0;
- (void)p_deactiveAudioPlayer:(id)arg0;
- (void)destroyAudioFactoryResource:(BOOL)arg0;
- (void)destroyAudioFactoryResource:(BOOL)arg0;
- (void)setupAudioFactory;
- (void)setupAudioFactory;
- (void)setLogToFileMessageCallback:(id /* block */)arg0;
- (void)switchFilterWithLeftPath:(id)arg0 rightPath:(id)arg1 progress:(double)arg2 type:(long long)arg3;
- (void)switchFilterWithLeftPath:(id)arg0 rightPath:(id)arg1 progress:(double)arg2 leftIntensity:(float)arg3 rightIntensity:(float)arg4;
- (void)switchFilterWithLeftPath:(id)arg0 rightPath:(id)arg1 progress:(double)arg2 leftIntensity:(float)arg3 rightIntensity:(float)arg4 type:(long long)arg5;
- (float)getFilterIntensity:(id)arg0 type:(long long)arg1;
- (void)applyEffectKey:(id)arg0 image:(id)arg1 type:(long long)arg2;
- (void)setColorFilter:(id)arg0 intensity:(float)arg1;
- (void)setColorFilter:(id)arg0 intensity:(float)arg1 type:(long long)arg2;
- (void)getColorFilter:(id)arg0 intensity:(float *)arg1;
- (void)getColorFilter:(id)arg0 intensity:(float *)arg1 type:(long long)arg2;
- (void)setColorFilterIntensity:(float)arg0 type:(long long)arg1;
- (void)applyReshape:(id)arg0 withIntensity:(struct LSLiveIntensityParam_t { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; float x10; float x11; float x12; float x13; float x14; float x15; float x16; float x17; float x18; float x19; float x20; float x21; float x22; float x23; float x24; float x25; float x26; float x27; float x28; float x29; float x30; float x31; float x32; })arg1 type:(long long)arg2;
- (void)setMaxStickerMemoryCache:(unsigned long long)arg0 type:(long long)arg1;
- (void)enableFakeFace:(BOOL)arg0;
- (void)enableFakeFace:(BOOL)arg0 type:(long long)arg1;
- (void)enableCloudRender:(BOOL)arg0;
- (BOOL)cloudRenderPrelink;
- (BOOL)cloudRenderPrelink;
- (void)setEffectBuryPointHandleCallback:(id /* block */)arg0;
- (void)releaseMovieAudioQueue;
- (int)setSpeechRecognizingKeywords:(id)arg0;
- (id)getSpeechRecognizingKeywords;
- (void)releaseAudioResampler;
- (void)recognizeAudio;
- (void)setEnableAudioEffect:(BOOL)arg0;
- (void)setEnableAudioEffect:(BOOL)arg0;
- (void)__doOtherProcess:(short *)arg0 processedData:(short *)arg1 earMonitorData:(short *)arg2 bufferSize:(unsigned int)arg3 numberOfChannels:(int)arg4 sampleRate:(int)arg5 numberOfFrames:(int)arg6 admType:(unsigned long long)arg7;
- (void)processEarMonitorDataEffect:(short *)arg0 processedData:(short *)arg1 bufferSize:(unsigned int)arg2 numberOfChannels:(int)arg3 sampleRate:(int)arg4 samplesPerChannel:(int)arg5;
- (int)setComposerMode:(int)arg0 orderType:(int)arg1 effectType:(long long)arg2;
- (int)applyComposerNodes:(id)arg0 withTags:(id)arg1;
- (int)applyComposerNodes:(id)arg0 withTags:(id)arg1 type:(long long)arg2;
- (id)getCurrentComposerNodes:(long long)arg0;
- (int)applyComposerNodes:(id)arg0 type:(long long)arg1;
- (int)updateComposerNode:(id)arg0 tag:(id)arg1 value:(double)arg2 type:(long long)arg3;
- (int)applyComposerNodes:(id)arg0 enableFakeFace:(BOOL)arg1;
- (int)applyComposerNodes:(id)arg0 enableFakeFace:(BOOL)arg1 type:(long long)arg2;
- (int)replaceComposerNodes:(id)arg0 withNewNodes:(id)arg1 andTags:(id)arg2 type:(long long)arg3;
- (int)applyComposerNodes:(id)arg0 withTags:(id)arg1 enableFakeFace:(BOOL)arg2;
- (int)applyComposerNodes:(id)arg0 withTags:(id)arg1 enableFakeFace:(BOOL)arg2 type:(long long)arg3;
- (int)appendComposerNodes:(id)arg0 withTags:(id)arg1;
- (int)removeComposerNodes:(id)arg0 withTags:(id)arg1;
- (int)reloadComposerNodes:(id)arg0 withTags:(id)arg1;
- (id)getExpressionInfo;
- (void)__handleEffectMessage:(long long)arg0 :(unsigned long long)arg1 :(unsigned long long)arg2 :(id)arg3;
- (id /* block */)speechRecognizeCallback;
- (id)convertToJsonData:(id)arg0;
- (void)startRecordingWav:(long long)arg0 maxRecordingDuration:(float)arg1 withCompleteHandler:(id /* block */)arg2;
- (void)stopRecordingWav:(id /* block */)arg0;
- (void)p_sendMessage:(id)arg0 message:(unsigned long long)arg1;
- (void)p_sendMessage:(id)arg0 message:(unsigned long long)arg1 param1:(unsigned long long)arg2;
- (void)p_sendMessage:(id)arg0 message:(unsigned long long)arg1 param1:(unsigned long long)arg2 param2:(unsigned long long)arg3;
- (void)p_sendMessage:(id)arg0 message:(unsigned long long)arg1 param1:(unsigned long long)arg2 param2:(unsigned long long)arg3 userInfo:(id)arg4;
- (void)setEffectMessageBlock:(id /* block */)arg0;
- (void)sendMessage:(unsigned long long)arg0 type:(long long)arg1;
- (void)sendMessage:(unsigned long long)arg0 param1:(unsigned long long)arg1 type:(long long)arg2;
- (void)sendMessage:(unsigned long long)arg0 param1:(unsigned long long)arg1 param2:(unsigned long long)arg2 type:(long long)arg3;
- (void)sendMessage:(unsigned long long)arg0 param1:(unsigned long long)arg1 param2:(unsigned long long)arg2 userInfo:(id)arg3 type:(long long)arg4;
- (void)p_setMusicNodeFilepath:(id)arg0 filePath:(id)arg1;
- (void)setMusicNodeFilepath:(id)arg0 type:(long long)arg1;
- (void)setMusicPlayTimeRequestCallback:(id /* block */)arg0 type:(long long)arg1;
- (void)audioDrivePictureEffect_hasStartedLive;
- (void)audioDrivePictureEffect_reportLogWithValue:(id)arg0 err:(id)arg1;
- (id)effectDelegate;
- (BOOL)audioDrivePictureEffect_isWorking;
- (id)audioDrivePictureEffect_prepareHandlerWithParams:(struct LSAudioDrivePictureEffectParamsStruct { BOOL x0; BOOL x1; BOOL x2; BOOL x3; BOOL x4; id x5; id x6; })arg0;
- (id)audioDrivePictureEffect_destroyHandler;
- (id)audioDrivePictureEffect_stopAudioCaptureIfNeededWithCert:(id)arg0;
- (id /* block */)effectInfoBlck;
- (void)setEffectInfoBlck:(id /* block */)arg0;
- (id)videoBrightenParams;
- (id)videoBrightenGetReport;
- (void)resetCameraRotation;
- (void)didFrameRenderCallback:(id)arg0;
- (void)didFirstFrameRender:(id)arg0 withResult:(BOOL)arg1 withPTS:(long long)arg2 withErrorNo:(unsigned int)arg3;
- (void)rotateCameraWithPitch:(double)arg0 yaw:(double)arg1;
- (BOOL)unableMixerWithSameFrameBuffer;
- (void)setUnableMixerWithSameFrameBuffer:(BOOL)arg0;
- (void)didVideoBufferProcessed:(id)arg0 withPixelBuffer:(struct __CVBuffer { } *)arg1 withTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg2;
- (void)setPreviewBgImage:(id)arg0;
- (void)setPreviewFps:(int)arg0;
- (void)setRenderOnSingleView:(BOOL)arg0;
- (BOOL)renderOnSingleView;
- (void)setAudioStreamBasicDescription:(struct AudioStreamBasicDescription { double x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; })arg0;
- (int)cameraZOrder;
- (void)doPlayerProcessWithData:(void *)arg0 size:(unsigned int)arg1 numberOfFrames:(int)arg2;
- (void)setKaraokeRunning:(BOOL)arg0;
- (id)gl_render_view;
- (void)setGl_render_view:(id)arg0;
- (void)setupGLVideoPath;
- (void)setAudioAuxDelegate:(id)arg0;
- (void)setEffectDelegate:(id)arg0;
- (void)setIsOnlyCameraVideoBufferModeBlock:(id /* block */)arg0;
- (void)setGetCameraISOBlock:(id /* block */)arg0;
- (void)setGetCameraFacingBlock:(id /* block */)arg0;
- (void)pushVideoBuffer:(struct __CVBuffer { } *)arg0 andCMTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg1 extraInfo:(id)arg2;
- (void)startAudioCatcherWithDelegate:(id)arg0;
- (struct CGSize { double x0; double x1; })getCameraOutputSize;
- (int)videoDenoiseMask;
- (void)setVideoDenoiseMask:(int)arg0;
- (int)videoNoiseEvaluateMask;
- (void)setVideoNoiseEvaluateMask:(int)arg0;
- (int)videoBrightenMask;
- (void)setVideoBrightenMask:(int)arg0;
- (void)enableMipmapRatio:(float)arg0;
- (void)enableVideoOptSwitch:(BOOL)arg0;
- (BOOL)memoryOptSwitch;
- (void)enableMemoryOptSwitch:(BOOL)arg0;
- (BOOL)stableReliabilityOptimizationMixer;
- (void)enableStableReliabilityOptimizationMixer:(BOOL)arg0;
- (BOOL)bypassSkipRender;
- (void)enableBypassSkipRender:(BOOL)arg0;
- (void)videoBrightenSetup:(id)arg0;
- (void)videoNoiseEvaluateSetup:(id)arg0;
- (BOOL)setupVideoDenoise:(id)arg0 callback:(id /* block */)arg1;
- (void)shouldUseAudioTimeBase:(id)arg0;
- (void)setVideoProcessedCallback:(id /* block */)arg0;
- (void)setVideoProcessedBypassCallback:(id /* block */)arg0;
- (BOOL)enablePanorama;
- (void)setCameraOutputSize:(struct CGSize { double x0; double x1; })arg0;
- (void)updateVideoDenoise:(id)arg0;
- (id)videoDenoiseParams;
- (void)pushVideoBuffer:(struct __CVBuffer { } *)arg0 andCMTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg1 needRender:(BOOL)arg2;
- (void)setVideoFPS:(long long)arg0;
- (void)audioProcessWithData:(void *)arg0 processedData:(void *)arg1 earMonitorData:(void *)arg2 size:(unsigned int)arg3 timeStamp:(long long)arg4 mNumberChannels:(unsigned int)arg5 numberOfFrames:(int)arg6 admType:(unsigned long long)arg7;
- (void)audioProcessWithData:(void *)arg0 size:(unsigned int)arg1 sampleRate:(int)arg2 timeStamp:(long long)arg3 mNumberChannels:(unsigned int)arg4 numberOfFrames:(int)arg5;
- (void)doPlayerCommonAuxStreamProcessWithData:(void *)arg0 size:(unsigned int)arg1 numberOfFrames:(int)arg2;
- (void)doPlayerAecRefProcessWithData:(void *)arg0 size:(unsigned int)arg1 numberOfFrames:(int)arg2;
- (id)getMessageInfo;
- (int)fetchDropCount;
- (id)getStatisticInfo;
- (void)setKaraokeMovieZOrder:(int)arg0;
- (BOOL)enablePitchShifter;
- (id)pitchShifter;
- (id)karaokeMixerHandle;
- (void)setKaraokeMixerHandle:(id)arg0;
- (id)karaokePlayMixerHandle;
- (void)setKaraokePlayMixerHandle:(id)arg0;
- (void)setPitchShifter:(id)arg0;
- (void)setEnablePitchShifter:(BOOL)arg0;
- (int)karaokeMovieLayerId;
- (id)createByteAudioAuxRenderSink:(long long)arg0;
- (void)p_tryReleaseByteAudioAuxRenderSinkWithInfo:(void *)arg0;
- (id)audioAuxDelegate;
- (void)p_changeAllOutAuxStreamsQuriksFrom:(int)arg0 To:(int)arg1;
- (int)p_mixAudioDataToByteAudioWithStreamId:(int)arg0 oasInfo:(void *)arg1 audioData:(short *)arg2 size:(unsigned int)arg3 numberOfFrames:(int)arg4;
- (void)p_mixOneMapData:(short *)arg0 earMonitorData:(short *)arg1 size:(unsigned int)arg2 numberOfFrames:(int)arg3 oasinfoMap:(void *)arg4 mixtype:(long long)arg5;
- (int)createOutAuxAudioStream:(long long)arg0;
- (int)createOutAuxAudioStream:(long long)arg0 withAudioFileConfig:(id)arg1;
- (int)releaseOutAuxAudioStream:(int)arg0;
- (int)releaseAllOutAuxAudioStream;
- (void)setOutAuxStreamVolume:(int)arg0 volume:(float)arg1;
- (void)enableDropDelayedFrames:(int)arg0 dropFlag:(BOOL)arg1 dropBytesCntThresh:(int)arg2;
- (void)interuptOutAuxStream:(int)arg0 interupt:(BOOL)arg1;
- (void)prepareOutAuxAudioStream:(int)arg0 sampleRate:(int)arg1 channels:(int)arg2;
- (int)pushOutAuxAudioData:(int)arg0 data:(short *)arg1 size:(long long)arg2;
- (int)pushOutAuxFLTAudioData:(int)arg0 data:(float **)arg1 size:(long long)arg2;
- (void)pushAuxAudioDataForByteAudio:(int)arg0 data:(short *)arg1 size:(long long)arg2;
- (void)enableAuxstreamSingleDirChorusPipeline:(BOOL)arg0;
- (void)p_prcoessPlayOnlyOutAuxAudioData:(short *)arg0 size:(unsigned int)arg1 numberOfFrames:(int)arg2;
- (void)p_prcoessPlayOnlyOutAuxAudioData:(void *)arg0 size:(unsigned int)arg1 numberOfFrames:(int)arg2;
- (void)p_prcoessAECRefOnlyOutAuxAudioData:(short *)arg0 size:(unsigned int)arg1 numberOfFrames:(int)arg2;
- (void)p_prcoessAECRefOnlyOutAuxAudioData:(void *)arg0 size:(unsigned int)arg1 numberOfFrames:(int)arg2;
- (void)p_prcoessPushDataMixAuxWithProcessedData:(short *)arg0 earMonitorData:(short *)arg1 size:(unsigned int)arg2 numberOfFrames:(int)arg3;
- (id)panoramicPreviewView;
- (BOOL)videoDenoiseV2_init:(id)arg0;
- (BOOL)videoDenoiseV1_init:(id)arg0;
- (void)setVideoDenoiseBitrateRatio:(float)arg0;
- (void)setVideoDenoiseUpdateBitrateBlock:(id /* block */)arg0;
- (void)setCameraStatusGetter:(id /* block */)arg0;
- (void)setVideoDenoiseLastCode:(int)arg0;
- (void)setVideoDenoiseABStrategy:(int)arg0;
- (int)videoDenoiseABStrategy;
- (void)setVideoDenoiseAlgType:(int)arg0;
- (void)setVideoDenoiseWeakISO:(int)arg0;
- (void)setVideoDenoiseMediumISO:(int)arg0;
- (void)setVideoDenoiseStrongISO:(int)arg0;
- (int)videoDenoiseStrongISO;
- (int)videoDenoiseMediumISO;
- (int)videoDenoiseWeakISO;
- (int)videoDenoiseAlgType;
- (void)setVideoDenoise:(id)arg0;
- (id)videoDenoise;
- (id /* block */)videoDenoiseUpdateBitrateBlock;
- (float)videoDenoiseBitrateRatio;
- (int)videoDenoiseLastCode;
- (id /* block */)cameraStatusGetter;
- (int)videoDenoiseLastCameraFacing;
- (void)setVideoDenoiseLastCameraFacing:(int)arg0;
- (int)calcISO:(int)arg0 reinit:(BOOL)arg1;
- (int)videoDenoiseLevel;
- (id)videoDenoiseCalcISOBundle;
- (void)setVideoDenoiseCalcISOBundle:(id)arg0;
- (void)setEnableVideoDenoiseInternal:(BOOL)arg0;
- (BOOL)enableVideoDenoiseInternal;
- (void)switchVideoDenoise:(BOOL)arg0 newSwitch:(BOOL)arg1;
- (void)setVideoDenoiseLevel:(int)arg0;
- (void)videoDenoise_destroy;
- (void)setCaptureConfig:(id)arg0;
- (id)captureConfig;
- (void)__frame_opt_initParam;
- (void)__performance_opt_initParam;
- (void)initialCategoriesIfNeeded;
- (void)p_addApplicationObserver;
- (void)addEffectNode;
- (id /* block */)roiInfoCallback;
- (void)addMixerNode;
- (void)addIONodes;
- (void)runASyncOnQueue:(id /* block */)arg0;
- (int)cameraLayerId;
- (BOOL)shouldAdaptFpsWithPts:(struct { long long x0; int x1; unsigned int x2; long long x3; } *)arg0;
- (void)p_processVideoCallback:(struct __CVBuffer { } *)arg0 withTimeInfo:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg1;
- (id /* block */)isOnlyCameraVideoBufferModeBlock;
- (BOOL)useingOnlyCameraVideoBufferMode;
- (id)videoFrameOptimizeAppendCacheArrM;
- (void)setUseingOnlyCameraVideoBufferMode:(BOOL)arg0;
- (BOOL)dumpRecording;
- (id)mp4RawDataHelper;
- (void)__frame_opt_pushVideoBuffer:(struct __CVBuffer { } *)arg0 withCMTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg1 toLayer:(int)arg2 needRender:(BOOL)arg3 useAlpha:(BOOL)arg4 extraInfo:(id)arg5 isMasterLayer:(BOOL)arg6 isCameraLayer:(BOOL)arg7 isOnlyCameraVideoBufferMode:(BOOL)arg8 fromCache:(BOOL)arg9;
- (long long)videoFrameOptimizeCacheMaxCount;
- (id)auxEffectMapLock;
- (id)auxEffectMap;
- (void)pushEffectAuxBuffer:(struct __CVBuffer { } *)arg0 auxTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg1 key:(id)arg2;
- (void)checkInputSize:(unsigned long long)arg0 height:(unsigned long long)arg1 layerId:(int)arg2 pixelBufferRef:(struct __CVBuffer { } *)arg3;
- (void)checkInputSizeOld:(unsigned long long)arg0 height:(unsigned long long)arg1 layerId:(int)arg2 pixelBufferRef:(struct __CVBuffer { } *)arg3;
- (int)videoDenoise_process:(struct __CVBuffer { } *)arg0 info:(id)arg1;
- (id)videoFrameOptimizeAppendSemaphore;
- (void)__frame_opt_tryPopCacheVideoFrameData;
- (BOOL)isBelowIphone7;
- (void)updateMoviePlayDuration;
- (BOOL)needPlayMovieInteractAudio;
- (void)p_pushMovieBuffer;
- (id /* block */)videoProcessedCallback;
- (void)setupInputNodeWith:(unsigned int)arg0;
- (void)setOutputSizeOld:(struct CGSize { double x0; double x1; })arg0;
- (void)p_setInputNodeOutputSize:(struct CGSize { double x0; double x1; })arg0;
- (long long)captureCropMode;
- (id)glGraphShow;
- (id)getEffectConfig:(struct CGSize { double x0; double x1; })arg0;
- (void)setCameraOutputSizeOld:(struct CGSize { double x0; double x1; })arg0;
- (void)p_setInputFilterOutputSize:(struct CGSize { double x0; double x1; })arg0;
- (void)setCameraCropOutputSize:(struct CGSize { double x0; double x1; })arg0;
- (void)setCameraCropOutputSizeOld:(struct CGSize { double x0; double x1; })arg0;
- (void)p_removeApplicationObserver;
- (void)stopPerformanceCheck;
- (void)removeMixedEffectNode;
- (void)destructCategoriesIfNeeded;
- (void)releaseKaraokeAudioQueue;
- (id)resetPreviewView:(id)arg0 withConfiguration:(id)arg1;
- (Class)previewViewClassWithConfiguration:(id)arg0;
- (void)setPreviewFps:(int)arg0 fps:(int)arg1;
- (void)startPerformanceCheck;
- (BOOL)videoDenoise_setup:(id)arg0 cameraStatusGetter:(id /* block */)arg1 callback:(id /* block */)arg2;
- (id /* block */)getCameraFacingBlock;
- (id /* block */)getCameraISOBlock;
- (void)videoDenoise_updateParams:(id)arg0;
- (Class)pictureOutputClassWithType:(unsigned long long)arg0;
- (id /* block */)inputFrameCallback;
- (void)addVideoInput:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0 zOrder:(int)arg1 forLayer:(int)arg2;
- (void)addOutputNode;
- (int)dropCount;
- (void)setDropCount:(int)arg0;
- (BOOL)enableGameTimeCheck;
- (void)setGameLastTimeValue:(long long)arg0;
- (long long)gameLastTimeValue;
- (BOOL)enableKTVCamera;
- (void)p_processBypassVideo:(struct __CVBuffer { } *)arg0 withTimeInfo:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg1;
- (BOOL)shouldUpdateMetadata;
- (void)setShouldUpdateMetadata:(BOOL)arg0;
- (id /* block */)videoRecordCallback;
- (id /* block */)firstFrameRenderCallback;
- (void)p_addMixerNode:(int)arg0;
- (void)setCanvasColor:(id)arg0;
- (id /* block */)effectFrameCallback;
- (void)addVideoInput:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0 fillMode:(unsigned long long)arg1 zOrder:(int)arg2 forLayer:(int)arg3 rotation:(unsigned long long)arg4 alpha:(double)arg5;
- (void)setCameraZOrder:(int)arg0;
- (unsigned long long)changeFillType:(unsigned long long)arg0;
- (void)addVideoInput:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0 fillMode:(unsigned long long)arg1 zOrder:(int)arg2 forLayer:(int)arg3 rotation:(unsigned long long)arg4;
- (void)updateVideoRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0 zOrder:(int)arg1 forLayer:(int)arg2 mode:(unsigned long long)arg3 animated:(BOOL)arg4 frames:(int)arg5;
- (void)p_setPreviewModeNormalWithConfigLive;
- (void)setBypassOutputSize:(struct CGSize { double x0; double x1; })arg0 pixelFormat:(unsigned int)arg1 enable:(BOOL)arg2;
- (void)p_setPreviewModeNormalWithConfigGame;
- (void)p_setPreviewModeGameInteractWithConfigGame;
- (void)p_setPreviewModeGameingWithConfigGame;
- (void)p_setPreviewModeGameInteractWithConfigLive;
- (void)p_setPreviewModeGamingWithConfigLive;
- (void)p_setPreviewModeCameraGamingWithConfigLive;
- (void)p_setPreviewModeEffectInteractGameWithConfigLive;
- (void)p_setPreviewModeMovieInteractWithConfigLive;
- (void)p_setPreviewModeCuttomWithConfigLive;
- (void)p_pushVideoBuffer:(struct __CVBuffer { } *)arg0 andCMTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg1 needRender:(BOOL)arg2 extraInfo:(id)arg3;
- (void)setAuxEffectMap:(id)arg0;
- (id)keyMapLock;
- (void)setKeyMap:(id)arg0;
- (void)pushVideoBuffer:(struct __CVBuffer { } *)arg0 withCMTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg1 toLayer:(int)arg2 needRender:(BOOL)arg3 useAlpha:(BOOL)arg4 extraInfo:(id)arg5;
- (void)__frame_opt_pushVideoBuffer:(struct __CVBuffer { } *)arg0 withCMTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg1 toLayer:(int)arg2 needRender:(BOOL)arg3 useAlpha:(BOOL)arg4 extraInfo:(id)arg5;
- (void)checkInputBuffer:(struct __CVBuffer { } *)arg0;
- (id /* block */)croppedInputFrameCallback;
- (id /* block */)croppedEffectFrameCallback;
- (void)setBypassOutputSize:(struct CGSize { double x0; double x1; })arg0 pixelFormat:(unsigned int)arg1 enable:(BOOL)arg2 isLandscapeVideo:(BOOL)arg3 outputType:(unsigned long long)arg4;
- (void)setupBypassGraph;
- (id /* block */)bypassCallback;
- (void)setBypassMirror:(BOOL)arg0;
- (BOOL)purgeMemoryIfNeeded;
- (void)setDumpRecording:(BOOL)arg0;
- (BOOL)dumpIsFinished;
- (void)setRecordingFilePath:(id)arg0;
- (id)recordingFilePath;
- (BOOL)bRecordingWav;
- (void)setBRecordingWav:(BOOL)arg0;
- (void)setCatchDelegate:(id)arg0;
- (void)audioProcessWithData:(void *)arg0 processedData:(void *)arg1 earMonitorData:(void *)arg2 size:(unsigned int)arg3 sampleRate:(int)arg4 timeStamp:(long long)arg5 mNumberChannels:(unsigned int)arg6 numberOfFrames:(int)arg7 admType:(unsigned long long)arg8;
- (void)p_processKaraokeAudioData:(void *)arg0 size:(unsigned int)arg1 numberOfFrames:(int)arg2;
- (void)p_processKaraokeAudioData:(void *)arg0 size:(unsigned int)arg1 numberOfFrames:(int)arg2;
- (void)p_prcoessKaraokePlayAudioData:(void *)arg0 size:(unsigned int)arg1 numberOfFrames:(int)arg2;
- (void)p_prcoessKaraokePlayAudioData:(void *)arg0 size:(unsigned int)arg1 numberOfFrames:(int)arg2;
- (void)setMultiThreadEnable:(BOOL)arg0;
- (void)setShouldCheckInputSize:(BOOL)arg0;
- (void)reportMoviePlayStats;
- (void)startPlayMovie;
- (void)pausePlayMovie:(BOOL)arg0;
- (void)stopPlayMovie;
- (void)setMovieMixerMode:(long long)arg0;
- (void)setInPixelFmt:(unsigned int)arg0;
- (void)setInRotateMode:(unsigned long long)arg0;
- (void)setOutputCropSize:(struct CGSize { double x0; double x1; })arg0;
- (void)setCropFromSize:(struct CGSize { double x0; double x1; })arg0;
- (void)setMixerTriggerLayer:(int)arg0;
- (id)resetEffectTrackRenderView:(id)arg0 handle:(id)arg1;
- (void)updatePreviewWithConfiguration:(id)arg0;
- (void)setPreviewCropArea:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0 displayArea:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg1;
- (void)setStreamMirror:(BOOL)arg0;
- (void)setSharedEAGLContext:(id)arg0;
- (id)getGLContext;
- (void)adaptEffectRenderMsgTypeResource:(BOOL)arg0;
- (BOOL)needISOInfoForEveryCameraFrame;
- (id)getMixerVideoInfoMessage;
- (void)removeOutputNode;
- (id)dumpAllNodes;
- (void)setEnableGameTimeCheck:(BOOL)arg0;
- (void)setRemoteTargetView:(id)arg0;
- (void)addMixedEffectNode;
- (void)removeEffectNode;
- (void)updateVideoRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0 zOrder:(int)arg1 forLayer:(int)arg2 animated:(BOOL)arg3 frames:(int)arg4;
- (void)removeVideoInput:(int)arg0;
- (void)removeVideoInputV2:(int)arg0;
- (void)setInputFillMode:(unsigned long long)arg0;
- (void)setPreviewFillMode:(unsigned long long)arg0;
- (struct CGSize { double x0; double x1; })previewOffsetScale;
- (void)updateSingleViewRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0;
- (void)setCaptureCropMode:(long long)arg0;
- (void)forceDisplayTexture:(int)arg0 width:(long long)arg1 height:(long long)arg2 pts:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg3 layerId:(int)arg4;
- (void)pushVideoTexture:(int)arg0 width:(long long)arg1 height:(long long)arg2 pts:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg3 toLayer:(int)arg4;
- (void)addEffectAuxForKey:(id)arg0 width:(int)arg1 height:(int)arg2 fillMode:(unsigned long long)arg3;
- (void)removeEffectAuxForKey:(id)arg0;
- (void)removeAllEffectAux;
- (void)updateEffectAuxWidth:(int)arg0 height:(int)arg1 forKey:(id)arg2;
- (void)updateEffectAuxBuffer:(struct __CVBuffer { } *)arg0 key:(id)arg1;
- (void)pushExternalMixVideoFrame:(struct __CVBuffer { } *)arg0 time:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg1;
- (void)enableExternalMixVideoRender:(BOOL)arg0;
- (void)pushVideoBuffer:(struct __CVBuffer { } *)arg0 withCMTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg1 toLayer:(int)arg2;
- (void)pushVideoBuffer:(struct __CVBuffer { } *)arg0 withCMTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg1 toLayer:(int)arg2 useAlpha:(BOOL)arg3;
- (void)setBypassOutputSize:(struct CGSize { double x0; double x1; })arg0 pixelFormat:(unsigned int)arg1 enable:(BOOL)arg2 isLandscapeVideo:(BOOL)arg3;
- (void)p_updateBypassOutputSize:(struct CGSize { double x0; double x1; })arg0;
- (void)setSpeechRecognitionCallback:(id /* block */)arg0;
- (void)setEffectAudioConfig:(id)arg0 resourcePaths:(id)arg1;
- (void)startRecordingWithDuration:(double)arg0 delay:(double)arg1 fps:(unsigned long long)arg2 WithCompletionHandler:(id /* block */)arg3;
- (void)resetRecording;
- (void)setEffectRecordPath:(id)arg0;
- (void)audioProcessWithData:(void *)arg0 size:(unsigned int)arg1 timeStamp:(long long)arg2 mNumberChannels:(unsigned int)arg3 numberOfFrames:(int)arg4;
- (void)streamSession:(id)arg0 pullAudioData:(void *)arg1 processedData:(void *)arg2 earMonitorData:(void *)arg3 size:(unsigned int)arg4 timeStamp:(long long)arg5 mNumberChannels:(int)arg6 numberOfFrames:(int)arg7 admType:(unsigned long long)arg8;
- (void)setPurgeMemoryIfNeeded:(BOOL)arg0;
- (void)setMovieInteractOnlyPlay:(BOOL)arg0;
- (BOOL)karaokeRunning;
- (void)setEnableKTVCamera:(BOOL)arg0;
- (void)setNeedPlayMovieInteractAudio:(BOOL)arg0;
- (void)setInCapFPS:(double)arg0;
- (void)setOutCapFPS:(double)arg0;
- (void)setCameraLayerId:(int)arg0;
- (unsigned int)inPixelFmt;
- (unsigned long long)inRotateMode;
- (unsigned long long)inputFillMode;
- (id)catchDelegate;
- (int)previewFps;
- (unsigned long long)previewFillMode;
- (void)setCroppedInputFrameCallback:(id /* block */)arg0;
- (void)setCroppedEffectFrameCallback:(id /* block */)arg0;
- (void)setFirstFrameRenderCallback:(id /* block */)arg0;
- (BOOL)openVideoFrameOptimize;
- (void)setOpenVideoFrameOptimize:(BOOL)arg0;
- (void)setVideoFrameOptimizeCacheMaxCount:(long long)arg0;
- (void)setVideoFrameOptimizeAppendCacheArrM:(id)arg0;
- (void)setVideoFrameOptimizeAppendSemaphore:(id)arg0;
- (void)setBypassCallback:(id /* block */)arg0;
- (void)setSpeechRecognizeCallback:(id /* block */)arg0;
- (void)setMp4RawDataHelper:(id)arg0;
- (id)pushMovieTimerManager;
- (void)setPushMovieTimerManager:(id)arg0;
- (long long)movieVideoScaleMode;
- (void)setMovieVideoScaleMode:(long long)arg0;
- (BOOL)movieVideoScaleModeChanged;
- (void)setMovieVideoScaleModeChanged:(BOOL)arg0;
- (double)expectTimeIntervalMS;
- (void)setExpectTimeIntervalMS:(double)arg0;
- (struct CGSize { double x0; double x1; })lastMovieResolution;
- (void)setLastMovieResolution:(struct CGSize { double x0; double x1; })arg0;
- (void)setKeyMapLock:(id)arg0;
- (void)setAuxEffectMapLock:(id)arg0;
- (id)initReducedModeWithConfig:(id)arg0;
- (id)initWithMode:(long long)arg0 config:(id)arg1;
- (id)getLiveCoreRenderFilter;
- (void)enablePreMix:(BOOL)arg0;
- (void)addPreMixVideoInput:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0 zOrder:(int)arg1 forLayer:(int)arg2;
- (void)removePreMixVideoInput:(int)arg0;
- (void)pushPreMixVideoBuffer:(struct __CVBuffer { } *)arg0 withCMTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg1 toLayer:(int)arg2;
- (void)pushPreMixVideoTexture:(int)arg0 width:(long long)arg1 height:(long long)arg2 pts:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg3 toLayer:(int)arg4;
- (void)setPreMixMixerTriggerLayer:(int)arg0;
- (void)updatePreMixVideoRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0 zOrder:(int)arg1 forLayer:(int)arg2 animated:(BOOL)arg3 frames:(int)arg4;
- (void)clearLists;
- (void)handlePreviewFps:(double)arg0;
- (void)checkSummaries:(id)arg0;
- (void)onFpsPerformanceLevel:(int)arg0;
- (void)setPictureOutputSize:(struct CGSize { double x0; double x1; })arg0 outputType:(unsigned long long)arg1;
- (void)setStableReliabilityOptimizationMixer:(BOOL)arg0;
- (void)setEnablePanorama:(BOOL)arg0;
- (void)setVideoDenoiseParams:(id)arg0;
- (void)setMemoryOptSwitch:(BOOL)arg0;
- (void)setBypassSkipRender:(BOOL)arg0;
- (double)inCapFPS;
- (double)outCapFPS;
- (BOOL)isEnablePreMix;
- (void)setRoiInfoCallback:(id /* block */)arg0;
- (id)videoDenoise_getReport;
- (id)videoNoiseEvaluateGetReport;
- (void)recognizeFaceWithTimeInterval:(double)arg0 repeatCount:(unsigned long long)arg1 repeatBlock:(id /* block */)arg2;
- (void)stopRecognizeFace;
- (id)currentSticker;
- (void)setCurrentSticker:(id)arg0;
- (void)updateRatio:(float)arg0 forEffect:(id)arg1;
- (id)__nodesPathsOfEffect:(id)arg0 withGender:(long long)arg1;
- (id)__nodePaths:(id)arg0;
- (BOOL)rtv_replaceComposerBeautyEffect:(id)arg0 old:(id)arg1;
- (void)rtv_appendComposerBeautyEffect:(id)arg0 ratio:(float)arg1 old:(id)arg2;
- (void)rtv_removeComposerBeautyEffect:(id)arg0;
- (void)rtv_applyVEStickerEffect:(id)arg0;
- (void)rtv_appendComposerBeautyEffect:(id)arg0 ratio:(float)arg1 old:(id)arg2 ofGender:(long long)arg3;
- (void)rtv_removeComposerBeautyEffect:(id)arg0 ofGender:(long long)arg1;
- (BOOL)rtv_updateComposerNode:(id)arg0 key:(id)arg1 value:(double)arg2;
- (void)rtv_applyStickerEffect:(id)arg0;
- (void)rtv_removeStickerEffect:(id)arg0;
- (void)rtv_showStickerTip:(id)arg0;
- (void)rtv_removeStickerTip;
- (long long)cameraPosition;
- (id)observer;
- (void)setLogLevel:(int)arg0;
- (id)init;
- (void)sendMessage:(unsigned long long)arg0;
- (void).cxx_destruct;
- (void)setSession:(id)arg0;
- (id)session;
- (void)didEnterBackground:(id)arg0;
- (void)setContext:(id)arg0;
- (id)audioFileWriter;
- (BOOL)handleTouchEvent:(struct CGPoint { double x0; double x1; })arg0;
- (struct CGSize { double x0; double x1; })outputSize;
- (id)initWithConfig:(id)arg0;
- (void)didBecomeActive:(id)arg0;
- (void)setObserver:(id)arg0;
- (id)context;
- (void)willResignActive:(id)arg0;
- (id)previewView;
- (id)keyMap;
- (void)dealloc;
- (void)setAudioFileWriter:(id)arg0;
- (id).cxx_construct;
- (void)willEnterForeground:(id)arg0;
- (void)startVideoCapture;
- (void)stopVideoCapture;
- (void)_setPreviewMode:(long long)arg0;
- (long long)previewMode;
- (void)setPreviewMode:(long long)arg0;
- (void)setPreviewFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0;
- (void)setOutputSize:(struct CGSize { double x0; double x1; })arg0;
- (void)startIfNeeded;
- (void)setCameraPosition:(long long)arg0;
- (BOOL)handleRotationEvent:(double)arg0;
- (void)stopIfNeeded;
- (id)commonDelegate;
- (void)setCommonDelegate:(id)arg0;

@end
