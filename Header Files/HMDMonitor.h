//
//     Generated by private class-dump
//

@class HMDPerformanceReportRequest, NSString, HMDMonitorCurve, NSLock, NSDictionary, NSObject, NSMutableArray, NSNumber;
@protocol OS_dispatch_source;

@interface HMDMonitor : HeimdallrModule <HMDMonitorStorageDelegate> {
    NSObject<OS_dispatch_source> *_timer;
    HMDMonitorCurve *_curve;
    NSMutableArray *_monitorCallbacks;
    NSLock *_monitorLock;
    BOOL _isRunningWithSpecialScene;
    BOOL _hasRegisterKVO;
    BOOL _inSpecialSceneListening;
    HMDPerformanceReportRequest *_reportingRequest;
    NSString *_name;
    double _refreshInterval;
    double _curPageUsage;
    NSDictionary *_customUploadDic;
    NSMutableArray *_customScenes;
    NSString *_customSceneStr;
    NSString *_lastSpecialScene;
}

@property (retain, nonatomic) HMDPerformanceReportRequest *reportingRequest;
@property (retain, nonatomic) NSNumber *customReportIMP;
@property (retain, nonatomic) HMDPerformanceReportRequest *reportingRequest;
@property (retain, nonatomic) HMDPerformanceReportRequest *reportingRequest;
@property (retain, nonatomic) NSDictionary *customUploadDic;
@property (retain, nonatomic) NSMutableArray *customScenes;
@property (copy, nonatomic) NSString *customSceneStr;
@property (nonatomic) BOOL hasRegisterKVO;
@property (nonatomic) BOOL inSpecialSceneListening;
@property (retain, nonatomic) NSString *lastSpecialScene;
@property (readonly, nonatomic) HMDMonitorCurve *curve;
@property (readonly, nonatomic) NSString *name;
@property (nonatomic) double refreshInterval;
@property (nonatomic) double curPageUsage;
@property BOOL isRunningWithSpecialScene;

+ (id)sharedMonitor;

- (void)updateConfig:(id)arg0;
- (BOOL)needSyncStart;
- (BOOL)performanceDataSource;
- (void)cleanupWithConfig:(id)arg0;
- (void)updateRecordWithConfig:(id)arg0;
- (long long)dbMaxSize;
- (void)performanceDataSaveImmediately;
- (void)prepareForDefaultStart;
- (void)setupWithHeimdallr:(id)arg0;
- (void)startWithInterval:(double)arg0;
- (void)setCustomScenes:(id)arg0;
- (id)customScenes;
- (void)setCustomSceneStr:(id)arg0;
- (id)customSceneStr;
- (BOOL)enableUpload;
- (void)setReportingRequest:(id)arg0;
- (id)reportingRequest;
- (void)dropAllDataForServerState;
- (id)performanceDataWithCountLimit:(long long)arg0;
- (id)debugRealPerformanceDataWithConfig:(id)arg0;
- (void)cleanupPerformanceDataWithConfig:(id)arg0;
- (void)performanceDataDidReportSuccess:(BOOL)arg0;
- (id)performanceDataWithLimitSize:(unsigned long long)arg0 limitCount:(long long)arg1 currentSize:(unsigned long long *)arg2;
- (void)performanceSizeLimitedDataDidReportSuccess:(BOOL)arg0;
- (void)cleanupNotUploadAndReportedPerformanceData;
- (id)fetchUploadRecords;
- (void)setCurPageUsage:(double)arg0;
- (void)enterCustomScene:(id)arg0;
- (void)leaveCustomScene:(id)arg0;
- (double)curPageUsage;
- (void)didEnterScene:(id)arg0;
- (void)willLeaveScene:(id)arg0;
- (void)monitorRunWithSpecialScene;
- (void)monitorStopWithSpecialScene;
- (id)customReportIMP;
- (id)hmdCutomPerformanceDataWithCountLimit:(long long)arg0;
- (id)getDataWithRecords:(id)arg0;
- (void)hmdCutomPerformanceDataReportSuccess:(BOOL)arg0;
- (void)cleanupUnusedPerformanfeData;
- (void)setCustomReportIMP:(id)arg0;
- (BOOL)hasRegisterKVO;
- (void)setHasRegisterKVO:(BOOL)arg0;
- (void)setTimerRefresh:(double)arg0;
- (BOOL)customSceneListenEnabled;
- (void)startWithListenSpecialScene;
- (BOOL)isRunningWithSpecialScene;
- (void)leaveSpecialScene;
- (void)setInSpecialSceneListening:(BOOL)arg0;
- (BOOL)inSpecialSceneListening;
- (void)stopWithListenSpecialScene;
- (void)removeKVO;
- (void)setCustomUploadDic:(id)arg0;
- (void)kvoDidEnterNewScene:(id)arg0;
- (void)kvoWillLeaveNewScene:(id)arg0;
- (void)listenEnterSpecialSceneToOpenMonitor:(id)arg0;
- (void)listenLeaveSpecialSceneToOpenMonitor:(id)arg0;
- (id)customUploadDic;
- (void)setIsRunningWithSpecialScene:(BOOL)arg0;
- (void)setLastSpecialScene:(id)arg0;
- (void)enterSpecialScene;
- (id)lastSpecialScene;
- (void)addMonitorCallbacks:(id /* block */)arg0;
- (void)removeMonitorCallbacks:(id /* block */)arg0;
- (void)recordSizeCalculationWithRecord:(id)arg0;
- (BOOL)monitorCurve:(id)arg0 willSaveRecords:(id)arg1;
- (void)setDropData:(BOOL)arg0;
- (void)dropAllMonitorRecords;
- (id)refresh;
- (id)init;
- (void).cxx_destruct;
- (void)stop;
- (id)curve;
- (void)start;
- (void)observeValueForKeyPath:(id)arg0 ofObject:(id)arg1 change:(id)arg2 context:(void *)arg3;
- (double)refreshInterval;
- (id)name;
- (void)setRefreshInterval:(double)arg0;
- (Class)storeClass;
- (void)registerKVO;

@end
