//
//     Generated by private class-dump
//

@class NSArray, NSString;
@protocol NunkiDecisionEngineService, NunkiFactorCenterService, NunkiScheduleEngineService, NunkiConfigCenterService;

@interface Nunki : NSObject <FurionMessage> {
    id<NunkiConfigCenterService> _configCenter;
    id<NunkiFactorCenterService> _factorCenter;
    id<NunkiDecisionEngineService> _decisionEngine;
    id<NunkiScheduleEngineService> _scheduleEngine;
    NSArray *_registerClasses;
}

@property (readonly, nonatomic) id<NunkiConfigCenterService> configCenter;
@property (readonly, nonatomic) id<NunkiFactorCenterService> factorCenter;
@property (readonly, nonatomic) id<NunkiDecisionEngineService> decisionEngine;
@property (readonly, nonatomic) id<NunkiScheduleEngineService> scheduleEngine;
@property (retain, nonatomic) id<NunkiConfigCenterService> configCenter;
@property (retain, nonatomic) id<NunkiFactorCenterService> factorCenter;
@property (retain, nonatomic) id<NunkiDecisionEngineService> decisionEngine;
@property (retain, nonatomic) id<NunkiScheduleEngineService> scheduleEngine;
@property (copy, nonatomic) NSArray *registerClasses;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (id)strategyRegister;
+ (id)dictionaryForNunkiStrategyResult:(id)arg0;
+ (id)numberForNunkiStrategyResult:(id)arg0;
+ (void)idleExecuteBlock:(id /* block */)arg0;
+ (id)arrayForNunkiStrategyResult:(id)arg0;
+ (BOOL)boolForNunkiStrategyResult:(id)arg0;
+ (id)service;

- (BOOL)shouldStartStrategyWithKey:(id)arg0;
- (void)setRegisterClasses:(id)arg0;
- (void)startStrategyWithKey:(id)arg0 scheduleTask:(id /* block */)arg1;
- (id)strategyResultWithKey:(id)arg0;
- (void)startStrategyWithKey:(id)arg0 originTask:(id /* block */)arg1 scheduleTask:(id /* block */)arg2;
- (void)onReceiveFeatureStateChangedWithKey:(id)arg0 isOpen:(id)arg1;
- (BOOL)isStrategyEnableWithKey:(id)arg0;
- (void)startStrategyWithKey:(id)arg0 params:(id)arg1 scheduleTask:(id /* block */)arg2;
- (id)factorCenter;
- (id)decisionEngine;
- (void)cleanFactorAndDecisionCache;
- (id)configCenter;
- (id)scheduleEngine;
- (void)__startStrategyWithKey:(id)arg0 params:(id)arg1 originTask:(id /* block */)arg2 scheduleTask:(id /* block */)arg3;
- (id)__startStrategyForResultOnSyncWithKey:(id)arg0 params:(id)arg1 originTask:(id /* block */)arg2 scheduleTask:(id /* block */)arg3;
- (BOOL)__startStrategyForOptionOnSyncWithKey:(id)arg0 params:(id)arg1 originTask:(id /* block */)arg2 scheduleTask:(id /* block */)arg3;
- (void)startStrategyWithKey:(id)arg0 params:(id)arg1;
- (void)startStrategyWithKey:(id)arg0 params:(id)arg1 originTask:(id /* block */)arg2 scheduleTask:(id /* block */)arg3;
- (id)strategyResultWithKey:(id)arg0 params:(id)arg1;
- (BOOL)shouldStartStrategyWithKey:(id)arg0 params:(id)arg1;
- (void)alogMonitorWithKey:(id)arg0 config:(id)arg1 result:(id)arg2;
- (void)startStrategyWithKey:(id)arg0;
- (void)setupStrategyWithKey:(id)arg0;
- (void)setConfigCenter:(id)arg0;
- (void)setFactorCenter:(id)arg0;
- (void)setDecisionEngine:(id)arg0;
- (void)setScheduleEngine:(id)arg0;
- (id)init;
- (void).cxx_destruct;
- (void)dealloc;
- (id)registerClasses;

@end
