//
//     Generated by private class-dump
//

@class NSDictionary, PixelTextureFormat, NSObject;
@protocol OS_dispatch_queue, IBmfHdrBn;

@interface BmfFilterHDRLightnessNormaliza : FilterBase {
    PixelTextureFormat *ptFmt10bit;
    struct atomic<bool> { struct __cxx_atomic_impl<bool, std::__cxx_atomic_base_impl<bool>> { _Atomic BOOL __a_value; } __a_; } isInitFinishing;
    struct atomic<bool> { struct __cxx_atomic_impl<bool, std::__cxx_atomic_base_impl<bool>> { _Atomic BOOL __a_value; } __a_; } isIniting;
    struct ColorConversion { struct { void /* unknown type, empty encoding */ columns[3]; } matrix; void /* unknown type, empty encoding */ offset; void /* unknown type, empty encoding */ rangeMin; void /* unknown type, empty encoding */ rangeMax; } x420ColorConversion;
    struct ColorConversion { struct { void /* unknown type, empty encoding */ columns[3]; } matrix; void /* unknown type, empty encoding */ offset; void /* unknown type, empty encoding */ rangeMin; void /* unknown type, empty encoding */ rangeMax; } xf20ColorConversion;
    struct ColorConversion { struct { void /* unknown type, empty encoding */ columns[3]; } matrix; void /* unknown type, empty encoding */ offset; void /* unknown type, empty encoding */ rangeMin; void /* unknown type, empty encoding */ rangeMax; } v420_2020ColorConversion;
    struct ColorConversion { struct { void /* unknown type, empty encoding */ columns[3]; } matrix; void /* unknown type, empty encoding */ offset; void /* unknown type, empty encoding */ rangeMin; void /* unknown type, empty encoding */ rangeMax; } f420_2020ColorConversion;
    PixelTextureFormat *ptFmt8bit;
    float mThresh;
    BOOL _downloadSuccess;
    id<IBmfHdrBn> _bmfHdrBn;
    NSObject<OS_dispatch_queue> *_bmfInitprocessorQueue;
    NSDictionary *_parameter;
}

@property (retain, nonatomic) id<IBmfHdrBn> bmfHdrBn;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *bmfInitprocessorQueue;
@property (retain, nonatomic) NSDictionary *parameter;
@property (nonatomic) BOOL downloadSuccess;

- (void)setBmfHdrBn:(id)arg0;
- (void)setDownloadSuccess:(BOOL)arg0;
- (id)bmfInitprocessorQueue;
- (void)setBmfInitprocessorQueue:(id)arg0;
- (void)initBmfBnWithParam:(id)arg0 modelPath:(id)arg1;
- (void)checkDownloadAndInitBmf;
- (id)bmfHdrBn;
- (float *)NSArrayTransforCFloatArray:(id)arg0;
- (BOOL)supportBmfHDRLightnessNormaliza:(struct __CVBuffer { } *)arg0;
- (BOOL)getMTLTextureFromPixelBuffer:(id *)arg0 texture2:(id *)arg1 videoBuffer:(struct VideoFrameBuffer { void /* function */ **x0; } *)arg2;
- (id)createPixelTextureWithFrame:(struct VideoFrame { struct VideoFrameBuffer *x0; } *)arg0 format:(id)arg1 forceSDR:(BOOL)arg2;
- (void)getHDRBnConversionMatrix:(struct BmfHdrBnConversion { float x0[9]; float x1[3]; } *)arg0 inFrameFmt:(unsigned int)arg1 inYCbCrMatrixType:(long long)arg2;
- (void)copyConversionToBnConversion:(struct ColorConversion { struct { void /* unknown type, empty encoding */ x0[3]; } x0; } *)arg0 dstBnConversion:(struct BmfHdrBnConversion { float x0[9]; float x1[3]; } *)arg1;
- (id)getEffectPatameterStr;
- (BOOL)downloadSuccess;
- (struct VideoFrame { struct VideoFrameBuffer *x0; } *)process:(struct VideoFrame { struct VideoFrameBuffer *x0; } *)arg0;
- (void).cxx_destruct;
- (id)initWithDictionary:(id)arg0;
- (id)parameter;
- (void)setParameter:(id)arg0;

@end
