//
//     Generated by private class-dump
//

@class NSTimer, NSString, NSLock, XPlayGameTopView, XPlayQualityStatsModel, NSMutableDictionary, XPlayBlockRateProcesser, NSObject, UIViewController, XPlayTrackHelper, XPlayConfiguration, XPlayTimeRecorder;
@protocol XPlayItemBusinessDelegate, XPlayItemDelegate, XPlayPermissionDelegate, XPlayScreenRecordProtocol, XPlayCloudBusinessHandlerProtocol, OS_dispatch_queue, XPlayAuthProtocol, XPlayUserInfoProtocol, XPlayKeyboardProtocol, XPlayItemProtocol;

@interface XPlayItem : NSObject <XPlayItemProtocol> {
    BOOL _isActive;
    id<XPlayItemDelegate> delegate;
    id<XPlayItemBusinessDelegate> businessDelegate;
    id<XPlayPermissionDelegate> permissionDelegate;
    XPlayBlockRateProcesser *_blockProcesser;
    XPlayConfiguration *_configuration;
    UIViewController *_controller;
    XPlayTimeRecorder *_recorder;
    id<XPlayScreenRecordProtocol> _screenRecorder;
    id<XPlayKeyboardProtocol> _keyboard;
    unsigned long long _status;
    XPlayTrackHelper *_trackHelper;
    XPlayGameTopView *_view;
    NSMutableDictionary *_pluggins;
    XPlayQualityStatsModel *_qualityStats;
    id<XPlayUserInfoProtocol> _userSession;
    NSTimer *_callbackTimer;
    NSString *_itemId;
    NSString *_core;
    id<XPlayCloudBusinessHandlerProtocol> _cbHandler;
    NSMutableDictionary *_resCbDic;
    NSLock *_resCbDicLock;
    double _resignStartTime;
    long long _curNetGreatCount;
    long long _netGreatThreshold;
    id<XPlayAuthProtocol> _curAuthInfo;
    unsigned long long _networkStatus;
    id /* block */ _resCallback;
    NSObject<OS_dispatch_queue> *_dataQueue;
    id<XPlayItemProtocol> _proxySource;
}

@property (retain, nonatomic) NSTimer *callbackTimer;
@property (copy, nonatomic) NSString *itemId;
@property (copy, nonatomic) NSString *core;
@property (retain, nonatomic) id<XPlayCloudBusinessHandlerProtocol> cbHandler;
@property (retain, nonatomic) NSMutableDictionary *resCbDic;
@property (retain, nonatomic) NSLock *resCbDicLock;
@property (nonatomic) double resignStartTime;
@property (nonatomic) long long curNetGreatCount;
@property (nonatomic) long long netGreatThreshold;
@property (retain, nonatomic) id<XPlayAuthProtocol> curAuthInfo;
@property (nonatomic) BOOL isActive;
@property (nonatomic) unsigned long long networkStatus;
@property (copy, nonatomic) id /* block */ resCallback;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *dataQueue;
@property (weak, nonatomic) id<XPlayItemProtocol> proxySource;
@property (weak, nonatomic) id<XPlayItemDelegate> delegate;
@property (weak, nonatomic) id<XPlayItemBusinessDelegate> businessDelegate;
@property (weak, nonatomic) id<XPlayPermissionDelegate> permissionDelegate;
@property (retain, nonatomic) XPlayConfiguration *configuration;
@property (retain, nonatomic) id<XPlayUserInfoProtocol> userSession;
@property (retain, nonatomic) UIViewController *controller;
@property (retain, nonatomic) XPlayGameTopView *view;
@property (retain, nonatomic) XPlayTrackHelper *trackHelper;
@property (retain, nonatomic) XPlayTimeRecorder *recorder;
@property (nonatomic) unsigned long long status;
@property (copy, nonatomic) XPlayQualityStatsModel *qualityStats;
@property (retain, nonatomic) XPlayBlockRateProcesser *blockProcesser;
@property (retain, nonatomic) id<XPlayScreenRecordProtocol> screenRecorder;
@property (retain, nonatomic) id<XPlayKeyboardProtocol> keyboard;
@property (retain, nonatomic) NSMutableDictionary *pluggins;
@property (readonly, nonatomic) BOOL useCustomKbps;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (id)plugginClazzForCommand:(long long)arg0;

- (void)setAudioMute:(BOOL)arg0;
- (void)switchResolution:(id)arg0;
- (long long)startNetworkDetection;
- (void)triggerCallback;
- (id)trackHelper;
- (void)setTrackHelper:(id)arg0;
- (id)sendCustomMessage:(id)arg0;
- (void)switchResolution:(id)arg0 callback:(id /* block */)arg1;
- (BOOL)useCustomKbps;
- (void)switchCustomResolution:(id)arg0 callback:(id /* block */)arg1;
- (void)stopGame;
- (void)stopWithoutDismiss;
- (void)stopNetworkDetection;
- (void)callbackRenderPixelBuffer:(struct __CVBuffer { } *)arg0 rotation:(long long)arg1 contentType:(long long)arg2 extendedData:(id)arg3 pts:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg4;
- (void)callbackByteRTCAudioFrame:(id)arg0;
- (void)callbackPlayStatusDidUpdated:(unsigned long long)arg0 info:(id)arg1;
- (void)callbackVideoQualityChange:(long long)arg0 result:(BOOL)arg1;
- (void)callbackOnNetworkDetectionWithQuality:(unsigned long long)arg0 rtt:(int)arg1 lostRate:(double)arg2 bitrate:(int)arg3 jitter:(int)arg4;
- (void)callbackOnNetworkDetectionStopped:(unsigned long long)arg0;
- (void)callbackRemoteVideoStateChangeWith:(long long)arg0 withVideoStateReason:(long long)arg1;
- (void)callbackSystemFailedWith:(unsigned long long)arg0 info:(id)arg1;
- (void)callbackRequestRecordPermissionWithCompletion:(id /* block */)arg0;
- (void)callbackVideoRotation:(long long)arg0;
- (id)businessDelegate;
- (void)setBusinessDelegate:(id)arg0;
- (id)permissionDelegate;
- (void)setPermissionDelegate:(id)arg0;
- (void)setQualityStats:(id)arg0;
- (id)blockProcesser;
- (void)setBlockProcesser:(id)arg0;
- (id)pluggins;
- (void)setPluggins:(id)arg0;
- (void)startTask:(unsigned long long)arg0 andCategory:(long long)arg1;
- (void)requestBusinessConfig;
- (void)willRequestAuth:(id)arg0;
- (void)requestTasksInfoWithCategory:(long long)arg0 callback:(id /* block */)arg1;
- (void)requestPayResultWithOrder:(id)arg0 completion:(id /* block */)arg1;
- (void)requestUserAuthorizedWithAuthCheck:(BOOL)arg0 callback:(id /* block */)arg1;
- (void)completeUserRealNameAuthWithIdentityName:(id)arg0 identityNumber:(id)arg1 callback:(id /* block */)arg2;
- (void)completeAuthWith:(id)arg0 result:(long long)arg1 authCode:(id)arg2 message:(id)arg3 needCheckAuth:(BOOL)arg4 callback:(id /* block */)arg5;
- (void)postOpenActionWithAction:(unsigned long long)arg0 withExtra:(id)arg1 completion:(id /* block */)arg2;
- (void)getOpenActionWithActions:(id)arg0 completion:(id /* block */)arg1;
- (void)getOpenFeedBackTypeWithCompletion:(id /* block */)arg0;
- (void)postOpenFeedbackWithTypes:(id)arg0 nickId:(id)arg1 completion:(id /* block */)arg2;
- (void)bindView;
- (void)callbackPreloadDidSucceedWithInfo:(id)arg0;
- (void)callbackDidReceiveMessage:(id)arg0;
- (void)sendMessage:(id)arg0 callback:(id /* block */)arg1;
- (void)callbackNetStatus:(long long)arg0 rtt:(long long)arg1 needToast:(BOOL)arg2 needNotification:(BOOL)arg3;
- (id)qualityStats;
- (void)callbackViewTouchBegan;
- (void)callbackViewWillAppear;
- (id)plugginForClazzTag:(id)arg0;
- (id)plugginForCommandType:(long long)arg0;
- (void)setResCbDic:(id)arg0;
- (void)setResCbDicLock:(id)arg0;
- (void)setCallbackTimer:(id)arg0;
- (id)callbackTimer;
- (void)setNetGreatThreshold:(long long)arg0;
- (void)setCbHandler:(id)arg0;
- (id)cbHandler;
- (void)setResCallback:(id /* block */)arg0;
- (id)resCbDicLock;
- (id)resCbDic;
- (void)setCurAuthInfo:(id)arg0;
- (id)generatePrams;
- (id)proxySource;
- (void)callbackPlayQualityStats;
- (void)callbackPlayTimeCountDown;
- (void)callbackPlayQualityStats:(id)arg0;
- (void)refreshRemainingPlayTimeAfterResignActive;
- (void)captureLastFrameAndShow;
- (void)callbackPlayTimeCountDown:(unsigned long long)arg0;
- (void)dealWithRemainingTimeout:(BOOL)arg0;
- (void)callbackPreloadDidFailedWithInfo:(id)arg0;
- (id /* block */)resCallback;
- (void)callbackVideoQualityChangeResult:(BOOL)arg0;
- (void)callbackChangeToFHDIfNeeded:(long long)arg0;
- (void)updatePlayTime:(unsigned long long)arg0;
- (void)setCurNetGreatCount:(long long)arg0;
- (long long)curNetGreatCount;
- (long long)netGreatThreshold;
- (double)resignStartTime;
- (void)setResignStartTime:(double)arg0;
- (unsigned long long)getXPlayNetWorkStatusFrom:(long long)arg0;
- (void)callbackNetworkStatusChangedFrom:(unsigned long long)arg0 to:(unsigned long long)arg1;
- (void)receiveOrder:(id)arg0;
- (void)receiveGSDKOrder:(id)arg0 callback:(id /* block */)arg1;
- (void)receiveAuth:(id)arg0;
- (void)receiveGSDKAuth:(id)arg0 callback:(id /* block */)arg1;
- (void)callbackUserEditCompelete:(long long)arg0;
- (void)receiveRealName:(id)arg0 callback:(id /* block */)arg1;
- (void)receiveHighlight:(id)arg0 callback:(id /* block */)arg1;
- (void)callbackHighlightPostResult:(BOOL)arg0;
- (void)receiveAd:(id)arg0 callback:(id /* block */)arg1;
- (void)receiveFollow:(id)arg0 callback:(id /* block */)arg1;
- (void)receiveGameRoomInvite:(id)arg0 callback:(id /* block */)arg1;
- (void)receiveExitRequest:(id /* block */)arg0;
- (void)receiveJoinGroup:(id)arg0 callback:(id /* block */)arg1;
- (void)receiveShareRequest:(id /* block */)arg0;
- (void)receiveCustomRequestMessage:(id)arg0 callback:(id /* block */)arg1;
- (BOOL)hasProxySource:(id)arg0;
- (void)callbackPreloadDidFailedWithInfo:(id)arg0 state:(unsigned long long)arg1 errorCode:(id)arg2;
- (void)callbackUserInfo:(id)arg0 from:(long long)arg1;
- (void)callbackIncreaseTimeResult:(id)arg0;
- (void)callbackTaskStatusWithCode:(int)arg0 type:(unsigned long long)arg1 time:(long long)arg2;
- (void)callbackTaskFinishedWithCode:(int)arg0 type:(unsigned long long)arg1 time:(long long)arg2;
- (void)callbackConfig:(id)arg0;
- (void)callbackHeartbeatDisconnect;
- (void)callbackCustomMessageRecievedWithCode:(int)arg0 uniqueSeq:(id)arg1 message:(id)arg2;
- (id)curAuthInfo;
- (void)setProxySource:(id)arg0;
- (id)socketCommonParam;
- (id)emptyInst;
- (void)becomeActive;
- (void)setController:(id)arg0;
- (id)keyboard;
- (id)userSession;
- (id)init;
- (void)resume;
- (unsigned long long)networkStatus;
- (void).cxx_destruct;
- (void)setIsActive:(BOOL)arg0;
- (unsigned long long)status;
- (void)resignActive;
- (void)preload;
- (id)recorder;
- (void)stop;
- (id)initWithConfiguration:(id)arg0;
- (id)controller;
- (void)dequeue;
- (void)setUserSession:(id)arg0;
- (void)stopAudioCapture;
- (void)setView:(id)arg0;
- (id)delegate;
- (void)setStatus:(unsigned long long)arg0;
- (void)startAudioCapture;
- (id)configuration;
- (BOOL)isActive;
- (void)setNetworkStatus:(unsigned long long)arg0;
- (BOOL)isPlaying;
- (void)clear;
- (void)setRecorder:(id)arg0;
- (void)setDelegate:(id)arg0;
- (void)dealloc;
- (void)play;
- (void)pause;
- (id)view;
- (void)setConfiguration:(id)arg0;
- (id)sourceItem;
- (void)setKeyboard:(id)arg0;
- (id)dataQueue;
- (void)setDataQueue:(id)arg0;
- (id)itemId;
- (id)core;
- (void)setItemId:(id)arg0;
- (id)screenRecorder;
- (void)setScreenRecorder:(id)arg0;
- (void)setCore:(id)arg0;
- (void)_updateNetworkStatus;

@end
