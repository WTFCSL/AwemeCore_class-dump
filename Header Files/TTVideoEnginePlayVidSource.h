//
//     Generated by private class-dump
//

@class NSString, TTVideoEngineInfoFetcher, NSMutableArray;

@interface TTVideoEnginePlayVidSource : TTVideoEnginePlayBaseSource <TTVideoInfoFetcherDelegate> {
    NSString *_videoId;
    NSString *_fallbackApi;
    NSString *_keyseed;
    NSString *_apiString;
    TTVideoEngineInfoFetcher *_infoFetcher;
    unsigned long long _currentVideoResolution;
    unsigned long long _currentAudioResolution;
    NSMutableArray *_resolutionIndexs;
    NSString *_usingUrl;
    id /* block */ _fetchCall;
}

@property (retain, nonatomic) TTVideoEngineInfoFetcher *infoFetcher;
@property (nonatomic) unsigned long long currentVideoResolution;
@property (nonatomic) unsigned long long currentAudioResolution;
@property (retain, nonatomic) NSMutableArray *resolutionIndexs;
@property (copy, nonatomic) NSString *usingUrl;
@property (copy, nonatomic) id /* block */ fetchCall;
@property (copy, nonatomic) NSString *apiString;
@property (copy, nonatomic) NSString *videoId;
@property (copy, nonatomic) NSString *fallbackApi;
@property (copy, nonatomic) NSString *keyseed;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (long long)getValueInt:(long long)arg0;
- (id)currentUrl;
- (id)getValueStr:(int)arg0;
- (double)getValueFloat:(int)arg0;
- (id)barrageMaskUrl;
- (id)aiBarrageUrl;
- (id)spade_a;
- (long long)videoModelVersion;
- (id)getVideoList;
- (unsigned long long)autoResolution;
- (id)refString;
- (id)keyseed;
- (void)setKeyseed:(id)arg0;
- (id)decodingMode;
- (BOOL)isMbRefactor;
- (id)usingUrl;
- (id)urlForResolution:(unsigned long long)arg0;
- (id)resolutionIndexs;
- (void)setCurrentAudioResolution:(unsigned long long)arg0;
- (void)setCurrentVideoResolution:(unsigned long long)arg0;
- (id)allUrlsForResolution:(unsigned long long *)arg0;
- (void)updateResolution:(unsigned long long)arg0 mediaType:(id)arg1;
- (void)setUsingUrl:(id)arg0;
- (id)_urlInfo;
- (BOOL)supportDash;
- (BOOL)supportHLS;
- (id)getDynamicType;
- (BOOL)supportMP4;
- (BOOL)isHaveSpadea;
- (void)_resetResolutionIndexs;
- (void)setFetchCall:(id /* block */)arg0;
- (id)fallbackApi;
- (void)setApiString:(id)arg0;
- (void)setInfoFetcher:(id)arg0;
- (id)infoFetcher;
- (id /* block */)fetchCall;
- (unsigned long long)currentVideoResolution;
- (unsigned long long)currentAudioResolution;
- (void)setResolutionIndexs:(id)arg0;
- (void)setFallbackApi:(id)arg0;
- (void)infoFetcherDidFinish:(long long)arg0;
- (void)infoFetcherDidFinish:(id)arg0 error:(id)arg1;
- (void)infoFetcherShouldRetry:(id)arg0;
- (void)infoFetcherDidCancel;
- (void)infoFetcherFinishWithDNSError:(id)arg0;
- (id)supportResolutions;
- (id)supportQualityDesc;
- (BOOL)isMainUrl;
- (id)usingUrlInfo;
- (id)urlInfoForResolution:(unsigned long long)arg0 mediaType:(id)arg1;
- (id)urlInfoForResolution:(unsigned long long)arg0 mediaType:(id)arg1 params:(id)arg2;
- (id)proxyUrlExtraInfo;
- (BOOL)skipToNext;
- (id)mediaFileKey;
- (long long)videoSizeOfType:(unsigned long long)arg0;
- (BOOL)supportSSL;
- (BOOL)isSingleUrl;
- (long long)retryStrategyForRetryCount:(long long)arg0;
- (id)preloadItem;
- (BOOL)supportHLSSeamlessSwitch;
- (BOOL)supportBash;
- (long long)bitrateForDashSourceOfType:(unsigned long long)arg0;
- (id)checkInfo:(unsigned long long)arg0;
- (long long)currentUrlIndex;
- (void)setParamMap:(id)arg0;
- (id)mediaFileHashOfType:(unsigned long long)arg0;
- (void)fetchUrlWithApiString:(id /* block */)arg0 auth:(id /* block */)arg1 params:(id /* block */)arg2 apiVersion:(id /* block */)arg3 result:(id /* block */)arg4;
- (id)apiString;
- (BOOL)validate;
- (id)init;
- (void)setVideoId:(id)arg0;
- (void).cxx_destruct;
- (BOOL)hasVideo;
- (id)videoId;
- (BOOL)isEqual:(id)arg0;
- (id)deepCopy;
- (BOOL)canFetch;
- (unsigned long long)currentResolution;
- (void)cancelFetch;

@end
