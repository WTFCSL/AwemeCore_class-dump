//
//     Generated by private class-dump
//

@class CameraKitByteBenchDataManager, NSString, ByteBenchStrategySubscribeOC, ByteBenchStrategyOC, NSObject;
@protocol CameraTracker, VERecorderPublicProtocol, _TtP9CameraKit21CameraContextProtocol_, OS_dispatch_queue;

@interface CameraContextProcessorImpl : NSObject <CKSCameraContextProcessor> {
    BOOL _enableResoltionCoverge;
    BOOL _inResetting;
    id /* block */ _willChangeResolutionBlock;
    id /* block */ _didChangeResolutionBlock;
    ByteBenchStrategyOC *_strategy;
    id<CameraTracker> _tracker;
    NSString *_poolName;
    CameraKitByteBenchDataManager *_dataManager;
    NSObject<OS_dispatch_queue> *_preloadQueue;
    ByteBenchStrategySubscribeOC *_strategySubscriber;
    id<VERecorderPublicProtocol> _currentCamera;
    id<_TtP9CameraKit21CameraContextProtocol_> _currentContext;
}

@property (weak, nonatomic) ByteBenchStrategyOC *strategy;
@property (weak, nonatomic) id<CameraTracker> tracker;
@property (copy, nonatomic) NSString *poolName;
@property (nonatomic) BOOL enableResoltionCoverge;
@property (weak, nonatomic) CameraKitByteBenchDataManager *dataManager;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *preloadQueue;
@property (retain, nonatomic) ByteBenchStrategySubscribeOC *strategySubscriber;
@property (weak, nonatomic) id<VERecorderPublicProtocol> currentCamera;
@property (weak, nonatomic) id<_TtP9CameraKit21CameraContextProtocol_> currentContext;
@property (nonatomic) BOOL inResetting;
@property (copy, nonatomic) id /* block */ willChangeResolutionBlock;
@property (copy, nonatomic) id /* block */ didChangeResolutionBlock;

- (void)modifyDynamicCameraContext;
- (void)switchCameraStreamTo:(long long)arg0;
- (void)registerCameraParamsToByteBench;
- (void)modifyTotalCameraContext;
- (void)degradeResolutionIfNeed;
- (void)fixResolutionAccordingFrameRatioIfNeed;
- (void)notifyResolutionChangeCausedByTabSwitch;
- (void)setPreloadQueue:(id)arg0;
- (void)track:(id)arg0 params:(id)arg1;
- (id)initWithByteBenchStrategy:(id)arg0 featurePoolName:(id)arg1 tracker:(id)arg2 enableResoltionCoverge:(BOOL)arg3;
- (void)invokeSetProperty:(id)arg0 argument:(id)arg1 target:(id)arg2;
- (void)invokeSetProperty:(id)arg0 argument:(id)arg1 context:(id)arg2;
- (id)poolName;
- (struct CGSize { double x0; double x1; })obtainSizeAccordingCurrentRatioWithWidth:(double)arg0;
- (void)willChangeResolutionWithPath:(id)arg0;
- (id)obtainCapturePresetFromSizeWidth:(double)arg0;
- (void)didChangeResolutionWithPath:(id)arg0;
- (BOOL)inResetting;
- (struct CGSize { double x0; double x1; })currentOutputSize;
- (void)resetCaptureRatio:(long long)arg0 preferredPreset:(id)arg1 outputSize:(struct CGSize { double x0; double x1; })arg2 path:(id)arg3 then:(id /* block */)arg4;
- (void)setStrategySubscriber:(id)arg0;
- (id)strategySubscriber;
- (id)dicFromJsonString:(id)arg0;
- (struct CGSize { double x0; double x1; })obtainResolutionSizeFrom:(id)arg0;
- (id)currentCapturePreset;
- (void)setInResetting:(BOOL)arg0;
- (id /* block */)willChangeResolutionBlock;
- (id /* block */)didChangeResolutionBlock;
- (SEL)obtainSetterSelectorWithProperty:(id)arg0;
- (struct CGSize { double x0; double x1; })transStringToSize:(id)arg0;
- (void)setWillChangeResolutionBlock:(id /* block */)arg0;
- (void)setDidChangeResolutionBlock:(id /* block */)arg0;
- (void)setPoolName:(id)arg0;
- (BOOL)enableResoltionCoverge;
- (void)setEnableResoltionCoverge:(BOOL)arg0;
- (id)dataManager;
- (id)strategy;
- (id)tracker;
- (void)setTracker:(id)arg0;
- (void).cxx_destruct;
- (id)currentContext;
- (void)setDataManager:(id)arg0;
- (void)setCurrentContext:(id)arg0;
- (void)setStrategy:(id)arg0;
- (id)currentCamera;
- (void)setCurrentCamera:(id)arg0;
- (id)preloadQueue;

@end
