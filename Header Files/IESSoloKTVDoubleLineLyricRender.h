//
//     Generated by private class-dump
//

@class NSMutableDictionary, IESSCMetalRenderParams, IESLiveLyricViewConfig, NSObject, IESSCMetalAlphaFilter, IESLiveKTVLyricViewWordResultModel, NSMutableArray, IESLiveKRCSong, IESSCMetalTransformFilter, IESSoloKTVDrawCGImpl, IESSCMetalConcatFilter, IESSCMetalImage, NSCache;
@protocol OS_dispatch_queue;

@interface IESSoloKTVDoubleLineLyricRender : NSObject {
    BOOL _enableBlend;
    float _fps;
    int _singingLine;
    int _focusImageRowKey;
    float _maxCapacity;
    id /* block */ _onCountDownCallback;
    IESSoloKTVDrawCGImpl *_asyncDraw;
    NSMutableArray *_cellData;
    IESLiveLyricViewConfig *_config;
    IESLiveKRCSong *_krcSong;
    double _playingTime;
    IESLiveKTVLyricViewWordResultModel *_preResult;
    NSObject<OS_dispatch_queue> *_queue;
    double _pauseUpdatePlayingTime;
    double _showCountDownTime;
    double _lyricStartTime;
    double _lyricEndTime;
    IESSCMetalImage *_focusBGImage;
    IESSCMetalImage *_focusFGImage;
    IESSCMetalImage *_focusTargetImage;
    NSCache *_rowImageCache;
    IESSCMetalRenderParams *_renderParams;
    NSMutableDictionary *_wordWidthCache;
    double _screenScale;
    double _preWordProgress;
    double _preLeftAlpha;
    double _preRightAlpha;
    IESSCMetalImage *_preResultImage;
    NSMutableArray *_lyricDrawData;
    NSMutableArray *_lyricAnimationData;
    NSMutableArray *_restoreAnimationData;
    IESSCMetalTransformFilter *_transformFilter;
    IESSCMetalConcatFilter *_concatFilter;
    IESSCMetalAlphaFilter *_alphaFilter;
    double _rowHeightPX;
    struct CGSize { double width; double height; } _viewSize;
    struct CGSize { double width; double height; } _renderSizePX;
}

@property (retain, nonatomic) IESSoloKTVDrawCGImpl *asyncDraw;
@property (retain, nonatomic) NSMutableArray *cellData;
@property (retain, nonatomic) IESLiveLyricViewConfig *config;
@property (retain, nonatomic) IESLiveKRCSong *krcSong;
@property (nonatomic) double playingTime;
@property (retain, nonatomic) IESLiveKTVLyricViewWordResultModel *preResult;
@property (nonatomic) int singingLine;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *queue;
@property (nonatomic) double pauseUpdatePlayingTime;
@property (nonatomic) double showCountDownTime;
@property (nonatomic) double lyricStartTime;
@property (nonatomic) double lyricEndTime;
@property (nonatomic) int focusImageRowKey;
@property (retain, nonatomic) IESSCMetalImage *focusBGImage;
@property (retain, nonatomic) IESSCMetalImage *focusFGImage;
@property (retain, nonatomic) IESSCMetalImage *focusTargetImage;
@property (retain, nonatomic) NSCache *rowImageCache;
@property (retain, nonatomic) IESSCMetalRenderParams *renderParams;
@property (retain, nonatomic) NSMutableDictionary *wordWidthCache;
@property (nonatomic) double screenScale;
@property (nonatomic) double preWordProgress;
@property (nonatomic) double preLeftAlpha;
@property (nonatomic) double preRightAlpha;
@property (retain, nonatomic) IESSCMetalImage *preResultImage;
@property (retain, nonatomic) NSMutableArray *lyricDrawData;
@property (retain, nonatomic) NSMutableArray *lyricAnimationData;
@property (retain, nonatomic) NSMutableArray *restoreAnimationData;
@property (retain, nonatomic) IESSCMetalTransformFilter *transformFilter;
@property (retain, nonatomic) IESSCMetalConcatFilter *concatFilter;
@property (retain, nonatomic) IESSCMetalAlphaFilter *alphaFilter;
@property (nonatomic) float maxCapacity;
@property (nonatomic) double rowHeightPX;
@property (nonatomic) struct CGSize { double width; double height; } renderSizePX;
@property (nonatomic) float fps;
@property (nonatomic) struct CGSize { double width; double height; } viewSize;
@property (nonatomic) BOOL enableBlend;
@property (copy, nonatomic) id /* block */ onCountDownCallback;

- (void)updateConfig:(id)arg0;
- (double)playingTime;
- (void)setPlayingTime:(double)arg0;
- (BOOL)enableBlend;
- (void)setEnableBlend:(BOOL)arg0;
- (void)setTransformFilter:(id)arg0;
- (id)transformFilter;
- (id)wordWidthCache;
- (void)setWordWidthCache:(id)arg0;
- (void)setKrcSong:(id)arg0;
- (BOOL)isOverViewWidth:(id)arg0;
- (void)updatePlayingTime:(double)arg0;
- (id)krcSong;
- (int)singingLine;
- (id)preResult;
- (void)setPreResult:(id)arg0;
- (void)scrollToWord:(id)arg0;
- (void)setSingingLine:(int)arg0;
- (void)setAsyncDraw:(id)arg0;
- (id)asyncDraw;
- (void)pausePlayingTimeUtil:(double)arg0 currentTime:(double)arg1;
- (void)setLyricDrawData:(id)arg0;
- (void)setLyricAnimationData:(id)arg0;
- (void)setRestoreAnimationData:(id)arg0;
- (void)setFocusImageRowKey:(int)arg0;
- (void)setPauseUpdatePlayingTime:(double)arg0;
- (void)setPreWordProgress:(double)arg0;
- (void)setPreLeftAlpha:(double)arg0;
- (void)setPreRightAlpha:(double)arg0;
- (void)setRowHeightPX:(double)arg0;
- (void)generateSentenceInfo:(id)arg0 isEmplace:(BOOL)arg1;
- (void)setRenderSizePX:(struct CGSize { double x0; double x1; })arg0;
- (struct CGSize { double x0; double x1; })renderSizePX;
- (void)setPreResultImage:(id)arg0;
- (void)showNoLyrics;
- (void)setShowCountDownTime:(double)arg0;
- (void)setLyricStartTime:(double)arg0;
- (void)setLyricEndTime:(double)arg0;
- (double)pauseUpdatePlayingTime;
- (void)privateUpdatePlayingTime:(double)arg0;
- (double)showCountDownTime;
- (id /* block */)onCountDownCallback;
- (id)lyricDrawData;
- (double)lyricStartTime;
- (double)lyricEndTime;
- (void)animationGoToEnd;
- (void)animationAction:(double)arg0;
- (BOOL)isLeft:(int)arg0;
- (void)drawLeftImageIfNeed:(int)arg0;
- (void)drawRightImageIfNeed:(int)arg0;
- (double)preWordProgress;
- (id)preResultImage;
- (void)drawFocusLyricImage:(int)arg0 size:(struct CGSize { double x0; double x1; })arg1 imageRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg2 targetImage:(id)arg3;
- (double)preLeftAlpha;
- (double)rowHeightPX;
- (void)drawNormalLyricImage:(int)arg0 size:(struct CGSize { double x0; double x1; })arg1 imageRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg2 targetImage:(id)arg3 alpha:(double)arg4;
- (double)preRightAlpha;
- (id)rowImageCache;
- (id)drawTextWithSize:(struct CGSize { double x0; double x1; })arg0 text:(id)arg1 attributes:(id)arg2 leftOffset:(double)arg3;
- (void)alphaImage:(id)arg0 alpha:(double)arg1 targetImage:(id)arg2;
- (void)renderImage:(id)arg0 transform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })arg1 targetImage:(id)arg2;
- (void)lazyDrawSingingLineImage:(int)arg0;
- (id)focusBGImage;
- (id)focusFGImage;
- (id)focusTargetImage;
- (void)concatImage:(id)arg0 leftImage:(id)arg1 rightImage:(id)arg2 concatWidth:(float)arg3;
- (int)focusImageRowKey;
- (id)drawTextWithSize:(struct CGSize { double x0; double x1; })arg0 text:(id)arg1 sColor:(id)arg2 eColor:(id)arg3 leftOffset:(double)arg4;
- (void)setFocusFGImage:(id)arg0;
- (void)setFocusBGImage:(id)arg0;
- (void)setFocusTargetImage:(id)arg0;
- (void)addAlphaAnimationToImage:(int)arg0 startAlpha:(double)arg1 endAlpha:(double)arg2 duration:(double)arg3 after:(double)arg4;
- (BOOL)isInImageDataRange:(int)arg0;
- (void)updateProgress:(double)arg0 wordRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })arg1 index:(int)arg2;
- (id)lyricAnimationData;
- (id)restoreAnimationData;
- (void)animationAlphaUpdate:(id)arg0 alpha:(double)arg1 isAdd:(BOOL)arg2;
- (id)concatFilter;
- (id)renderParams;
- (id)alphaFilter;
- (void)updateLyrics:(id)arg0 completion:(id /* block */)arg1;
- (void)generateSentenceInfo;
- (id)getImageTexture;
- (void)setOnCountDownCallback:(id /* block */)arg0;
- (void)setRowImageCache:(id)arg0;
- (void)setRenderParams:(id)arg0;
- (void)setConcatFilter:(id)arg0;
- (void)setAlphaFilter:(id)arg0;
- (double)screenScale;
- (BOOL)hasLyrics;
- (id)init;
- (void)setConfig:(id)arg0;
- (void).cxx_destruct;
- (id)config;
- (struct CGSize { double x0; double x1; })viewSize;
- (void)setScreenScale:(double)arg0;
- (void)setMaxCapacity:(float)arg0;
- (id)queue;
- (float)fps;
- (void)dealloc;
- (void)setQueue:(id)arg0;
- (float)maxCapacity;
- (void)setViewSize:(struct CGSize { double x0; double x1; })arg0;
- (void)setFps:(float)arg0;
- (void)setCellData:(id)arg0;
- (void)initData;
- (id)cellData;
- (void)clean;
- (void)updateCellData:(id)arg0;

@end
