//
//     Generated by private class-dump
//

@class LSGLFramebuffer, NSMutableArray, NSMutableDictionary;

@interface LSGLPictureMixer : LSGLFilter {
    NSMutableDictionary *inputFBs_;
    NSMutableDictionary *mixedFBs_;
    int available_layer_index_;
    int alphaUniform;
    LSGLFramebuffer *canvasFramebuffer;
    struct unique_ptr<LiveCoreN::LSMixerHelper, std::default_delete<LiveCoreN::LSMixerHelper>> { struct __compressed_pair<LiveCoreN::LSMixerHelper *, std::default_delete<LiveCoreN::LSMixerHelper>> { struct LSMixerHelper *__value_; } __ptr_; } mixer_;
    struct unique_ptr<avframework::VideoInfoStatisticManager, std::default_delete<avframework::VideoInfoStatisticManager>> { struct __compressed_pair<avframework::VideoInfoStatisticManager *, std::default_delete<avframework::VideoInfoStatisticManager>> { struct VideoInfoStatisticManager *__value_; } __ptr_; } statisticManager;
    unsigned long long mixer_index;
    NSMutableDictionary *_updateList;
    struct mutex { struct _opaque_pthread_mutex_t { long long __sig; char __opaque[56]; } __m_; } mixer_mutex;
    BOOL _clearBeforeRender;
    BOOL _cacheFramebufferForRedrawing;
    BOOL _unableMixerWithSameFrameBuffer;
    BOOL _enableNewAlphaSupport;
    unsigned int _masterLayer;
    NSMutableArray *_enableBlendArr;
    struct CGSize { double width; double height; } _outputSize;
}

@property (nonatomic) unsigned int masterLayer;
@property (nonatomic) BOOL clearBeforeRender;
@property (nonatomic) BOOL cacheFramebufferForRedrawing;
@property (nonatomic) struct CGSize { double width; double height; } outputSize;
@property (nonatomic) BOOL unableMixerWithSameFrameBuffer;
@property (retain, nonatomic) NSMutableArray *enableBlendArr;
@property (nonatomic) BOOL enableNewAlphaSupport;

- (void)setInputFramebuffer:(id)arg0 atIndex:(long long)arg1;
- (void)needRender:(BOOL)arg0;
- (void)newFrameReadyAtTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg0 atIndex:(long long)arg1;
- (void)informTargetsAboutNewFrameAtTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg0;
- (void)endProcessing;
- (long long)nextAvailableTextureIndex;
- (id)initWithOutputSize:(struct CGSize { double x0; double x1; })arg0 Context:(id)arg1;
- (void)setLayerInfo:(struct ILayerInfo { int x0; int x1; struct ILayerRect { float x0; float x1; float x2; float x3; } x2; int x3; BOOL x4; int x5; float x6; })arg0;
- (id)enableBlendArr;
- (BOOL)unableMixerWithSameFrameBuffer;
- (void)mixerRender;
- (BOOL)enableNewAlphaSupport;
- (BOOL)cacheFramebufferForRedrawing;
- (id)getVideoInfoMessage;
- (void)updateLayerInfo:(struct ILayerInfo { int x0; int x1; struct ILayerRect { float x0; float x1; float x2; float x3; } x2; int x3; BOOL x4; int x5; float x6; })arg0 animated:(BOOL)arg1 frames:(int)arg2;
- (const struct ILayerInfo { int x0; int x1; struct ILayerRect { float x0; float x1; float x2; float x3; } x2; int x3; BOOL x4; int x5; float x6; } *)getLayerInfo:(unsigned int)arg0;
- (void)clearLayer:(unsigned int)arg0;
- (id)getAllLayerInfoDescription;
- (void)setMasterLayer:(unsigned int)arg0;
- (unsigned int)masterLayer;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })singleViewShowRegion;
- (BOOL)clearBeforeRender;
- (void)setClearBeforeRender:(BOOL)arg0;
- (void)setCacheFramebufferForRedrawing:(BOOL)arg0;
- (void)setUnableMixerWithSameFrameBuffer:(BOOL)arg0;
- (void)setEnableBlendArr:(id)arg0;
- (void)setEnableNewAlphaSupport:(BOOL)arg0;
- (id)initWithContext:(id)arg0;
- (id)init;
- (void).cxx_destruct;
- (struct CGSize { double x0; double x1; })outputSize;
- (void)checkForUpdate:(struct ILayerInfo { int x0; int x1; struct ILayerRect { float x0; float x1; float x2; float x3; } x2; int x3; BOOL x4; int x5; float x6; } *)arg0;
- (void)dealloc;
- (id).cxx_construct;
- (void)setOutputSize:(struct CGSize { double x0; double x1; })arg0;

@end
