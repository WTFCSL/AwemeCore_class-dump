//
//     Generated by private class-dump
//

@class HybridContext, NSArray, NSString, HybridResourceLoaderConfig, NSMutableArray, HybridRLOperator;

@interface HybridDefaultResourceLoader : NSObject <HybridResourceLoaderProtocol, HybridResourceLoaderAdvancedOperatorProtocol> {
    struct _opaque_pthread_mutex_t { long long __sig; char __opaque[56]; } _taskPoolLock;
    HybridResourceLoaderConfig *_loaderConfig;
    HybridContext *_context;
    NSMutableArray *_taskPool;
    NSMutableArray *_globalProcessors;
    NSMutableArray *_globalMonitors;
    HybridRLOperator *_advancedOperator;
    NSArray *_processorsDefaultSequence;
    NSString *_appId;
    unsigned long long _fetchIncreaser;
}

@property (retain, nonatomic) NSMutableArray *taskPool;
@property (retain, nonatomic) NSMutableArray *globalProcessors;
@property (retain, nonatomic) NSMutableArray *globalMonitors;
@property (retain, nonatomic) HybridRLOperator *advancedOperator;
@property (copy, nonatomic) NSArray *processorsDefaultSequence;
@property (copy, nonatomic) NSString *appId;
@property (nonatomic) unsigned long long fetchIncreaser;
@property (retain, nonatomic) HybridResourceLoaderConfig *loaderConfig;
@property (weak, nonatomic) HybridContext *context;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (void)registeGlobalMonitor:(id)arg0;
+ (void)registeGlobalProcessor:(id)arg0;
+ (void)reportLog:(id)arg0;
+ (id)monitorWithTaskConfig:(id)arg0;
+ (id)sharedInstance;
+ (id)monitor;
+ (void)reportError:(id)arg0;
+ (id)defaultLoader;
+ (id)appid;

- (void)registeGlobalMonitor:(id)arg0;
- (id)getAdvancedOperator;
- (void)updateLoaderConfig:(id)arg0;
- (id)currentLoaderConfig;
- (id)fetchResourceWithURL:(id)arg0 container:(id)arg1 taskConfig:(id)arg2 completion:(id /* block */)arg3;
- (BOOL)cancelResourceLoad:(id)arg0;
- (void)clearCacheWith:(id)arg0;
- (void)registeAccessKey:(id)arg0 appendPrefixList:(id)arg1;
- (id)findPreloadConfigWith:(id)arg0 taskConfig:(id)arg1;
- (id)openSession:(id)arg0;
- (id)getDefaultAccessKey;
- (void)registeDefaultAccessKey:(id)arg0;
- (void)registeAccessKey:(id)arg0 withPrefixList:(id)arg1;
- (void)appendPrefixList:(id)arg0 withAccessKey:(id)arg1;
- (void)syncChannelIfNeeded:(id)arg0 accessKey:(id)arg1 completion:(id /* block */)arg2;
- (id)getFalconPrefixList;
- (unsigned long long)packageVersionForAccessKey:(id)arg0 andChannel:(id)arg1;
- (void)registeGlobalProcessor:(id)arg0;
- (id)loaderConfig;
- (void)setLoaderConfig:(id)arg0;
- (id)targetUrlWithParamConfig:(id)arg0;
- (id)advancedOperator;
- (void)setAdvancedOperator:(id)arg0;
- (void)setTaskPool:(id)arg0;
- (void)setProcessorsDefaultSequence:(id)arg0;
- (id)taskPool;
- (id)processorsDefaultSequence;
- (id)getPerformanceMetric:(id)arg0;
- (unsigned long long)fetchIncreaser;
- (void)setFetchIncreaser:(unsigned long long)arg0;
- (void)setGlobalProcessors:(id)arg0;
- (void)setGlobalMonitors:(id)arg0;
- (id)globalMonitors;
- (id)createNewPipelineWith:(id)arg0 container:(id)arg1 taskConfig:(id)arg2 paramConfig:(id)arg3;
- (void)reportFetchEventWithParamConfig:(id)arg0 container:(id)arg1 resourceProvider:(id)arg2 metric:(id)arg3 errorMessage:(id)arg4;
- (void)completeWithTask:(id)arg0 paramConfig:(id)arg1 provider:(id)arg2 loaderName:(id)arg3 error:(id)arg4 container:(id)arg5;
- (void)onResourceLoadCompleted:(id)arg0 inContainer:(id)arg1 context:(id)arg2;
- (void)addDefaultProcessorsWith:(id)arg0 url:(id)arg1 container:(id)arg2 paramConfig:(id)arg3;
- (id)globalProcessors;
- (void)setAppId:(id)arg0;
- (id)init;
- (void).cxx_destruct;
- (void)setContext:(id)arg0;
- (id)context;
- (void)closeSession:(id)arg0;
- (id)appId;
- (BOOL)deleteResource:(id)arg0;

@end
