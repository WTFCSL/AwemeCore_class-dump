//
//     Generated by private class-dump
//

@class UIView, NSString, UIScreenEdgePanGestureRecognizer, IESLiveWKWebViewDelegateWrapper, PuzzleContext, NSDictionary, NSMutableSet, UIScrollView;
@protocol PuzzleHybridStateCenterProtocol, IESLiveLanguageService, IESLiveDebugService, IESLivePiperProtocol, IESLiveHybridContainerDelegate, IESLiveWebViewService, IESHYHybridViewLifecycleProtocol;

@interface IESLiveWKWebView : IESWKWebView <UIGestureRecognizerDelegate, IESLiveWebViewProtocol, IESLiveWebViewReuseProtocol> {
    BOOL _allowBackNavigationGesture;
    BOOL _allowForwardNavigationGesture;
    BOOL _enableBackGesture;
    BOOL _enableSecLink;
    BOOL _hasInjectedGlobalProps;
    id<IESLivePiperProtocol> liveBridge;
    NSString *liveBusiness;
    id<IESHYHybridViewLifecycleProtocol> _lifecycleDelegate;
    PuzzleContext *context;
    id<PuzzleHybridStateCenterProtocol> _stateCenter;
    NSMutableSet *_bridgeHandlers;
    IESLiveWKWebViewDelegateWrapper *_delegateWrapper;
    id<IESLiveWebViewService> _webViewService;
    id<IESLiveDebugService> _debugService;
    UIScreenEdgePanGestureRecognizer *_backNavigationGesture;
    UIScreenEdgePanGestureRecognizer *_forwardNavigationGesture;
    NSString *_urlString;
    id<IESLiveLanguageService> _languageService;
    NSString *_secLinkScene;
    NSDictionary *_routerParams;
    double _initTime;
    NSDictionary *_initialData;
}

@property (retain, nonatomic) IESLiveWKWebViewDelegateWrapper *delegateWrapper;
@property (retain, nonatomic) NSMutableSet *bridgeHandlers;
@property (retain, nonatomic) id<IESLiveWebViewService> webViewService;
@property (retain, nonatomic) id<IESLiveDebugService> debugService;
@property (retain, nonatomic) UIScreenEdgePanGestureRecognizer *backNavigationGesture;
@property (retain, nonatomic) UIScreenEdgePanGestureRecognizer *forwardNavigationGesture;
@property (nonatomic) BOOL allowBackNavigationGesture;
@property (nonatomic) BOOL allowForwardNavigationGesture;
@property (nonatomic) BOOL enableBackGesture;
@property (copy, nonatomic) NSString *urlString;
@property (retain, nonatomic) id<IESLiveLanguageService> languageService;
@property (nonatomic) BOOL enableSecLink;
@property (copy, nonatomic) NSString *secLinkScene;
@property (nonatomic) BOOL hasInjectedGlobalProps;
@property (retain, nonatomic) NSDictionary *routerParams;
@property (nonatomic) double initTime;
@property (retain, nonatomic) NSDictionary *initialData;
@property (retain, nonatomic) id<IESLivePiperProtocol> liveBridge;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic, getter=canGoBack) BOOL canGoBack;
@property (readonly, nonatomic, getter=canGoForward) BOOL canGoForward;
@property (readonly, nonatomic, getter=isLoading) BOOL loading;
@property (readonly, nonatomic) UIScrollView *scrollView;
@property (readonly, copy, nonatomic) NSString *containerID;
@property (readonly, nonatomic) UIView *rawView;
@property (retain, nonatomic) PuzzleContext *context;
@property (retain, nonatomic) id<PuzzleHybridStateCenterProtocol> stateCenter;
@property (readonly, nonatomic) unsigned long long kernalType;
@property (weak, nonatomic) id<IESHYHybridViewLifecycleProtocol> lifecycleDelegate;
@property (copy, nonatomic) NSString *liveBusiness;
@property (weak, nonatomic) id<IESLiveHybridContainerDelegate> liveHybridContainerDelegate;

- (void)didSetAttachingDIContext;
- (void)sendEvent:(id)arg0 params:(id)arg1;
- (id)initialData;
- (void)setInitialData:(id)arg0;
- (id)rawView;
- (id)lifecycleDelegate;
- (void)setLifecycleDelegate:(id)arg0;
- (void)triggerLayout;
- (id)routerParams;
- (void)setRouterParams:(id)arg0;
- (id)currentRequestURL;
- (BOOL)enableSecLink;
- (void)setEnableSecLink:(BOOL)arg0;
- (id)ies_namespace;
- (void)addPiperHandler:(id)arg0;
- (id)liveHybridContainerDelegate;
- (void)setLiveBridge:(id)arg0;
- (id)liveBridge;
- (id)bridgeHandlers;
- (void)registerHandlerBlock:(id /* block */)arg0 forMethod:(id)arg1 authType:(unsigned long long)arg2;
- (void)setLiveHybridContainerDelegate:(id)arg0;
- (id)liveBusiness;
- (void)setStateCenter:(id)arg0;
- (unsigned long long)kernalType;
- (void)setLiveBusiness:(id)arg0;
- (void)secureGoBackWithReachEndBlock:(id /* block */)arg0;
- (void)addXBridgeMethods;
- (void)setBridgeHandlers:(id)arg0;
- (id)generateJsSourceWithPramName:(id)arg0 dict:(id)arg1;
- (id)languageService;
- (void)setLanguageService:(id)arg0;
- (void)setSecLinkScene:(id)arg0;
- (id)secLinkScene;
- (void)didReceiveSecureLinkResponse:(id)arg0;
- (id)webViewService;
- (void)setWebViewService:(id)arg0;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0 url:(id)arg1 routerParam:(id)arg2;
- (void)setDebugService:(id)arg0;
- (id)debugService;
- (void)webViewEndReuse;
- (id)currentWebViewScene;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0 url:(id)arg1 liveParam:(id)arg2 settings:(id)arg3;
- (void)setAllowForwardNavigationGesture:(BOOL)arg0;
- (void)panScreenEdgeLeft;
- (void)checkEnableSeclinkWithParamDict:(id)arg0;
- (BOOL)hasInjectedGlobalProps;
- (void)setHasInjectedGlobalProps:(BOOL)arg0;
- (void)checkInjectGlobalPropertiesWithURL:(id)arg0;
- (void)setupDelegateWrapper:(id)arg0;
- (BOOL)enableBackGesture;
- (void)setBackNavigationGesture:(id)arg0;
- (id)backNavigationGesture;
- (void)setForwardNavigationGesture:(id)arg0;
- (id)forwardNavigationGesture;
- (void)setTimeStampOfWebPageWithDict:(id)arg0;
- (void)setAllowBackNavigationGesture:(BOOL)arg0;
- (BOOL)allowBackNavigationGesture;
- (BOOL)allowForwardNavigationGesture;
- (void)setEnableBackGesture:(BOOL)arg0;
- (id)urlString;
- (void)setInitTime:(double)arg0;
- (void).cxx_destruct;
- (BOOL)gestureRecognizer:(id)arg0 shouldRequireFailureOfGestureRecognizer:(id)arg1;
- (void)setContext:(id)arg0;
- (BOOL)gestureRecognizer:(id)arg0 shouldBeRequiredToFailByGestureRecognizer:(id)arg1;
- (BOOL)gestureRecognizer:(id)arg0 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)arg1;
- (id)context;
- (id)delegateWrapper;
- (void)setDelegateWrapper:(id)arg0;
- (void)updateData:(id)arg0;
- (void)setUrlString:(id)arg0;
- (void)dealloc;
- (void)addGestureRecognizer:(id)arg0;
- (double)initTime;
- (void)loadData;
- (void)loadWithURL:(id)arg0;
- (id)stateCenter;
- (void)scaleToFit;
- (void)loadURLRequest:(id)arg0;

@end
