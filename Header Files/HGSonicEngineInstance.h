//
//     Generated by private class-dump
//

@class SonicView, SonicApp, HGNapiInstance, NSString, UIView, HGRuntimeGame, HGUniqueID;
@protocol SonicCanvasService;

@interface HGSonicEngineInstance : NSObject <SonicViewPaintListener, HGNapiHandlerProtocol, HGScreenSnapshotProtocol, HGEngineProtocol, HGMonitorableObjectProtocol, HGFrameInfoProtocol> {
    HGRuntimeGame *_runtime;
    double _enterFrameTimeMs;
    HGUniqueID *_uniqueID;
    UIView *_containerView;
    SonicView *_sonicView;
    SonicApp *_sonicApp;
    HGNapiInstance *_napiInstance;
    id<SonicCanvasService> _sonicCanvasService;
}

@property double enterFrameTimeMs;
@property (retain, nonatomic) HGUniqueID *uniqueID;
@property (retain, nonatomic) UIView *containerView;
@property (retain, nonatomic) SonicView *sonicView;
@property (retain, nonatomic) SonicApp *sonicApp;
@property (retain, nonatomic) HGNapiInstance *napiInstance;
@property (weak, nonatomic) id<SonicCanvasService> sonicCanvasService;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (weak, nonatomic) HGRuntimeGame *runtime;
@property (readonly, nonatomic) UIView *engineView;

- (id)engineView;
- (void)setEnterFrameTimeMs:(double)arg0;
- (void)setSonicView:(id)arg0;
- (id)sonicView;
- (void)setNapiInstance:(id)arg0;
- (void)setSonicApp:(id)arg0;
- (void)onEnterFrame;
- (void)setSonicCanvasService:(id)arg0;
- (id)sonicApp;
- (id)napiInstance;
- (id)sonicCanvasService;
- (double)enterFrameTimeMs;
- (void)onFrame;
- (void)napiDispatchToJSThread:(id /* block */)arg0;
- (void)napiUncaughtException:(id)arg0 context:(id)arg1;
- (void)napiWorkerOnStart;
- (void)takeCanvasSnapshotWithShift:(long long)arg0 completionHandler:(id /* block */)arg1;
- (void)fetchMonitorData:(id /* block */)arg0;
- (void)monitorDidStart;
- (void)monitorDidStop;
- (id)getEnterFrameTimeMs;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0 runtime:(id)arg1 uniqueID:(id)arg2;
- (void)resume;
- (void).cxx_destruct;
- (id)uniqueID;
- (void)setUniqueID:(id)arg0;
- (void)stop;
- (void)setContainerView:(id)arg0;
- (id)containerView;
- (void)dealloc;
- (void)pause;
- (id)runtime;
- (void)setupEngine;
- (id)engineName;
- (void)setRuntime:(id)arg0;

@end
