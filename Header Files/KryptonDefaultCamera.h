//
//     Generated by private class-dump
//

@class AVCaptureDeviceInput, KryptonCameraConfig, AVCaptureSession, AVCaptureVideoPreviewLayer, NSString, AVCaptureDevice, AVCaptureVideoDataOutput;
@protocol KryptonCaptureSessionInvoker, KryptonCameraDelegate;

@interface KryptonDefaultCamera : NSObject <AVCaptureVideoDataOutputSampleBufferDelegate, KryptonCamera> {
    unsigned int _texture;
    KryptonCameraConfig *_config;
    id<KryptonCameraDelegate> _delegate;
    AVCaptureDevice *_device;
    AVCaptureDeviceInput *_videoInput;
    AVCaptureSession *_session;
    AVCaptureVideoDataOutput *_videoOutput;
    AVCaptureVideoPreviewLayer *_captureLayer;
    id<KryptonCaptureSessionInvoker> _invoker;
}

@property (retain, nonatomic) KryptonCameraConfig *config;
@property (weak, nonatomic) id<KryptonCameraDelegate> delegate;
@property (nonatomic) unsigned int texture;
@property (retain, nonatomic) AVCaptureDevice *device;
@property (retain, nonatomic) AVCaptureDeviceInput *videoInput;
@property (retain, nonatomic) AVCaptureSession *session;
@property (retain, nonatomic) AVCaptureVideoDataOutput *videoOutput;
@property (retain, nonatomic) AVCaptureVideoPreviewLayer *captureLayer;
@property (retain, nonatomic) id<KryptonCaptureSessionInvoker> invoker;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (id)invoker;
- (void)setInvoker:(id)arg0;
- (id)getCameraConfig;
- (void)setCaptureLayer:(id)arg0;
- (id)captureLayer;
- (id)requestWithConfig:(id)arg0;
- (void)stopSessionRunning;
- (id)findDevice:(id)arg0;
- (void)setTexture:(unsigned int)arg0;
- (BOOL)dispose;
- (BOOL)setZoom:(double)arg0;
- (unsigned int)texture;
- (void)setConfig:(id)arg0;
- (void).cxx_destruct;
- (void)setSession:(id)arg0;
- (id)session;
- (id)videoOutput;
- (id)config;
- (void)setVideoOutput:(id)arg0;
- (id)delegate;
- (void)setDevice:(id)arg0;
- (void)setDelegate:(id)arg0;
- (void)dealloc;
- (BOOL)play;
- (BOOL)pause;
- (void)captureOutput:(id)arg0 didOutputSampleBuffer:(struct opaqueCMSampleBuffer { } *)arg1 fromConnection:(id)arg2;
- (id)device;
- (id)videoInput;
- (void)setVideoInput:(id)arg0;
- (id)setupCaptureSession:(id)arg0;

@end
