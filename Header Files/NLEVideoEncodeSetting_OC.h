//
//     Generated by private class-dump
//

@class NSString, NLEVideoCompileEncodeSettings_OC, NLEAudioCompileEncodeSettings_OC, NSArray, NLEWatermarkParam_OC;

@interface NLEVideoEncodeSetting_OC : NSObject {
    BOOL _enableHwBufferEncode;
    struct shared_ptr<nle::media::NLEVideoEncodeSettings> { struct NLEVideoEncodeSettings *__ptr_; struct __shared_weak_count *__cntrl_; } _cppEncodeSettings;
}

@property (nonatomic) struct shared_ptr<nle::media::NLEVideoEncodeSettings> { struct NLEVideoEncodeSettings *__ptr_; struct __shared_weak_count *__cntrl_; } cppEncodeSettings;
@property (nonatomic) unsigned long long compileType;
@property (nonatomic) long long sourceType;
@property (nonatomic) long long rotate;
@property (nonatomic) long long resizeMode;
@property (nonatomic) double resizeX;
@property (nonatomic) double resizeY;
@property (nonatomic) double speed;
@property (nonatomic) struct CGSize { double x0; double x1; } outputSize;
@property (nonatomic) struct CGSize { double x0; double x1; } watermarkSize;
@property (retain, nonatomic) NSString *externalSettingsJsonStr;
@property (nonatomic) long long bitrateMode;
@property (nonatomic) long long bps;
@property (nonatomic) long long swCRF;
@property (nonatomic) double swQPOffset;
@property (nonatomic) long long swQP;
@property (nonatomic) long long fps;
@property (nonatomic) long long gopSize;
@property (nonatomic) long long swPreset;
@property (nonatomic) long long encodeStandard;
@property (nonatomic) long long encodeProfile;
@property (nonatomic) long long swMaxrate;
@property (nonatomic) BOOL isSupportHWEncoder;
@property (nonatomic) BOOL enableHwBufferEncode;
@property (nonatomic) BOOL enableByteVCRemuxVideo;
@property (nonatomic) BOOL enableRemuxVideo;
@property (nonatomic) BOOL enableRemuxVideoForRotation;
@property (nonatomic) BOOL enableRemuxVideoForShoot;
@property (nonatomic) BOOL enableRemuxVideoRes;
@property (nonatomic) BOOL enableInterLeave;
@property (retain, nonatomic) NLEWatermarkParam_OC *mWatermarkParam;
@property (retain, nonatomic) NLEVideoCompileEncodeSettings_OC *mVideoWatermarkCompileEncodeSetting;
@property (retain, nonatomic) NLEVideoCompileEncodeSettings_OC *mVideoCompileEncodeSetting;
@property (retain, nonatomic) NLEAudioCompileEncodeSettings_OC *mAudioCompileEncodeSetting;
@property (nonatomic) BOOL mOptRemuxWithCopy;
@property (retain, nonatomic) NSString *mDescription;
@property (retain, nonatomic) NSString *mComment;
@property (nonatomic) BOOL mCompileSoftInfo;
@property (nonatomic) BOOL mRecordingMp4;
@property (nonatomic) BOOL mTransitionKeyframeEnable;
@property (nonatomic) BOOL mReEncodeOpt;
@property (nonatomic) BOOL mResolutionAlign;
@property (retain, nonatomic) NSArray *mKeyFramePoints;
@property (nonatomic) BOOL mAutoModifyResolution;
@property (retain, nonatomic) NSString *bitrateSettings;
@property (nonatomic) BOOL enableUploadingWhileCompile;
@property (nonatomic) long long startTime;
@property (nonatomic) long long endTime;
@property (nonatomic) long long startOffset;
@property (nonatomic) BOOL isAudioOnly;
@property (nonatomic) BOOL enableAvInterleave;
@property (nonatomic) long long colorSpace;

- (BOOL)enableHwBufferEncode;
- (void)setEnableHwBufferEncode:(BOOL)arg0;
- (BOOL)isSupportHWEncoder;
- (void)setIsSupportHWEncoder:(BOOL)arg0;
- (void)setCppEncodeSettings:(struct shared_ptr<nle::media::NLEVideoEncodeSettings> { struct NLEVideoEncodeSettings *x0; struct __shared_weak_count *x1; })arg0;
- (struct shared_ptr<nle::media::NLEVideoEncodeSettings> { struct NLEVideoEncodeSettings *x0; struct __shared_weak_count *x1; })cppEncodeSettings;
- (unsigned long long)compileType;
- (void)setCompileType:(unsigned long long)arg0;
- (double)resizeX;
- (void)setResizeX:(double)arg0;
- (double)resizeY;
- (void)setResizeY:(double)arg0;
- (void)setWatermarkSize:(struct CGSize { double x0; double x1; })arg0;
- (struct CGSize { double x0; double x1; })watermarkSize;
- (id)externalSettingsJsonStr;
- (void)setExternalSettingsJsonStr:(id)arg0;
- (long long)bitrateMode;
- (void)setBitrateMode:(long long)arg0;
- (long long)bps;
- (void)setBps:(long long)arg0;
- (long long)swCRF;
- (void)setSwCRF:(long long)arg0;
- (long long)swQP;
- (void)setSwQP:(long long)arg0;
- (double)swQPOffset;
- (void)setSwQPOffset:(double)arg0;
- (long long)gopSize;
- (void)setGopSize:(long long)arg0;
- (long long)swPreset;
- (void)setSwPreset:(long long)arg0;
- (long long)encodeStandard;
- (void)setEncodeStandard:(long long)arg0;
- (long long)encodeProfile;
- (void)setEncodeProfile:(long long)arg0;
- (long long)swMaxrate;
- (void)setSwMaxrate:(long long)arg0;
- (BOOL)enableByteVCRemuxVideo;
- (void)setEnableByteVCRemuxVideo:(BOOL)arg0;
- (BOOL)enableRemuxVideo;
- (void)setEnableRemuxVideo:(BOOL)arg0;
- (BOOL)enableRemuxVideoForRotation;
- (void)setEnableRemuxVideoForRotation:(BOOL)arg0;
- (BOOL)enableRemuxVideoForShoot;
- (void)setEnableRemuxVideoForShoot:(BOOL)arg0;
- (BOOL)enableRemuxVideoRes;
- (void)setEnableRemuxVideoRes:(BOOL)arg0;
- (BOOL)enableInterLeave;
- (void)setEnableInterLeave:(BOOL)arg0;
- (id)mWatermarkParam;
- (void)setMWatermarkParam:(id)arg0;
- (id)mVideoWatermarkCompileEncodeSetting;
- (void)setMVideoWatermarkCompileEncodeSetting:(id)arg0;
- (id)mVideoCompileEncodeSetting;
- (void)setMVideoCompileEncodeSetting:(id)arg0;
- (id)mAudioCompileEncodeSetting;
- (void)setMAudioCompileEncodeSetting:(id)arg0;
- (BOOL)mOptRemuxWithCopy;
- (void)setMOptRemuxWithCopy:(BOOL)arg0;
- (void)setMDescription:(id)arg0;
- (void)setMComment:(id)arg0;
- (BOOL)mCompileSoftInfo;
- (void)setMCompileSoftInfo:(BOOL)arg0;
- (BOOL)mRecordingMp4;
- (void)setMRecordingMp4:(BOOL)arg0;
- (BOOL)mTransitionKeyframeEnable;
- (void)setMTransitionKeyframeEnable:(BOOL)arg0;
- (BOOL)mReEncodeOpt;
- (void)setMReEncodeOpt:(BOOL)arg0;
- (BOOL)mResolutionAlign;
- (void)setMResolutionAlign:(BOOL)arg0;
- (id)mKeyFramePoints;
- (void)setMKeyFramePoints:(id)arg0;
- (BOOL)mAutoModifyResolution;
- (void)setMAutoModifyResolution:(BOOL)arg0;
- (id)bitrateSettings;
- (void)setBitrateSettings:(id)arg0;
- (BOOL)enableUploadingWhileCompile;
- (void)setEnableUploadingWhileCompile:(BOOL)arg0;
- (BOOL)enableAvInterleave;
- (void)setEnableAvInterleave:(BOOL)arg0;
- (void)setSourceType:(long long)arg0;
- (long long)sourceType;
- (id)init;
- (void)setStartTime:(long long)arg0;
- (void).cxx_destruct;
- (void)setColorSpace:(long long)arg0;
- (struct CGSize { double x0; double x1; })outputSize;
- (long long)startOffset;
- (void)setStartOffset:(long long)arg0;
- (void)setSpeed:(double)arg0;
- (long long)endTime;
- (long long)colorSpace;
- (long long)startTime;
- (void)setResizeMode:(long long)arg0;
- (long long)fps;
- (void)setEndTime:(long long)arg0;
- (id).cxx_construct;
- (long long)resizeMode;
- (double)speed;
- (id)mDescription;
- (void)setFps:(long long)arg0;
- (long long)rotate;
- (void)setRotate:(long long)arg0;
- (void)setOutputSize:(struct CGSize { double x0; double x1; })arg0;
- (BOOL)isAudioOnly;
- (void)setIsAudioOnly:(BOOL)arg0;
- (id)mComment;

@end
