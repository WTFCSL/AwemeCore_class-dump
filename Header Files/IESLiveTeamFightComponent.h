//
//     Generated by private class-dump
//

@class IESLiveTeamFightLogHandler, IESLiveTeamFightResourceManager, NSString, IESLiveTeamFightBuilder, IESLiveTeamFightTrackHandler, IESLiveTeamFightGameModel, IESLiveTeamFightGameInstance, IESLiveTeamFightCancelApplyPanel;
@protocol IESLiveCompoundSubscription, IESLiveRoomService;

@interface IESLiveTeamFightComponent : IESLiveInteractComponentBase <IESLiveTeamFightProvider, IESLiveTeamFightRouter, HTSLiveMessageSubscriber, IESLiveTeamFightGameDelegate, IESLiveAutoRotateAction> {
    BOOL isAnchor;
    BOOL isAudioRoom;
    BOOL isFinishTeamBattleTracked;
    id<IESLiveRoomService> roomModel;
    double teamFightStartTimeInterval;
    long long watchTime;
    IESLiveTeamFightGameModel *teamFightModel;
    IESLiveTeamFightGameInstance *instance;
    long long teamFightStatus;
    IESLiveTeamFightBuilder *_builder;
    id<IESLiveCompoundSubscription> _disposable;
    IESLiveTeamFightLogHandler *_logHandler;
    IESLiveTeamFightResourceManager *_resource;
    IESLiveTeamFightTrackHandler *_trackHandler;
    IESLiveTeamFightCancelApplyPanel *_cancelApplyPanel;
    id /* block */ _didCreateTeamFightAction;
}

@property (retain, nonatomic) IESLiveTeamFightBuilder *builder;
@property (retain, nonatomic) id<IESLiveCompoundSubscription> disposable;
@property (retain, nonatomic) IESLiveTeamFightLogHandler *logHandler;
@property (retain, nonatomic) IESLiveTeamFightResourceManager *resource;
@property (retain, nonatomic) IESLiveTeamFightTrackHandler *trackHandler;
@property (weak, nonatomic) IESLiveTeamFightCancelApplyPanel *cancelApplyPanel;
@property (copy, nonatomic) id /* block */ didCreateTeamFightAction;
@property (nonatomic) long long watchTime;
@property (nonatomic) double teamFightStartTimeInterval;
@property (nonatomic) BOOL isAudioRoom;
@property (nonatomic) BOOL isFinishTeamBattleTracked;
@property (retain, nonatomic) IESLiveTeamFightGameInstance *instance;
@property (retain, nonatomic) IESLiveTeamFightGameModel *teamFightModel;
@property (readonly, nonatomic) long long teamFightStatus;
@property (nonatomic) BOOL isAnchor;
@property (retain, nonatomic) id<IESLiveRoomService> roomModel;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (id)roomModel;
- (void)setIsAnchor:(BOOL)arg0;
- (id)trackHandler;
- (void)setTrackHandler:(id)arg0;
- (void)setDisposable:(id)arg0;
- (id)disposable;
- (id)logHandler;
- (void)setRoomModel:(id)arg0;
- (long long)watchTime;
- (void)setWatchTime:(long long)arg0;
- (void)componentMount;
- (void)componentUnmount;
- (BOOL)isProcessingTeamFight;
- (void)trackWithEvent:(id)arg0 extra:(id)arg1;
- (void)logInfoWithCategory:(long long)arg0 event:(id)arg1 extra:(id)arg2;
- (void)logErrorWithCategory:(long long)arg0 event:(id)arg1 extra:(id)arg2;
- (void)setLogHandler:(id)arg0;
- (long long)sourceScene;
- (void)subscribeEvents;
- (void)registMessage;
- (void)didAutoRotateToOrientation:(long long)arg0 size:(struct CGSize { double x0; double x1; })arg1;
- (void)showInviteJoinTeamFightPanelWithUser:(id)arg0 block:(id /* block */)arg1;
- (void)open1v8TeamFightIfNeededWithRequestPage:(id)arg0 duration:(id)arg1 completion:(id /* block */)arg2;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })upperViewWithScoreBarFrame;
- (id)getTeamFightInfoWithExtraObject:(id)arg0;
- (id)preCheckTeamFightEnable;
- (BOOL)enableTeamFightEntrance:(unsigned long long)arg0;
- (void)showTeamFightStartPanel:(id)arg0;
- (BOOL)isOnTeamFightPrepare;
- (BOOL)isOnTeamFightingOrPunish;
- (void)updateTeamFightInfoWithExtraObject:(id)arg0;
- (id)teamFightTrackExtra;
- (long long)teamSignWithUserID:(id)arg0;
- (id)teamFightMvpCrownIcon;
- (BOOL)isProcessingTeamFightingOrPunish;
- (BOOL)isOnTeamFightPrepareOrTeamfighting;
- (id)teamfightID;
- (BOOL)isTeamFightFlexible;
- (long long)currentTeamFightStatus;
- (int)currentTeamFightLayout;
- (id)teamFightPlayersScoreMap;
- (unsigned long long)interactionPanelOptionItemTypeForUser:(id)arg0 seatIndex:(long long)arg1;
- (void)changeTeamToRed:(BOOL)arg0 forUser:(id)arg1 seatIndex:(long long)arg2;
- (BOOL)isForbiddenWithActionType:(long long)arg0;
- (void)showSceneChangeConfirmDialogWithSceneName:(id)arg0;
- (void)createTeamFightWithOption:(id)arg0 requestPage:(id)arg1 duration:(id)arg2 savedGuest:(id)arg3 completion:(id /* block */)arg4;
- (long long)teamFightWatchTime;
- (void)showTeamFightApplyPanelWithApplyBlock:(id /* block */)arg0;
- (void)showTeamFightCancelApplyPanelWithWaitResponse:(id)arg0 actionBlock:(id /* block */)arg1;
- (void)showStopLinkConfirmDialogWithActionBlock:(id /* block */)arg0;
- (void)showChangeTeamToastWithFromPosition:(long long)arg0 toPosition:(long long)arg1;
- (long long)teamPlayersCountWithCurrGuest;
- (void)didStatusChangeToPrepare;
- (void)didStatusChangeToFinish;
- (long long)guestCount;
- (void)monitorWithName:(id)arg0 extra:(id)arg1 eventType:(unsigned long long)arg2;
- (long long)teamFightSignWithPosition:(int)arg0;
- (id)teamFightModel;
- (void)setTeamFightModel:(id)arg0;
- (long long)teamFightStatus;
- (void)leaveTeamFightAndResetTime;
- (id)currentRequestPage;
- (double)teamFightStartTimeInterval;
- (void)setTeamFightStartTimeInterval:(double)arg0;
- (BOOL)isAudioRoom;
- (void)setIsAudioRoom:(BOOL)arg0;
- (BOOL)isFinishTeamBattleTracked;
- (void)setIsFinishTeamBattleTracked:(BOOL)arg0;
- (BOOL)isHitTeamFightFlexibleAB;
- (void)registerAutoReportAudienceEnterDuration;
- (void)componentEnterRoom;
- (void)componentDidChangedFromLayout:(id)arg0 toLayout:(id)arg1;
- (void)componentBindContext;
- (void)trackPlaymodeEndWithPlaymodeName:(id)arg0;
- (void)componentLeaveRoom;
- (void)componentWillChangedFromLayout:(id)arg0 toLayout:(id)arg1;
- (void)didStatusChangeToTeamFighting;
- (BOOL)isAdminPrivilege;
- (void)teamFightGame:(id)arg0 statusDidChange:(long long)arg1 preStatus:(long long)arg2;
- (void)teamFightGame:(id)arg0 receviedTeamFightMessage:(id)arg1;
- (BOOL)teamFightGame:(id)arg0 shouldHandleTeamFightMessage:(id)arg1;
- (void)teamFightGame:(id)arg0 willUpdateTeamFightInfo:(id)arg1 type:(long long)arg2;
- (void)teamFightGame:(id)arg0 didUpdateTeamFightInfo:(id)arg1 type:(long long)arg2;
- (void)teamFightGameDidTeamFightTimeOut:(id)arg0;
- (void)teamFightGameDidPunishTimeEnd:(id)arg0;
- (void)teamFightGameDidPunishTimeOut:(id)arg0;
- (void)teamFightGameDidEnterTeamFightLayout:(id)arg0;
- (void)teamFightGameDidLeaveTeamFightLayout:(id)arg0;
- (void)trackGrouppkEndIfNeed;
- (void)didStatusChangeFromTeamFighting;
- (void)leaveSupportTeamFightLayoutIfNeeded;
- (id /* block */)didCreateTeamFightAction;
- (void)setDidCreateTeamFightAction:(id /* block */)arg0;
- (void)showFlexibleTeamFightOpenPanelWithRequestPage:(id)arg0;
- (void)showFlexibleTeamFightSettingPanelWithRequestPage:(id)arg0;
- (id)cancelApplyPanel;
- (void)setCancelApplyPanel:(id)arg0;
- (long long)userType;
- (void).cxx_destruct;
- (id)builder;
- (BOOL)isAnchor;
- (id)instance;
- (void)keyboardWillHide;
- (void)keyboardWillShow;
- (void)setInstance:(id)arg0;
- (void)setResource:(id)arg0;
- (id)resource;
- (void)messageReceived:(id)arg0;
- (BOOL)isAdmin;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })contentViewFrame;
- (void)setBuilder:(id)arg0;

@end
