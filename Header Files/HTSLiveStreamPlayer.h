//
//     Generated by private class-dump
//

@class NSURL, IESLiveStreamPlayerModel, IESLiveGCDTimer, NSDate, NSDictionary, IESLiveNewPlayerFactory, IESLiveRoomStrategyController, HTSLiveStreamUrl_LiveCoreSDKData_PullData_Options_Quality, NSMutableDictionary, CTCallCenter, UIView, IESLiveBackgroundView, NSString, IESLiveSmoothSwitchResolutionController, HTSEventContext, NSMutableSet, NSArray, NSNumber, IESLiveStreamPlayerLayoutMachine;
@protocol HTSLiveStreamPlayerDelegate, IESLiveMonitor, IESLiveRoomService, IESLiveSettings, HTSLiveNetworkStatusActions, IESLivePlayerProtocol, HTSLiveStreamPictureExtensionProvider, IESLivePlayerSettings, IESLiveWifiToCellularManagerInterface, IESLiveStreamDecorationViewManagerProtocol;

@interface HTSLiveStreamPlayer : NSObject <HTSLiveStreamPlayerDeprecatedAPIProvider, HTSLiveStreamPlayerEffectService, HTSLiveStreamPlayerResolutionService, IESLivePlayerControllerDelegate, IESLiveStreamPlayerLayoutMachineDelegate, IESLiveSplitScreenAction, HTSLiveStreamPictureExtensionDelegate, IESLiveComponentLifeCycleNotifier, IESLiveWifiToCellularServiceAction, HTSLiveStreamPlayerProvider, IESLiveRoomStreamPlayerService, IESLiveStreamUnifyLayoutPlayer> {
    BOOL _enableVideoRenderInAudioRoom;
    BOOL _disableMuteOperation;
    BOOL _enableReplacePauseToStopInRtm;
    BOOL isGameViceViewExist;
    BOOL _firstFrameAppear;
    BOOL _isViceHidden;
    BOOL _renderError;
    BOOL _fixedScaleType;
    BOOL _shouldRunBlackFrameCheck;
    BOOL _shouldHasViceView;
    BOOL _isPauseCalled;
    BOOL _isPlayCalled;
    BOOL _supportsTimeShift;
    BOOL _didRecordProcess;
    BOOL _frozenWatchTime;
    BOOL _supportSpecifyRatio;
    BOOL _isPreloading;
    BOOL _tracked;
    BOOL _needToShowLoading;
    BOOL _frameLocked;
    BOOL _reuse;
    BOOL _playerLockedInWindow;
    BOOL _latestCameraFirst;
    BOOL _isInitForReuse;
    BOOL _isEnableExternalAETargetLufs;
    BOOL _needCheckLatestTime;
    float _sourceLuft;
    float _sourcePeak;
    float _targetLufs;
    NSNumber *_doubleInterationDistance;
    id<IESLivePlayerProtocol> _player;
    id<IESLiveRoomService> _roomModel;
    UIView *_view;
    double _viceViewRightOffSet;
    IESLiveBackgroundView *_landscapeViceBgView;
    double _viceViewAspectRatio;
    long long _cameraVerticalType;
    NSURL *_streamURL;
    NSString *_sdkParams;
    NSString *_streamData;
    NSString *_updateRoomModelReason;
    long long _ntpDiffTime;
    NSDictionary *_trackParams;
    id /* block */ _currentRoomSupportFrameAbnormCheckBlock;
    IESLiveNewPlayerFactory *_playerFactory;
    IESLiveStreamPlayerModel *_streamPlayerModel;
    id<HTSLiveStreamPictureExtensionProvider> _streamPictureExtensionProvider;
    id<IESLiveStreamDecorationViewManagerProtocol> _streamDecorationViewProvider;
    NSString *_enterRoomTypeString;
    NSDictionary *_metaInfoReceived;
    NSString *_gameLiveDatats;
    long long _viceLayoutType;
    NSDictionary *_cacheMetaInfoReceived;
    NSMutableSet *_observerSet;
    CTCallCenter *_callCenter;
    unsigned long long _loadState;
    unsigned long long _playbackState;
    IESLiveStreamPlayerLayoutMachine *_layoutMachine;
    UIView *_windowView;
    UIView *_viceView;
    double _bottomOffset;
    id /* block */ _seekEndComplete;
    IESLiveGCDTimer *_natureTimer;
    NSDate *_startTime;
    NSDate *_blockStartTime;
    long long _delayTime;
    double _maxWatchDuration;
    double _liveStartTime;
    double _currentWatchTime;
    double _latestLiveTime;
    double _serverTime;
    double _timeShift;
    IESLiveGCDTimer *_protectTimer;
    id<HTSLiveStreamPlayerDelegate> _delegate;
    id<HTSLiveNetworkStatusActions> _networkDispatcher;
    id<IESLiveMonitor> _monitor;
    id<IESLivePlayerSettings> _ttPlayerSetting;
    id /* block */ _callEventHandler;
    NSString *_pullStreamTriggerReason;
    IESLiveRoomStrategyController *_strategyController;
    id<IESLiveSettings> _liveSettings;
    id<IESLiveWifiToCellularManagerInterface> _wifiToCellularManager;
    id /* block */ _switchResolutionComplete;
    id /* block */ _smoothlySwitchComplete;
    HTSLiveStreamUrl_LiveCoreSDKData_PullData_Options_Quality *_playerQuality;
    HTSLiveStreamUrl_LiveCoreSDKData_PullData_Options_Quality *_beforePlayerQuality;
    NSArray *_qualitiesArrayForSpeedMonitor;
    NSMutableDictionary *_smoothlySwitchBlocks;
    long long _qualityType;
    NSString *_resolutionKey;
    HTSEventContext *_eventContext;
    id /* block */ _reloadComplete;
    IESLiveSmoothSwitchResolutionController *_smoothSwitchController;
    struct CGSize { double width; double height; } _mediaSize;
    struct CGSize { double width; double height; } _specifyRatio;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _renderViewFrame;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _contentViewFrame;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _gameClip;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _cameraClip;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _customCameraClip;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _specifyRatioFrame;
}

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) BOOL effectConfigured;
@property (nonatomic) BOOL effectEnable;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (copy, nonatomic) id /* block */ frameChangedBlock;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (retain, nonatomic) id<IESLiveRoomService> roomModel;
@property (retain, nonatomic) NSURL *streamURL;
@property (retain, nonatomic) NSString *sdkParams;
@property (retain, nonatomic) NSString *updateRoomModelReason;
@property (retain, nonatomic) IESLiveNewPlayerFactory *playerFactory;
@property (retain, nonatomic) IESLiveStreamPlayerModel *streamPlayerModel;
@property (retain, nonatomic) id<HTSLiveStreamPictureExtensionProvider> streamPictureExtensionProvider;
@property (retain, nonatomic) id<IESLiveStreamDecorationViewManagerProtocol> streamDecorationViewProvider;
@property (copy, nonatomic) NSString *enterRoomTypeString;
@property (copy, nonatomic) NSDictionary *metaInfoReceived;
@property (copy, nonatomic) NSString *gameLiveDatats;
@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } gameClip;
@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } cameraClip;
@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } customCameraClip;
@property (nonatomic) BOOL shouldHasViceView;
@property (nonatomic) long long viceLayoutType;
@property (copy, nonatomic) NSDictionary *cacheMetaInfoReceived;
@property (retain, nonatomic) NSMutableSet *observerSet;
@property (retain, nonatomic) CTCallCenter *callCenter;
@property (nonatomic) unsigned long long loadState;
@property (nonatomic) unsigned long long playbackState;
@property (retain, nonatomic) id<IESLivePlayerProtocol> player;
@property (retain, nonatomic) IESLiveStreamPlayerLayoutMachine *layoutMachine;
@property (retain, nonatomic) IESLiveBackgroundView *landscapeViceBgView;
@property (retain, nonatomic) UIView *view;
@property (retain, nonatomic) UIView *windowView;
@property (retain, nonatomic) UIView *viceView;
@property (nonatomic) double bottomOffset;
@property (copy, nonatomic) id /* block */ seekEndComplete;
@property (nonatomic) BOOL isPauseCalled;
@property (nonatomic) BOOL isPlayCalled;
@property (retain, nonatomic) IESLiveGCDTimer *natureTimer;
@property (nonatomic) BOOL supportsTimeShift;
@property (nonatomic) BOOL didRecordProcess;
@property (retain, nonatomic) NSDate *startTime;
@property (retain, nonatomic) NSDate *blockStartTime;
@property (nonatomic) long long delayTime;
@property (nonatomic) BOOL frozenWatchTime;
@property (nonatomic) double maxWatchDuration;
@property (nonatomic) BOOL supportSpecifyRatio;
@property (nonatomic) struct CGSize { double width; double height; } specifyRatio;
@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } specifyRatioFrame;
@property (nonatomic) double liveStartTime;
@property (nonatomic) double currentWatchTime;
@property (nonatomic) double latestLiveTime;
@property (nonatomic) double serverTime;
@property (nonatomic) double timeShift;
@property (nonatomic) BOOL renderError;
@property (nonatomic) BOOL isPreloading;
@property (nonatomic) BOOL tracked;
@property (nonatomic) BOOL firstFrameAppear;
@property (nonatomic) BOOL needToShowLoading;
@property (nonatomic) BOOL frameLocked;
@property (nonatomic, getter=isReuse) BOOL reuse;
@property (nonatomic) BOOL playerLockedInWindow;
@property (retain, nonatomic) IESLiveGCDTimer *protectTimer;
@property (retain, nonatomic) NSDictionary *trackParams;
@property (weak, nonatomic) id<HTSLiveStreamPlayerDelegate> delegate;
@property (retain, nonatomic) id<HTSLiveNetworkStatusActions> networkDispatcher;
@property (retain, nonatomic) id<IESLiveMonitor> monitor;
@property (retain, nonatomic) id<IESLivePlayerSettings> ttPlayerSetting;
@property (copy, nonatomic) id /* block */ callEventHandler;
@property (nonatomic) BOOL latestCameraFirst;
@property (nonatomic) BOOL isInitForReuse;
@property (copy, nonatomic) NSString *pullStreamTriggerReason;
@property (retain, nonatomic) IESLiveRoomStrategyController *strategyController;
@property (retain, nonatomic) id<IESLiveSettings> liveSettings;
@property (retain, nonatomic) id<IESLiveWifiToCellularManagerInterface> wifiToCellularManager;
@property (nonatomic) float sourceLuft;
@property (nonatomic) float sourcePeak;
@property (nonatomic) float targetLufs;
@property (nonatomic) BOOL isEnableExternalAETargetLufs;
@property (copy, nonatomic) id /* block */ switchResolutionComplete;
@property (copy, nonatomic) id /* block */ smoothlySwitchComplete;
@property (retain, nonatomic) HTSLiveStreamUrl_LiveCoreSDKData_PullData_Options_Quality *playerQuality;
@property (retain, nonatomic) HTSLiveStreamUrl_LiveCoreSDKData_PullData_Options_Quality *beforePlayerQuality;
@property (copy, nonatomic) NSArray *qualitiesArrayForSpeedMonitor;
@property (retain, nonatomic) NSMutableDictionary *smoothlySwitchBlocks;
@property (nonatomic) long long qualityType;
@property (retain, nonatomic) NSString *resolutionKey;
@property (readonly, nonatomic) HTSEventContext *eventContext;
@property (copy, nonatomic) NSString *streamData;
@property (copy, nonatomic) id /* block */ reloadComplete;
@property (nonatomic) BOOL needCheckLatestTime;
@property (retain, nonatomic) IESLiveSmoothSwitchResolutionController *smoothSwitchController;
@property (readonly, nonatomic) long long roomScene;
@property (readonly, nonatomic) BOOL isVerticalStream;
@property (nonatomic) struct CGSize { double width; double height; } mediaSize;
@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } renderViewFrame;
@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } contentViewFrame;
@property (nonatomic) double viceViewRightOffSet;
@property (nonatomic) double viceViewAspectRatio;
@property (nonatomic) long long cameraVerticalType;
@property (nonatomic) BOOL isViceHidden;
@property (nonatomic) BOOL fixedScaleType;
@property (nonatomic) long long ntpDiffTime;
@property (copy, nonatomic) id /* block */ currentRoomSupportFrameAbnormCheckBlock;
@property (nonatomic) BOOL shouldRunBlackFrameCheck;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) unsigned long long alignMode;
@property (nonatomic) long long scaleType;
@property (readonly, nonatomic) NSDictionary *debugInfo;
@property (retain, nonatomic) NSNumber *doubleInterationDistance;
@property (readonly, nonatomic) NSNumber *multiLinkerDistance;
@property (readonly, copy, nonatomic) NSArray *multiLinkerGridRatioFrames;
@property (nonatomic) BOOL isNeedUpdateMultiLinkerLayoutParam;
@property (nonatomic) BOOL enableVideoRenderInAudioRoom;
@property (readonly, nonatomic) BOOL isInPKMode;
@property (readonly, nonatomic) BOOL isInMultiLinkerMode;
@property (nonatomic) BOOL disableMuteOperation;
@property (readonly, nonatomic) BOOL isGameViceViewExist;
@property (nonatomic) BOOL isSonicShareScreen;
@property (nonatomic) BOOL enableReplacePauseToStopInRtm;

- (void)player:(id)arg0 loadStateDidChange:(unsigned long long)arg1;
- (void)player:(id)arg0 didReceiveError:(id)arg1;
- (void)player:(id)arg0 playbackStateDidChange:(unsigned long long)arg1;
- (void)player:(id)arg0 mediaSizeDidChange:(struct CGSize { double x0; double x1; })arg1;
- (void)player:(id)arg0 didReceiveMetaInfo:(id)arg1 processed:(BOOL)arg2;
- (void)player:(id)arg0 willOpenAudioRenderWithSampleRate:(int)arg1 channels:(int)arg2 duration:(int)arg3;
- (void)player:(id)arg0 willProcessAudioFrameWithRawData:(float **)arg1 samples:(int)arg2 timeStamp:(long long)arg3;
- (void)player:(id)arg0 willOpenAudioProcessInAudioRecord:(int)arg1 channels:(int)arg2 duration:(int)arg3;
- (void)player:(id)arg0 willProcessAudioFrameInAudioRecord:(float **)arg1 samples:(int)arg2 timeStamp:(long long)arg3;
- (void)onRenderVideoFrame:(struct __CVBuffer { } *)arg0 pts:(long long)arg1 width:(long long)arg2 height:(long long)arg3;
- (void)player:(id)arg0 didAutomaticallySwitchFromPreviousResolution:(id)arg1 toCurrentResolution:(id)arg2 userInfo:(id)arg3;
- (void)player:(id)arg0 onSwitchResolution:(id)arg1 error:(id)arg2;
- (void)player:(id)arg0 measureStateTimeInfo:(id)arg1;
- (void)player:(id)arg0 reportURL:(id)arg1 monitorStateInfo:(id)arg2;
- (void)player:(id)arg0 srTypeUpdate:(long long)arg1 hasManualSetSRType:(BOOL)arg2;
- (void)player:(id)arg0 onNetworkQualityChangedBehavior:(long long)arg1 detail:(id)arg2;
- (void)playerFrozen:(id)arg0;
- (void)playerResume:(id)arg0;
- (BOOL)isInAvoidVideoRenderingMode;
- (BOOL)needDisableReplayWhenBecomeActive:(id)arg0;
- (id)bizTransTrackerParams;
- (void)onLoudness:(float)arg0 soucePeak:(float)arg1 targetLufs:(float)arg2 isEnableExternalAETargetLufs:(BOOL)arg3;
- (int)setupWithConfig:(id)arg0;
- (void)setEffectHandle:(id)arg0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })videoAreaFrame;
- (void)destroyVicePlayerView:(id)arg0;
- (void)setEnableReplacePauseToStopInRtm:(BOOL)arg0;
- (id)getComposerNodes;
- (void)removeComposerNodes:(id)arg0 withTag:(id)arg1;
- (void)setComposerNodes:(id)arg0 withTag:(id)arg1;
- (void)appendComposerNodes:(id)arg0 withTag:(id)arg1;
- (void)setRenderCacheStringValue:(id)arg0 withKey:(id)arg1;
- (id)getEffectTrackData:(long long)arg0;
- (void)setEnableVideoProcess:(BOOL)arg0;
- (long long)currentAudioStreamDecibel;
- (BOOL)enableReplacePauseToStopInRtm;
- (id)roomModel;
- (void)player:(id)arg0 onRenderAudioFrame:(id)arg1;
- (void)didSetAttachingDIContext;
- (long long)ntpDiffTime;
- (void)setNtpDiffTime:(long long)arg0;
- (id)trackParams;
- (id)liveRoomModel;
- (void)setTrackParams:(id)arg0;
- (float)sourcePeak;
- (void)setSourcePeak:(float)arg0;
- (float)targetLufs;
- (void)setTargetLufs:(float)arg0;
- (void)setServerTime:(double)arg0;
- (void)setEventContext:(id)arg0;
- (void)startTrack;
- (void)endTrack;
- (void)setIsPreloading:(BOOL)arg0;
- (void)setReuse:(BOOL)arg0;
- (void)updateCurrentTime:(double)arg0;
- (BOOL)isPause;
- (BOOL)renderError;
- (void)setRenderError:(BOOL)arg0;
- (id)sdkParams;
- (void)setSdkParams:(id)arg0;
- (id)previewFps;
- (unsigned long long)alignMode;
- (void)setAlignMode:(unsigned long long)arg0;
- (void)updateServerTime:(long long)arg0;
- (void)setObserverSet:(id)arg0;
- (void)setPlayerFactory:(id)arg0;
- (BOOL)supportsTimeShift;
- (void)setStreamData:(id)arg0;
- (double)liveStartTime;
- (void)setLiveStartTime:(double)arg0;
- (void)setRoomModel:(id)arg0;
- (void)setCurrentWatchTime:(double)arg0;
- (double)currentWatchTime;
- (void)onNetworkStatusChanged:(id)arg0;
- (void)playWithCallTrace:(id)arg0;
- (void)pauseWithCallTrace:(id)arg0;
- (void)stopWithCallTrace:(id)arg0;
- (void)closeWithCallTrace:(id)arg0;
- (void)sendMessage:(long long)arg0 param1:(long long)arg1 param2:(long long)arg2 param3:(id)arg3;
- (void)effectDealloced;
- (BOOL)effectConfigured;
- (BOOL)effectEnable;
- (void)setEffectEnable:(BOOL)arg0;
- (BOOL)supportResolutionSDKKey:(id)arg0;
- (void)switchCurrentItemResolution:(id)arg0 callTrace:(id)arg1;
- (void)startVideoRenderingWithCallTrace:(id)arg0;
- (void)stopVideoRenderingWithCallTrace:(id)arg0;
- (void)startAudioRenderingWithCallTrace:(id)arg0;
- (void)stopAudioRenderingWithCallTrace:(id)arg0;
- (void)setTimeShift:(double)arg0;
- (BOOL)isBufferFull;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })renderViewFrame;
- (void)setRenderViewFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0;
- (BOOL)smoothSwitching;
- (void)setEnableVideoSDR2HDR:(BOOL)arg0 callTrace:(id)arg1;
- (BOOL)isPlayCalled;
- (void)setIsPlayCalled:(BOOL)arg0;
- (id)strategyController;
- (id)initWithPlayer:(id)arg0 roomModel:(id)arg1 delegate:(id)arg2 enterRoomTypeString:(id)arg3 callTrace:(id)arg4 diContext:(id)arg5;
- (void)renderOnView:(id)arg0 callTrace:(id)arg1;
- (void)preloadWithRoomModel:(id)arg0 callTrace:(id)arg1 triggerReason:(id)arg2;
- (void)cancelPreloadWithCallTrace:(id)arg0;
- (void)dereferenceInnerPlayerWithCallTrace:(id)arg0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })gameClip;
- (id)previewViewWithCallTrace:(id)arg0;
- (id)playerViewWithCallTrace:(id)arg0;
- (id)viceViewWithCallTrace:(id)arg0;
- (void)lockFrameWithCallTrace:(id)arg0;
- (void)unlockFrameWithCallTrace:(id)arg0;
- (void)viewWillAppearWithCallTrace:(id)arg0;
- (void)viewWillDisappearWithCallTrace:(id)arg0;
- (void)resetFrameWithCallTrace:(id)arg0;
- (void)togglePlayerOpaque:(BOOL)arg0 callTrace:(id)arg1;
- (void)stopAndClearCurrentMediaWithCallTrace:(id)arg0;
- (void)pauseCurrentMediaWithCallTrace:(id)arg0;
- (void)resumeCurrentMediaWithCallTrace:(id)arg0;
- (void)resumePreviousMediaWithCallTrace:(id)arg0;
- (void)reloadPreviousMediaWithCallTrace:(id)arg0;
- (void)reloadMediaWithURL:(id)arg0 callTrace:(id)arg1 complete:(id /* block */)arg2;
- (void)reloadWithRoomModel:(id)arg0 callTrace:(id)arg1;
- (void)setMuteForce:(BOOL)arg0 callTrace:(id)arg1;
- (void)setMute:(BOOL)arg0 callTrace:(id)arg1;
- (void)detachWindowPlayerWithCallTrace:(id)arg0;
- (void)attachWindow:(id)arg0 callTrace:(id)arg1;
- (void)attachWindow:(id)arg0 callTrace:(id)arg1 channel:(long long)arg2;
- (void)resetAttachViewWithCallTrace:(id)arg0;
- (void)lockInWindowPlayerView:(BOOL)arg0 callTrace:(id)arg1;
- (void)layoutWithType:(unsigned long long)arg0 callTrace:(id)arg1;
- (struct CGPoint { double x0; double x1; })playerOffsetWithPlayerFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0 videoSize:(struct CGSize { double x0; double x1; })arg1 callTrace:(id)arg2;
- (void)setPlayerViewHidden:(BOOL)arg0 callTrace:(id)arg1;
- (void)removePreEnterViewWithLayout:(unsigned long long)arg0 callTrace:(id)arg1;
- (struct __CVBuffer { } *)cropCopyPixelBuffer:(float)arg0 topLeftY:(float)arg1 cropW:(float)arg2 cropH:(float)arg3 callTrace:(id)arg4;
- (void)scalePlayerWithBottomOffset:(double)arg0 callTrace:(id)arg1;
- (void)scalePlayerByRightPanelResetFrame:(BOOL)arg0 callTrace:(id)arg1;
- (void)closeWithCloseRoomType:(unsigned long long)arg0 callTrace:(id)arg1 preferOptions:(id)arg2;
- (BOOL)isVRStream;
- (BOOL)isInWindowPlayerView;
- (BOOL)isViceLayoutTypeGame;
- (BOOL)isCameraHidden;
- (void)logLatency:(double)arg0 vendor:(id)arg1;
- (BOOL)lockedInWindowPlayerView;
- (BOOL)liveEnableRenderVideoOptimize;
- (unsigned long long)streamLayoutType;
- (id)streamLayoutClassName;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })currentPlayerFrame;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })currentPlayerFrameWithLayoutType:(unsigned long long)arg0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })playViewFrameWithLayoutType:(unsigned long long)arg0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })streamFrameInView:(id)arg0;
- (struct __CVBuffer { } *)copyInstantPixelBuffer;
- (double)getCurrentDuration;
- (double)getWatchedDuration;
- (void)seekStreamProgress:(double)arg0 callTrace:(id)arg1 complete:(id /* block */)arg2;
- (void)updateCurrentTime:(double)arg0 callTrace:(id)arg1;
- (id)getSeiMetaInfo;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })vsLandscapePlayerFrame;
- (double)bottomOffsetForPlayerCalculate;
- (double)bottomOffsetForPlayerInTemplateRoom;
- (void)changeCameraTo:(id)arg0 callTrace:(id)arg1;
- (void)changeCameraToID:(id)arg0 callTrace:(id)arg1;
- (void)changeCameraToID:(id)arg0 callTrace:(id)arg1 source:(long long)arg2;
- (void)changeRoomStyleCallTrace:(id)arg0;
- (void)reloadCurrentViceStateWithCallTrace:(id)arg0;
- (void)storageUsedSpecifyRatioFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })getUsedSpecifyRatioFrame;
- (float)getStreamSouceLuft;
- (float)getStreamSourcePeak;
- (float)getStreamTargetLufs;
- (BOOL)getIsStreamEnableExternalAETargetLufs;
- (id)metaInfoReceived;
- (BOOL)needToShowLoading;
- (id)doubleInterationDistance;
- (void)setDoubleInterationDistance:(id)arg0;
- (id)multiLinkerDistance;
- (id)multiLinkerGridRatioFrames;
- (BOOL)isNeedUpdateMultiLinkerLayoutParam;
- (void)setIsNeedUpdateMultiLinkerLayoutParam:(BOOL)arg0;
- (BOOL)enableVideoRenderInAudioRoom;
- (void)setEnableVideoRenderInAudioRoom:(BOOL)arg0;
- (BOOL)isInPKMode;
- (BOOL)isInMultiLinkerMode;
- (BOOL)disableMuteOperation;
- (void)setDisableMuteOperation:(BOOL)arg0;
- (BOOL)shouldHasViceView;
- (BOOL)isGameViceViewExist;
- (BOOL)isSonicShareScreen;
- (double)latestLiveTime;
- (id)resolutionKey;
- (BOOL)isVerticalStream;
- (struct CGSize { double x0; double x1; })specifyRatio;
- (float)sourceLuft;
- (BOOL)isEnableExternalAETargetLufs;
- (long long)cameraVerticalType;
- (id)wifiToCellularManager;
- (id)layoutMachine;
- (id)viceView;
- (id)streamPlayerModel;
- (void)p_presetUsingCellularIfNeeded:(id)arg0;
- (id)playerQuality;
- (void)trackPlayForQuality:(id)arg0 type:(long long)arg1;
- (void)setPlayerQuality:(id)arg0;
- (void)setBeforePlayerQuality:(id)arg0;
- (id)beforePlayerQuality;
- (void)clearViceView;
- (void)p_recordCurrentProcess;
- (void)changeSuperResolutionWithStrategy;
- (void)changeSDR2HDRWithStrategy;
- (void)adjustVolumeEffectTargetLufs;
- (void)choosePlayerSpecifySceneForLOB;
- (void)adjustWholeVolumeEffectParam;
- (void)setSourceLuft:(float)arg0;
- (void)setIsEnableExternalAETargetLufs:(BOOL)arg0;
- (id)smoothSwitchController;
- (void)dealWithRoiBMFSR:(id)arg0;
- (id)gameLiveDatats;
- (void)setGameLiveDatats:(id)arg0;
- (void)setCameraVerticalType:(long long)arg0;
- (BOOL)isNeedROI:(long long)arg0;
- (void)layoutPlayerIfNeededWithCallTrace:(id)arg0;
- (long long)roomScene;
- (void)setViceView:(id)arg0;
- (void)initViceViewForGame;
- (BOOL)isViceHidden;
- (id)landscapeViceBgView;
- (double)viceViewRightOffSet;
- (void)setLandscapeViceBgView:(id)arg0;
- (void)startNatureTimerIfNeed;
- (void)handleTimeNaturalGrowth;
- (id)natureTimer;
- (void)setNatureTimer:(id)arg0;
- (void)setLayoutMachine:(id)arg0;
- (void)initPlayerDropFrameConfigs;
- (void)setSmoothSwitchController:(id)arg0;
- (void)didChangeToCellularTransData:(id)arg0;
- (void)didChangeToDefaultTransData:(id)arg0;
- (void)layoutWithData:(struct { long long x0; long long x1; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x2; BOOL x3; })arg0 layoutType:(unsigned long long)arg1;
- (void)vicePlayerViewCreateWithRenderingArea:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0 maskView:(id)arg1;
- (void)vicePlayerViewSetWith:(id)arg0 maskView:(id)arg1;
- (void)vicePlayerViewSetAlpha:(double)arg0;
- (void)setShouldHasViceView:(BOOL)arg0;
- (void)setIsViceHidden:(BOOL)arg0;
- (void)setViceViewRightOffSet:(double)arg0;
- (void)setStreamPlayerModel:(id)arg0;
- (void)setWifiToCellularManager:(id)arg0;
- (id)liveSettings;
- (void)setLiveSettings:(id)arg0;
- (void)splitScreenBreakPointUpdate;
- (void)setGameClip:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0;
- (void)processVideoAudioEffect;
- (BOOL)isReuse;
- (void)setLatestLiveTime:(double)arg0;
- (id)windowView;
- (void)setWindowView:(id)arg0;
- (id)getOneLevelLowerQualitySDKKey;
- (id)getLowestQualitySDKKey;
- (void)switchQualityWityKey:(id)arg0 callTrace:(id)arg1 complete:(id /* block */)arg2;
- (void)smoothlySwitchResolutionToSDKKey:(id)arg0 switchReason:(long long)arg1 callTrace:(id)arg2 completion:(id /* block */)arg3 switchResultCompletion:(id /* block */)arg4;
- (void)updateResolutionWithRoomModel:(id)arg0 strategyParams:(id)arg1 callTrace:(id)arg2 complete:(id /* block */)arg3;
- (void)smoothSwitchResolution:(id)arg0 completion:(id /* block */)arg1;
- (BOOL)observerSmoothSwitchCompletion:(id /* block */)arg0;
- (id)resolutionController;
- (void)setResolutionKey:(id)arg0;
- (void)orientationTransitionEnd:(long long)arg0;
- (void)setIsInLiveRoom:(BOOL)arg0;
- (void)setStrategyController:(id)arg0;
- (void)bindAttachmentDIContext:(id)arg0;
- (id)enterRoomTypeString;
- (id)initWithRoomModel:(id)arg0 delegate:(id)arg1 enterRoomTypeString:(id)arg2 callTrace:(id)arg3 diContext:(id)arg4;
- (void)setCurrentRoomSupportFrameAbnormCheckBlock:(id /* block */)arg0;
- (void)onComponentInitWithCallTrace:(id)arg0;
- (void)liveComponentDidLoadedWithCallTrace:(id)arg0;
- (void)updatePlayerDropFrameRate:(long long)arg0 callTrace:(id)arg1;
- (void)updatePlayerDropFrameMinFps:(long long)arg0 callTrace:(id)arg1;
- (BOOL)firstFrameAppear;
- (void)replaceWithRoomModel:(id)arg0 enterRoomTypeString:(id)arg1 callTrace:(id)arg2;
- (BOOL)compareStreamData:(id)arg0 callTrace:(id)arg1;
- (void)preparePlayerForSmoothLeaveLiveWithCallTrace:(id)arg0;
- (BOOL)showPlayerViewIfVideoFrameDidRenderWithCallTrace:(id)arg0;
- (id)networkDispatcher;
- (void)startPlayerWithRoomModel:(id)arg0 callTrace:(id)arg1 checkNetworkForEnterWithCertainBlock:(id /* block */)arg2;
- (BOOL)shouldUpdateStreamWithRoom:(id)arg0 callTrace:(id)arg1;
- (id)updateRoomModelReason;
- (BOOL)isViceViewRoomOrientationNeedReload;
- (BOOL)isOrientationNeedReload;
- (void)hideWithCallTrace:(id)arg0;
- (void)setupVideoMode:(struct CGSize { double x0; double x1; })arg0 callTrace:(id)arg1;
- (void)changePlayerContentFrameWithCallTrace:(id)arg0;
- (void)smoothLeaveLiveWithIsFinished:(BOOL)arg0 callTrace:(id)arg1;
- (void)prepareForReuseWithCallTrace:(id)arg0 isSwipe:(BOOL)arg1;
- (void)onStreamFinishByMessage;
- (void)setNetworkDispatcher:(id)arg0;
- (void)logEvent:(id)arg0 callTrace:(id)arg1 params:(id)arg2;
- (void)setSupportsTimeShift:(BOOL)arg0;
- (BOOL)_shouldOptLargeStreamSuperReso;
- (BOOL)_roomSupportFrameAbnormalCheck;
- (void)setShouldRunBlackFrameCheck:(BOOL)arg0;
- (BOOL)shouldRunBlackFrameCheck;
- (void)_runBlackFrameCheck;
- (id /* block */)currentRoomSupportFrameAbnormCheckBlock;
- (BOOL)_runBlackFrameCheck:(char *)arg0 width:(long long)arg1 height:(long long)arg2;
- (void)asyncGetCurrentPlayerViewSnapshotWithBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0 screenScale:(double)arg1 completion:(id /* block */)arg2;
- (BOOL)_runCenterAreaBlackFramePixelCheck:(char *)arg0 centerAreaRatio:(double)arg1 imageWidth:(long long)arg2 imageHeight:(long long)arg3 pixelBlackTh:(double)arg4 pictureBlackRatioTh:(double)arg5;
- (BOOL)_runBlackFrameFourCornerPixelCheck:(char *)arg0 width:(long long)arg1 height:(long long)arg2 pixelBlackTh:(double)arg3 pictureBlackRatioTh:(double)arg4 cornerWidthRatio:(double)arg5 cornerHeightRatio:(double)arg6;
- (BOOL)_runBlackFramePixelCheck:(char *)arg0 fromXIndex:(long long)arg1 fromYIndex:(long long)arg2 width:(long long)arg3 height:(long long)arg4 imageWidth:(long long)arg5 imageHeight:(long long)arg6 pixelBlackTh:(double)arg7 pictureBlackRatioTh:(double)arg8 downSampleStepLength:(long long)arg9;
- (double)_getLuminance:(char *)arg0 pixelIndex:(int)arg1;
- (void)runBlackFrameCheckIfNeeded;
- (void)stopBlackFrameCheckIfNeeded;
- (void)layoutCustomViceViewInGameRoom:(id)arg0 layoutDataData:(struct { long long x0; long long x1; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x2; BOOL x3; })arg1;
- (void)oldLayoutCustomViceViewInGameRoom:(id)arg0 layoutDataData:(struct { long long x0; long long x1; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x2; BOOL x3; })arg1;
- (void)layoutViceViewInGameRoom:(id)arg0;
- (void)setFrameChangedBlock:(id /* block */)arg0;
- (double)viceViewAspectRatio;
- (void)setViceViewAspectRatio:(double)arg0;
- (id /* block */)frameChangedBlock;
- (void)p_layoutWithData:(struct { long long x0; long long x1; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x2; BOOL x3; })arg0 layoutType:(unsigned long long)arg1;
- (id)getPullData;
- (id)smoothlySwitchBlocks;
- (id /* block */)_findAndClearBlockWithTargetSDKKey:(id)arg0;
- (id)getQualityFromResolutionKey:(id)arg0 andPullData:(id)arg1;
- (void)updatePlayerTrackInfo;
- (void)setReloadComplete:(id /* block */)arg0;
- (id /* block */)reloadComplete;
- (void)setNeedCheckLatestTime:(BOOL)arg0;
- (void)stopAndSetTimeShiftToPlay:(double)arg0 isSwitchQuality:(BOOL)arg1;
- (id)getStoredResolutionKeyIfNeed:(id)arg0;
- (void)realUpdateResolutionWithStreamData:(id)arg0 sdkKey:(id)arg1 switchMode:(long long)arg2 complete:(id /* block */)arg3;
- (void)trackSwitchQuality:(id)arg0 type:(id)arg1 switchMode:(long long)arg2 code:(long long)arg3;
- (void)setSwitchResolutionComplete:(id /* block */)arg0;
- (void)setSmoothlySwitchComplete:(id /* block */)arg0;
- (void)updateShouldHasViceView;
- (id)qualitiesArrayForSpeedMonitor;
- (id /* block */)smoothlySwitchComplete;
- (void)setQualitiesArrayForSpeedMonitor:(id)arg0;
- (id)getResolutionFromResolutionKey:(id)arg0 andPullData:(id)arg1;
- (void)_strategyServiceCollectQualityInfos:(id)arg0 withPullData:(id)arg1;
- (long long)_getResolutionLevelFromResolutionKey:(id)arg0 andPullData:(id)arg1;
- (void)notifyDidAutomaticallySwitchFromPreviousResolution:(id)arg0 toCurrentResolution:(id)arg1 userInfo:(id)arg2;
- (void)handleRoiBMFSRMetaInfo:(id)arg0;
- (id)stainedTrackInfoWithRoom:(id)arg0 index:(id)arg1;
- (void)_initStreamDataWithRoom:(id)arg0;
- (void)updateTTPlayerSDKSettings;
- (void)reuseMetaSEIImmediately;
- (id)streamPictureExtensionProvider;
- (id)streamDecorationViewProvider;
- (id)pullStreamTriggerReason;
- (void)stopLastPlayerIfNeededWithCallTrace:(id)arg0;
- (void)endTrackWithDuration:(double)arg0;
- (void)setUpdateRoomModelReason:(id)arg0;
- (void)setSmoothlySwitchBlocks:(id)arg0;
- (void)addEnterRoomFakeView;
- (void)removeEnterRoomFakeView;
- (void)setFixedScaleType:(BOOL)arg0;
- (void)setMetaInfoReceived:(id)arg0;
- (void)setCacheMetaInfoReceived:(id)arg0;
- (void)setPullStreamTriggerReason:(id)arg0;
- (void)setStreamPictureExtensionProvider:(id)arg0;
- (void)setStreamDecorationViewProvider:(id)arg0;
- (void)setViceLayoutType:(long long)arg0;
- (long long)viceLayoutType;
- (BOOL)p_shouldUseNewCameraLogic;
- (void)clearLandscapeViceViewImageView;
- (void)changeGameAndCameraPostionWith:(id)arg0 needChange:(BOOL)arg1;
- (BOOL)p_isExplainRoom;
- (BOOL)latestCameraFirst;
- (void)setLatestCameraFirst:(BOOL)arg0;
- (BOOL)p_isGameRoomCustomCameraEnable;
- (void)setCustomCameraClip:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0;
- (void)updateViceViewRelatedAttributes:(id)arg0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })customCameraClip;
- (BOOL)p_checkIfNeedInitViceView;
- (void)initViceView;
- (void)updateViceViewImageViewHiddenStatus;
- (void)updatePlayerWithRoom:(id)arg0 methodName:(id)arg1 callTrace:(id)arg2;
- (void)replaceWithStreamData:(id)arg0 sdkKey:(id)arg1 enterRoomTypeString:(id)arg2;
- (void)replaceWithStreamURL:(id)arg0 sdkParams:(id)arg1 enterRoomTypeString:(id)arg2;
- (void)setFirstFrameAppear:(BOOL)arg0;
- (void)preloadWithStreamData:(id)arg0 sdkKey:(id)arg1;
- (void)preloadWithStreamURL:(id)arg0 sdkParams:(id)arg1;
- (void)reloadWithStreamData:(id)arg0 sdkKey:(id)arg1 callTrace:(id)arg2;
- (void)reloadURL:(id)arg0 sdkParams:(id)arg1 callTrace:(id)arg2;
- (id)getPullDataStreamID;
- (BOOL)isInitForReuse;
- (void)p_clearRecordWithRoomID:(id)arg0;
- (void)trackEpisodeFinish;
- (void)changeCameraTo:(id)arg0 callTrace:(id)arg1 source:(long long)arg2;
- (void)_cameraDidChangeToAudienceVC;
- (void)_reloadWithStreamInfo:(id)arg0;
- (void)setFrozenWatchTime:(BOOL)arg0;
- (void)setFrameLocked:(BOOL)arg0;
- (BOOL)frameLocked;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })playViewFrameWithLayoutType:(unsigned long long)arg0 mediaSize:(struct CGSize { double x0; double x1; })arg1;
- (id)protectTimer;
- (void)setProtectTimer:(id)arg0;
- (void)setSpecifyRatioFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })specifyRatioFrame;
- (BOOL)isPauseCalled;
- (void)setIsPauseCalled:(BOOL)arg0;
- (void)setNeedToShowLoading:(BOOL)arg0;
- (void)trackTimeCostWithAPIName:(id)arg0 timeDurationSeconds:(double)arg1 stage:(id)arg2 params:(id)arg3;
- (BOOL)needCheckLatestTime;
- (BOOL)frozenWatchTime;
- (void)sendProgressaEventIfNeed;
- (double)maxWatchDuration;
- (void)setMaxWatchDuration:(double)arg0;
- (double)getSmallestTimeShiftSeconds;
- (unsigned long long)indexOfSupportedTSLKey;
- (void)setSeekEndComplete:(id /* block */)arg0;
- (void)prepareReuseForSmoothLeaveWithCallTrace:(id)arg0;
- (id)ttPlayerSetting;
- (id)liveModelWithScene:(unsigned long long)arg0;
- (BOOL)didRecordProcess;
- (void)setDidRecordProcess:(BOOL)arg0;
- (void)setStrategySRTypeIfNeededWithCallTrace:(id)arg0;
- (void)handleFirstPlayByLocalTime;
- (void)changeRoomAndCameraStyle:(id)arg0;
- (id /* block */)seekEndComplete;
- (id /* block */)switchResolutionComplete;
- (void)trackerFirstFrameDuration:(double)arg0;
- (void)trackerPlayerDidStall;
- (void)trackerPlayerResumeStall;
- (void)changeCameraStyleWithCallTrace:(id)arg0;
- (void)updateSuperResolutionSwitchIfNeeded;
- (void)handleViceViewMeta:(id)arg0;
- (double)p_bottomOffsetForPlayerCalculate:(BOOL)arg0;
- (void)changeToCameraCrop;
- (void)setBlockStartTime:(id)arg0;
- (id)blockStartTime;
- (BOOL)playerLockedInWindow;
- (void)setPlayerLockedInWindow:(BOOL)arg0;
- (id)layoutMachineBizTransparentParams;
- (BOOL)isResumePlay;
- (BOOL)fixedScaleType;
- (void)setEnterRoomTypeString:(id)arg0;
- (id)cacheMetaInfoReceived;
- (BOOL)supportSpecifyRatio;
- (void)setSupportSpecifyRatio:(BOOL)arg0;
- (void)setSpecifyRatio:(struct CGSize { double x0; double x1; })arg0;
- (double)timeShift;
- (void)setTtPlayerSetting:(id)arg0;
- (void)setIsInitForReuse:(BOOL)arg0;
- (unsigned long long)playbackState;
- (void)layoutIfNeeded;
- (void)resetTimer;
- (void)setStartTime:(id)arg0;
- (void)setTracked:(BOOL)arg0;
- (double)serverTime;
- (void).cxx_destruct;
- (id)monitor;
- (unsigned long long)loadState;
- (id)observerSet;
- (float)volume;
- (void)commonInit;
- (id)callCenter;
- (void)setMonitor:(id)arg0;
- (void)removeObserver;
- (id)debugInfo;
- (void)setPlayer:(id)arg0;
- (void)setView:(id)arg0;
- (void)setDelayTime:(long long)arg0;
- (long long)delayTime;
- (id)delegate;
- (id)startTime;
- (id)eventContext;
- (BOOL)isRendered;
- (BOOL)isPlaying;
- (void)setVolume:(float)arg0;
- (void)setDelegate:(id)arg0;
- (void)dealloc;
- (void)addObserver;
- (id)view;
- (BOOL)tracked;
- (void)setCallCenter:(id)arg0;
- (void)setPlaybackState:(unsigned long long)arg0;
- (id)player;
- (id /* block */)callEventHandler;
- (void)setCallEventHandler:(id /* block */)arg0;
- (id)streamURL;
- (long long)qualityType;
- (id)streamData;
- (id)resolutionType;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })contentViewFrame;
- (BOOL)isPreloading;
- (struct CGSize { double x0; double x1; })mediaSize;
- (long long)scaleType;
- (void)setScaleType:(long long)arg0;
- (void)releaseEffect;
- (void)setMediaSize:(struct CGSize { double x0; double x1; })arg0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })cameraClip;
- (void)setCameraClip:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0;
- (double)bottomOffset;
- (void)setBottomOffset:(double)arg0;
- (BOOL)isMute;
- (void)setStreamURL:(id)arg0;
- (void)setQualityType:(long long)arg0;
- (BOOL)isFirstPlay;
- (void)setContentViewFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0;
- (void)setLoadState:(unsigned long long)arg0;
- (id)playerFactory;

@end
