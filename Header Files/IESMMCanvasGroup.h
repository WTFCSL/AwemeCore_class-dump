//
//     Generated by private class-dump
//

@class NSString, IESKeyframeTimeAndCountInfo, IESMMCanvasSrcManager, IESEffectVideoAnimatedRenderer, VEColorSpaceInfo, IESMMCanvasConfig, IESMMCanvasBaseFilter, HTSGLPicture;

@interface IESMMCanvasGroup : HTSGLFilterGroup <IESMMCanvasInteractProtocol, IESMMCanvasConfigProtocol, IESMMCanvasSourceProtocol> {
    BOOL _forceDrawCanvas;
    BOOL _isPassThrough;
    IESMMCanvasBaseFilter *_canvaseFilter;
    IESMMCanvasSrcManager *_srcManager;
    IESMMCanvasConfig *_config;
    HTSGLPicture *_canvasPicFilter;
    IESKeyframeTimeAndCountInfo *_keyFrameTimeAndCountInfo;
    id /* block */ _observable;
    IESEffectVideoAnimatedRenderer *_renderer;
    VEColorSpaceInfo *_colorSpaceInfo;
    struct CGSize { double width; double height; } _canvasSize;
}

@property (retain, nonatomic) IESMMCanvasBaseFilter *canvaseFilter;
@property (retain, nonatomic) IESMMCanvasSrcManager *srcManager;
@property (retain, nonatomic) IESMMCanvasConfig *config;
@property (retain, nonatomic) HTSGLPicture *canvasPicFilter;
@property (nonatomic) struct CGSize { double width; double height; } canvasSize;
@property (retain, nonatomic) IESKeyframeTimeAndCountInfo *keyFrameTimeAndCountInfo;
@property (copy, nonatomic) id /* block */ observable;
@property (retain, nonatomic) IESEffectVideoAnimatedRenderer *renderer;
@property (copy, nonatomic) VEColorSpaceInfo *colorSpaceInfo;
@property (nonatomic) BOOL isPassThrough;
@property (nonatomic) BOOL forceDrawCanvas;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (void)setVideoTrackId:(long long)arg0;
- (id)colorSpaceInfo;
- (id)canvasKey;
- (void)setColorSpaceInfo:(id)arg0;
- (void)setIsPassThrough:(BOOL)arg0;
- (BOOL)isPassThrough;
- (void)updateIsPassThrough:(BOOL)arg0;
- (void)setForceDrawCanvas:(BOOL)arg0;
- (BOOL)isCanvasGroupNeedGetKeyFrame:(unsigned long long)arg0;
- (id)getKeyFrameInfo:(unsigned long long)arg0;
- (void)registerCanvasSourceBlock:(id /* block */)arg0;
- (void)activeVideoAnimation:(id)arg0;
- (void)updateKeyFrameInfo;
- (id)initWithConfig:(id)arg0 observable:(id /* block */)arg1 canvasSize:(struct CGSize { double x0; double x1; })arg2 renderer:(id)arg3 colorSpaceInfo:(id)arg4 context:(id)arg5;
- (id)keyFrameTimeAndCountInfo;
- (void)setKeyFrameTimeAndCountInfo:(id)arg0;
- (void)updateColorSpaceInfo:(id)arg0;
- (void)setSrcManager:(id)arg0;
- (void)setupFilterWithConfig:(id)arg0;
- (id)canvaseFilter;
- (id)makeFiltersWith:(id)arg0;
- (id)srcManager;
- (void)setCanvaseFilter:(id)arg0;
- (void)setCanvasAnimatedRenderer:(id)arg0;
- (void)setCanvasPicFilter:(id)arg0;
- (id)canvasPicFilter;
- (void)transformSource:(long long)arg0 toPoint:(struct CGPoint { double x0; double x1; })arg1;
- (void)transformSource:(long long)arg0 toRotation:(double)arg1;
- (void)transformSource:(long long)arg0 toScale:(double)arg1;
- (BOOL)changeCanvasConfig:(id)arg0 canvasSize:(struct CGSize { double x0; double x1; })arg1;
- (void)insertSourceToIndex:(long long)arg0;
- (void)removeSourceWithIndex:(long long)arg0;
- (BOOL)forceDrawCanvas;
- (id /* block */)observable;
- (void)setConfig:(id)arg0;
- (void).cxx_destruct;
- (void)setRenderer:(id)arg0;
- (id)config;
- (void)setCanvasSize:(struct CGSize { double x0; double x1; })arg0;
- (void)dealloc;
- (struct CGSize { double x0; double x1; })canvasSize;
- (void)setObservable:(id /* block */)arg0;
- (id)renderer;

@end
