//
//     Generated by private class-dump
//

@class ACCThreadSafeMutableDictionary, ACCThreadSafeArray;
@protocol ACCAssetImportDataConsumerProtocol;

@interface ACCAssetImportManager : NSObject {
    BOOL _runningLoop;
    BOOL _debugEnable;
    id<ACCAssetImportDataConsumerProtocol> _dataConsumer;
    ACCThreadSafeArray *_tasks;
    ACCThreadSafeArray *_highPriorityTasks;
    ACCThreadSafeArray *_runningTasks;
    ACCThreadSafeArray *_readyTasks;
    ACCThreadSafeArray *_finishedTasks;
    ACCThreadSafeArray *_callbackImmediatelyTasks;
    ACCThreadSafeMutableDictionary *_cachedTasks;
    ACCThreadSafeMutableDictionary *_taskDisposable;
    long long _maxImageConcurrentCount;
}

@property (retain, nonatomic) ACCThreadSafeArray *tasks;
@property (retain, nonatomic) ACCThreadSafeArray *highPriorityTasks;
@property (retain, nonatomic) ACCThreadSafeArray *runningTasks;
@property (retain, nonatomic) ACCThreadSafeArray *readyTasks;
@property (retain, nonatomic) ACCThreadSafeArray *finishedTasks;
@property (retain, nonatomic) ACCThreadSafeArray *callbackImmediatelyTasks;
@property (retain, nonatomic) ACCThreadSafeMutableDictionary *cachedTasks;
@property (retain, nonatomic) ACCThreadSafeMutableDictionary *taskDisposable;
@property (nonatomic) long long maxImageConcurrentCount;
@property BOOL runningLoop;
@property BOOL debugEnable;
@property (weak, nonatomic) id<ACCAssetImportDataConsumerProtocol> dataConsumer;

+ (void)debug_didChangeCacheStatus:(id)arg0;
+ (id)sharedInstance;

- (void)runAsync:(id /* block */)arg0;
- (void)setRunningTasks:(id)arg0;
- (void)queryAllFinishedTaskWithCompletion:(id /* block */)arg0;
- (BOOL)hasFinishedOrExecutingTaskWithID:(id)arg0;
- (void)cancelCached;
- (void)queryCachedTaskWithID:(id)arg0 completion:(id /* block */)arg1;
- (id)getCachedTaskWithID:(id)arg0 ofClass:(Class)arg1;
- (id)callbackImmediatelyTasks;
- (id)cachedTasks;
- (void)tiggerDebugIfNeed;
- (void)cancelTasks:(id)arg0 withAvailableIDs:(id)arg1;
- (id)finishedTasks;
- (id)highPriorityTasks;
- (void)callbackNeedRecallImmediatelyTaskIfNeed;
- (BOOL)runningLoop;
- (void)setRunningLoop:(BOOL)arg0;
- (void)waitNormalLock;
- (void)signalNormalLock;
- (void)observeTask:(id)arg0;
- (void)waitSuperLock;
- (void)signalSuperLock;
- (void)runBarrierAsync:(id /* block */)arg0;
- (void)onTaskComplete:(id)arg0;
- (id)taskDisposable;
- (id)getCachedTaskWithID:(id)arg0;
- (id)normalLock;
- (id)superLock;
- (long long)maxImageConcurrentCount;
- (BOOL)debugEnable;
- (void)cancelWithAvailableIDs:(id)arg0;
- (void)clearFinishedTask;
- (void)queryAllPreparingTaskWithCompletion:(id /* block */)arg0;
- (void)queryAllRunningTaskWithCompletion:(id /* block */)arg0;
- (void)queryAllTaskWithCompletion:(id /* block */)arg0;
- (void)setHighPriorityTasks:(id)arg0;
- (void)setReadyTasks:(id)arg0;
- (void)setFinishedTasks:(id)arg0;
- (void)setCallbackImmediatelyTasks:(id)arg0;
- (void)setCachedTasks:(id)arg0;
- (void)setTaskDisposable:(id)arg0;
- (void)setMaxImageConcurrentCount:(long long)arg0;
- (void)setDebugEnable:(BOOL)arg0;
- (id)dataConsumer;
- (void)run;
- (id)init;
- (void).cxx_destruct;
- (void)addTask:(id)arg0;
- (id)queue;
- (void)setDataConsumer:(id)arg0;
- (id)tasks;
- (void)setTasks:(id)arg0;
- (void)cancelAll;
- (id)nextTask;
- (id)readyTasks;
- (id)runningTasks;
- (void)cancelTasks:(id)arg0;

@end
