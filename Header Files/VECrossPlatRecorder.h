//
//     Generated by private class-dump
//

@class IESMMCaptureBase, IESMMCaptureKit, HTSLayerPreview, IESMMEffectStickerInfo, VEExternalVideoCapture, NSMutableArray, NSString, VEPreviewUnit, UIImage, HTSGLFilterGroup, NSArray, HTSGLContext, NSMutableDictionary, NSObject, UIView, IESMMARCamera, IESMMCameraConfig, IESMMLivePhotoConfig, IESMMTranscoderParam, TTVEPerformanceOC, HTSVideoData, IESTrackInfo, NSURL, IESMMARCameraRendererWrapper, IESMMARConfigurablePropertySet, IESMMCaptureKitConfig;
@protocol OS_dispatch_semaphore, IESMMEffectGroupProtocol, IVEPreviewUnit, VECameraWriterDelegate, OS_dispatch_queue, IESMMCameraWhiteBalanceProtocol;

@interface VECrossPlatRecorder : VERunloopObject <VECameraEffectProtocol, VECameraPixaloopProtocol, IVEAmazingFeatureProtocol, VECameraPrivacyCertProtocol, VECameraTakePictureProtocol, VECameraZoomProtocol, VERecorderTemplateProtocol, VECameraProtocol, VERecorderProtocol> {
    struct shared_ptr<TERecorderVideoCapture> { struct TERecorderVideoCapture *__ptr_; struct __shared_weak_count *__cntrl_; } m_spVideoCapture;
    struct shared_ptr<TERecorderAudioCapture> { struct TERecorderAudioCapture *__ptr_; struct __shared_weak_count *__cntrl_; } m_spAudioCapture;
    struct shared_ptr<TERecorderBusiness> { struct TERecorderBusiness *__ptr_; struct __shared_weak_count *__cntrl_; } m_spRecorderBusiness;
    struct shared_ptr<TEEffectVideoPlayerFactory> { struct TEEffectVideoPlayerFactory *__ptr_; struct __shared_weak_count *__cntrl_; } m_spEffectVideoPlayerFactory;
    struct function<void *()> { struct __value_func<void *()> { struct type { unsigned char __lx[24]; } __buf_; void *__f_; } __f_; } m_createEffectVideoPlayer;
    struct function<void ()> { struct __value_func<void ()> { struct type { unsigned char __lx[24]; } __buf_; void *__f_; } __f_; } m_destroyEffectVideoPlayer;
    struct map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<const std::string, std::string>>> { struct __tree<std::__value_type<std::string, std::string>, std::__map_value_compare<std::string, std::__value_type<std::string, std::string>, std::less<std::string>, true>, std::allocator<std::__value_type<std::string, std::string>>> { void *__begin_node_; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<std::string, std::string>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, std::string>, std::less<std::string>, true>> { unsigned long long __value_; } __pair3_; } __tree_; } _metadata;
    struct tagSTEAudioParameters { unsigned int nSampleRate; int eSampleFormat; unsigned int nChannelCount; unsigned int nBitRate; } m_audioResolution;
    NSObject<OS_dispatch_semaphore> *msgSemaphore_;
    BOOL _needAutoRotationFlag;
    BOOL _isSpecialTreatPresetPhoto;
    BOOL _enableMultiCaptureRatioResolutionAlign;
    BOOL _ignoreNotification;
    BOOL _effectNodeInAudioChainIsOn;
    BOOL _notNeedAutoStartAudioCapture;
    BOOL _torchOn;
    BOOL _enableMonitor;
    BOOL _allowMultipleAssetChangeOrientation;
    BOOL _disableFaceDetectReferCamera;
    BOOL _autoZoomWithAlgorithm;
    BOOL _useEffectRecognize;
    BOOL _enableFaceExposureOptimize;
    BOOL _shouldAutoStartAudioCapture;
    BOOL _enableOnekeyProcess;
    BOOL _enableShakingDetect;
    BOOL _enableMultiRenderCtxt;
    BOOL _enableMultiRenderCtxtOpt;
    BOOL _hasMusicPlayerForClient;
    BOOL _isFirstFrameRender;
    BOOL _enableMultiCamRecorder;
    BOOL _isSkipFrontCamEffectInMultiCam;
    BOOL _isSkipSecondCamEffectInMultiCam;
    BOOL _pureCameraMode;
    BOOL _hasCameraStartFailedRecreated;
    BOOL _enableLensSharpen;
    BOOL _hasBGVideo;
    BOOL _hasMultiVideo;
    BOOL _isFirstRecordImageCaptured;
    BOOL _needProcessAudio;
    BOOL _needResolveAudio;
    BOOL _isHFpsMode;
    BOOL _isPlayerProgressSyncReady;
    BOOL _isAudioPlayerEnd;
    BOOL _shouldReplay;
    BOOL _captureImageProcessed;
    BOOL _isVideoRecorded;
    BOOL _musicNeedRepeat;
    BOOL _forceRecord;
    BOOL _enableMicPCMWrite;
    BOOL _fristAudioFrameWrited;
    BOOL _didSizeChange;
    BOOL _effectCompatibilityMode;
    BOOL _enableSysFaceAE;
    BOOL _enableEffectFaceAE;
    BOOL _needImageDataReplaceRawData;
    BOOL _isDegraded;
    BOOL _useEffectRecordRate;
    BOOL _isBytevc;
    BOOL _isPassThrough;
    BOOL _movieWriterStatus;
    BOOL _allowFrameReordering;
    BOOL _hasAudioTrack;
    BOOL _useAudioEffectSticker;
    BOOL _isLivePhotoMode;
    BOOL _isLivePhotoRunning;
    int _recordType;
    int _pictureNum;
    int _multiVideoSeekCount;
    float _multiVideoSpeed;
    int _maxKeyFrameInterval;
    int _writerMode;
    float _bgMusicVolume;
    float _bgMusicVolumeSetByClient;
    IESMMCameraConfig *_config;
    long long _status;
    long long _outputDirection;
    unsigned long long _outputRotationMode;
    unsigned long long _previewRotationMode;
    id /* block */ _IESCameraActionBlock;
    id /* block */ _VERecorderInfoBlock;
    id /* block */ _firstRenderBlock;
    id /* block */ _multiCamFirstRenderBlock;
    long long _cameraType;
    id /* block */ _onCameraTypeDidChangeBlock;
    long long _preferredCameraType;
    const void *_cameraContext;
    long long _previewModeType;
    id /* block */ _messageHandler;
    long long _captureRatio;
    id /* block */ _IESCameraDurationBlock;
    long long _cameraMode;
    id /* block */ _musicPlayDidEndBlock;
    long long _cameraFlashMode;
    id /* block */ _ISOChangeBlock;
    IESMMARConfigurablePropertySet *_propertySet;
    id /* block */ _effectBitmapRequestBlock;
    id /* block */ _firstEffectRenderBlock;
    id /* block */ _monitorUpdateBlock;
    HTSGLFilterGroup<IESMMEffectGroupProtocol> *_effectFilter;
    unsigned long long _fragmentCount;
    id /* block */ _IESCameraBGMProgressBlock;
    NSString *_mainScenekey;
    IESMMCaptureKitConfig *_cameraConfigure;
    long long _focusMode;
    long long _exposureMode;
    VEPreviewUnit *_smallWindowPreview;
    struct AudioBufferList { unsigned int x0; struct AudioBuffer { unsigned int x0; unsigned int x1; void *x2; } x1[1]; } *_pAudioBufferList;
    struct opaqueCMSampleBuffer { } *_audioSampleBuffer;
    id /* block */ _enigmasCallback;
    IESMMARCamera *_arVideoCamera;
    IESMMARCameraRendererWrapper *_arRendererWrapper;
    IESMMCaptureKit *_normalCamera;
    IESMMCaptureBase *_currentCamera;
    HTSLayerPreview *_layerPreviewView;
    unsigned long long _sessionMode;
    unsigned long long _lastSessionMode;
    HTSGLContext *_mainContext;
    struct opaqueCMSampleBuffer { } *_captureSampleBuf;
    UIView *_previewContainer;
    UIView<IVEPreviewUnit> *_previewUnit;
    long long _multiCamSkipEffectMode;
    UIView *_secondPreviewContainer;
    UIView<IVEPreviewUnit> *_secondPreviewUnit;
    VEExternalVideoCapture *_externalVideoInput;
    HTSVideoData *_videoData;
    IESTrackInfo *_cameraTrackInfo;
    NSMutableArray *_observerArray;
    unsigned long long _lastFrameRotationMode;
    NSString *_generalAudioKey;
    NSString *_generalAudioPath;
    double _generalAudioStartTime;
    unsigned long long _extraAlgorithmRequirements;
    unsigned long long _extraAlgorithmParameters;
    unsigned long long _algorithmResultRequirement;
    unsigned long long _algorithmEffectBachResultRequirement;
    id /* block */ _algorithmResultsCallback;
    NSArray *_faceResultArray;
    id /* block */ _facePointBlock;
    id /* block */ _faceResultBlock;
    id /* block */ _dirtyDetectResultBlock;
    NSMutableDictionary *_algorithmResultsDict;
    id /* block */ _recorderEffectBitmapRequestBlock;
    id /* block */ _musicTimeLineBLock;
    double _timeStamp;
    id /* block */ _motionDetectBlock;
    double _maxAcceleration;
    NSString *_bgVideoKey;
    unsigned long long _multiVideoStartFragment;
    NSString *_multiVideoTrackId;
    NSString *_multiAudioTrackId;
    NSURL *_multiVideoURL;
    UIImage *_firstRecordImage;
    UIImage *_extFirstRecordImage;
    id _audioPlayerObserver;
    double _audioPlayerStartedTime;
    double _audioSyncStart;
    long long _recordStatus;
    double _videoRecordStartTime;
    double _recordRate;
    struct __sFILE { char *x0; int x1; int x2; short x3; short x4; struct __sbuf { char *x0; int x1; } x5; int x6; void *x7; void /* function */ *x8; void /* function */ *x9; void /* function */ *x10; void /* function */ *x11; struct __sbuf { char *x0; int x1; } x12; struct __sFILEX *x13; int x14; unsigned char x15[3]; unsigned char x16[1]; struct __sbuf { char *x0; int x1; } x17; int x18; long long x19; } *_micPCMWriteFile;
    NSObject<OS_dispatch_queue> *_micPCMWriteQueue;
    IESMMEffectStickerInfo *_currentApplyStickerInfo;
    long long _backendMode;
    struct __CVBuffer { } *_imagePbuf;
    id /* block */ _pVideoProcessedBufferCallback;
    id /* block */ _pVideoBufferCallback;
    id /* block */ _pVideoBufferAndInfoCallback;
    id /* block */ _pAudioBufferCallback;
    TTVEPerformanceOC *_vePerformance;
    id /* block */ _veperformancecallback;
    double _effectRecordRate;
    unsigned long long _bitrate;
    unsigned long long _outputRotation;
    IESMMTranscoderParam *_encodeSettings;
    NSString *_profile;
    id<VECameraWriterDelegate> _cameraWriterDelegate;
    long long _audioMode;
    double _startWritingTime;
    unsigned long long _recorderColorSpace;
    id /* block */ _encodeDataCB;
    double _bgmVolume;
    long long _bgmBusinessPlayState;
    NSMutableDictionary *_existAuxiliaryImageTextures;
    NSMutableDictionary *_existAuxiliaryImageTexturesDict;
    NSArray *_auxiliaryTextureKeys;
    id /* block */ _zoomFactorCallcack;
    IESMMLivePhotoConfig *_livePhotoConfig;
    double _livePhotoRecordRate;
    NSString *_livephotoCachePath;
    NSString *_lastCodeContent;
    id /* block */ _scanCodeBlock;
    struct CGSize { double width; double height; } _outputSize;
    struct CGSize { double width; double height; } _effectRenderSize;
    struct CGSize { double width; double height; } _multiCaptureRatioAlignmenResolution;
    struct CGSize { double width; double height; } _captureSize;
    struct CGSize { double width; double height; } _frameSize;
    struct CGSize { double width; double height; } _originSize;
    struct CGSize { double width; double height; } _degradedSize;
    struct { long long value; int timescale; unsigned int flags; long long epoch; } _livePhotoDuration;
    struct CGAffineTransform { double a; double b; double c; double d; double tx; double ty; } _fileTransform;
    struct _opaque_pthread_mutex_t { long long __sig; char __opaque[56]; } _rwLock;
}

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (retain, nonatomic) NSString *mainScenekey;
@property (retain, nonatomic) IESMMCaptureKitConfig *cameraConfigure;
@property (nonatomic) BOOL enableFaceExposureOptimize;
@property (nonatomic) long long focusMode;
@property (nonatomic) long long exposureMode;
@property (nonatomic) BOOL shouldAutoStartAudioCapture;
@property (retain, nonatomic) VEPreviewUnit *smallWindowPreview;
@property (nonatomic) struct AudioBufferList { unsigned int x0; struct AudioBuffer { unsigned int x0; unsigned int x1; void *x2; } x1[1]; } *pAudioBufferList;
@property (nonatomic) struct opaqueCMSampleBuffer { } *audioSampleBuffer;
@property (nonatomic) BOOL enableOnekeyProcess;
@property (nonatomic) BOOL enableShakingDetect;
@property (nonatomic) BOOL enableMultiRenderCtxt;
@property (nonatomic) BOOL enableMultiRenderCtxtOpt;
@property (nonatomic) BOOL hasMusicPlayerForClient;
@property (copy, nonatomic) id /* block */ enigmasCallback;
@property (nonatomic) long long cameraType;
@property (retain, nonatomic) IESMMARCamera *arVideoCamera;
@property (retain, nonatomic) IESMMARCameraRendererWrapper *arRendererWrapper;
@property (retain, nonatomic) IESMMCaptureKit *normalCamera;
@property (weak, nonatomic) IESMMCaptureBase *currentCamera;
@property (retain, nonatomic) HTSLayerPreview *layerPreviewView;
@property (nonatomic) unsigned long long sessionMode;
@property (nonatomic) unsigned long long lastSessionMode;
@property (retain, nonatomic) HTSGLContext *mainContext;
@property (nonatomic) struct opaqueCMSampleBuffer { } *captureSampleBuf;
@property (nonatomic) BOOL isFirstFrameRender;
@property (retain, nonatomic) UIView *previewContainer;
@property (retain, nonatomic) UIView<IVEPreviewUnit> *previewUnit;
@property (nonatomic) BOOL enableMultiCamRecorder;
@property (nonatomic) long long multiCamSkipEffectMode;
@property (nonatomic) BOOL isSkipFrontCamEffectInMultiCam;
@property (nonatomic) BOOL isSkipSecondCamEffectInMultiCam;
@property (retain, nonatomic) UIView *secondPreviewContainer;
@property (retain, nonatomic) UIView<IVEPreviewUnit> *secondPreviewUnit;
@property (retain, nonatomic) VEExternalVideoCapture *externalVideoInput;
@property (retain, nonatomic) HTSVideoData *videoData;
@property (nonatomic) BOOL pureCameraMode;
@property (nonatomic) BOOL hasCameraStartFailedRecreated;
@property (nonatomic) int multiVideoSeekCount;
@property (nonatomic) BOOL enableLensSharpen;
@property (retain, nonatomic) IESTrackInfo *cameraTrackInfo;
@property (retain, nonatomic) NSMutableArray *observerArray;
@property (nonatomic) unsigned long long lastFrameRotationMode;
@property (retain, nonatomic) NSString *generalAudioKey;
@property (retain, nonatomic) NSString *generalAudioPath;
@property (nonatomic) double generalAudioStartTime;
@property (nonatomic) unsigned long long extraAlgorithmRequirements;
@property (nonatomic) unsigned long long extraAlgorithmParameters;
@property (nonatomic) unsigned long long algorithmResultRequirement;
@property (nonatomic) unsigned long long algorithmEffectBachResultRequirement;
@property (copy, nonatomic) id /* block */ algorithmResultsCallback;
@property (retain, nonatomic) NSArray *faceResultArray;
@property (copy, nonatomic) id /* block */ facePointBlock;
@property (copy, nonatomic) id /* block */ faceResultBlock;
@property (copy, nonatomic) id /* block */ dirtyDetectResultBlock;
@property (retain, nonatomic) NSMutableDictionary *algorithmResultsDict;
@property (copy, nonatomic) id /* block */ recorderEffectBitmapRequestBlock;
@property (copy, nonatomic) id /* block */ musicTimeLineBLock;
@property (nonatomic) double timeStamp;
@property (copy, nonatomic) id /* block */ motionDetectBlock;
@property (nonatomic) double maxAcceleration;
@property (nonatomic) BOOL hasBGVideo;
@property (retain, nonatomic) NSString *bgVideoKey;
@property (nonatomic) BOOL hasMultiVideo;
@property (nonatomic) unsigned long long multiVideoStartFragment;
@property (copy, nonatomic) NSString *multiVideoTrackId;
@property (copy, nonatomic) NSString *multiAudioTrackId;
@property (retain, nonatomic) NSURL *multiVideoURL;
@property (nonatomic) float multiVideoSpeed;
@property (retain, nonatomic) UIImage *firstRecordImage;
@property (retain, nonatomic) UIImage *extFirstRecordImage;
@property (nonatomic) BOOL isFirstRecordImageCaptured;
@property (nonatomic) BOOL needProcessAudio;
@property (nonatomic) BOOL needResolveAudio;
@property (nonatomic) BOOL isHFpsMode;
@property (nonatomic) struct CGSize { double width; double height; } frameSize;
@property (retain, nonatomic) id audioPlayerObserver;
@property (nonatomic) double audioPlayerStartedTime;
@property (nonatomic) BOOL isPlayerProgressSyncReady;
@property (nonatomic) double audioSyncStart;
@property (nonatomic) long long recordStatus;
@property (nonatomic) BOOL isAudioPlayerEnd;
@property (nonatomic) BOOL shouldReplay;
@property (nonatomic) BOOL captureImageProcessed;
@property (readonly, nonatomic) BOOL isVideoRecorded;
@property (nonatomic) BOOL musicNeedRepeat;
@property (nonatomic) BOOL forceRecord;
@property (nonatomic) double videoRecordStartTime;
@property (nonatomic) double recordRate;
@property (nonatomic) BOOL enableMicPCMWrite;
@property (nonatomic) BOOL fristAudioFrameWrited;
@property (nonatomic) struct __sFILE { char *x0; int x1; int x2; short x3; short x4; struct __sbuf { char *x0; int x1; } x5; int x6; void *x7; void /* function */ *x8; void /* function */ *x9; void /* function */ *x10; void /* function */ *x11; struct __sbuf { char *x0; int x1; } x12; struct __sFILEX *x13; int x14; unsigned char x15[3]; unsigned char x16[1]; struct __sbuf { char *x0; int x1; } x17; int x18; long long x19; } *micPCMWriteFile;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *micPCMWriteQueue;
@property (nonatomic) BOOL didSizeChange;
@property (nonatomic) BOOL effectCompatibilityMode;
@property (nonatomic) BOOL enableSysFaceAE;
@property (nonatomic) BOOL enableEffectFaceAE;
@property (retain, nonatomic) IESMMEffectStickerInfo *currentApplyStickerInfo;
@property (nonatomic) long long backendMode;
@property (nonatomic) struct __CVBuffer { } *imagePbuf;
@property (nonatomic) BOOL needImageDataReplaceRawData;
@property (nonatomic) struct _opaque_pthread_mutex_t { long long __sig; char __opaque[56]; } rwLock;
@property (copy, nonatomic) id /* block */ pVideoProcessedBufferCallback;
@property (copy, nonatomic) id /* block */ pVideoBufferCallback;
@property (copy, nonatomic) id /* block */ pVideoBufferAndInfoCallback;
@property (copy, nonatomic) id /* block */ pAudioBufferCallback;
@property (retain, nonatomic) TTVEPerformanceOC *vePerformance;
@property (copy, nonatomic) id /* block */ veperformancecallback;
@property (nonatomic) BOOL isDegraded;
@property (nonatomic) struct CGSize { double width; double height; } originSize;
@property (nonatomic) struct CGSize { double width; double height; } degradedSize;
@property (nonatomic) double effectRecordRate;
@property (nonatomic) BOOL useEffectRecordRate;
@property (nonatomic) unsigned long long bitrate;
@property (nonatomic) BOOL isBytevc;
@property (nonatomic) BOOL isPassThrough;
@property (nonatomic) BOOL movieWriterStatus;
@property (nonatomic) unsigned long long outputRotation;
@property (weak, nonatomic) IESMMTranscoderParam *encodeSettings;
@property (nonatomic) NSString *profile;
@property (weak, nonatomic) id<VECameraWriterDelegate> cameraWriterDelegate;
@property (nonatomic) long long audioMode;
@property (nonatomic) double startWritingTime;
@property (nonatomic) unsigned long long recorderColorSpace;
@property (nonatomic) BOOL allowFrameReordering;
@property (nonatomic) int maxKeyFrameInterval;
@property (copy, nonatomic) id /* block */ encodeDataCB;
@property (nonatomic) int writerMode;
@property (nonatomic) BOOL hasAudioTrack;
@property (nonatomic) struct CGAffineTransform { double a; double b; double c; double d; double tx; double ty; } fileTransform;
@property (nonatomic) double bgmVolume;
@property (nonatomic) float bgMusicVolume;
@property (nonatomic) float bgMusicVolumeSetByClient;
@property (nonatomic) long long bgmBusinessPlayState;
@property (nonatomic) BOOL useAudioEffectSticker;
@property (retain, nonatomic) NSMutableDictionary *existAuxiliaryImageTextures;
@property (retain, nonatomic) NSMutableDictionary *existAuxiliaryImageTexturesDict;
@property (retain, nonatomic) NSArray *auxiliaryTextureKeys;
@property (copy, nonatomic) id /* block */ zoomFactorCallcack;
@property (nonatomic) BOOL isLivePhotoMode;
@property (retain, nonatomic) IESMMLivePhotoConfig *livePhotoConfig;
@property (nonatomic) double livePhotoRecordRate;
@property (nonatomic) struct { long long value; int timescale; unsigned int flags; long long epoch; } livePhotoDuration;
@property (copy, nonatomic) NSString *livephotoCachePath;
@property (nonatomic) BOOL isLivePhotoRunning;
@property (copy, nonatomic) NSString *lastCodeContent;
@property (copy, nonatomic) id /* block */ scanCodeBlock;
@property (retain, nonatomic) IESMMCameraConfig *config;
@property (nonatomic) long long status;
@property (nonatomic) const void *cameraContext;
@property (nonatomic) long long preferredCameraType;
@property (copy, nonatomic) id /* block */ onCameraTypeDidChangeBlock;
@property (nonatomic) long long previewModeType;
@property (readonly, nonatomic) UIView *previewView;
@property (nonatomic) unsigned long long outputRotationMode;
@property (nonatomic) unsigned long long previewRotationMode;
@property (nonatomic) BOOL isSpecialTreatPresetPhoto;
@property (readonly, nonatomic) long long captureRatio;
@property (readonly, nonatomic) struct CGSize { double width; double height; } captureSize;
@property (nonatomic) struct CGSize { double width; double height; } outputSize;
@property (nonatomic) struct CGSize { double width; double height; } effectRenderSize;
@property (nonatomic) BOOL enableMultiCaptureRatioResolutionAlign;
@property (nonatomic) struct CGSize { double width; double height; } multiCaptureRatioAlignmenResolution;
@property (copy, nonatomic) id /* block */ firstEffectRenderBlock;
@property (copy, nonatomic) id /* block */ firstRenderBlock;
@property (copy, nonatomic) id /* block */ multiCamFirstRenderBlock;
@property (copy, nonatomic) id /* block */ musicPlayDidEndBlock;
@property (nonatomic) BOOL ignoreNotification;
@property (copy) id /* block */ IESCameraActionBlock;
@property (nonatomic) BOOL enableMonitor;
@property (copy, nonatomic) id /* block */ monitorUpdateBlock;
@property (readonly, nonatomic) NSString *deviceType;
@property (readonly, nonatomic) long long currentCameraPosition;
@property (nonatomic) long long orientation;
@property (nonatomic) BOOL torchOn;
@property (readonly, nonatomic) BOOL captureIsRunning;
@property (readonly, nonatomic) BOOL isCaptureInterruptted;
@property (nonatomic) long long cameraFlashMode;
@property (nonatomic) long long cameraStablizationMode;
@property (nonatomic) long long frontPreferredStabilizationMode;
@property (nonatomic) long long rearPreferredStabilizationMode;
@property (readonly, nonatomic) float ISO;
@property (readonly, nonatomic) float minISO;
@property (readonly, nonatomic) float maxISO;
@property (copy, nonatomic) id /* block */ ISOChangeBlock;
@property (nonatomic) BOOL disableFaceDetectReferCamera;
@property (nonatomic) BOOL autoZoomWithAlgorithm;
@property (readonly, nonatomic) double videoZoomFactorUpscaleThreshold;
@property (readonly, nonatomic) NSArray *virtualDeviceSwitchOverVideoZoomFactors;
@property (readonly, nonatomic) double minAvailableVideoZoomFactor;
@property (readonly, nonatomic) double maxAvailableVideoZoomFactor;
@property (readonly, nonatomic) id<IESMMCameraWhiteBalanceProtocol> wbObj;
@property (nonatomic) int pictureNum;
@property (nonatomic) BOOL useEffectRecognize;
@property (nonatomic) BOOL effectNodeInAudioChainIsOn;
@property (readonly, nonatomic) HTSGLFilterGroup<IESMMEffectGroupProtocol> *effectFilter;
@property (copy, nonatomic) id /* block */ messageHandler;
@property (copy, nonatomic) id /* block */ effectBitmapRequestBlock;
@property (nonatomic) BOOL notNeedAutoStartAudioCapture;
@property (nonatomic) long long cameraMode;
@property (retain, nonatomic) IESMMARConfigurablePropertySet *propertySet;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) int recordType;
@property (nonatomic) BOOL needAutoRotationFlag;
@property (nonatomic) BOOL allowMultipleAssetChangeOrientation;
@property (nonatomic) long long outputDirection;
@property (readonly, nonatomic) unsigned long long fragmentCount;
@property (copy, nonatomic) id /* block */ IESCameraBGMProgressBlock;
@property (copy, nonatomic) id /* block */ IESCameraDurationBlock;
@property (copy) id /* block */ VERecorderInfoBlock;

+ (id)effectVersion;
+ (id)aecModelName;
+ (id)aecModelrequeirements;
+ (float)getCurrentLatency;
+ (void)exportVideoWithVideoData:(id)arg0 shouldNOCopy:(BOOL)arg1 completion:(id /* block */)arg2;
+ (BOOL)isDevicePositionSupportedInCameraType:(long long)arg0 andPosition:(long long)arg1;
+ (void)removeVideoFragmentFileAtUrl:(id)arg0;
+ (id)p_aecModelName;
+ (id)p_aecModelrequeirements;
+ (id)p_getKitConfigFromRecorderConfig:(id)arg0;
+ (BOOL)isMultiCamSupported;

- (void)registerBecomeActiveNotify;
- (void)registerResignActiveNotify;
- (void)registerEnterForegroundNotify;
- (void)registerEnterBackgroundNotify;
- (BOOL)startAudioCapture:(id /* block */)arg0 withPrivacyCert:(id)arg1;
- (BOOL)isAudioCaptureRuning;
- (void)releaseAudioCapture;
- (void)setRecordVolume:(double)arg0;
- (double)recordVolume;
- (void)setMusicVolume:(double)arg0;
- (void)setAccompanyVolume:(double)arg0;
- (double)accompanyVolume;
- (void)setOriginalSingVolume:(double)arg0;
- (double)originalSingVolume;
- (void)setEnableEarBack:(BOOL)arg0;
- (void)echoEnable:(BOOL)arg0;
- (void)seekToAccompanyTime:(double)arg0 accompanyStartWritingTime:(double)arg1 originalSingTime:(double)arg2 originalSingStartWritingTime:(double)arg3;
- (void)accompanySeekToTime:(double)arg0;
- (void)originalSingSeekToTime:(double)arg0;
- (void)seekDuetKaraokeModeToTime:(double)arg0;
- (void)setDuetKaraokeModeMusic:(id)arg0 fromTime:(double)arg1;
- (void)setAccompanyMusicFile:(id)arg0 fromTime:(double)arg1 OriginalSingMusicFile:(id)arg2 startTime:(double)arg3;
- (double)getDuetKaraokeModeCurrentTime;
- (double)getAccompanyCurrentTime;
- (double)getOriginalSingCurrentTime;
- (void)mutedOrignalSing:(BOOL)arg0;
- (void)mutedAccompany:(BOOL)arg0;
- (void)routeChanged;
- (void)pauseCameraCapture;
- (void)resumeCameraCapture;
- (long long)currentCameraPosition;
- (BOOL)cameraSetZoomFactor:(double)arg0;
- (void)switchCameraFormatToDolbyVision:(BOOL)arg0;
- (id)currentDeviceFormats;
- (void)setDeviceFormat:(id)arg0 then:(id /* block */)arg1;
- (double)currentCameraZoomFactor;
- (double)maxCameraZoomFactor;
- (double)maxExposureBias;
- (double)minExposureBias;
- (void)changeExposureBias:(double)arg0;
- (void)setMaxZoomFactor:(double)arg0;
- (long long)frontPreferredStabilizationMode;
- (void)setFrontPreferredStabilizationMode:(long long)arg0;
- (long long)rearPreferredStabilizationMode;
- (void)setRearPreferredStabilizationMode:(long long)arg0;
- (BOOL)setScanParam:(id)arg0;
- (void)setAlgorithmResultRequirement:(unsigned long long)arg0 withCallbackBlock:(id /* block */)arg1;
- (BOOL)effectNodeInAudioChainIsOn;
- (void)setEffectNodeInAudioChainIsOn:(BOOL)arg0;
- (id)effectFilter;
- (id /* block */)effectBitmapRequestBlock;
- (id /* block */)effectBitmapRequestBlock;
- (void)setEffectBitmapRequestBlock:(id /* block */)arg0;
- (void)setEffectBitmapRequestBlock:(id /* block */)arg0;
- (void)setUseMakeupSegmentation:(BOOL)arg0;
- (void)setEffectResouceLoadTimeout:(long long)arg0;
- (void)setMaxStickerMemoryCache:(unsigned long long)arg0;
- (void)setRenderCacheStringByKey:(id)arg0 value:(id)arg1;
- (void *)getEffectHandle;
- (int)setEffectExportDestPath:(id)arg0;
- (void)reset_frame_cost_statistics;
- (struct { double x0; double x1; double x2; double x3; })get_frame_cost_statistics;
- (void)effect_reset_et_data:(unsigned int)arg0;
- (id)effect_get_et_data:(unsigned int)arg0;
- (BOOL)switchColorFilterIntensity:(id)arg0 inFilterPath:(id)arg1 inPosition:(float)arg2 inLeftIntensity:(float)arg3 inRightIntensity:(float)arg4;
- (BOOL)setColorFilterIntensity:(id)arg0 inIntensity:(float)arg1;
- (BOOL)getColorFilterIntensity:(id)arg0 outIntensity:(float *)arg1;
- (void)applyReshape:(id)arg0 withIndensity:(struct IESIndensityParam_t { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; float x10; float x11; float x12; float x13; float x14; float x15; float x16; float x17; float x18; float x19; float x20; float x21; float x22; float x23; float x24; float x25; float x26; float x27; float x28; float x29; float x30; float x31; float x32; })arg1;
- (void)applyEffect:(id)arg0 type:(long long)arg1;
- (void)applyEffectWithInfo:(id)arg0 type:(long long)arg1 completion:(id /* block */)arg2;
- (void)applyEffectKey:(id)arg0 image:(id)arg1;
- (void)applyIndensity:(struct IESIndensityParam_t { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; float x10; float x11; float x12; float x13; float x14; float x15; float x16; float x17; float x18; float x19; float x20; float x21; float x22; float x23; float x24; float x25; float x26; float x27; float x28; float x29; float x30; float x31; float x32; })arg0 type:(long long)arg1;
- (int)enableFilterAutomaticRecommmand:(BOOL)arg0 type:(unsigned long long)arg1;
- (BOOL)updateComposerNode:(id)arg0 key:(id)arg1 value:(double)arg2;
- (BOOL)updateMutipleComposerNodes:(id)arg0 keys:(id)arg1 values:(id)arg2;
- (float)getValueForComposerNode:(id)arg0 key:(id)arg1;
- (id)getCurrentComposerNodes;
- (id)judgeComposerPriority:(id)arg0 oldNodePath:(id)arg1 tag:(id)arg2;
- (id)judgeComposerPriority:(id)arg0 tag:(id)arg1;
- (BOOL)dumpComposerNodes:(id)arg0;
- (BOOL)setMaleMakeupState:(BOOL)arg0;
- (BOOL)setMusicPlayMode:(long long)arg0;
- (void)removeStickerWithKey:(id)arg0;
- (BOOL)handleTouchDown:(struct CGPoint { double x0; double x1; })arg0 withType:(unsigned long long)arg1;
- (BOOL)handleTouchUp:(struct CGPoint { double x0; double x1; })arg0 withType:(unsigned long long)arg1;
- (BOOL)handlePanEventWithTranslation:(struct CGPoint { double x0; double x1; })arg0 location:(struct CGPoint { double x0; double x1; })arg1;
- (BOOL)handleLongPressEventWithLocation:(struct CGPoint { double x0; double x1; })arg0;
- (BOOL)handleScaleEvent:(double)arg0;
- (BOOL)handleDoubleClickEvent:(struct CGPoint { double x0; double x1; })arg0;
- (BOOL)toggleGestureRecognition:(BOOL)arg0 type:(int)arg1;
- (BOOL)toggleGestureRecognition:(BOOL)arg0 type:(int)arg1;
- (void)enableBGM:(BOOL)arg0;
- (void)muteBGM:(BOOL)arg0;
- (void)amazingMuteBGM:(BOOL)arg0;
- (long long)getSLAMStatus;
- (BOOL)isSLAMRunning;
- (BOOL)getSLAMPlaneDetectStatus;
- (void)sendMessageToEffect:(id)arg0;
- (void)bef_effect_clear_event;
- (id)getAuxiliaryTextureKeys;
- (void)setAuxiliaryImage:(id)arg0 withKey:(id)arg1;
- (void)deleteImageTextureForKey:(id)arg0;
- (void)removeAllAuxiliaryImages;
- (BOOL)setHandDetectLowpower:(BOOL)arg0;
- (BOOL)updatFaceDectectIntervalTime:(int)arg0;
- (void)setAlgorithmRuntimeParam:(id)arg0;
- (BOOL)setMattingDetectModel:(BOOL)arg0;
- (void)setPreferredAlgorithmSize:(struct CGSize { double x0; double x1; })arg0;
- (void)setAlgorithmRequirement:(unsigned long long)arg0 algorithmParam:(unsigned long long)arg1 enableDetect:(BOOL)arg2;
- (void)setAlgorithmResultsRequirement:(unsigned long long)arg0 callback:(id /* block */)arg1;
- (void)forceDetectBuffer:(long long)arg0;
- (void)addBachAlgorithmName:(id)arg0 config:(id)arg1 algoType:(unsigned long long)arg2;
- (void)removeAllBachAlgorithm;
- (id)getBachAlgorithmResultWithAlgoType:(unsigned long long)arg0;
- (Class)resultClassWithAlgoType:(unsigned long long)arg0;
- (void)applyMusicNodes:(id)arg0;
- (void)setEffectCacheDirectory:(id)arg0;
- (id)getEffectCapturedImageWithKey:(id)arg0;
- (void)releaseCaptureImage:(id)arg0;
- (long long)effectTextLimit;
- (void)setEffectText:(id)arg0 arg1:(int)arg1 arg2:(int)arg2 arg3:(const char *)arg3;
- (void)setInputKeyboardHide:(BOOL)arg0;
- (id)getEffectTextArray;
- (BOOL)handleBeginManipulate3DObject;
- (BOOL)handleManipulate3DObject;
- (BOOL)handleEndManipulate3DObject;
- (BOOL)handleFinishManipulate3DObject;
- (BOOL)save3DObjectMeshToFile:(id)arg0;
- (BOOL)detectPhotoContent:(id)arg0 withAlgorithm:(id)arg1;
- (long long)detectPhoto:(id)arg0 withAlgorithm:(id)arg1;
- (void)renderPic:(id)arg0 withKey:(id)arg1;
- (void)renderPicImage:(id)arg0 withKey:(id)arg1;
- (id /* block */)facePointBlock;
- (void)setAlgorithmResultRequirement:(unsigned long long)arg0;
- (void)setFacePointBlock:(id /* block */)arg0;
- (void)resetFacePointBlock:(id /* block */)arg0;
- (void)updateAlgorithmResultAccordMsg:(unsigned long long)arg0;
- (unsigned long long)algorithmResultRequirement;
- (void)removeComposerNodes:(void *)arg0;
- (void)setPlayTimeCallback:(id /* block */)arg0;
- (BOOL)useAudioEffectSticker;
- (BOOL)needProcessAudio;
- (BOOL)needResolveAudio;
- (void)setUseAudioEffectSticker:(BOOL)arg0;
- (void)setAlgorithmExtraParam:(id)arg0;
- (void)resetFaceResultBlock:(id /* block */)arg0;
- (id)videoData;
- (void)setVideoData:(id)arg0;
- (void)setAlgorithmRequirement:(unsigned long long)arg0 enableDetect:(BOOL)arg1;
- (void)switchCameraSource;
- (void)captureSourcePhotoAsImageByUser:(BOOL)arg0 completionHandler:(id /* block */)arg1;
- (BOOL)cameraRampToZoomFactor:(double)arg0 withRate:(double)arg1;
- (void)pauseBGM:(unsigned long long)arg0;
- (void)stopVideoCaptureWithPrivacyCert:(id)arg0;
- (void)setAutoZoomWithAlgorithm:(BOOL)arg0;
- (void)setCameraInfoBlock:(id /* block */)arg0 withCameraInfoRequirement:(unsigned long long)arg1;
- (void)setIESCameraActionBlock:(id /* block */)arg0;
- (void)startVideoCaptureWithPrivacyCert:(id)arg0;
- (void)startBGM:(unsigned long long)arg0;
- (const void *)cameraContext;
- (void)setCameraContext:(const void *)arg0;
- (long long)preferredCameraType;
- (void)setPreferredCameraType:(long long)arg0;
- (id /* block */)onCameraTypeDidChangeBlock;
- (void)setOnCameraTypeDidChangeBlock:(id /* block */)arg0;
- (unsigned long long)outputRotationMode;
- (void)setOutputRotationMode:(unsigned long long)arg0;
- (unsigned long long)previewRotationMode;
- (void)setPreviewRotationMode:(unsigned long long)arg0;
- (BOOL)isSpecialTreatPresetPhoto;
- (void)setIsSpecialTreatPresetPhoto:(BOOL)arg0;
- (long long)captureRatio;
- (struct CGSize { double x0; double x1; })captureSize;
- (struct CGSize { double x0; double x1; })effectRenderSize;
- (void)setEffectRenderSize:(struct CGSize { double x0; double x1; })arg0;
- (BOOL)enableMultiCaptureRatioResolutionAlign;
- (void)setEnableMultiCaptureRatioResolutionAlign:(BOOL)arg0;
- (struct CGSize { double x0; double x1; })multiCaptureRatioAlignmenResolution;
- (void)setMultiCaptureRatioAlignmenResolution:(struct CGSize { double x0; double x1; })arg0;
- (id /* block */)firstEffectRenderBlock;
- (void)setFirstEffectRenderBlock:(id /* block */)arg0;
- (id /* block */)firstRenderBlock;
- (void)setFirstRenderBlock:(id /* block */)arg0;
- (id /* block */)multiCamFirstRenderBlock;
- (void)setMultiCamFirstRenderBlock:(id /* block */)arg0;
- (id /* block */)musicPlayDidEndBlock;
- (void)setMusicPlayDidEndBlock:(id /* block */)arg0;
- (BOOL)ignoreNotification;
- (void)setIgnoreNotification:(BOOL)arg0;
- (id /* block */)IESCameraActionBlock;
- (BOOL)enableMonitor;
- (void)setEnableMonitor:(BOOL)arg0;
- (id /* block */)monitorUpdateBlock;
- (void)setMonitorUpdateBlock:(id /* block */)arg0;
- (BOOL)captureIsRunning;
- (BOOL)isCaptureInterruptted;
- (BOOL)isSupportFlashMode:(long long)arg0;
- (long long)cameraStablizationMode;
- (void)setCameraStablizationMode:(long long)arg0;
- (id /* block */)ISOChangeBlock;
- (void)setISOChangeBlock:(id /* block */)arg0;
- (BOOL)disableFaceDetectReferCamera;
- (void)setDisableFaceDetectReferCamera:(BOOL)arg0;
- (BOOL)autoZoomWithAlgorithm;
- (id)wbObj;
- (int)pictureNum;
- (void)setPictureNum:(int)arg0;
- (BOOL)useEffectRecognize;
- (void)setUseEffectRecognize:(BOOL)arg0;
- (BOOL)notNeedAutoStartAudioCapture;
- (void)setNotNeedAutoStartAudioCapture:(BOOL)arg0;
- (id)getRealTimeCaptureFrameRate;
- (id)initWithView:(id)arg0 config:(id)arg1 cameraComplete:(id /* block */)arg2;
- (void)switchCameraWithView:(id)arg0 config:(id)arg1 cameraComplete:(id /* block */)arg2;
- (void)initAudioCapture:(id /* block */)arg0;
- (void)initAudioCaptureAndSetupAudioSession:(id /* block */)arg0;
- (BOOL)startAudioCapture:(id /* block */)arg0;
- (BOOL)startAudioCaptureSync;
- (void)startVideoCaptureWithCompletionHandler:(id /* block */)arg0;
- (BOOL)startVideoCaptureWithAppStatusCheck;
- (void)stopVideoCaptureWithCompletionHandler:(id /* block */)arg0;
- (void)switchCameraFormatToPhotoCapture:(BOOL)arg0;
- (void)resetDropFrameCount:(int)arg0;
- (void)setPureCameraMode:(BOOL)arg0;
- (void)switchCameraModeWithEffectOrNot:(BOOL)arg0;
- (BOOL)setUseEffectAudioRecognize:(BOOL)arg0;
- (struct AudioStreamBasicDescription { double x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; })getAudioCaptureFormat;
- (void)runDirtyCameraDetectAlgorithmWithCompletion:(id /* block */)arg0;
- (void)resetDirtyCameraDetectCount:(int)arg0 back:(int)arg1;
- (void)getFaceResult:(id /* block */)arg0;
- (void)turnLensSharpen:(BOOL)arg0;
- (struct __CVBuffer { } *)processByLensSharpenWith:(struct __CVBuffer { } *)arg0;
- (void)turnLensCombinedEnhanceAlgorithm:(BOOL)arg0;
- (void)switchCameraSource:(id /* block */)arg0;
- (void)resetPreferredResolution:(struct CGSize { double x0; double x1; })arg0;
- (void)resetPreferredFrameRate:(unsigned long long)arg0;
- (void)resetPreferredFrameRateWithMinimum:(unsigned long long)arg0 maxmum:(unsigned long long)arg1;
- (void)tapFocusAtPoint:(struct CGPoint { double x0; double x1; })arg0;
- (void)resetFocusMode:(long long)arg0;
- (void)resetFocusMode:(long long)arg0 point:(struct CGPoint { double x0; double x1; })arg1;
- (void)resetFocusModeWithTransform:(long long)arg0 point:(struct CGPoint { double x0; double x1; })arg1;
- (struct CGPoint { double x0; double x1; })exposurePoint;
- (void)tapExposureAtPoint:(struct CGPoint { double x0; double x1; })arg0;
- (void)resetExposureMode:(long long)arg0;
- (void)resetExposureMode:(long long)arg0 point:(struct CGPoint { double x0; double x1; })arg1;
- (void)resetExposureModeWithTransform:(long long)arg0 point:(struct CGPoint { double x0; double x1; })arg1;
- (void)enableFrontCameraMirrored:(BOOL)arg0;
- (void)enablePreviewMirrored:(BOOL)arg0;
- (BOOL)isCameraCapabilitySupported:(unsigned long long)arg0;
- (id)currentSystemPressureState;
- (void)getCurrentDeviceFormatsSafty:(id /* block */)arg0;
- (id)resetPreviewView:(id)arg0;
- (void)resetPreviewType:(long long)arg0;
- (void)removeHTSGLPreview;
- (void)resumeHTSGLPreview:(id)arg0;
- (void)setNormalizedPreviewColorRed:(float)arg0 green:(float)arg1 blue:(float)arg2 alpha:(float)arg3;
- (void)clearDisplay:(float)arg0 green:(float)arg1 blue:(float)arg2 alpha:(float)arg3;
- (void)resetOutputSize:(struct CGSize { double x0; double x1; })arg0;
- (void)resetCapturePreset:(id)arg0 then:(id /* block */)arg1;
- (void)resetCaptureRatio:(long long)arg0 then:(id /* block */)arg1;
- (void)resetCaptureRatio:(long long)arg0 preferredSize:(struct CGSize { double x0; double x1; })arg1 then:(id /* block */)arg2;
- (void)resetCaptureRatio:(long long)arg0 preferredPreset:(id)arg1 then:(id /* block */)arg2;
- (void)resetCaptureRatio:(long long)arg0 preferredPreset:(id)arg1 previewHeight:(double)arg2 outputHeight:(double)arg3 then:(id /* block */)arg4;
- (void)resetCaptureRatio:(long long)arg0 preferredPreset:(id)arg1 previewSize:(struct CGSize { double x0; double x1; })arg2 outputSize:(struct CGSize { double x0; double x1; })arg3 then:(id /* block */)arg4;
- (void)enableEffectCompatibilityMode;
- (void)disableEffectCompatibilityMode;
- (void)setVideoAttachmentsCallback:(id /* block */)arg0;
- (void)setVideoBufferCallback:(id /* block */)arg0;
- (void)setVideoBufferAndInfoCallback:(id /* block */)arg0;
- (void)setVideoProcessedBufferCallback:(id /* block */)arg0;
- (void)setProcessedVideoBufferBlk:(id /* block */)arg0 withSize:(struct CGSize { double x0; double x1; })arg1;
- (void)setAudioStartRecordInfoCallback:(id /* block */)arg0;
- (void)resetCameraInfoRequirement:(unsigned long long)arg0;
- (unsigned long long)getCurrentCameraInfoRequirement;
- (void)enableImageReplaceVideoRawData:(id)arg0;
- (void)disableImageReplaceVideoRawData;
- (void)forceVEPermanceRunOnceNow:(BOOL)arg0;
- (void)setVEPerformanceResultCallback:(id /* block */)arg0;
- (void)changeRenderSize:(struct CGSize { double x0; double x1; })arg0;
- (void)setActiveColorSpace:(unsigned long long)arg0 completionHandler:(id /* block */)arg1;
- (void)setPropertySet:(id)arg0;
- (void)setProcessSyncFlag:(BOOL)arg0;
- (void)turnBachFaceDetect:(BOOL)arg0;
- (void)turnRhythmicMotion:(BOOL)arg0;
- (int)currentProcessType;
- (void)updateCameraProcessParams:(id)arg0 complete:(id /* block */)arg1;
- (void)turnShakingDetect:(BOOL)arg0 param:(id)arg1 withResult:(id /* block */)arg2;
- (void)turnImageDefinitionDetect:(BOOL)arg0 param:(id)arg1 withResult:(id /* block */)arg2;
- (void)turnQrcodeDetect:(BOOL)arg0 param:(id)arg1 completeResult:(id /* block */)arg2 zoomFactor:(id /* block */)arg3 needSelect:(id /* block */)arg4;
- (void)qrcodeDetectResetZoomFactor:(float)arg0 byUser:(BOOL)arg1;
- (void)turnSystemEnigma:(BOOL)arg0 param:(id)arg1 completeResult:(id /* block */)arg2;
- (void)turnEnigma:(BOOL)arg0 param:(id)arg1 completeResult:(id /* block */)arg2;
- (void)turnMultiEnigma:(BOOL)arg0 param:(id)arg1 completeResults:(id /* block */)arg2;
- (void)turnScan:(BOOL)arg0 param:(id)arg1 completeResult:(id /* block */)arg2;
- (void)switchMultiCam:(long long)arg0;
- (void)setMultiCaptureKitUseParallelQueue:(BOOL)arg0;
- (BOOL)createCameraKitWithComplete:(id /* block */)arg0;
- (void)allowDestoryEffect:(id /* block */)arg0;
- (void)setNeedBlendSecond:(BOOL)arg0 pixelbuffer:(struct __CVBuffer { } *)arg1 mix:(float)arg2;
- (BOOL)startAudioCaptureWithPrivacyCert:(id)arg0;
- (BOOL)startAudioCaptureSyncWithPrivacyCert:(id)arg0;
- (void)stopAudioCaptureWithPrivacyCert:(id)arg0;
- (BOOL)startVideoCaptureWithAppStatusCheckWithPrivacyCert:(id)arg0;
- (void)stopVideoCaptureWithPrivacyCert:(id)arg0 completionHandler:(id /* block */)arg1;
- (void)captureStillImage:(id /* block */)arg0;
- (void)captureStillImageByUser:(BOOL)arg0 completion:(id /* block */)arg1;
- (void)captureSourcePhotoAsImageWithCompletionHandler:(id /* block */)arg0;
- (void)captureSourcePhotoAsImageWithCompletionHandler:(id /* block */)arg0 afterProcess:(BOOL)arg1;
- (void)captureSourcePhotoAsImageByUser:(BOOL)arg0 completionHandler:(id /* block */)arg1 afterProcess:(BOOL)arg2;
- (void)captureSourcePhotoAsImageByUser:(BOOL)arg0 completionWithInformationHandler:(id /* block */)arg1 afterProcess:(BOOL)arg2;
- (void)captureHDImageWith:(struct CGSize { double x0; double x1; })arg0 completionHandle:(id /* block */)arg1;
- (void)captureHDImageWith:(struct CGSize { double x0; double x1; })arg0 byUser:(BOOL)arg1 completionHandle:(id /* block */)arg2;
- (void)captureImageWithOptions:(id)arg0 handler:(id /* block */)arg1;
- (void)captureImageWithOptions:(id)arg0 finishHandler:(id /* block */)arg1;
- (void)captureImageWithOptions:(id)arg0 completionHandler:(id /* block */)arg1;
- (struct CGSize { double x0; double x1; })getMaxHDSize;
- (id)cameraZoomSupportedInfo;
- (BOOL)cameraSetZoomFactor:(double)arg0 withFrontFactor:(double)arg1;
- (id)supportedBaseFocalLengthArray;
- (BOOL)needAutoRotationFlag;
- (void)setNeedAutoRotationFlag:(BOOL)arg0;
- (BOOL)allowMultipleAssetChangeOrientation;
- (void)setAllowMultipleAssetChangeOrientation:(BOOL)arg0;
- (long long)outputDirection;
- (void)setOutputDirection:(long long)arg0;
- (id /* block */)IESCameraBGMProgressBlock;
- (void)setIESCameraBGMProgressBlock:(id /* block */)arg0;
- (id /* block */)IESCameraDurationBlock;
- (void)setIESCameraDurationBlock:(id /* block */)arg0;
- (void)startVideoRecordWithRate:(double)arg0;
- (void)pauseVideoRecord;
- (void)pauseVideoRecordWithCallback:(id /* block */)arg0;
- (void)pauseVideoRecordWithCompletionHandler:(id /* block */)arg0;
- (void)cancelVideoRecord;
- (void)removeLastVideoFragment;
- (void)removeAllVideoFragments;
- (void)removeAllVideoFragments:(id /* block */)arg0;
- (void)clearLastVideoFragmentCache;
- (void)clearAllVideoFragmentCache;
- (void)resetVideoData;
- (void)setEnableMicPCMWrite:(BOOL)arg0;
- (void)updateVideoData:(id)arg0;
- (void)setMaxLimitTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg0;
- (double)getTotalDuration;
- (void)resetRecorderWriter;
- (BOOL)isHeadphoneOutput;
- (void)resetRecorderWriterAsync;
- (void)resetVideoRecordReady;
- (void)setForceRecordAudio:(BOOL)arg0;
- (void)setForceRecordWithMusicEnd:(BOOL)arg0;
- (void)setDropFrame:(BOOL)arg0;
- (id)getFirstRecordFrame;
- (id)getMultiCamExtFirstRecordFrame;
- (void)setUseEffectRecordRate:(BOOL)arg0;
- (id /* block */)VERecorderInfoBlock;
- (void)setVERecorderInfoBlock:(id /* block */)arg0;
- (void)enableHighFramerate:(long long)arg0;
- (void)disableHighFramerate;
- (void)resetEffectFilter;
- (id)getEffectFilter;
- (void)setMusicWithURL:(id)arg0;
- (void)setMusicWithURL:(id)arg0 completion:(id /* block */)arg1;
- (void)setMusicWithURL:(id)arg0 startTime:(double)arg1 clipDuration:(double)arg2 repeatCount:(long long)arg3;
- (void)setMusicWithURL:(id)arg0 startTime:(double)arg1 clipDuration:(double)arg2 repeatCount:(long long)arg3 completion:(id /* block */)arg4;
- (void)changeMusicStartTime:(double)arg0 clipDuration:(double)arg1;
- (void)musicPlay;
- (void)musicPlay:(id /* block */)arg0;
- (void)musicPause;
- (void)musicPause:(id /* block */)arg0;
- (void)musicStop;
- (void)musicStop:(id /* block */)arg0;
- (void)musicSeekToTime:(double)arg0;
- (void)musicSeekToTime:(double)arg0 completion:(id /* block */)arg1;
- (void)setMusicNeedRepeat:(BOOL)arg0;
- (void)setMusicPlayRate:(float)arg0;
- (void)setMusicPlayRate:(float)arg0 completion:(id /* block */)arg1;
- (void)setBgMusicVolume:(float)arg0;
- (void)setBGMVolume:(float)arg0;
- (void)removePlayer;
- (void)setBGVideoWithVideoURL:(id)arg0 key:(id)arg1 rate:(float)arg2 completeBlock:(id /* block */)arg3;
- (void)setBGVideoWithVideoURL:(id)arg0 key:(id)arg1 rate:(float)arg2 completeBlock:(id /* block */)arg3 didPlayToEndBlock:(id /* block */)arg4;
- (void)setBGVideoWithVideoURL:(id)arg0 key:(id)arg1 rate:(float)arg2 type:(unsigned long long)arg3;
- (void)setBGVideoWithVideoURL:(id)arg0 key:(id)arg1 rate:(float)arg2 type:(unsigned long long)arg3 completeBlock:(id /* block */)arg4 didPlayToEndBlock:(id /* block */)arg5;
- (void)setBGVideoWithVideoURL:(id)arg0 rate:(float)arg1 type:(unsigned long long)arg2 bReplace:(BOOL)arg3;
- (void)setBGVideoAutoRepeat:(BOOL)arg0;
- (void)resetBGVideo;
- (void)bgVideoPlay;
- (void)bgVideoPause;
- (void)bgVideoMutePlayer:(BOOL)arg0;
- (struct { long long x0; int x1; unsigned int x2; long long x3; })bgVideoCurrentTime;
- (float)bgVideoCurrentPlayPercent;
- (float)bgVideoCurrentRecordPercent;
- (void)bgVideoSeekToPercent:(float)arg0 completeBlock:(id /* block */)arg1;
- (void)bgVideoSeekToTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg0 completeBlock:(id /* block */)arg1;
- (void)bgVideoChangeRate:(float)arg0 completeBlock:(id /* block */)arg1;
- (BOOL)bgVideoIsPlaying;
- (void)setBGVideoVolume:(float)arg0;
- (void)setMultiVideoWithVideoURL:(id)arg0 rate:(float)arg1 completeBlock:(id /* block */)arg2;
- (void)setMultiVideoAutoRepeat:(BOOL)arg0;
- (void)resetMultiVideo;
- (void)multiVideoPlay;
- (void)multiVideoPlayWithTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg0 completeBlock:(id /* block */)arg1;
- (void)multiVideoPause;
- (void)multiVideoMutePlayer:(BOOL)arg0;
- (struct { long long x0; int x1; unsigned int x2; long long x3; })multiVideoCurrentTime;
- (float)multiVideoDuration;
- (float)multiVideoCurrentPlayPercent;
- (float)multiVideoCurrentRecordPercent;
- (void)multiVideoSeekToPercent:(float)arg0 completeBlock:(id /* block */)arg1;
- (void)multiVideoSeekToTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg0 completeBlock:(id /* block */)arg1;
- (void)multiVideoChangeRate:(float)arg0 completeBlock:(id /* block */)arg1;
- (BOOL)multiVideoIsPlaying;
- (id)getMultiPlayer;
- (void)multiVideoIsReady;
- (void)resetStoryModeWithConfig:(id)arg0;
- (void)updateConfigVideoData:(id)arg0;
- (void)updateConfigRenderLayer:(id)arg0;
- (void)enableTC21RedpackageRecord:(BOOL)arg0;
- (void)getTC21RedpakageRecordInfo:(id /* block */)arg0;
- (void)setRecorderAudioMode:(long long)arg0;
- (void)karaokePlay;
- (void)karaokePause;
- (BOOL)aecStatus;
- (BOOL)isAudioCaptureRunning;
- (void)clearVideodata;
- (void)setPureModeReturnWithLens:(BOOL)arg0;
- (void)setSkipFrontOrSecondEffectInMultiCam:(long long)arg0;
- (void)setSkipFrontCamEffectInMultiCam:(BOOL)arg0;
- (void)setSkipSecondCamEffectInMultiCam:(BOOL)arg0;
- (void)setSkipBinnedFormatInMultiCam:(long long)arg0;
- (void)setAECEnabled:(BOOL)arg0 modelPath:(id)arg1;
- (void)setAECEnabled:(BOOL)arg0 modelPath:(id)arg1 completion:(id /* block */)arg2;
- (void)setBalanceEnabled:(BOOL)arg0 targetLufs:(int)arg1;
- (void)setBGMBalanceEnabled:(BOOL)arg0 targetLufs:(float)arg1 peak:(float)arg2 loudness:(float)arg3;
- (void)setMulVideoBalanceEnabled:(BOOL)arg0 targetLufs:(float)arg1 peak:(float)arg2 loudness:(float)arg3;
- (void)setNewBalanceEnabled:(BOOL)arg0 newBalanceCallback:(id /* block */)arg1;
- (void)setTimeAlignEnabled:(BOOL)arg0 modelPath:(id)arg1 timeAlignCallback:(id /* block */)arg2;
- (void)setBackendMode:(long long)arg0 useOutput:(BOOL)arg1;
- (BOOL)checkConfig:(id)arg0;
- (void)setRecorderConfig:(id)arg0 cameraComplete:(id /* block */)arg1;
- (void)setTemplateVideoData:(id)arg0 preview:(id)arg1 firstFrameRenderCallback:(id /* block */)arg2;
- (void)removeTemplateVideo;
- (void)pauseTemplateVideo:(BOOL)arg0 then:(id /* block */)arg1;
- (void)setTemplateVolume:(double)arg0;
- (void)setTemplateVideoRotation:(unsigned long long)arg0;
- (struct { long long x0; int x1; unsigned int x2; long long x3; })currentBGMTimeWithRate;
- (void)resetLivePhotoCache;
- (void)setDuetKaraokeModeMusicReader:(id)arg0 fromTime:(double)arg1;
- (BOOL)switchLivePhotoRecord:(BOOL)arg0 with:(id)arg1;
- (void)switchLivePhotoRecordAsync:(BOOL)arg0 with:(id)arg1 complete:(id /* block */)arg2;
- (void)processExternalVideoInput:(struct opaqueCMSampleBuffer { } *)arg0;
- (void)processExternalAudioInput:(struct opaqueCMSampleBuffer { } *)arg0;
- (void)configRecordContent:(unsigned long long)arg0;
- (void)sendExternAudioSample:(struct opaqueCMSampleBuffer { } *)arg0;
- (void)sendExternAudioSampleData:(id)arg0 asbd:(struct AudioStreamBasicDescription { double x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; })arg1 numberFrames:(unsigned int)arg2 timeStamp:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg3;
- (BOOL)exportWithVideo:(id)arg0 completion:(id /* block */)arg1;
- (BOOL)exportVideoWithMicMuted:(BOOL)arg0 completion:(id /* block */)arg1;
- (void)enableAudioEffectSticker:(BOOL)arg0;
- (void)turnEffectNodeInAudioChain:(BOOL)arg0;
- (void)getEffectResMultiviewTag:(const char *)arg0 tag:(char *)arg1;
- (void)setEffectLoadStatusBlockV2:(id /* block */)arg0;
- (void)switchFilterWithLeftPath:(id)arg0 rightPath:(id)arg1 progress:(double)arg2;
- (void)applyEffect:(id)arg0 type:(long long)arg1 enableFakeFace:(BOOL)arg2;
- (void)applyEffectWithInfo:(id)arg0 type:(long long)arg1 enableFakeFace:(BOOL)arg2;
- (void)applyEffectWithInfo:(id)arg0 type:(long long)arg1 enableFakeFace:(BOOL)arg2 completion:(id /* block */)arg3;
- (void)clearEffectForRecordFinish;
- (void)setExternalFaceMakeupOpacity:(id)arg0 maleOpacity:(double)arg1 femaleOpacity:(double)arg2;
- (void)setExternalFaceMakeupOpacity:(id)arg0 maleOpacity:(double)arg1 femaleOpacity:(double)arg2 completion:(id /* block */)arg3;
- (void)applyComposerNodesWithTags:(id)arg0;
- (void)applyComposerNodesWithTags:(id)arg0 enableFakeFace:(BOOL)arg1;
- (void)reloadComposerNodesWithTags:(id)arg0;
- (void)appendComposerNodesWithTags:(id)arg0;
- (void)removeComposerNodesWithTags:(id)arg0;
- (BOOL)operateComposerNodesWithTags:(id)arg0 operation:(long long)arg1;
- (BOOL)replaceComposerNodesWithNewTag:(id)arg0 old:(id)arg1;
- (BOOL)updateTouchInfoForGestureRecognition:(struct _VETouchInfo { unsigned int x0; struct CGPoint { double x0; double x1; } x1; float x2; float x3; int x4; long long x5; })arg0;
- (BOOL)isRecognizingGesture:(int)arg0;
- (BOOL)setSafeAreas:(id)arg0;
- (void)startBGMAsync:(unsigned long long)arg0 complete:(id /* block */)arg1;
- (void)startEffectWithType:(unsigned long long)arg0;
- (void)pauseEffectWithType:(unsigned long long)arg0;
- (void)applyRealPlay:(id)arg0;
- (void)applyRealPlayWithInfo:(id)arg0;
- (void)enableEffectMusicPlayerProgress:(BOOL)arg0;
- (void)renderPicImage:(id)arg0 withKeys:(id)arg1;
- (void)releaseImageDetector;
- (void)renderImage:(struct __CVBuffer { } *)arg0 key:(id)arg1;
- (void)addFeature:(id)arg0 forAsset:(id)arg1;
- (void)deleteFeature:(id)arg0 forAsset:(id)arg1;
- (void)updateFeature:(id)arg0 forAsset:(id)arg1;
- (void)replaceFeature:(id)arg0 oldFeature:(id)arg1 forAsset:(id)arg2;
- (void)addFrameExtractDriver:(id)arg0 forAsset:(id)arg1;
- (void)setEffectLoadStatusBlock:(id /* block */)arg0;
- (void)applyEffectWithInfo:(id)arg0 type:(long long)arg1;
- (void)setBgmVolume:(double)arg0;
- (double)bgmVolume;
- (struct CGSize { double x0; double x1; })originSize;
- (void)setOriginSize:(struct CGSize { double x0; double x1; })arg0;
- (void)setOutputRotation:(unsigned long long)arg0;
- (unsigned long long)outputRotation;
- (id /* block */)encodeDataCB;
- (void)setEncodeDataCB:(id /* block */)arg0;
- (void)setIsPassThrough:(BOOL)arg0;
- (BOOL)isPassThrough;
- (id)arRendererWrapper;
- (void)setArRendererWrapper:(id)arg0;
- (void)registerMediaServicesResetNotify;
- (BOOL)enableMultiCamRecorder;
- (void)setEnableMultiCamRecorder:(BOOL)arg0;
- (id)encodeSettings;
- (void)setEncodeSettings:(id)arg0;
- (id)livephotoCachePath;
- (void)setLivephotoCachePath:(id)arg0;
- (double)recordRate;
- (void)setRecordRate:(double)arg0;
- (id)lastCodeContent;
- (void)setLastCodeContent:(id)arg0;
- (id)observerArray;
- (void)setObserverArray:(id)arg0;
- (id /* block */)algorithmResultsCallback;
- (void)setAlgorithmResultsDict:(id)arg0;
- (unsigned long long)algorithmEffectBachResultRequirement;
- (id)algorithmResultsDict;
- (id /* block */)faceResultBlock;
- (unsigned long long)extraAlgorithmRequirements;
- (void)setExtraAlgorithmRequirements:(unsigned long long)arg0;
- (unsigned long long)extraAlgorithmParameters;
- (void)setExtraAlgorithmParameters:(unsigned long long)arg0;
- (void)setAlgorithmResultsCallback:(id /* block */)arg0;
- (void)setFaceResultBlock:(id /* block */)arg0;
- (void)setAlgorithmEffectBachResultRequirement:(unsigned long long)arg0;
- (id)auxiliaryTextureKeys;
- (void)setAuxiliaryTextureKeys:(id)arg0;
- (id)existAuxiliaryImageTextures;
- (void)setExistAuxiliaryImageTextures:(id)arg0;
- (id)existAuxiliaryImageTexturesDict;
- (void)setExistAuxiliaryImageTexturesDict:(id)arg0;
- (id /* block */)musicTimeLineBLock;
- (void)setMusicTimeLineBLock:(id /* block */)arg0;
- (id)faceResultArray;
- (void)setFaceResultArray:(id)arg0;
- (BOOL)didSizeChange;
- (void)setDidSizeChange:(BOOL)arg0;
- (BOOL)allowFrameReordering;
- (void)setAllowFrameReordering:(BOOL)arg0;
- (double)effectRecordRate;
- (void)setEffectRecordRate:(double)arg0;
- (double)getSuitableSampleRate:(double)arg0;
- (id)convertFromHWProfile:(id)arg0;
- (id)getMetadataItem;
- (void)setRecordHasAudioTrack:(BOOL)arg0;
- (void)setAndPostComposerAction:(struct TEComposerAction { int x0; int x1; int x2; struct vector<std::string, std::allocator<std::string>> { void *x0; void *x1; struct __compressed_pair<std::string *, std::allocator<std::string>> { void *x0; } x2; } x3; struct vector<std::string, std::allocator<std::string>> { void *x0; void *x1; struct __compressed_pair<std::string *, std::allocator<std::string>> { void *x0; } x2; } x4; struct vector<std::string, std::allocator<std::string>> { void *x0; void *x1; struct __compressed_pair<std::string *, std::allocator<std::string>> { void *x0; } x2; } x5; struct vector<std::string, std::allocator<std::string>> { void *x0; void *x1; struct __compressed_pair<std::string *, std::allocator<std::string>> { void *x0; } x2; } x6; struct vector<float, std::allocator<float>> { float *x0; float *x1; struct __compressed_pair<float *, std::allocator<float>> { float *x0; } x2; } x7; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char *x0; unsigned long long x1; unsigned long long x2; } x0; struct __short { char x0[23]; struct { unsigned char x0; } x1; } x1; struct __raw { unsigned long long x0[3]; } x2; } x0; } x0; } x0; } x8; })arg0;
- (void)appendComposerNodesWithTags:(void *)arg0 NodeTags:(void *)arg1;
- (BOOL)replaceComposerNodesWithNewTag:(void *)arg0 old:(void *)arg1 newNodeTags:(void *)arg2;
- (int)befGestureTypeForType:(unsigned long long)arg0;
- (void)sendLocationToEffect:(struct CGPoint { double x0; double x1; })arg0 withType:(int)arg1 withMMGesture:(unsigned long long)arg2;
- (void)_pauseBGM:(BOOL)arg0;
- (void)p_processFaceResult:(struct bef_face_info_st { struct bef_face_106_st { struct bef_rect_t { int x0; int x1; int x2; int x3; } x0; float x1; struct bef_fpoint_t { float x0; float x1; } x2[106]; float x3[106]; float x4; float x5; float x6; float x7; int x8; unsigned int x9; unsigned int x10; } x0[10]; struct bef_face_ext_info_t { int x0; int x1; int x2; int x3; struct bef_fpoint_t { float x0; float x1; } x4[22]; struct bef_fpoint_t { float x0; float x1; } x5[22]; struct bef_fpoint_t { float x0; float x1; } x6[13]; struct bef_fpoint_t { float x0; float x1; } x7[13]; struct bef_fpoint_t { float x0; float x1; } x8[64]; struct bef_fpoint_t { float x0; float x1; } x9[20]; struct bef_fpoint_t { float x0; float x1; } x10[20]; } x1[10]; int x2; })arg0;
- (void)p_processExpressionResult:(struct bef_expersion_detect_st { struct bef_face_attribute_info_st { float x0; float x1; float x2; float x3; int x4; float x5[7]; float x6; float x7; float x8; float x9; float x10; float x11; float x12; float x13; float x14; float x15; float x16; float x17; float x18; float x19; float x20; } x0[10]; int x1; })arg0;
- (void)p_processSkeletonResultRequirement:(struct bef_skeleton_result_st { int x0; int x1; struct bef_skeleton_st { struct bef_fpoint_detect_t { float x0; float x1; BOOL x2; float x3; } x0[18]; struct bef_rectf_t { float x0; float x1; float x2; float x3; } x1; int x2; } x2[5]; })arg0;
- (int)_getEffectRotateType:(id)arg0;
- (BOOL)p_handleEffectMessageWithID:(unsigned int)arg0 arg1:(int)arg1 arg2:(int)arg2 arg3:(const char *)arg3 msg:(id *)arg4;
- (void)addRealTimeMusic:(id)arg0;
- (void)initVEImageDetector;
- (void)__postTrackerWithOptions:(id)arg0 image:(id)arg1 error:(id)arg2 duration:(double)arg3;
- (void)updateMediaTrackerWithOptions:(id)arg0 tracker:(id)arg1;
- (void)__processImageWithOptions:(id)arg0 tracker:(id)arg1 handler:(id /* block */)arg2;
- (void)__processCaptureResultWithOptions:(id)arg0 tracker:(id)arg1 image:(id)arg2 pixelBuffer:(struct __CVBuffer { } *)arg3 error:(id)arg4 then:(id /* block */)arg5;
- (void)__syncFetchImageFromBuffer:(id /* block */)arg0;
- (void)__syncFetchPixelBufferFromBuffer:(id /* block */)arg0;
- (id)imageFromPixelBuffer:(struct __CVBuffer { } *)arg0 fromRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg1;
- (struct CGSize { double x0; double x1; })p_getMaxRenderSize;
- (id)videoOutputConfiguration;
- (id)audioOutputConfiguration:(id)arg0;
- (void)p_setDurationCallback;
- (void)p_setMaxLimitTimeForLivePhoto:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg0;
- (void)clearAndRebuildWriter:(id /* block */)arg0;
- (void)p_setDropFrameCallback:(id /* block */)arg0;
- (void)trackerVideoSetting;
- (void)setEnableMultiRenderCtxtOpt:(BOOL)arg0;
- (void)setMainScenekey:(id)arg0;
- (BOOL)enableMultiRenderCtxtOpt;
- (id)mainScenekey;
- (void)setMultiVideoTrackId:(id)arg0;
- (void)setBgmBusinessPlayState:(long long)arg0;
- (void)p_initOutPutSize;
- (void)setFileTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })arg0;
- (void)p_initWriterWithVideoData:(id)arg0 outputSize:(struct CGSize { double x0; double x1; })arg1;
- (void)updateRecorderModelWithVideoData:(id)arg0;
- (void)p_musicStop;
- (void)p_destroyNativeRecorder;
- (id)smallWindowPreview;
- (void)setEnableFaceExposureOptimize:(BOOL)arg0;
- (BOOL)enableFaceExposureOptimize;
- (void)setEffectResourcePath;
- (void)createEffectVideoPlayerWithBundle:(void *)arg0;
- (BOOL)shouldCropAfterEffect;
- (void)setEnableShakingDetect:(BOOL)arg0;
- (void)setZoomFactorCallcack:(id /* block */)arg0;
- (id /* block */)zoomFactorCallcack;
- (void)setEnigmasCallback:(id /* block */)arg0;
- (void)setScanCodeBlock:(id /* block */)arg0;
- (void)configScanImageWithParam:(id)arg0 andScanParam:(void *)arg1;
- (void)configScanImageStreamWithParam:(id)arg0 andScanParam:(void *)arg1;
- (void)setAlgorithmProcessSize:(struct TESizei { int x0; int x1; } *)arg0;
- (void)p_setStartWritingTime:(long long)arg0;
- (BOOL)enableOnekeyProcess;
- (BOOL)enableShakingDetect;
- (void)p_getDevideMotion:(id)arg0;
- (void)p_cleanPipelineProcessorTask;
- (void)p_setEffectClientState:(long long)arg0;
- (void)setLastSessionMode:(unsigned long long)arg0;
- (unsigned long long)lastSessionMode;
- (void)p_initNativeRecorder;
- (void)p_setSurfaceToNativeRecorder;
- (void)startWriting:(id /* block */)arg0 recordAudio:(BOOL)arg1 recorderColorSpace:(unsigned long long)arg2;
- (BOOL)hasMusicPlayerForClient;
- (void)setIsPlayerProgressSyncReady:(BOOL)arg0;
- (void)p_setMaxLimitTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg0;
- (void)p_setWriterDropFrame:(BOOL)arg0;
- (double)p_getTotalDuration;
- (void)p_removeAllVideoFragments;
- (void)p_removeAllVideoFragments:(id /* block */)arg0;
- (void)p_removeLastVideoFragment;
- (void)trackRecordData;
- (void)p_startEffectTracker;
- (void)p_setRecordRate:(double)arg0;
- (void)p_setForceAdjustPts:(BOOL)arg0;
- (void)p_setCaptureFrameRate:(double)arg0;
- (void)p_setRendererType:(long long)arg0;
- (void)p_stopEffectTracker;
- (void)p_musicPause;
- (long long)p_getStartWritingTime;
- (void)p_setUseEffectRecordRate:(BOOL)arg0;
- (void)p_setMessageHandler:(id /* block */)arg0;
- (id)p_getRecordFilePath;
- (void)p_setDisableWriteAudio:(BOOL)arg0;
- (void)p_musicPlay;
- (void)p_setFrontCamera:(BOOL)arg0;
- (BOOL)enableEffectFaceAE;
- (void)setEnableOnekeyProcess:(BOOL)arg0;
- (void)p_setControlFrameRate:(double)arg0;
- (void)setMultiVideoWithVideoURL:(id)arg0 rate:(float)arg1 completeBlock:(id /* block */)arg2 didPlayToEndBlock:(id /* block */)arg3;
- (id)multiVideoURL;
- (void)setMultiVideoURL:(id)arg0;
- (void)setMultiVideoSpeed:(float)arg0;
- (id)multiVideoTrackId;
- (id)multiAudioTrackId;
- (void)repaceMulitAudioTrackWithAsset:(id)arg0 rate:(float)arg1;
- (void)setMultiAudioTrackId:(id)arg0;
- (long long)bgmBusinessPlayState;
- (void)p_setBgMusicVolume:(float)arg0;
- (void)p_updateAudioVideodata:(id)arg0;
- (void)p_musicPlay:(id /* block */)arg0;
- (void)p_musicPause:(id /* block */)arg0;
- (void)p_musicStop:(id /* block */)arg0;
- (float)multiVideoSpeed;
- (void)setHasMusicPlayerForClient:(BOOL)arg0;
- (BOOL)_hasAudioClip;
- (BOOL)p_containsAudioFilterTrack;
- (void)changeEffectRenderSize:(struct CGSize { double x0; double x1; })arg0;
- (void)p_updateMulitTrackCanvasOrientation;
- (void)p_setAECEnabled:(BOOL)arg0 modelPath:(id)arg1;
- (void)p_processMessage:(void *)arg0;
- (void)p_switchLivePhotoRecordMode:(BOOL)arg0 with:(id)arg1;
- (void)p_clearLivePhotoCache;
- (void)p_setBGMBalanceEnabled:(BOOL)arg0 trackId:(id)arg1 targetLufs:(float)arg2 peak:(float)arg3 loudness:(float)arg4;
- (void)turnBachFaceDetectAndCrop:(BOOL)arg0 useSlowPath:(BOOL)arg1 completionResult:(id /* block */)arg2;
- (void)processScanErrorWithParam:(id)arg0 error:(int)arg1 description:(const void *)arg2;
- (void)setScanPostUploader;
- (void)postScanData;
- (id)pathForFilter:(id)arg0;
- (id)pathForSticker:(id)arg0;
- (void)p_removePlayer:(id /* block */)arg0;
- (void)p_syncMsgWait;
- (void)p_syncMsgDone;
- (void)setSmallWindowPreview:(id)arg0;
- (id /* block */)enigmasCallback;
- (id /* block */)dirtyDetectResultBlock;
- (void)setDirtyDetectResultBlock:(id /* block */)arg0;
- (id /* block */)recorderEffectBitmapRequestBlock;
- (void)setRecorderEffectBitmapRequestBlock:(id /* block */)arg0;
- (BOOL)isHFpsMode;
- (void)setIsHFpsMode:(BOOL)arg0;
- (id)audioPlayerObserver;
- (void)setAudioPlayerObserver:(id)arg0;
- (BOOL)isPlayerProgressSyncReady;
- (double)audioSyncStart;
- (void)setAudioSyncStart:(double)arg0;
- (BOOL)shouldReplay;
- (void)setShouldReplay:(BOOL)arg0;
- (BOOL)captureImageProcessed;
- (void)setCaptureImageProcessed:(BOOL)arg0;
- (BOOL)enableSysFaceAE;
- (void)setEnableSysFaceAE:(BOOL)arg0;
- (void)setEnableEffectFaceAE:(BOOL)arg0;
- (long long)backendMode;
- (void)setBackendMode:(long long)arg0;
- (void)setMovieWriterStatus:(BOOL)arg0;
- (id)cameraWriterDelegate;
- (void)setRecorderColorSpace:(unsigned long long)arg0;
- (int)maxKeyFrameInterval;
- (void)setMaxKeyFrameInterval:(int)arg0;
- (void)setWriterMode:(int)arg0;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })fileTransform;
- (float)bgMusicVolume;
- (float)bgMusicVolumeSetByClient;
- (void)setBgMusicVolumeSetByClient:(float)arg0;
- (double)livePhotoRecordRate;
- (void)setLivePhotoRecordRate:(double)arg0;
- (void)setLivePhotoDuration:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg0;
- (BOOL)isLivePhotoRunning;
- (void)setIsLivePhotoRunning:(BOOL)arg0;
- (id /* block */)scanCodeBlock;
- (id)getVideoUrl:(id /* block */)arg0;
- (id)adjustAudioConfig;
- (void)stopLivePhotoWriterAndUpdateVideoData:(id /* block */)arg0;
- (id)getColorProperties;
- (id)compressionSettings;
- (void)trackerParam:(id)arg0;
- (id)getHlgBytevcMain10EncodeSetting:(unsigned long long)arg0;
- (id)getByteVC1EncodeSetting:(unsigned long long)arg0;
- (id)getH264EncodeSetting:(unsigned long long)arg0;
- (void)p_trackRecordParam;
- (void)setEnableMultiRenderCtxt:(BOOL)arg0;
- (BOOL)enableMultiRenderCtxt;
- (void)p_initCameraKit:(id /* block */)arg0;
- (void)setPreviewContainer:(id)arg0;
- (void)setSecondPreviewContainer:(id)arg0;
- (void)registerEffectArNoti;
- (void)setIsFirstRecordImageCaptured:(BOOL)arg0;
- (void)setFirstRecordImage:(id)arg0;
- (void)setExtFirstRecordImage:(id)arg0;
- (void)p_createAudioPlayerForceNeeded:(BOOL)arg0;
- (void)setEnableLensSharpen:(BOOL)arg0;
- (void)p_initAudioProcessor;
- (void)p_obtainOldConfigBitrateSettingWhenNil:(id)arg0;
- (id)secondPreviewContainer;
- (void)resumeHTSGLPreview;
- (id)p_getNormalCameraHandle;
- (void)p_removeMonitorObserver;
- (void)removeLayerPreview;
- (struct opaqueCMSampleBuffer { } *)captureSampleBuf;
- (void)setCaptureSampleBuf:(struct opaqueCMSampleBuffer { } *)arg0;
- (struct AudioBufferList { unsigned int x0; struct AudioBuffer { unsigned int x0; unsigned int x1; void *x2; } x1[1]; } *)pAudioBufferList;
- (void)setPAudioBufferList:(struct AudioBufferList { unsigned int x0; struct AudioBuffer { unsigned int x0; unsigned int x1; void *x2; } x1[1]; } *)arg0;
- (struct opaqueCMSampleBuffer { } *)audioSampleBuffer;
- (void)setAudioSampleBuffer:(struct opaqueCMSampleBuffer { } *)arg0;
- (BOOL)p_initAudioCapture;
- (void)setupAudioSessionAsync:(id /* block */)arg0;
- (BOOL)p_startAudioCaptureAsyncWithBlock:(id /* block */)arg0 withPrivacyCert:(id)arg1;
- (BOOL)p_startAudioCaptureWithBlock:(id /* block */)arg0 withPrivacyCert:(id)arg1;
- (void)p_stopAudioCaptureWithPrivacyCert:(id)arg0;
- (BOOL)p_startVideoCaptureWithStatusCheck:(BOOL)arg0 withPrivacyCert:(id)arg1;
- (BOOL)p_startVideoCaptureWithStatusCheck:(BOOL)arg0 withPrivacyCert:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)p_stopVideoCaptureWithPrivacyCert:(id)arg0;
- (void)p_stopVideoCaptureWithPrivacyCert:(id)arg0 isAsync:(BOOL)arg1 completionHandler:(id /* block */)arg2;
- (id)videoRecordReady;
- (id)p_getCurrentCameraHandle;
- (BOOL)isLivePhotoMode;
- (void)cancelVideoRecordReady;
- (BOOL)p_isOnlyAudio;
- (void)p_registFacePointBlockToEffectForFaceAE;
- (void)switchToCameraType:(long long)arg0;
- (void)p_switchCameraSource;
- (void)p_setFocusMode:(long long)arg0 viewPosition:(id)arg1;
- (struct CGPoint { double x0; double x1; })cordinateTransform:(struct CGPoint { double x0; double x1; })arg0 originSize:(struct CGSize { double x0; double x1; })arg1 cropSize:(struct CGSize { double x0; double x1; })arg2 fillType:(long long)arg3;
- (void)p_setFocusMode:(long long)arg0 viewPosition:(id)arg1 originalPointValue:(id)arg2;
- (void)p_setExposureMode:(long long)arg0 viewPosition:(id)arg1;
- (void)p_setExposureMode:(long long)arg0 viewPosition:(id)arg1 originalPointValue:(id)arg2;
- (id)previewUnit;
- (id)arVideoCamera;
- (BOOL)p_cameraSetZoomFactor:(double)arg0;
- (void)setPreviewUnit:(id)arg0;
- (id)secondPreviewUnit;
- (void)setSecondPreviewUnit:(id)arg0;
- (void)p_initPreviewWithCompletionHandler:(id /* block */)arg0;
- (void)p_recorderInfoCb:(long long)arg0 value:(id)arg1;
- (struct CGSize { double x0; double x1; })degradedSize;
- (void)p_resetFocusAndExposureModeForScene:(long long)arg0;
- (BOOL)effectCompatibilityMode;
- (void)setEffectCompatibilityMode:(BOOL)arg0;
- (void)setPVideoBufferCallback:(id /* block */)arg0;
- (void)setPVideoBufferAndInfoCallback:(id /* block */)arg0;
- (void)setPVideoProcessedBufferCallback:(id /* block */)arg0;
- (id /* block */)pVideoProcessedBufferCallback;
- (void)setPAudioBufferCallback:(id /* block */)arg0;
- (void)setDegradedSize:(struct CGSize { double x0; double x1; })arg0;
- (void)p_trackPreviewMediaData;
- (void)p_trackPreviewMediaData;
- (void)p_trackCameraMediaDataWithCameraPos:(long long)arg0;
- (void)p_trackLensSharpMediaData;
- (void)p_trackLensSharpMediaData;
- (void)setNeedProcessAudio:(BOOL)arg0;
- (void)setNeedResolveAudio:(BOOL)arg0;
- (void)resetRecordMetadataInfoIfNeeded;
- (id)videoRecordReadyWithSyncFlag:(BOOL)arg0;
- (unsigned long long)recorderColorSpace;
- (void)setVideoRecordStartTime:(double)arg0;
- (void)startRecordWithGeneralAudioStatus;
- (void)_cameraWriterEnable:(BOOL)arg0;
- (BOOL)enableMicPCMWrite;
- (BOOL)isNeedRecordAudio;
- (void)openMicPcmFile:(id)arg0;
- (void)pauseVideoRecordWithAction:(long long)arg0 completionHandler:(id /* block */)arg1;
- (BOOL)pureCameraMode;
- (void)reSyncAudioProgress;
- (void)p_clearLastVideoFragmentCache;
- (void)p_clearAllVideoFragmentCache;
- (id)firstRecordImage;
- (id)extFirstRecordImage;
- (void)setLivePhotoConfig:(id)arg0;
- (void)setIsLivePhotoMode:(BOOL)arg0;
- (void)p_setHasBgm:(BOOL)arg0 completion:(id /* block */)arg1;
- (BOOL)needImageDataReplaceRawData;
- (void)setImagePbuf:(struct __CVBuffer { } *)arg0;
- (struct __CVBuffer { } *)imagePbuf;
- (void)setNeedImageDataReplaceRawData:(BOOL)arg0;
- (id)p_copyAudioVideoDataIfNeed:(id)arg0;
- (id /* block */)p_initCaptureActionBlock;
- (void)setCameraConfigure:(id)arg0;
- (void)setNormalCamera:(id)arg0;
- (id)normalCamera;
- (void)p_initCameraSubjectAreaDetectBlock;
- (void)p_enableFaceAEStrategy;
- (BOOL)hasCameraStartFailedRecreated;
- (void)setHasCameraStartFailedRecreated:(BOOL)arg0;
- (void)p_stopAudioCaptureSyncWithPrivacyCert:(id)arg0;
- (id)cameraConfigure;
- (void)p_setupFocusAndExposureGestureForPreview:(id)arg0;
- (id)p_createPreviewUnitWithView:(id)arg0 previewModeType:(long long)arg1 route:(id)arg2;
- (void)p_registerFirstFrameMessage;
- (void)setCameraWriterDelegate:(id)arg0;
- (unsigned long long)imageOrientationToHTSRotation:(long long)arg0;
- (void)registerEffectFunc;
- (void)p_initLayerPreview;
- (void)setShouldAutoStartAudioCapture:(BOOL)arg0;
- (BOOL)shouldAutoStartAudioCapture;
- (id /* block */)motionDetectBlock;
- (void)setMotionDetectBlock:(id /* block */)arg0;
- (id)p_getAudioCaptureHandle;
- (void)p_setHasMic:(BOOL)arg0;
- (void)p_processCaptureFrame:(struct opaqueCMSampleBuffer { } *)arg0 sampleInfo:(id)arg1;
- (void)setIsFirstFrameRender:(BOOL)arg0;
- (void)setIsAudioPlayerEnd:(BOOL)arg0;
- (BOOL)p_isNeedWaitBgm;
- (BOOL)p_needDelayStartWriting;
- (void)audioPlayerStatus:(BOOL)arg0;
- (BOOL)isVideoRecorded;
- (id)currentApplyStickerInfo;
- (void)setMultiVideoSeekCount:(int)arg0;
- (void)closeMicPcmFile;
- (double)videoRecordStartTime;
- (BOOL)videoOrAudioIsReady;
- (void)pauseWritingWithFragmentInfo:(id)arg0 resolveBlock:(id /* block */)arg1 completionHandler:(id /* block */)arg2;
- (void)setCameraTrackInfo:(id)arg0;
- (id)cameraTrackInfo;
- (BOOL)isNeedAudioPlayer;
- (BOOL)musicNeedRepeat;
- (void)setAudioPlayerStartedTime:(double)arg0;
- (double)audioPlayerStartedTime;
- (BOOL)isAudioPlayerEnd;
- (BOOL)enableLensSharpen;
- (id /* block */)pVideoBufferAndInfoCallback;
- (id /* block */)pVideoBufferCallback;
- (long long)multiCamSkipEffectMode;
- (BOOL)isSkipSecondCamEffectInMultiCam;
- (BOOL)isSkipFrontCamEffectInMultiCam;
- (struct opaqueCMSampleBuffer { } *)replacePixelBuffer:(struct __CVBuffer { } *)arg0 ofSamplebuffer:(struct opaqueCMSampleBuffer { } *)arg1;
- (BOOL)hasBGVideo;
- (void)p_storeCaptureBuffer:(struct opaqueCMSampleBuffer { } *)arg0;
- (id)bgVideoKey;
- (BOOL)hasMultiVideo;
- (unsigned long long)lastFrameRotationMode;
- (void)setLastFrameRotationMode:(unsigned long long)arg0;
- (BOOL)isFirstRecordImageCaptured;
- (void)p_resetExposureMode:(long long)arg0 pointValue:(id)arg1 scene:(long long)arg2 then:(id /* block */)arg3;
- (long long)p_getFaceAEState;
- (void)p_resetFocusMode:(long long)arg0 pointValue:(id)arg1 scene:(long long)arg2 then:(id /* block */)arg3;
- (void)p_resetExposureMode:(long long)arg0 pointValue:(id)arg1 originalPointValue:(id)arg2 scene:(long long)arg3 then:(id /* block */)arg4;
- (void)p_resetFocusMode:(long long)arg0 pointValue:(id)arg1 originalPointValue:(id)arg2 scene:(long long)arg3 then:(id /* block */)arg4;
- (void)p_handleTapOnPreviewView:(id)arg0;
- (void)p_handleLongPressOnPreviewView:(id)arg0;
- (void)setArVideoCamera:(id)arg0;
- (void)setupARVideoCameraWithCameraType:(long long)arg0;
- (id)externalVideoInput;
- (void)setExternalVideoInput:(id)arg0;
- (void)switchSessionModeFrom:(unsigned long long)arg0 to:(unsigned long long)arg1;
- (void)p_resetLivePhotoWriter;
- (void)p_addMonitorObserver;
- (void)setGeneralAudioPath:(id)arg0;
- (void)setGeneralAudioKey:(id)arg0;
- (void)setGeneralAudioStartTime:(double)arg0;
- (void)p_clearGeneralAudioStatus;
- (double)generalAudioStartTime;
- (void)p_setEffectRecordRate:(double)arg0;
- (void)p_reciveEffectMessage:(id)arg0;
- (id)generalAudioPath;
- (id)generalAudioKey;
- (BOOL)p_aecStatus;
- (void)p_setBalanceEnabled:(BOOL)arg0 targetLufs:(int)arg1;
- (void)p_setTimeAlignEnabled:(BOOL)arg0 modelPath:(id)arg1 timeAlignCallback:(id /* block */)arg2;
- (void)p_setBackendMode:(long long)arg0 useOutput:(BOOL)arg1 completion:(id /* block */)arg2;
- (id /* block */)pAudioBufferCallback;
- (int)p_deepCopyAudioSampleBuffer:(struct opaqueCMSampleBuffer { } *)arg0;
- (BOOL)movieWriterStatus;
- (void)p_writeMicPcm:(struct opaqueCMSampleBuffer { } *)arg0;
- (void)p_setConfigToProcessor:(id)arg0;
- (void)p_setConfigToSessionMode:(id)arg0;
- (void)p_setConfigToCapture:(id)arg0 cameraComplete:(id /* block */)arg1;
- (id)getTC21RedPackageTarcker;
- (void)resetMultiVideoIfNeed;
- (void)p_unregistFacePointBlockToEffectForFaceAE;
- (long long)p_currentEffectClientPreviewState;
- (id)p_getARCameraHandle;
- (int)multiVideoSeekCount;
- (BOOL)forceRecord;
- (void)setForceRecord:(BOOL)arg0;
- (id)layerPreviewView;
- (void)setLayerPreviewView:(id)arg0;
- (void)setMultiCamSkipEffectMode:(long long)arg0;
- (void)setIsSkipFrontCamEffectInMultiCam:(BOOL)arg0;
- (void)setIsSkipSecondCamEffectInMultiCam:(BOOL)arg0;
- (BOOL)isFirstFrameRender;
- (id)livePhotoConfig;
- (void)setHasBGVideo:(BOOL)arg0;
- (void)setBgVideoKey:(id)arg0;
- (void)setHasMultiVideo:(BOOL)arg0;
- (unsigned long long)multiVideoStartFragment;
- (void)setMultiVideoStartFragment:(unsigned long long)arg0;
- (BOOL)fristAudioFrameWrited;
- (void)setFristAudioFrameWrited:(BOOL)arg0;
- (struct __sFILE { char *x0; int x1; int x2; short x3; short x4; struct __sbuf { char *x0; int x1; } x5; int x6; void *x7; void /* function */ *x8; void /* function */ *x9; void /* function */ *x10; void /* function */ *x11; struct __sbuf { char *x0; int x1; } x12; struct __sFILEX *x13; int x14; unsigned char x15[3]; unsigned char x16[1]; struct __sbuf { char *x0; int x1; } x17; int x18; long long x19; } *)micPCMWriteFile;
- (void)setMicPCMWriteFile:(struct __sFILE { char *x0; int x1; int x2; short x3; short x4; struct __sbuf { char *x0; int x1; } x5; int x6; void *x7; void /* function */ *x8; void /* function */ *x9; void /* function */ *x10; void /* function */ *x11; struct __sbuf { char *x0; int x1; } x12; struct __sFILEX *x13; int x14; unsigned char x15[3]; unsigned char x16[1]; struct __sbuf { char *x0; int x1; } x17; int x18; long long x19; } *)arg0;
- (id)micPCMWriteQueue;
- (void)setMicPCMWriteQueue:(id)arg0;
- (void)setCurrentApplyStickerInfo:(id)arg0;
- (id)vePerformance;
- (void)setVePerformance:(id)arg0;
- (id /* block */)veperformancecallback;
- (void)setVeperformancecallback:(id /* block */)arg0;
- (id)imageFromPixelBuffer:(struct __CVBuffer { } *)arg0;
- (void)turnScan:(BOOL)arg0 param:(id)arg1 scanEditResult:(id /* block */)arg2;
- (void)setRwLock:(struct _opaque_pthread_mutex_t { long long x0; char x1[56]; })arg0;
- (struct _opaque_pthread_mutex_t { long long x0; char x1[56]; })rwLock;
- (void)movieRecordingDuration:(double)arg0;
- (void)movieRecordingReachedLimitMaxTime;
- (BOOL)useEffectRecordRate;
- (BOOL)isBytevc;
- (void)setIsBytevc:(BOOL)arg0;
- (double)startWritingTime;
- (void)setStartWritingTime:(double)arg0;
- (void)setProfile:(id)arg0;
- (long long)exposureMode;
- (id /* block */)messageHandler;
- (float)ISO;
- (long long)focusMode;
- (id)activeFormat;
- (struct { long long x0; int x1; unsigned int x2; long long x3; })exposureDuration;
- (void)addObserver:(id)arg0 forKeyPath:(id)arg1 options:(unsigned long long)arg2 context:(void *)arg3;
- (void)removeObserver:(id)arg0 forKeyPath:(id)arg1;
- (void)removeObserver:(id)arg0 forKeyPath:(id)arg1 context:(void *)arg2;
- (BOOL)hasAudioTrack;
- (unsigned long long)fragmentCount;
- (unsigned long long)fragmentCount;
- (unsigned long long)primaryConstituentDeviceRestrictedSwitchingBehaviorConditions;
- (long long)cameraType;
- (void)setConfig:(id)arg0;
- (double)musicVolume;
- (id)deviceType;
- (void)setRecordType:(int)arg0;
- (void)active;
- (void).cxx_destruct;
- (id)virtualDeviceSwitchOverVideoZoomFactors;
- (id)virtualDeviceSwitchOverVideoZoomFactors;
- (struct CGPoint { double x0; double x1; })focusPoint;
- (int)recordType;
- (double)exposureBias;
- (long long)status;
- (void)setFocusMode:(long long)arg0;
- (double)timeStamp;
- (id)config;
- (void)inactive;
- (unsigned long long)activeColorSpace;
- (BOOL)handleTouchEvent:(struct CGPoint { double x0; double x1; })arg0;
- (BOOL)isMultiCamSession;
- (struct CGSize { double x0; double x1; })outputSize;
- (long long)orientation;
- (struct CGSize { double x0; double x1; })renderSize;
- (unsigned long long)bitrate;
- (void)removePlayer:(id /* block */)arg0;
- (void)registerObserver:(id)arg0;
- (id)profile;
- (void)stopAudioCapture;
- (double)maxAvailableVideoZoomFactor;
- (double)maxAvailableVideoZoomFactor;
- (id)previewContainer;
- (void)cancelWriting;
- (void)setIsDegraded:(BOOL)arg0;
- (void)setExposureMode:(long long)arg0;
- (void)setStatus:(long long)arg0;
- (id)fallbackPrimaryConstituentDevices;
- (BOOL)startAudioCapture;
- (void)setMessageHandler:(id /* block */)arg0;
- (id)activePrimaryConstituentDevice;
- (struct { long long x0; int x1; unsigned int x2; long long x3; })activeVideoMaxFrameDuration;
- (BOOL)setPrimaryConstituentDeviceSwitchingBehavior:(long long)arg0 restrictedSwitchingBehaviorConditions:(unsigned long long)arg1;
- (void)setOrientation:(long long)arg0;
- (id)mainContext;
- (id)previewView;
- (id)supportedFallbackPrimaryConstituentDevices;
- (long long)primaryConstituentDeviceSwitchingBehavior;
- (float)maxISO;
- (struct { long long x0; int x1; unsigned int x2; long long x3; })activeVideoMinFrameDuration;
- (double)minAvailableVideoZoomFactor;
- (double)minAvailableVideoZoomFactor;
- (void)dealloc;
- (BOOL)isDegraded;
- (void)observeValueForKeyPath:(id)arg0 ofObject:(id)arg1 change:(id)arg2 context:(void *)arg3;
- (void)removeObserver:(id)arg0;
- (id).cxx_construct;
- (float)minISO;
- (void)setTimeStamp:(double)arg0;
- (void)startVideoCapture;
- (void)stopVideoCapture;
- (long long)cameraFlashMode;
- (void)setCameraFlashMode:(long long)arg0;
- (void)setFrameSize:(struct CGSize { double x0; double x1; })arg0;
- (void)setCameraType:(long long)arg0;
- (void)setInputLanguage:(id)arg0;
- (struct CGSize { double x0; double x1; })frameSize;
- (long long)audioMode;
- (void)setAudioMode:(long long)arg0;
- (void)setBitrate:(unsigned long long)arg0;
- (long long)recordStatus;
- (void)setRecordStatus:(long long)arg0;
- (void)setOutputSize:(struct CGSize { double x0; double x1; })arg0;
- (void)addSticker:(id)arg0;
- (double)videoZoomFactorUpscaleThreshold;
- (double)videoZoomFactorUpscaleThreshold;
- (BOOL)isVirtualDevice;
- (id)constituentDevices;
- (void)setHasAudioTrack:(BOOL)arg0;
- (double)maxAcceleration;
- (void)setMaxAcceleration:(double)arg0;
- (void)setAudioBufferCallback:(id /* block */)arg0;
- (struct { long long x0; int x1; unsigned int x2; long long x3; })livePhotoDuration;
- (void)setMainContext:(id)arg0;
- (id)currentCamera;
- (void)setCurrentCamera:(id)arg0;
- (unsigned long long)sessionMode;
- (BOOL)handleRotationEvent:(double)arg0;
- (void)setTorchOn:(BOOL)arg0;
- (BOOL)torchOn;
- (void)setSessionMode:(unsigned long long)arg0;
- (int)writerMode;
- (long long)previewModeType;
- (void)setPreviewModeType:(long long)arg0;
- (long long)cameraMode;
- (void)setCameraMode:(long long)arg0;
- (id)propertySet;
- (void)setupAudioSession;

@end
