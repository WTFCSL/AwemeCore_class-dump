//
//     Generated by private class-dump
//

@class BDPDynamicPluginModelStore, NSMutableDictionary, BDPDynamicPluginFileStorage, NSString, NSObject;
@protocol OS_dispatch_semaphore;

@interface BDPDynamicPluginManager : NSObject <BDPDynamicPluginLoadMessage, BDPAppPreloadMessage, BDPBusinessUpdateHandlerProtocol> {
    BDPDynamicPluginModelStore *_modelStore;
    NSMutableDictionary *_downloadingPlugin;
    NSMutableDictionary *_unzipPlugin;
    NSMutableDictionary *_loaderRefCountMap;
    NSObject<OS_dispatch_semaphore> *_loaderRefCountMapLock;
    BDPDynamicPluginFileStorage *_pluginStorage;
}

@property (retain, nonatomic) NSMutableDictionary *downloadingPlugin;
@property (retain, nonatomic) NSMutableDictionary *unzipPlugin;
@property (retain, nonatomic) NSMutableDictionary *loaderRefCountMap;
@property (retain, nonatomic) NSObject<OS_dispatch_semaphore> *loaderRefCountMapLock;
@property (retain, nonatomic) BDPDynamicPluginModelStore *modelStore;
@property (retain, nonatomic) BDPDynamicPluginFileStorage *pluginStorage;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (void)bootstrapLaunch;
+ (void)updateRelativeDataIfNeed;
+ (id)pluginLoaderWithId:(id)arg0;
+ (void)retainLoader:(id)arg0;
+ (void)releaseLoader:(id)arg0;
+ (void)addNewPluginModel:(id)arg0;
+ (void)updateAllInnerPluginsIfNeeded;
+ (void)lifeCycleWorkBeforeLoad;
+ (id)pluginPathFromModel:(id)arg0;
+ (void)unzipLocalPlugin:(id)arg0 pluginVersion:(id)arg1 localPath:(id)arg2 completion:(id /* block */)arg3;
+ (void)updatePluign:(id)arg0 updateType:(long long)arg1 completion:(id /* block */)arg2;
+ (void)metaEndLogWithSchema:(id)arg0 beginDate:(id)arg1 response:(id)arg2 model:(id)arg3 error:(id)arg4;
+ (BOOL)checkModel:(id)arg0 andMoveFileFrom:(id)arg1 finalPath:(id)arg2 error:(id *)arg3;
+ (void)pkgDownloadEndLogWithSchema:(id)arg0 beginDate:(id)arg1 model:(id)arg2 response:(id)arg3 error:(id)arg4;
+ (void)updatePluign:(id)arg0 schema:(id)arg1 updateType:(long long)arg2 completion:(id /* block */)arg3;
+ (void)squeueUpdateAllInnerPlugins:(id)arg0;
+ (id)loaderRefCountKeyForLoader:(id)arg0;
+ (id)loaderRefCountKeyForPluginName:(id)arg0 version:(id)arg1;
+ (id)sharedManager;

- (id)modelStore;
- (void)appPreloadHasBeenTriggeredWithInfos:(id)arg0;
- (void)retainLoader:(id)arg0;
- (void)releaseLoader:(id)arg0;
- (void)loadFile:(id)arg0 fromDynamicPlugin:(id)arg1 isSync:(BOOL)arg2 completion:(id /* block */)arg3;
- (void)clearCacheExtremely;
- (void)updatePluginAsyncIfNeeded:(id)arg0;
- (id)unzipPlugin;
- (id)pluginStorage;
- (id)downloadingPlugin;
- (void)deleteOldPluginFile;
- (long long)pluginUseStateForModel:(id)arg0;
- (void)cleanPluginForModel:(id)arg0;
- (id)loaderRefCountMapLock;
- (id)loaderRefCountMap;
- (void)cleanPluginIfNeedForName:(id)arg0 belowVersion:(id)arg1;
- (void)setModelStore:(id)arg0;
- (void)setDownloadingPlugin:(id)arg0;
- (void)setUnzipPlugin:(id)arg0;
- (void)setLoaderRefCountMap:(id)arg0;
- (void)setLoaderRefCountMapLock:(id)arg0;
- (void)setPluginStorage:(id)arg0;
- (id)init;
- (void).cxx_destruct;

@end
