//
//     Generated by private class-dump
//

@class XPlayVEGTrackEventHandler, TTAirPlayMessageSender, NSMutableDictionary, VeGameConfigObject, TTAirPlayAudioPuller, BTDBaseLoadTimeMonitor, XPlayTrackHelper, XPlayGameTopView, UIViewController, BTDBaseNetStatusDetector, XPlayConfiguration, NSString, XPlayQualityStatsModel, XPlayTimeRecorder, XPlayVEGDelegateDispatcher, XPlayBlockRateProcesser, VeGameManager;
@protocol XPlayPermissionDelegate, XPlayScreenRecordProtocol, XPlayUserInfoProtocol, XPlayKeyboardProtocol, XPlayItemDelegate, XPlayItemBusinessDelegate;

@interface XPlayVEGItem : XPlayItem <VeGameManagerDelegate, BTDLoadTimeoutObserver, BTDAudioPullerDelegate, XPlayItemProtocol> {
    BOOL _needResumeWhenBecomeActive;
    BOOL _isMicrophoneRecording;
    VeGameConfigObject *_configObj;
    VeGameManager *_veGameManager;
    BTDBaseLoadTimeMonitor *_loadMoniter;
    TTAirPlayAudioPuller *_audioPuller;
    BTDBaseNetStatusDetector *_networkDetector;
    XPlayVEGTrackEventHandler *_trackEventHandler;
    XPlayVEGDelegateDispatcher *_delegateDispatcher;
    TTAirPlayMessageSender *_messageSender;
}

@property (retain, nonatomic) VeGameConfigObject *configObj;
@property (retain, nonatomic) VeGameManager *veGameManager;
@property (retain, nonatomic) BTDBaseLoadTimeMonitor *loadMoniter;
@property (retain, nonatomic) TTAirPlayAudioPuller *audioPuller;
@property (retain, nonatomic) BTDBaseNetStatusDetector *networkDetector;
@property (retain, nonatomic) XPlayVEGTrackEventHandler *trackEventHandler;
@property (retain, nonatomic) XPlayVEGDelegateDispatcher *delegateDispatcher;
@property (retain, nonatomic) TTAirPlayMessageSender *messageSender;
@property (nonatomic) BOOL needResumeWhenBecomeActive;
@property (nonatomic) BOOL isMicrophoneRecording;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (weak, nonatomic) id<XPlayItemDelegate> delegate;
@property (weak, nonatomic) id<XPlayItemBusinessDelegate> businessDelegate;
@property (weak, nonatomic) id<XPlayPermissionDelegate> permissionDelegate;
@property (readonly, copy, nonatomic) NSString *core;
@property (readonly, copy, nonatomic) NSString *itemId;
@property (retain, nonatomic) XPlayConfiguration *configuration;
@property (retain, nonatomic) id<XPlayUserInfoProtocol> userSession;
@property (retain, nonatomic) UIViewController *controller;
@property (retain, nonatomic) XPlayGameTopView *view;
@property (retain, nonatomic) XPlayTrackHelper *trackHelper;
@property (retain, nonatomic) XPlayTimeRecorder *recorder;
@property (nonatomic) unsigned long long status;
@property (copy, nonatomic) XPlayQualityStatsModel *qualityStats;
@property (retain, nonatomic) XPlayBlockRateProcesser *blockProcesser;
@property (retain, nonatomic) id<XPlayScreenRecordProtocol> screenRecorder;
@property (retain, nonatomic) id<XPlayKeyboardProtocol> keyboard;
@property (retain, nonatomic) NSMutableDictionary *pluggins;
@property (readonly, nonatomic) BOOL useCustomKbps;

- (void)setupObserver;
- (void)setAudioMute:(BOOL)arg0;
- (void)switchResolution:(id)arg0;
- (long long)startNetworkDetection;
- (void)setTrackEventHandler:(id)arg0;
- (id)trackEventHandler;
- (id)audioPuller;
- (void)setIsMicrophoneRecording:(BOOL)arg0;
- (BOOL)isMicrophoneRecording;
- (void)setAudioPuller:(id)arg0;
- (void)onAudioFramePulled:(id)arg0;
- (void)switchResolution:(id)arg0 callback:(id /* block */)arg1;
- (void)switchCustomResolution:(id)arg0 callback:(id /* block */)arg1;
- (void)stopGame;
- (void)stopVideoStreamAndQuitRoomFrom:(id)arg0;
- (void)stopWithoutDismiss;
- (void)stopNetworkDetection;
- (void)setNeedResumeWhenBecomeActive:(BOOL)arg0;
- (BOOL)needResumeWhenBecomeActive;
- (void)sendMessage:(id)arg0 callback:(id /* block */)arg1;
- (void)gameManager:(id)arg0 startSucceedResult:(id)arg1 rtcAppId:(id)arg2 roomId:(id)arg3 rtcUserId:(id)arg4 podId:(id)arg5 podUserId:(id)arg6 videoStreamProfileId:(long long)arg7 reservedId:(id)arg8 planId:(id)arg9 extra:(id)arg10;
- (void)gameManager:(id)arg0 onFirstRemoteVideoFrameDecoded:(long long)arg1 height:(long long)arg2;
- (void)gameManager:(id)arg0 changedDeviceRotation:(long long)arg1;
- (void)gameManager:(id)arg0 onPodExit:(unsigned long long)arg1;
- (void)gameManager:(id)arg0 switchVideoStreamParameter:(int)arg1 width:(int)arg2 height:(int)arg3 frameRate:(int)arg4 maxKbps:(int)arg5 minKbps:(int)arg6;
- (void)gameManager:(id)arg0 onRemoteVideoStateChanged:(id)arg1 withVideoState:(long long)arg2 withVideoStateReason:(long long)arg3;
- (void)gameManager:(id)arg0 onNetworkDetectionResult:(unsigned long long)arg1 quality:(unsigned long long)arg2 rtt:(int)arg3 lostRate:(double)arg4 bitrate:(int)arg5 jitter:(int)arg6;
- (void)gameManager:(id)arg0 onNetworkDetectionStopped:(unsigned long long)arg1;
- (void)startAudioCaptureRequestFromGameManager:(id)arg0;
- (void)stopAudioCaptureRequestFromGameManager:(id)arg0;
- (void)gameManager:(id)arg0 onUserPublishStream:(id)arg1 type:(long long)arg2;
- (void)gameManager:(id)arg0 receivedBinaryMessage:(long long)arg1 subtype:(long long)arg2 pbData:(id)arg3;
- (void)gameManager:(id)arg0 onRemoteStreamStats:(id)arg1;
- (void)gameManager:(id)arg0 onError:(unsigned long long)arg1;
- (void)gameManager:(id)arg0 onUserJoined:(id)arg1;
- (id)veGameManager;
- (id)delegateDispatcher;
- (id)rtcCustomInitParams;
- (void)setConfigObj:(id)arg0;
- (id)configObj;
- (id)loadMoniter;
- (void)veg_callbackPlayStatusDidUpdated:(unsigned long long)arg0 info:(id)arg1;
- (id)networkDetector;
- (void)timeoutDidOccurWithType:(long long)arg0;
- (void)setVeGameManager:(id)arg0;
- (void)setLoadMoniter:(id)arg0;
- (void)setNetworkDetector:(id)arg0;
- (void)setDelegateDispatcher:(id)arg0;
- (void)_applicationWillResignActive:(id)arg0;
- (void)resume;
- (id)messageSender;
- (void).cxx_destruct;
- (void)_applicationDidBecomeActive:(id)arg0;
- (void)setMessageSender:(id)arg0;
- (void)preload;
- (void)stop;
- (id)initWithConfiguration:(id)arg0;
- (void)stopAudioCapture;
- (void)_applicationDidEnterBackground:(id)arg0;
- (void)startAudioCapture;
- (void)_applicationWillTerminate:(id)arg0;
- (void)dealloc;
- (void)play;
- (void)pause;
- (id)screenRecorder;

@end
