//
//     Generated by private class-dump
//

@class NSArray, MMKV, NSString, TIMXSDKInstance;

@interface TIMXCloudConfigManager : NSObject <TIMXInstanceScopeSingleton> {
    BOOL _sharkEnabled;
    BOOL _autoPollingMsgEnabled;
    BOOL _triggerPollingMsgEnabled;
    BOOL _repairEnabled;
    BOOL _onlyCheckNotRepair;
    BOOL _isPreStartPolling;
    BOOL _p2pEnabled;
    BOOL _useNewRepairStrategy;
    int _conversationMsgRepairCount;
    float _conversationMsgRepairRatio;
    int _repairBatchNum;
    long long _defaultPollingMsgInterval;
    long long _conversationMsgRepairInterval;
    long long _conversationMsgRepairStart;
    long long _p2pMinInterval;
    double _strangerOfflinePullInterval;
    double _generalOfflinePullInterval;
    NSArray *_forceHttpCmd;
    MMKV *_mmkk;
    TIMXSDKInstance *_r;
}

@property (retain, nonatomic) MMKV *mmkk;
@property (nonatomic) BOOL enableUseSettings;
@property (nonatomic) BOOL sharkEnabled;
@property (nonatomic) BOOL autoPollingMsgEnabled;
@property (nonatomic) BOOL triggerPollingMsgEnabled;
@property (nonatomic) long long defaultPollingMsgInterval;
@property (nonatomic) BOOL repairEnabled;
@property (nonatomic) BOOL onlyCheckNotRepair;
@property (nonatomic) long long conversationMsgRepairInterval;
@property (nonatomic) long long conversationMsgRepairStart;
@property (nonatomic) int conversationMsgRepairCount;
@property (nonatomic) float conversationMsgRepairRatio;
@property (nonatomic) BOOL isPreStartPolling;
@property (nonatomic) BOOL p2pEnabled;
@property (nonatomic) long long p2pMinInterval;
@property (nonatomic) BOOL useNewRepairStrategy;
@property (nonatomic) int repairBatchNum;
@property (nonatomic) double strangerOfflinePullInterval;
@property (nonatomic) double generalOfflinePullInterval;
@property (copy) NSArray *forceHttpCmd;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (id)getObjectOfClass:(Class)arg0 forKey:(id)arg1;
- (long long)getInt64ForKey:(id)arg0;
- (double)getDoubleForKey:(id)arg0;
- (BOOL)sharkEnabled;
- (BOOL)enableUseSettings;
- (void)updateConfigWithDictionary:(id)arg0 enableUseSettings:(BOOL)arg1;
- (BOOL)triggerPollingMsgEnabled;
- (long long)defaultPollingMsgInterval;
- (void)setUseNewRepairStrategy:(BOOL)arg0;
- (void)setRepairBatchNum:(int)arg0;
- (void)setEnableUseSettings:(BOOL)arg0;
- (void)updateConfigWithSettings:(id)arg0;
- (id)mmkk;
- (void)setTimeInterval:(long long)arg0 forkey:(id)arg1;
- (void)setSharkEnabled:(BOOL)arg0;
- (BOOL)autoPollingMsgEnabled;
- (void)setAutoPollingMsgEnabled:(BOOL)arg0;
- (void)setTriggerPollingMsgEnabled:(BOOL)arg0;
- (void)setDefaultPollingMsgInterval:(long long)arg0;
- (BOOL)repairEnabled;
- (void)setRepairEnabled:(BOOL)arg0;
- (BOOL)onlyCheckNotRepair;
- (void)setOnlyCheckNotRepair:(BOOL)arg0;
- (long long)conversationMsgRepairInterval;
- (void)setConversationMsgRepairInterval:(long long)arg0;
- (long long)conversationMsgRepairStart;
- (void)setConversationMsgRepairStart:(long long)arg0;
- (int)conversationMsgRepairCount;
- (void)setConversationMsgRepairCount:(int)arg0;
- (float)conversationMsgRepairRatio;
- (void)setConversationMsgRepairRatio:(float)arg0;
- (BOOL)isPreStartPolling;
- (void)setIsPreStartPolling:(BOOL)arg0;
- (BOOL)p2pEnabled;
- (void)setP2pEnabled:(BOOL)arg0;
- (long long)p2pMinInterval;
- (void)setP2pMinInterval:(long long)arg0;
- (BOOL)useNewRepairStrategy;
- (int)repairBatchNum;
- (void)setMmkk:(id)arg0;
- (id)syncCloudConfigPreCheck;
- (void)updateConfigs:(id)arg0;
- (BOOL)enableConfigGetOpt;
- (void)saveCloudConfig:(id)arg0;
- (id)getSaveCloudConfig;
- (void)setForceHttpCmd:(id)arg0;
- (void)setStrangerOfflinePullInterval:(double)arg0;
- (void)setGeneralOfflinePullInterval:(double)arg0;
- (void)syncCloudConfigCompletion:(id /* block */)arg0;
- (BOOL)needFixForKey:(id)arg0;
- (double)strangerOfflinePullInterval;
- (double)generalOfflinePullInterval;
- (id)forceHttpCmd;
- (void)setDouble:(double)arg0 forKey:(id)arg1;
- (void).cxx_destruct;
- (void)setObject:(id)arg0 forKey:(id)arg1;
- (void)setInt64:(long long)arg0 forKey:(id)arg1;
- (id)initWithRootObject:(id)arg0;

@end
