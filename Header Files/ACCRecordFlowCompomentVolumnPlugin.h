//
//     Generated by private class-dump
//

@class MPVolumeView, ACCRecordFlowComponent, NSString, UIButton;
@protocol ACCRecordSwitchModeService, ACCRecordPropService, ACCRecordFlowControlService, ACCRecorderViewContainer, ACCAdvancedRecordSettingService, ACCRecordDualService, ACCShootSourceService, ACCFeatureComponent, ACCRecordButtonService, ACCRecordFlowService, ACCCameraService;

@interface ACCRecordFlowCompomentVolumnPlugin : ACCFeatureComponent <ACCPanelViewDelegate, ACCRecordFlowServiceSubscriber, ACCRecordSwitchModeServiceSubscriber, ACCAdvancedRecordSettingServiceSubScriber, ACCRecordButtonServiceSubscriber, ACCRecordFlowControlServiceSubscriber, ACCFeatureComponentPlugin> {
    BOOL _enableVolumeToShoot;
    BOOL _hasAddedVolumeChangeObserver;
    BOOL _isFirstTimeOfTappingVolumeButton;
    BOOL _shouldBlockVolumnButtonTriggersTheShoot;
    BOOL _hasAddApplicationActiveNotification;
    float _originalVolume;
    id<ACCFeatureComponent> _component;
    id<ACCRecorderViewContainer> _viewContainer;
    id<ACCRecordFlowService> _flowService;
    id<ACCRecordPropService> _propService;
    id<ACCRecordSwitchModeService> _switchModeService;
    id<ACCCameraService> _cameraService;
    id<ACCAdvancedRecordSettingService> _advanceSettingService;
    id<ACCRecordButtonService> _recordButtonService;
    id<ACCRecordDualService> _dualService;
    id<ACCShootSourceService> _shootSourceService;
    id<ACCRecordFlowControlService> _flowControlService;
    long long _numberOfVolumeButtonCallbacks;
    MPVolumeView *_volumeView;
    double _timeToStartRecordTriggeredByVolumeButton;
    UIButton *_recordButton;
}

@property (class, readonly, nonatomic) id hostIdentifier;

@property (retain, nonatomic) id<ACCRecorderViewContainer> viewContainer;
@property (retain, nonatomic) id<ACCRecordFlowService> flowService;
@property (retain, nonatomic) id<ACCRecordPropService> propService;
@property (retain, nonatomic) id<ACCRecordSwitchModeService> switchModeService;
@property (retain, nonatomic) id<ACCCameraService> cameraService;
@property (retain, nonatomic) id<ACCAdvancedRecordSettingService> advanceSettingService;
@property (retain, nonatomic) id<ACCRecordButtonService> recordButtonService;
@property (retain, nonatomic) id<ACCRecordDualService> dualService;
@property (retain, nonatomic) id<ACCShootSourceService> shootSourceService;
@property (retain, nonatomic) id<ACCRecordFlowControlService> flowControlService;
@property (readonly, weak, nonatomic) ACCRecordFlowComponent *hostComponent;
@property (nonatomic) BOOL hasAddedVolumeChangeObserver;
@property (nonatomic) long long numberOfVolumeButtonCallbacks;
@property (retain, nonatomic) MPVolumeView *volumeView;
@property (nonatomic) float originalVolume;
@property (nonatomic) BOOL isFirstTimeOfTappingVolumeButton;
@property (nonatomic) double timeToStartRecordTriggeredByVolumeButton;
@property (nonatomic) BOOL shouldBlockVolumnButtonTriggersTheShoot;
@property (nonatomic) BOOL hasAddApplicationActiveNotification;
@property (weak, nonatomic) UIButton *recordButton;
@property (nonatomic) BOOL enableVolumeToShoot;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (weak, nonatomic) id<ACCFeatureComponent> component;

+ (id)hostIdentifier;

- (void)setVolumeView:(id)arg0;
- (void)bindViewModel;
- (id)cameraService;
- (void)setCameraService:(id)arg0;
- (id)lastWindow;
- (id)systemVolumeDidChangeNotification;
- (void)componentDidMount;
- (void)componentDidUnmount;
- (void)componentDidAppear;
- (void)componentDidDisappear;
- (void)bindServices:(id)arg0;
- (id)hostComponent;
- (void)addVolumeChangeObserver;
- (void)addApplicationActiveNotification;
- (id)flowService;
- (id)switchModeService;
- (void)removeApplicationActiveNotification;
- (BOOL)hasAddedVolumeChangeObserver;
- (void)volumeClicked:(id)arg0;
- (void)setHasAddedVolumeChangeObserver:(BOOL)arg0;
- (BOOL)hasAddApplicationActiveNotification;
- (void)setHasAddApplicationActiveNotification:(BOOL)arg0;
- (void)flowServiceStateDidChanged:(unsigned long long)arg0 preState:(unsigned long long)arg1;
- (void)panelViewController:(id)arg0 willShowPanelView:(id)arg1;
- (void)panelViewController:(id)arg0 didDismissPanelView:(id)arg1;
- (void)switchModeServiceDidChangeMode:(id)arg0 oldMode:(id)arg1;
- (void)setFlowService:(id)arg0;
- (void)setSwitchModeService:(id)arg0;
- (BOOL)isFromIM;
- (id)volumeSider;
- (id)flowControlService;
- (void)setFlowControlService:(id)arg0;
- (id)propService;
- (void)setPropService:(id)arg0;
- (id)shootSourceService;
- (void)setShootSourceService:(id)arg0;
- (void)removeVolumeChangeObserver;
- (void)trackFirstTimeOfTappingVolumeButton;
- (BOOL)isFirstTimeOfTappingVolumeButton;
- (void)setIsFirstTimeOfTappingVolumeButton:(BOOL)arg0;
- (BOOL)isModeTakePicture;
- (BOOL)isModeStory;
- (BOOL)isModeMix;
- (void)advancedRecordSettingService:(id)arg0 configure:(unsigned long long)arg1 switchStatueChangeTo:(BOOL)arg2 needSync:(BOOL)arg3;
- (id)dualService;
- (void)setDualService:(id)arg0;
- (id)recordButtonService;
- (void)executePropPanelRecordBeganTask;
- (void)setRecordButtonService:(id)arg0;
- (void)openVolumnButtonTriggersTheShoot;
- (void)closeVolumnButtonTriggersTheShoot;
- (id)advanceSettingService;
- (BOOL)blockVolumnButtonTriggersTheShootFlag;
- (void)hideSystemVolumeView:(BOOL)arg0;
- (BOOL)enableiOS16Fix;
- (BOOL)enableVolumnButtonTriggersTheShootFlag;
- (BOOL)isModeSupportVolumeButton;
- (BOOL)enableVolumeToShoot;
- (BOOL)isPhotoM;
- (BOOL)enableVolumnButtonTriggersTheShoot;
- (BOOL)shouldBlockVolumnButtonTriggersTheShoot;
- (void)setOriginalVolume:(float)arg0;
- (float)originalVolume;
- (void)closeVolumnButtonTriggersTheShootForce;
- (void)clearVolumeButtonRelatedFlag;
- (long long)numberOfVolumeButtonCallbacks;
- (void)setNumberOfVolumeButtonCallbacks:(long long)arg0;
- (void)handleVolumeClickedEventWithNotification:(id)arg0;
- (BOOL)isDeviceAuthorizedForPreStage;
- (BOOL)p_isCurrentVCOnFrontWindow;
- (void)triggerShootSource;
- (BOOL)p_restoreSysVolumeIfNeeded:(double)arg0;
- (void)handleTapToTakePictureAndHoldToRecordCase;
- (void)handleTakePictureCase;
- (void)handleTapAndHoldToRecordCase;
- (void)handlePhotoMTakePicture;
- (double)timeToStartRecordTriggeredByVolumeButton;
- (BOOL)enableStoryTabInRecorder;
- (void)beginRecordByVolumeButton:(BOOL)arg0;
- (void)beginRecordByVolumeButtonWhenDisableStoryTabInRecorder;
- (void)setTimeToStartRecordTriggeredByVolumeButton:(double)arg0;
- (void)endRecordByVolumeButton:(BOOL)arg0;
- (void)endRecordByVolumeButtonWhenDisableStoryTabInRecorder;
- (void)takePictureInTapTriggerRecordingMode;
- (void)setShouldBlockVolumnButtonTriggersTheShoot:(BOOL)arg0;
- (void)configBtnAsShooting:(BOOL)arg0 needSync:(BOOL)arg1;
- (void)setEnableVolumeToShoot:(BOOL)arg0;
- (void)addVolumeButtonCallbacks;
- (void)handleShootSourceEndWithCallbackNumbers:(long long)arg0 delay:(double)arg1 isHolding:(BOOL)arg2;
- (void)blockVolumnButtonTriggersTheShoot;
- (BOOL)hasSetMusic;
- (void)setAdvanceSettingService:(id)arg0;
- (void)applicationWillResignActive:(id)arg0;
- (void).cxx_destruct;
- (id)component;
- (void)applicationDidBecomeActive:(id)arg0;
- (void)setVolume:(double)arg0;
- (void)dealloc;
- (void)takePicture;
- (id)volumeView;
- (void)setComponent:(id)arg0;
- (id)viewContainer;
- (void)setViewContainer:(id)arg0;
- (id)recordButton;
- (void)setRecordButton:(id)arg0;
- (BOOL)isDeviceAuthorized;

@end
