//
//     Generated by private class-dump
//

@class NSString, NSMutableData, NSMutableArray, LEBAsyncSocket;
@protocol LBLelinkBaseSocketConnectionDelegate;

@interface LBLelinkBaseSocket : NSObject <LEBAsyncSocketDelegate> {
    struct { unsigned char x0[64]; unsigned char x1[32]; unsigned char x2[32]; unsigned char x3[32]; unsigned char x4[32]; unsigned char x5[32]; unsigned char x6[32]; unsigned char x7[32]; unsigned char x8[32]; } *pairSessionRef;
    struct { struct srp_st_lb *x0; struct cstr_st_lb *x1; struct cstr_st_lb *x2; struct cstr_st_lb *x3; struct cstr_st_lb *x4; struct cstr_st_lb *x5; struct cstr_st_lb *x6; struct srp_meth_st_lb *x7; unsigned char x8[32]; struct srp_st_lb *x9; struct cstr_st_lb *x10; struct cstr_st_lb *x11; struct cstr_st_lb *x12; struct cstr_st_lb *x13; struct cstr_st_lb *x14; struct cstr_st_lb *x15; struct srp_meth_st_lb *x16; unsigned char x17[32]; char x18[64]; char x19[64]; unsigned char x20[16]; long long x21; } *srpAuthSession;
    struct { unsigned int x0[16]; unsigned int x1[16]; unsigned long long x2; } *ecrypt_ctx;
    struct { unsigned int x0[16]; unsigned int x1[16]; unsigned long long x2; } *decrypt_ctx;
    long long _atvInt;
    long long _etvInt;
    long long _htvInt;
    NSString *_sessionId;
    NSString *_screenCode;
    NSString *_ipAddress;
    id<LBLelinkBaseSocketConnectionDelegate> _connectionDelegate;
    long long _waitReplyTag;
    LEBAsyncSocket *_asyncScoket;
    NSMutableData *_receivedPacketQueue;
    NSMutableArray *_writeSingleDataQueue;
    NSString *_hid;
    NSString *_cu;
    long long _cseq;
}

@property (retain, nonatomic) LEBAsyncSocket *asyncScoket;
@property (retain, nonatomic) NSMutableData *receivedPacketQueue;
@property (retain, nonatomic) NSMutableArray *writeSingleDataQueue;
@property (copy, nonatomic) NSString *hid;
@property (copy, nonatomic) NSString *cu;
@property (nonatomic) long long cseq;
@property (nonatomic) long long atvInt;
@property (nonatomic) long long etvInt;
@property (nonatomic) long long htvInt;
@property (copy, nonatomic) NSString *sessionId;
@property (copy, nonatomic) NSString *screenCode;
@property (readonly, nonatomic) BOOL isConnect;
@property (readonly, copy, nonatomic) NSString *ipAddress;
@property (weak, nonatomic) id<LBLelinkBaseSocketConnectionDelegate> connectionDelegate;
@property (nonatomic) long long waitReplyTag;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (BOOL)isConnect;
- (void)connectToServerWithIp:(id)arg0 portId:(long long)arg1;
- (void)releaseShakeHandsEcryptParam;
- (id)asyncScoket;
- (void)cleanAllParam;
- (long long)htvInt;
- (long long)atvInt;
- (void)initShakeHandsEcryptParam;
- (void)takeApartForPacketFromData:(id)arg0;
- (void)setWriteSingleDataQueue:(id)arg0;
- (void)setWaitReplyTag:(long long)arg0;
- (void)setReceivedPacketQueue:(id)arg0;
- (void)setCseq:(long long)arg0;
- (void)freeSrpInternal;
- (BOOL)encryptHandleWithData:(id)arg0;
- (id)writeSingleDataQueue;
- (void)sendData:(id)arg0 tag:(long long)arg1;
- (id)receivedPacketQueue;
- (BOOL)dencryptVerifyHandleWithData:(id)arg0;
- (BOOL)responseLelinkHttpStatus:(long long)arg0 describe:(id)arg1;
- (void)responseLelinkSetupSingleData:(id)arg0;
- (void)responseLelinkVerifySingleData:(id)arg0;
- (void)responseLelinkVerifySecondSingleData:(id)arg0;
- (void)lelinkVerify;
- (void)lelinkVerifySecond;
- (long long)cseq;
- (long long)etvInt;
- (void)setAsyncScoket:(id)arg0;
- (void)parseSingleData:(id)arg0;
- (long long)waitReplyTag;
- (id)getHeadBasicKeyValue;
- (id)cu;
- (id)hid;
- (void)addSingleDataMayEncryptHandleToQueueSend:(id)arg0;
- (void)disconnectSocket;
- (void)trySendQueueData;
- (void)setHid:(id)arg0;
- (void)setCu:(id)arg0;
- (void)lelinkSetup;
- (id)dataWithPropertyList:(id)arg0;
- (void)lelinkCommandReply;
- (id)screenCode;
- (void)setScreenCode:(id)arg0;
- (void)setAtvInt:(long long)arg0;
- (void)setEtvInt:(long long)arg0;
- (void)setHtvInt:(long long)arg0;
- (id)connectionDelegate;
- (void)setSessionId:(id)arg0;
- (void).cxx_destruct;
- (id)sessionId;
- (void)setConnectionDelegate:(id)arg0;
- (void)dealloc;
- (id)ipAddress;
- (void)socket:(id)arg0 didConnectToHost:(id)arg1 port:(unsigned short)arg2;
- (void)socket:(id)arg0 didReadData:(id)arg1 withTag:(long long)arg2;
- (void)socketDidDisconnect:(id)arg0 withError:(id)arg1;

@end
