//
//     Generated by private class-dump
//

@interface VECrossPlatRecorderSequenceTransformer : NSObject {
    struct unordered_map<void *, std::shared_ptr<TEClip>, std::hash<void *>, std::equal_to<void *>, std::allocator<std::pair<void *const, std::shared_ptr<TEClip>>>> { struct __hash_table<std::__hash_value_type<void *, std::shared_ptr<TEClip>>, std::__unordered_map_hasher<void *, std::__hash_value_type<void *, std::shared_ptr<TEClip>>, std::hash<void *>, std::equal_to<void *>, true>, std::__unordered_map_equal<void *, std::__hash_value_type<void *, std::shared_ptr<TEClip>>, std::equal_to<void *>, std::hash<void *>, true>, std::allocator<std::__hash_value_type<void *, std::shared_ptr<TEClip>>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<void *, std::shared_ptr<TEClip>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<void *, std::shared_ptr<TEClip>>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<void *, std::shared_ptr<TEClip>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<void *, std::shared_ptr<TEClip>>, void *> *> *>>> { void **__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<void *, std::shared_ptr<TEClip>>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<void *, std::shared_ptr<TEClip>>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<void *, std::shared_ptr<TEClip>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<void *, std::shared_ptr<TEClip>>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<void *, std::shared_ptr<TEClip>>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<void *, std::__hash_value_type<void *, std::shared_ptr<TEClip>>, std::hash<void *>, std::equal_to<void *>, true>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<void *, std::__hash_value_type<void *, std::shared_ptr<TEClip>>, std::equal_to<void *>, std::hash<void *>, true>> { float __value_; } __p3_; } __table_; } _assetClipMap;
}

+ (long long)getRecordNum;
+ (struct shared_ptr<rec::TERecordModel> { struct TERecordModel *x0; struct __shared_weak_count *x1; })recorderVideoData2TERecordModel:(id)arg0;
+ (void)addAudioFilterForMic:(double)arg0 withVideoData:(id)arg1;
+ (void)removeTrack:(id)arg0 withVideoData:(id)arg1;
+ (id)addDuetVideoAssetTrack:(id)arg0 videoData:(id)arg1;
+ (void)removeStreamFilterForVideoTrack:(id)arg0 withVideoData:(id)arg1 isGreen:(BOOL)arg2;
+ (void)addStreamFilterForVideoTrack:(id)arg0 isBGVideo:(BOOL)arg1 bgAuxiliaryKey:(id)arg2 withVideoData:(id)arg3;
+ (void)addDummyFilterOnCameraClipWithVideoData:(id)arg0 isGreen:(BOOL)arg1;
+ (struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char *x0; unsigned long long x1; unsigned long long x2; } x0; struct __short { char x0[23]; struct { unsigned char x0; } x1; } x1; struct __raw { unsigned long long x0[3]; } x2; } x0; } x0; } x0; })getDuetClipIdOnTrackWithTrackId:(const void *)arg0 recordModel:(struct shared_ptr<rec::TERecordModel> { struct TERecordModel *x0; struct __shared_weak_count *x1; })arg1;
+ (id)addDuetAudioAssetTrack:(id)arg0 videoData:(id)arg1;
+ (void)addVolumeFilterForAudioTrack:(id)arg0 withVideoData:(id)arg1;
+ (void)removeDummyFilterOnCamerClipWithVideoData:(id)arg0 isGreen:(BOOL)arg1;
+ (void)setVolume:(float)arg0 forAudioTrack:(id)arg1 withVideoData:(id)arg2;
+ (void)replaceAudioData:(id)arg0;
+ (void)udpateRecordNum;
+ (struct shared_ptr<ITEModelEffect> { struct ITEModelEffect *x0; struct __shared_weak_count *x1; })p_addStreamFitlerForVideoTrack:(const void *)arg0 withRecordModel:(struct shared_ptr<rec::TERecordModel> { struct TERecordModel *x0; struct __shared_weak_count *x1; })arg1 isGreen:(BOOL)arg2;
+ (long long)getClipIdIndex;
+ (void)addFeature:(id)arg0 forAsset:(id)arg1 withVideoData:(id)arg2;
+ (void)deleteFeature:(id)arg0 forAsset:(id)arg1 withVideoData:(id)arg2;
+ (void)updateFeature:(id)arg0 forAsset:(id)arg1 withVideoData:(id)arg2;
+ (struct shared_ptr<ITEModelClip> { struct ITEModelClip *x0; struct __shared_weak_count *x1; })getClipForAudioTrack:(id)arg0 withVideoData:(id)arg1;

- (BOOL)p_addTrackWithAsset:(id)arg0 trackIndex:(int)arg1 trackId:(id)arg2 isAudio:(BOOL)arg3 videoData:(id)arg4;
- (void)p_updateTimeLineWithRecordModel:(struct shared_ptr<rec::TERecordModel> { struct TERecordModel *x0; struct __shared_weak_count *x1; })arg0;
- (void)p_updateClipsRecord:(struct shared_ptr<rec::TERecordModel> { struct TERecordModel *x0; struct __shared_weak_count *x1; })arg0;
- (BOOL)p_addAmazingFeature:(id)arg0 asset:(id)arg1 videoData:(id)arg2;
- (BOOL)p_deleteAmazingFeature:(id)arg0 asset:(id)arg1 videoData:(id)arg2;
- (BOOL)p_updateAmazingFeature:(id)arg0 asset:(id)arg1 videoData:(id)arg2;
- (struct shared_ptr<TEClip> { struct TEClip *x0; struct __shared_weak_count *x1; })p_createClipWithAVAsset:(id)arg0 videoData:(id)arg1 type:(int)arg2 errorNum:(id *)arg3;
- (BOOL)p_addAssetClipToTrack:(void *)arg0 videoData:(id)arg1 subTrackAsset:(id)arg2 isAudio:(BOOL)arg3;
- (void).cxx_destruct;
- (id).cxx_construct;

@end
