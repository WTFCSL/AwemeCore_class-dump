//
//     Generated by private class-dump
//

@class NSObject, NSString, NSMutableDictionary, LSGLContext, LSGLFramebuffer, LSGLProgram;
@protocol OS_dispatch_semaphore;

@interface LSGLFilter : LSGLOutput <LSGLInput> {
    LSGLFramebuffer *firstInputFramebuffer;
    LSGLProgram *filterProgram;
    int filterPositionAttribute;
    int filterTextureCoordinateAttribute;
    int filterInputTextureUniform;
    float backgroundColorRed;
    float backgroundColorGreen;
    float backgroundColorBlue;
    float backgroundColorAlpha;
    BOOL isEndProcessing;
    struct CGSize { double width; double height; } currentFilterSize;
    unsigned long long inputRotation;
    BOOL currentlyReceivingMonochromeInput;
    NSMutableDictionary *uniformStateRestorationBlocks;
    NSObject<OS_dispatch_semaphore> *imageCaptureSemaphore;
    BOOL _preventRendering;
    struct __CVBuffer { } *_renderTarget;
    struct CGSize { double width; double height; } _outputFrameSize;
}

@property struct __CVBuffer { } *renderTarget;
@property (nonatomic) BOOL preventRendering;
@property (nonatomic) BOOL currentlyReceivingMonochromeInput;
@property (nonatomic) struct CGSize { double width; double height; } outputFrameSize;
@property (retain, nonatomic) LSGLContext *context;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (const float *)textureCoordinatesForRotation:(unsigned long long)arg0;

- (BOOL)preventRendering;
- (struct CGSize { double x0; double x1; })outputFrameSize;
- (void)renderToTextureWithVertices:(const float *)arg0 textureCoordinates:(const float *)arg1;
- (struct CGSize { double x0; double x1; })rotatedSize:(struct CGSize { double x0; double x1; })arg0 forIndex:(long long)arg1;
- (void)setupFilterForSize:(struct CGSize { double x0; double x1; })arg0;
- (void)setBackgroundColorRed:(float)arg0 green:(float)arg1 blue:(float)arg2 alpha:(float)arg3;
- (void)setInteger:(int)arg0 forUniformName:(id)arg1;
- (void)setFloat:(float)arg0 forUniformName:(id)arg1;
- (void)setSize:(struct CGSize { double x0; double x1; })arg0 forUniformName:(id)arg1;
- (void)setPoint:(struct CGPoint { double x0; double x1; })arg0 forUniformName:(id)arg1;
- (void)setFloatVec3:(struct LSGPUVector3 { float x0; float x1; float x2; })arg0 forUniformName:(id)arg1;
- (void)setFloatVec4:(struct LSGPUVector4 { float x0; float x1; float x2; float x3; })arg0 forUniform:(id)arg1;
- (void)setFloatArray:(float *)arg0 length:(int)arg1 forUniform:(id)arg2;
- (void)setPreventRendering:(BOOL)arg0;
- (void)setRenderTarget:(struct __CVBuffer { } *)arg0;
- (void)setOutputFrameSize:(struct CGSize { double x0; double x1; })arg0;
- (struct CGImage { } *)newCGImageFromCurrentlyProcessedOutput;
- (void)forceProcessingAtSize:(struct CGSize { double x0; double x1; })arg0;
- (void)forceProcessingAtSizeRespectingAspectRatio:(struct CGSize { double x0; double x1; })arg0;
- (void)useNextFrameForImageCapture;
- (void)setInputRotation:(unsigned long long)arg0 atIndex:(long long)arg1;
- (void)setInputFramebuffer:(id)arg0 atIndex:(long long)arg1;
- (void)needRender:(BOOL)arg0;
- (void)newFrameReadyAtTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg0 atIndex:(long long)arg1;
- (void)setInputSize:(struct CGSize { double x0; double x1; })arg0 atIndex:(long long)arg1;
- (void)informTargetsAboutNewFrameAtTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg0;
- (struct CGSize { double x0; double x1; })sizeOfFBO;
- (void)endProcessing;
- (long long)nextAvailableTextureIndex;
- (struct CGSize { double x0; double x1; })maximumOutputSize;
- (id)initWithVertexShaderFromString:(id)arg0 fragmentShaderFromString:(id)arg1 context:(id)arg2;
- (void)setInteger:(int)arg0 forUniform:(int)arg1 program:(id)arg2;
- (void)setFloat:(float)arg0 forUniform:(int)arg1 program:(id)arg2;
- (void)setSize:(struct CGSize { double x0; double x1; })arg0 forUniform:(int)arg1 program:(id)arg2;
- (void)setPoint:(struct CGPoint { double x0; double x1; })arg0 forUniform:(int)arg1 program:(id)arg2;
- (void)setVec3:(struct LSGPUVector3 { float x0; float x1; float x2; })arg0 forUniform:(int)arg1 program:(id)arg2;
- (void)setVec4:(struct LSGPUVector4 { float x0; float x1; float x2; float x3; })arg0 forUniform:(int)arg1 program:(id)arg2;
- (void)setFloatArray:(float *)arg0 length:(int)arg1 forUniform:(int)arg2 program:(id)arg3;
- (void)setAndExecuteUniformStateCallbackAtIndex:(int)arg0 forProgram:(id)arg1 toBlock:(id /* block */)arg2;
- (id)initWithFragmentShaderFromFile:(id)arg0;
- (void)setMatrix3f:(struct LSGPUMatrix3x3 { struct LSGPUVector3 { float x0; float x1; float x2; } x0; struct LSGPUVector3 { float x0; float x1; float x2; } x1; struct LSGPUVector3 { float x0; float x1; float x2; } x2; })arg0 forUniform:(int)arg1 program:(id)arg2;
- (void)setMatrix4f:(struct LSGPUMatrix4x4 { struct LSGPUVector4 { float x0; float x1; float x2; float x3; } x0; struct LSGPUVector4 { float x0; float x1; float x2; float x3; } x1; struct LSGPUVector4 { float x0; float x1; float x2; float x3; } x2; struct LSGPUVector4 { float x0; float x1; float x2; float x3; } x3; })arg0 forUniform:(int)arg1 program:(id)arg2;
- (void)setPointArray:(struct CGPoint { double x0; double x1; } *)arg0 length:(int)arg1 forUniform:(int)arg2 program:(id)arg3;
- (void)setIntegerArray:(int *)arg0 length:(int)arg1 forUniform:(int)arg2 program:(id)arg3;
- (struct CGPoint { double x0; double x1; })rotatedPoint:(struct CGPoint { double x0; double x1; })arg0 forRotation:(unsigned long long)arg1;
- (BOOL)currentlyReceivingMonochromeInput;
- (void)setCurrentlyReceivingMonochromeInput:(BOOL)arg0;
- (id)initWithFragmentShaderFromString:(id)arg0 context:(id)arg1;
- (void)setUniformsForProgramAtIndex:(unsigned long long)arg0;
- (id)initWithContext:(id)arg0;
- (id)init;
- (void).cxx_destruct;
- (void)dealloc;
- (struct __CVBuffer { } *)renderTarget;
- (void)initializeAttributes;
- (id)initWithFragmentShaderFromString:(id)arg0;
- (id)initWithVertexShaderFromString:(id)arg0 fragmentShaderFromString:(id)arg1;
- (void)startProcessing;

@end
