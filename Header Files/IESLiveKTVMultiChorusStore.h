//
//     Generated by private class-dump
//

@class HTSEventContext, IESLiveComponentContext, IESLiveCombineSubject, IESLiveKTVMultiChorusAPI, NSString, IESLiveKTVCommonStore, IESLiveMultiKTVApi, IESLiveKtvSongStruct;
@protocol IESLiveRoomService, IESLiveCompoundSubscription;

@interface IESLiveKTVMultiChorusStore : NSObject <IESLiveDataSyncDelegate, IESLiveSocialInteractAction, IESLiveInteractAction, IESLiveKTVSongListActions, HTSLiveAudienceActions, IESLiveKTVModeSwitchAction, IESLiveKTVActions, IESLiveInteractionLinkerServiceAction, IESLiveKTVMultiChorusRouter> {
    BOOL _hasJoinChannel;
    BOOL _hasJoinedMultiChorus;
    BOOL _hasAudienceSuccessJoined;
    BOOL _joinMultiChorusForConnection;
    id<IESLiveRoomService> _room;
    HTSEventContext *_trackContext;
    IESLiveComponentContext *_componentContext;
    IESLiveKTVMultiChorusAPI *_multiChorusAPI;
    IESLiveMultiKTVApi *_multiKTVApi;
    IESLiveKTVCommonStore *_store;
    unsigned long long _currentLoginUserRoleType;
    IESLiveCombineSubject *_multiChorusUsersUpdateSubject;
    id<IESLiveCompoundSubscription> _disposable;
    long long _multiChorusPlayTime;
    IESLiveKtvSongStruct *_currentMultiChorusSong;
    double _currentMultiChorusSongPlayingTime;
}

@property (retain, nonatomic) id<IESLiveRoomService> room;
@property (retain, nonatomic) HTSEventContext *trackContext;
@property (retain, nonatomic) IESLiveComponentContext *componentContext;
@property (retain, nonatomic) IESLiveKTVMultiChorusAPI *multiChorusAPI;
@property (retain, nonatomic) IESLiveMultiKTVApi *multiKTVApi;
@property (weak, nonatomic) IESLiveKTVCommonStore *store;
@property (nonatomic) unsigned long long currentLoginUserRoleType;
@property (nonatomic) BOOL hasJoinChannel;
@property (nonatomic) BOOL hasJoinedMultiChorus;
@property (retain, nonatomic) IESLiveCombineSubject *multiChorusUsersUpdateSubject;
@property (retain, nonatomic) id<IESLiveCompoundSubscription> disposable;
@property (nonatomic) BOOL hasAudienceSuccessJoined;
@property (nonatomic) BOOL joinMultiChorusForConnection;
@property (nonatomic) long long multiChorusPlayTime;
@property (retain, nonatomic) IESLiveKtvSongStruct *currentMultiChorusSong;
@property (nonatomic) double currentMultiChorusSongPlayingTime;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (id)trackContext;
- (void)setTrackContext:(id)arg0;
- (id)componentContext;
- (void)setComponentContext:(id)arg0;
- (void)didSetAttachingDIContext;
- (void)setDisposable:(id)arg0;
- (id)disposable;
- (void)liveWillEndWithReason:(unsigned long long)arg0;
- (void)subscribedSyncDataWithValue:(id)arg0 version:(long long)arg1;
- (void)subscribedSyncDataUpdatedWithValue:(id)arg0 oldVersion:(long long)arg1 newVersion:(long long)arg2;
- (void)startInteractiveWithScene:(unsigned long long)arg0;
- (void)endInteractiveWithScene:(unsigned long long)arg0;
- (void)didJoinChannelWithLayout:(id)arg0;
- (void)didLeaveChannelWithLayout:(id)arg0;
- (void)handleSyncData:(id)arg0;
- (BOOL)isLinkMicGuestWithUid:(id)arg0;
- (void)interactionLinkerService:(id)arg0 serverUserListDidChangeFrom:(id)arg1 to:(id)arg2;
- (BOOL)hasJoinChannel;
- (void)joinMultiChorusWithMusicModel:(id)arg0 completion:(id /* block */)arg1;
- (void)leaveMultiChorusWithMusicModel:(id)arg0 completion:(id /* block */)arg1;
- (void)didEndKTVWithPlayMode:(int)arg0;
- (BOOL)multiChorusEnable;
- (BOOL)isMultiChorusOnGoning;
- (BOOL)isCurrentLoginUserJoinedMultiChorus;
- (BOOL)joinMultiChorusForConnection;
- (id)currentLoginUserJoinedMultiChorusChangedSignal;
- (BOOL)isUserJoinedMultiChorusWithUserID:(id)arg0;
- (id)multiChorusUsersUpdateSubject;
- (void)updateMultiChorusIfNeededWithSource:(id)arg0;
- (void)stopMultiChorusWithSource:(id)arg0;
- (void)fetchMultiChorusApplyListWithCursor:(id)arg0 completion:(id /* block */)arg1;
- (void)fetchWantToSingSongListWithCursor:(id)arg0 completion:(id /* block */)arg1;
- (void)permitPrepareApplyMultiChorusWithToUserID:(id)arg0 completion:(id /* block */)arg1;
- (BOOL)isMixKTV;
- (void)willStopPlayMusicWithMusicID:(id)arg0;
- (void)didUpdateKTVStageState:(unsigned long long)arg0;
- (void)setHasJoinChannel:(BOOL)arg0;
- (void)trackDidStartKTVWithParams:(id)arg0;
- (id)remotePlayingMusic;
- (id)currentMultiChorusSong;
- (double)currentMultiChorusSongPlayingTime;
- (void)setCurrentMultiChorusSongPlayingTime:(double)arg0;
- (unsigned long long)currentLoginUserRoleType;
- (unsigned long long)roleWithSongStruct:(id)arg0;
- (void)updateCurrentLoginUserRoleType:(unsigned long long)arg0 source:(id)arg1;
- (id)multiChorusAPI;
- (void)requestPermitPrepareApplyMultiChorusWithToUserID:(id)arg0 completion:(id /* block */)arg1;
- (void)setCurrentLoginUserRoleType:(unsigned long long)arg0;
- (void)setHasJoinedMultiChorus:(BOOL)arg0;
- (BOOL)hasJoinedMultiChorus;
- (void)updateRTCSEISenderEnableIfNeeded;
- (void)unMuteSelfIfNeeded;
- (void)toastLowPerformanceForListenerIfNeeded;
- (void)handleCurrentLoginUserRoleTypeChangedFrom:(unsigned long long)arg0 to:(unsigned long long)arg1;
- (void)trackKSongMultiChrousPlayWithMusicModel:(id)arg0;
- (void)handleCurrentLoginUserRoleTypeChangedFromNoneTo:(unsigned long long)arg0;
- (void)handleCurrentLoginUserRoleTypeChangedFromLeaderTo:(unsigned long long)arg0;
- (void)handleCurrentLoginUserRoleTypeChangedFromPlayerTo:(unsigned long long)arg0;
- (void)handleCurrentLoginUserRoleTypeChangedFromListenerTo:(unsigned long long)arg0;
- (void)startMultiChorusAsRole:(unsigned long long)arg0;
- (void)stopMultiChorusAsRole:(unsigned long long)arg0;
- (void)muteSelfIfNeeded;
- (void)setRemoteAudioPlaybackForRole:(unsigned long long)arg0 source:(id)arg1;
- (BOOL)interactiveSceneSupportsMultiChorus:(unsigned long long)arg0;
- (void)tr_ksongMultiChorusJoinSuccessWithMusicModel:(id)arg0;
- (void)setJoinMultiChorusForConnection:(BOOL)arg0;
- (void)requestJoniMultiChorusWithMusicID:(id)arg0 orderUserID:(id)arg1 songType:(int)arg2 completion:(id /* block */)arg3;
- (void)requestLeaveMultiChorusWithMusicID:(id)arg0 orderUserID:(id)arg1 songType:(int)arg2 completion:(id /* block */)arg3;
- (BOOL)hasAudienceSuccessJoined;
- (BOOL)isNoneInteractScene;
- (void)requestCancelPrepareApplyMultiChorusWithCompletion:(id /* block */)arg0;
- (void)handleMultiChorusUpdateWithContent:(id)arg0 msgType:(int)arg1;
- (id)multiChorusSongFromOrderListWithMusicID:(long long)arg0 orderUserID:(long long)arg1;
- (void)processMultiChorusUsersWithMultiChorusInfo:(id)arg0 forSongStruct:(id)arg1;
- (BOOL)isSongStruct:(id)arg0 equalTo:(id)arg1;
- (void)pareapplyJoniMultiChorusIfNeededWithWithMusicID:(id)arg0 orderUserID:(id)arg1 songType:(int)arg2;
- (void)tr_applyJoinMultiChorusWithEvent:(id)arg0;
- (void)applyJoniMultiChorusIfNeededWithMusicID:(id)arg0 orderUserID:(id)arg1 songType:(int)arg2;
- (void)leaveMultiChorusIfNeededWithMusicID:(id)arg0 orderUserID:(id)arg1 songType:(int)arg2;
- (void)requestPrepareApplyMultiChorusWithMuteState:(BOOL)arg0 completion:(id /* block */)arg1;
- (void)toastJoniMultiChorusWithMusicID:(id)arg0 orderUserID:(id)arg1;
- (void)setHasAudienceSuccessJoined:(BOOL)arg0;
- (void)audienceApplyJoniMultiChorusIfNeededWithMusicID:(id)arg0 orderUserID:(id)arg1 songType:(int)arg2;
- (void)updateMultiChorusMixedStreamToCDNAsRole:(unsigned long long)arg0;
- (void)updateSingleViewIfNeededWithDisabled:(BOOL)arg0;
- (void)startMultiChorusCacheSyncAsRole:(unsigned long long)arg0;
- (void)stopMultiChorusCacheSync;
- (void)stopMultiChorusMixedStreamToCDN;
- (long long)liveLinkMultiChorusCacheSyncModeFromRole:(unsigned long long)arg0;
- (unsigned long long)liveLinkMultiChorusRoleFromRole:(unsigned long long)arg0;
- (void)setCurrentMultiChorusSong:(id)arg0;
- (long long)multiChorusPlayTime;
- (void)tr_ksongMultiChrousPlayWithMusicModel:(id)arg0 duration:(long long)arg1;
- (void)setMultiChorusPlayTime:(long long)arg0;
- (BOOL)playModeExcludesMultiChorus:(int)arg0;
- (void)setMultiChorusAPI:(id)arg0;
- (id)multiKTVApi;
- (void)setMultiKTVApi:(id)arg0;
- (void)setMultiChorusUsersUpdateSubject:(id)arg0;
- (id)initWithStore:(id)arg0;
- (void).cxx_destruct;
- (id)store;
- (BOOL)isAnchor;
- (void)setStore:(id)arg0;
- (void)dealloc;
- (id)room;
- (void)setRoom:(id)arg0;
- (void)addObservers;
- (id)currentLoginUserID;

@end
