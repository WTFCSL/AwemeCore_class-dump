//
//     Generated by private class-dump
//

@class NSString, NSMutableAttributedString;

@interface LineSpacingAdaptation : NSObject <NSLayoutManagerDelegate> {
    BOOL _adjustBaseLineOffsetForVerticalAlignCenter;
    BOOL _breakByChar;
    BOOL _enableLayoutRefactor;
    double _calculatedLineSpacing;
    double _baseLineOffsetForVerticalAlignCenter;
    double _halfLeading;
    double _lineHeight;
    double _maxLineAscender;
    double _maxLineDescender;
    long long _textSingleLineVerticalAlign;
    NSMutableAttributedString *_attributedString;
    double _baseline;
}

@property (nonatomic) double calculatedLineSpacing;
@property (nonatomic) BOOL adjustBaseLineOffsetForVerticalAlignCenter;
@property (nonatomic) double baseLineOffsetForVerticalAlignCenter;
@property (nonatomic) BOOL breakByChar;
@property (nonatomic) double halfLeading;
@property (nonatomic) double lineHeight;
@property (nonatomic) double maxLineAscender;
@property (nonatomic) double maxLineDescender;
@property (nonatomic) BOOL enableLayoutRefactor;
@property (nonatomic) long long textSingleLineVerticalAlign;
@property (retain, nonatomic) NSMutableAttributedString *attributedString;
@property (nonatomic) double baseline;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (BOOL)breakByChar;
- (long long)textSingleLineVerticalAlign;
- (void)setTextSingleLineVerticalAlign:(long long)arg0;
- (void)calcTextSingleLineVerticalAlignBaseline:(double)arg0 baselineOffset:(inout double *)arg1;
- (double)calculatedLineSpacing;
- (void)setCalculatedLineSpacing:(double)arg0;
- (BOOL)adjustBaseLineOffsetForVerticalAlignCenter;
- (void)setAdjustBaseLineOffsetForVerticalAlignCenter:(BOOL)arg0;
- (double)baseLineOffsetForVerticalAlignCenter;
- (void)setBaseLineOffsetForVerticalAlignCenter:(double)arg0;
- (void)setBreakByChar:(BOOL)arg0;
- (double)halfLeading;
- (void)setHalfLeading:(double)arg0;
- (double)maxLineAscender;
- (void)setMaxLineAscender:(double)arg0;
- (double)maxLineDescender;
- (void)setMaxLineDescender:(double)arg0;
- (BOOL)enableLayoutRefactor;
- (void)setEnableLayoutRefactor:(BOOL)arg0;
- (double)baseline;
- (void).cxx_destruct;
- (void)setAttributedString:(id)arg0;
- (BOOL)layoutManager:(id)arg0 shouldSetLineFragmentRect:(inout struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)arg1 lineFragmentUsedRect:(inout struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)arg2 baselineOffset:(inout double *)arg3 inTextContainer:(id)arg4 forGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })arg5;
- (id)attributedString;
- (double)lineHeight;
- (double)layoutManager:(id)arg0 lineSpacingAfterGlyphAtIndex:(unsigned long long)arg1 withProposedLineFragmentRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg2;
- (BOOL)layoutManager:(id)arg0 shouldBreakLineByWordBeforeCharacterAtIndex:(unsigned long long)arg1;
- (void)setLineHeight:(double)arg0;
- (void)setBaseline:(double)arg0;

@end
