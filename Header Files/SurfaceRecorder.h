//
//     Generated by private class-dump
//

@class AVAssetWriterInputPixelBufferAdaptor, HeliumApp, AVAssetWriterInput, NSURL, AVURLAsset, AVAssetWriter;

@interface SurfaceRecorder : NSObject <HeliumFrameCallback> {
    unsigned int layer_width;
    unsigned int layer_height;
    unsigned int video_width;
    unsigned int video_height;
    NSURL *fileUrl;
    NSURL *trimUrl;
    double bitsPerPixel;
    struct Canvas { void /* function */ **x0; BOOL x1; struct Context *x2; unsigned int x3; unsigned int x4; unsigned short x5; unsigned short x6; unsigned int x7; struct Drawable *x8; struct CanvasContext *x9; unsigned int x10; } *recordable;
    struct AudioSampler { void /* function */ **_vptr$SampleCallback; struct weak_ptr<au::AudioEngine> { struct AudioEngine *__ptr_; struct __shared_weak_count *__cntrl_; } engine; id /* block */ callback; double time_offset; unsigned long long last_audio_update_time; int buffer[8][512]; int nextSample; int totalSamples; struct opaqueCMFormatDescription *format; } sampler;
    HeliumApp *helium;
    unsigned int fbo;
    AVAssetWriter *assetWriter;
    AVAssetWriterInput *videoInput;
    AVAssetWriterInput *audioInput;
    AVAssetWriterInputPixelBufferAdaptor *videoBuffer;
    struct __CVBuffer { } *renderTarget;
    struct __CVBuffer { } *renderTexture;
    double duration;
    long long last_frame_time;
    int frames;
    unsigned long long startTime;
    BOOL capture_next_frame;
    id /* block */ frame_callback;
    int status;
    AVURLAsset *avAsset;
    struct mutex { struct _opaque_pthread_mutex_t { long long __sig; char __opaque[56]; } __m_; } releaseCVBufferMutex;
}

@property (nonatomic) double duration;

- (id)initWithPath:(id)arg0 trimPath:(id)arg1 width:(unsigned int)arg2 height:(unsigned int)arg3 app:(id)arg4 recordable:(long long)arg5;
- (void)stop:(id /* block */)arg0 async:(BOOL)arg1;
- (void)trimWithParams:(id)arg0 callback:(id /* block */)arg1;
- (void)doFrame;
- (void)releaseCVBuffer;
- (void)doAudioSample:(void *)arg0 length:(int)arg1 totalSamples:(int)arg2 format:(struct opaqueCMFormatDescription { } *)arg3;
- (void)doCapture;
- (id)initWithPath:(id)arg0 width:(unsigned int)arg1 height:(unsigned int)arg2 app:(id)arg3 recordable:(long long)arg4;
- (void)captureNextFrame:(id /* block */)arg0;
- (void)resume;
- (void).cxx_destruct;
- (BOOL)initEncoder;
- (double)duration;
- (void)stop:(id /* block */)arg0;
- (void)start;
- (void)dealloc;
- (void)pause;
- (id).cxx_construct;
- (void)setDuration:(double)arg0;
- (BOOL)createBuffer;

@end
