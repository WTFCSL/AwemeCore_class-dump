//
//     Generated by private class-dump
//

@class AWEStudioClipModel, NSArray, NSString, AWEAIVideoClipManager, AWEClipPlayerViewModel, AWEVideoSegmentedClipAdapter, AWEStudioClipInputData, AWEClipSliderViewModel, AWEStudioClipViewModel;
@protocol AWEStudioMusicModelProtocol;

@interface AWEClipAIViewModel : NSObject <AWEVideoRangeSliderDelegate> {
    BOOL _hasOverEndTime;
    BOOL _didUpdateMusicList;
    unsigned long long _defaultClipMode;
    NSArray *_defaultMusicList;
    AWEStudioClipViewModel *_clipViewModel;
    id<AWEStudioMusicModelProtocol> _selectedAIVideoClipMusic;
    AWEAIVideoClipManager *_AIVideoClipManager;
    AWEStudioClipModel *_clipModel;
    AWEStudioClipInputData *_inputData;
    AWEVideoSegmentedClipAdapter *_clipAdapter;
    AWEClipPlayerViewModel *_playerViewModel;
    AWEClipSliderViewModel *_sliderViewModel;
    struct { long long value; int timescale; unsigned int flags; long long epoch; } _lastSnapshotTime;
}

@property (nonatomic) BOOL hasOverEndTime;
@property (nonatomic) unsigned long long defaultClipMode;
@property (retain, nonatomic) NSArray *defaultMusicList;
@property (retain, nonatomic) id<AWEStudioMusicModelProtocol> selectedAIVideoClipMusic;
@property (retain, nonatomic) AWEAIVideoClipManager *AIVideoClipManager;
@property (nonatomic) BOOL didUpdateMusicList;
@property (retain, nonatomic) AWEStudioClipModel *clipModel;
@property (retain, nonatomic) AWEStudioClipInputData *inputData;
@property (retain, nonatomic) AWEVideoSegmentedClipAdapter *clipAdapter;
@property (retain, nonatomic) AWEClipPlayerViewModel *playerViewModel;
@property (retain, nonatomic) AWEClipSliderViewModel *sliderViewModel;
@property (nonatomic) struct { long long value; int timescale; unsigned int flags; long long epoch; } lastSnapshotTime;
@property (weak, nonatomic) AWEStudioClipViewModel *clipViewModel;
@property (readonly, nonatomic) NSString *selectedMusicId;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (id)clipModel;
- (void)setClipModel:(id)arg0;
- (id)commonTrackParams;
- (id)clipAdapter;
- (void)setClipAdapter:(id)arg0;
- (void)setDefaultMusicList:(id)arg0;
- (void)setPlayerViewModel:(id)arg0;
- (void)setSliderViewModel:(id)arg0;
- (BOOL)didUpdateMusicList;
- (void)setDidUpdateMusicList:(BOOL)arg0;
- (id)clipViewModel;
- (id)defaultMusicList;
- (void)setSelectedAIVideoClipMusic:(id)arg0;
- (BOOL)hasOverEndTime;
- (BOOL)shouldIgnoreRangeSliderGestureForAIVideoClipMode;
- (id)playerViewModel;
- (id)sliderViewModel;
- (BOOL)isPlayingCurrentModePlayerItem;
- (id)selectedMusicId;
- (BOOL)needsExpandRangeSliderForClipDuration:(double)arg0;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })rotateTransformForRotateType:(unsigned long long)arg0;
- (struct { long long x0; int x1; unsigned int x2; long long x3; })lastSnapshotTime;
- (void)setLastSnapshotTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg0;
- (double)radiansForRotateType:(unsigned long long)arg0;
- (id)AIVideoClipManager;
- (void)setAIVideoClipFooterViewEnableVideoSegmentsEdit:(BOOL)arg0;
- (BOOL)AIVideoClipFooterViewEnableVideoSegmentsEdit;
- (id)selectedAIVideoClipMusic;
- (BOOL)videoRangeIgnoreGesture;
- (void)videoRangeDidBeginByType:(unsigned long long)arg0;
- (void)videoRangeDidEndByType:(unsigned long long)arg0;
- (void)videoRangeDidChangByPosition:(double)arg0 movedType:(unsigned long long)arg1;
- (id)initWithClipModel:(id)arg0 sliderViewModel:(id)arg1 playerViewModel:(id)arg2;
- (void)updateAIClipMusicListIfNeeded;
- (void)configSelectedAIVideoClipMusic:(id)arg0;
- (void)snapShotPlayerViewWithPlayerItem:(id)arg0 playerFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg1 toPlayerSnap:(id)arg2 fromMode:(unsigned long long)arg3 toMode:(unsigned long long)arg4;
- (void)snapShotPlayerViewWithPlayerData:(id)arg0 playerFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg1 toPlayerSnap:(id)arg2 fromMode:(unsigned long long)arg3 toMode:(unsigned long long)arg4;
- (void)handleAIVideoClipGenerateFailed:(id)arg0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })maxPlayerFrameWithRotateType:(unsigned long long)arg0;
- (unsigned long long)defaultClipMode;
- (void)trackAIVideoClipModeShow;
- (void)trackNormalVideoClipModeShow;
- (void)trackModeSwitch;
- (void)trackVideoReorder;
- (void)trackConfirmClipEditingChange;
- (void)trackCancelClipEditing;
- (void)trackVideoClipEditing;
- (void)trackVideoClipDelete;
- (void)trackAIVideoClipEditing;
- (void)trackAppendVideoClip;
- (void)trackOneClickAdjustAction;
- (void)trackOneClickAdjustCancelAction;
- (void)trackNextStepButtonClick;
- (void)trackExitAlertShow;
- (void)trackExitAlertConfirm;
- (void)trackExitAlertCancel;
- (void)setHasOverEndTime:(BOOL)arg0;
- (void)setDefaultClipMode:(unsigned long long)arg0;
- (void)setClipViewModel:(id)arg0;
- (void)setAIVideoClipManager:(id)arg0;
- (void).cxx_destruct;
- (id)inputData;
- (void)setInputData:(id)arg0;

@end
