//
//     Generated by private class-dump
//

@class NSArray, CKAAAlbum, NSSet, NSOperationQueue, NSMutableDictionary, NSMutableSet, NSMutableArray, CKAAConfig, NSObject, NSDateFormatter;
@protocol OS_dispatch_group, CKAARecommendAlbumServiceDelegate, OS_dispatch_source, OS_dispatch_queue;

@interface CKAARecommendAlbumService : NSObject {
    struct shared_ptr<CKAA::AlbumAggregate> { struct AlbumAggregate *__ptr_; struct __shared_weak_count *__cntrl_; } _cppModel;
    struct shared_ptr<CKAA::AACacheAdapter> { struct AACacheAdapter *__ptr_; struct __shared_weak_count *__cntrl_; } _albumCache;
    BOOL _isRunning;
    BOOL _isSuspend;
    BOOL _isCanceld;
    id<CKAARecommendAlbumServiceDelegate> _delegate;
    CKAAConfig *_config;
    CKAAAlbum *_albumRes;
    NSArray *_ckAssets;
    NSMutableArray *_runningTaskQueue;
    NSMutableSet *_runningTaskSet;
    NSSet *_assetIdSetFromPhotoApp;
    NSArray *_phAssets;
    NSOperationQueue *_operationQueue;
    NSObject<OS_dispatch_queue> *_timerQueue;
    NSObject<OS_dispatch_group> *_taskGroup;
    NSObject<OS_dispatch_source> *_timer;
    NSDateFormatter *_dateFormatter;
    NSMutableDictionary *_progressCache;
    NSMutableDictionary *_stateCache;
    unsigned long long _runType;
    long long _leaveCount;
    id /* block */ _currentCompletion;
}

@property (retain, nonatomic) CKAAConfig *config;
@property (retain, nonatomic) CKAAAlbum *albumRes;
@property (retain, nonatomic) NSArray *ckAssets;
@property (retain, nonatomic) NSMutableArray *runningTaskQueue;
@property (retain, nonatomic) NSMutableSet *runningTaskSet;
@property (retain, nonatomic) NSSet *assetIdSetFromPhotoApp;
@property (retain, nonatomic) NSArray *phAssets;
@property (retain, nonatomic) NSOperationQueue *operationQueue;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *timerQueue;
@property (retain, nonatomic) NSObject<OS_dispatch_group> *taskGroup;
@property (retain, nonatomic) NSObject<OS_dispatch_source> *timer;
@property (retain, nonatomic) NSDateFormatter *dateFormatter;
@property (retain, nonatomic) NSMutableDictionary *progressCache;
@property (retain, nonatomic) NSMutableDictionary *stateCache;
@property (nonatomic) BOOL isRunning;
@property BOOL isSuspend;
@property BOOL isCanceld;
@property (nonatomic) unsigned long long runType;
@property long long leaveCount;
@property (copy, nonatomic) id /* block */ currentCompletion;
@property (weak, nonatomic) id<CKAARecommendAlbumServiceDelegate> delegate;

- (void)resumeTask;
- (id)taskGroup;
- (void)setTaskGroup:(id)arg0;
- (void)setupGCDTimer;
- (BOOL)isSuspend;
- (id)getAlgorithmsIfNeed:(id)arg0;
- (id)getStrategiesIfNeed:(id)arg0;
- (void)setRunType:(unsigned long long)arg0;
- (void)doCallbackServiceState:(unsigned long long)arg0;
- (id)runningTaskQueue;
- (void)setCkAssets:(id)arg0;
- (void)setLeaveCount:(long long)arg0;
- (struct vector<std::shared_ptr<CKAA::Asset>, std::allocator<std::shared_ptr<CKAA::Asset>>> { void *x0; void *x1; struct __compressed_pair<std::shared_ptr<CKAA::Asset> *, std::allocator<std::shared_ptr<CKAA::Asset>>> { void *x0; } x2; })mapAssets:(id)arg0;
- (struct vector<std::shared_ptr<CKAA::Algorithm>, std::allocator<std::shared_ptr<CKAA::Algorithm>>> { void *x0; void *x1; struct __compressed_pair<std::shared_ptr<CKAA::Algorithm> *, std::allocator<std::shared_ptr<CKAA::Algorithm>>> { void *x0; } x2; })mapAlgorithms:(id)arg0;
- (struct vector<std::shared_ptr<CKAA::Strategy>, std::allocator<std::shared_ptr<CKAA::Strategy>>> { void *x0; void *x1; struct __compressed_pair<std::shared_ptr<CKAA::Strategy> *, std::allocator<std::shared_ptr<CKAA::Strategy>>> { void *x0; } x2; })mapStrategies:(id)arg0;
- (void)clearRecordMap;
- (void)doCallbackProgress:(float)arg0;
- (void)fetchAssetInfo:(id)arg0 completion:(id /* block */)arg1;
- (void)deleteAssetsIfNotExist:(id)arg0;
- (void)setCurrentCompletion:(id /* block */)arg0;
- (void)setupAssetsMeta:(id)arg0 withAlgorithms:(id)arg1 strategies:(id)arg2 completion:(id /* block */)arg3;
- (id)runningTaskSet;
- (void)setIsCanceld:(BOOL)arg0;
- (id)queryAlbums:(id /* block */)arg0;
- (id)queryAlbums:(id /* block */)arg0 checkAssetsExist:(BOOL)arg1;
- (id)queryAlbum:(id)arg0 albumFilter:(id /* block */)arg1 checkAssetsExist:(BOOL)arg2;
- (id)queryAlbum:(id)arg0;
- (id)queryAlbumAssets:(id)arg0 offset:(unsigned long long)arg1 size:(unsigned long long)arg2 sortDescriptors:(id)arg3;
- (void)callbackCompletionByCancel;
- (void)setIsSuspend:(BOOL)arg0;
- (void)setRunningTaskQueue:(id)arg0;
- (id)assetIdSetFromPhotoApp;
- (id)mapAssetIDFormAssets:(id)arg0;
- (id)queryAllAssets:(id)arg0;
- (id)progressCache;
- (id)stateCache;
- (BOOL)isOpeationStateValid:(id)arg0;
- (id /* block */)currentCompletion;
- (BOOL)hasPhotoLibraryAccessAuthority;
- (void)reportMemory;
- (void)aggregateAssetsWithStrategies:(id)arg0 completion:(id /* block */)arg1;
- (void)aggregateAssets:(id)arg0 withAlgorithms:(id)arg1 strategies:(id)arg2 completion:(id /* block */)arg3;
- (void)aggregateAssets:(id)arg0 withAlgorithms:(id)arg1 strategies:(id)arg2 shardingCount:(unsigned long long)arg3 handledAssetsCallback:(id /* block */)arg4 completion:(id /* block */)arg5;
- (void)deleteAssetCache;
- (id)queryAlbum:(id)arg0 albumFilter:(id /* block */)arg1;
- (void)hideAlbum:(id)arg0;
- (void)updateAlbum:(id)arg0;
- (void)fetchAssetsByAlbumKey:(id)arg0 pageOffset:(long long)arg1 pageSize:(long long)arg2 sortDescriptors:(id)arg3 completion:(id /* block */)arg4;
- (void)clearAlbumCache;
- (void)checkAlbumValid:(id /* block */)arg0;
- (BOOL)isModelsReady;
- (unsigned long long)transformCppToOCState:(int)arg0;
- (void)asyncCheckAssetLibrary;
- (BOOL)doFilterAsset:(id)arg0;
- (BOOL)doFilterAlbum:(id)arg0;
- (id)albumRes;
- (void)setAlbumRes:(id)arg0;
- (id)ckAssets;
- (void)setRunningTaskSet:(id)arg0;
- (void)setAssetIdSetFromPhotoApp:(id)arg0;
- (id)phAssets;
- (void)setPhAssets:(id)arg0;
- (void)setProgressCache:(id)arg0;
- (void)setStateCache:(id)arg0;
- (BOOL)isCanceld;
- (long long)leaveCount;
- (const void *)logger;
- (void)addOperation:(id)arg0;
- (id)timer;
- (void)setIsRunning:(BOOL)arg0;
- (BOOL)isRunning;
- (void)setOperationQueue:(id)arg0;
- (void)setConfig:(id)arg0;
- (void).cxx_destruct;
- (void)setDateFormatter:(id)arg0;
- (id)timerQueue;
- (id)config;
- (id)dateFormatter;
- (void)log:(id)arg0;
- (id)initWithConfig:(id)arg0;
- (id)operationQueue;
- (id)delegate;
- (void)setTimer:(id)arg0;
- (void)setDelegate:(id)arg0;
- (void)dealloc;
- (id).cxx_construct;
- (void)deleteAssets:(id)arg0;
- (void)cancelTask;
- (void)setTimerQueue:(id)arg0;
- (void)suspendTask;
- (unsigned long long)runType;

@end
