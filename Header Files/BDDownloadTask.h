//
//     Generated by private class-dump
//

@class NSString, NSDictionary, NSURL, NSURLRequest;
@protocol BDDownloadTaskDelegate;

@interface BDDownloadTask : NSOperation <BDWebImageDownloadTaskBaseInfo, BDWebImageDownloadTaskHEICProgressiveInfo, BDWebImageDownloadTaskTimeInfo> {
    BOOL _finished;
    BOOL _executing;
    BOOL needHeicProgressDownloadForThumbnail;
    BOOL isHeicThumbDecodeFired;
    BOOL _downloadResumeEnabled;
    BOOL _enableLog;
    BOOL _checkMimeType;
    BOOL _checkDataLength;
    BOOL _isCocurrentCallback;
    BOOL _isProgressiveDownload;
    NSURL *_url;
    NSString *identifier;
    NSURLRequest *request;
    double timeoutInterval;
    double timeoutIntervalForResource;
    long long isThumbnailExist;
    long long minDataLengthForThumbnail;
    long long realSize;
    NSDictionary *_defaultHeaders;
    NSDictionary *_requestHeaders;
    unsigned long long _options;
    NSString *_tempPath;
    id<BDDownloadTaskDelegate> _delegate;
    double _repackStartTime;
    double _repackEndTime;
    double _startTime;
    double _finishTime;
    long long _expectedSize;
    long long _receivedSize;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _smartCropRect;
}

@property (nonatomic) double repackStartTime;
@property (nonatomic) double repackEndTime;
@property (nonatomic) double startTime;
@property (nonatomic) double finishTime;
@property (nonatomic) long long expectedSize;
@property (nonatomic) long long receivedSize;
@property (copy, nonatomic) NSDictionary *defaultHeaders;
@property (copy, nonatomic) NSDictionary *requestHeaders;
@property (nonatomic) unsigned long long options;
@property (copy, nonatomic) NSString *tempPath;
@property (nonatomic) BOOL downloadResumeEnabled;
@property (weak, nonatomic) id<BDDownloadTaskDelegate> delegate;
@property (nonatomic) BOOL enableLog;
@property (nonatomic) BOOL checkMimeType;
@property (nonatomic) BOOL checkDataLength;
@property (nonatomic) BOOL isCocurrentCallback;
@property (nonatomic) BOOL isProgressiveDownload;
@property (readonly, nonatomic) NSURL *url;
@property (retain, nonatomic) NSURLRequest *request;
@property (copy, nonatomic) NSString *identifier;
@property (nonatomic) double timeoutInterval;
@property (nonatomic) double timeoutIntervalForResource;
@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } smartCropRect;
@property (readonly, nonatomic) long long realSize;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) BOOL needHeicProgressDownloadForThumbnail;
@property (nonatomic) long long isThumbnailExist;
@property (nonatomic) long long minDataLengthForThumbnail;
@property (nonatomic) BOOL isHeicThumbDecodeFired;

+ (long long)getCacheControlTimeFromResponse:(id)arg0;
+ (BOOL)checkData:(id)arg0 md5:(id)arg1;

- (BOOL)enableLog;
- (void)setEnableLog:(BOOL)arg0;
- (id)defaultHeaders;
- (void)setExpectedSize:(long long)arg0;
- (BOOL)isProgressiveDownload;
- (BOOL)needHeicProgressDownloadForThumbnail;
- (void)_setReceivedSize:(long long)arg0 expectedSize:(long long)arg1;
- (void)setupSmartCropRectFromHeaders:(id)arg0;
- (void)repackStart;
- (long long)isThumbnailExist;
- (void)repackEnd;
- (id)checkDataError:(id)arg0 data:(id)arg1 dataSizeBias:(long long)arg2 headers:(id)arg3;
- (BOOL)isCocurrentCallback;
- (long long)realSize;
- (double)repackStartTime;
- (void)setRepackStartTime:(double)arg0;
- (double)repackEndTime;
- (void)setRepackEndTime:(double)arg0;
- (void)setDefaultHeaders:(id)arg0;
- (BOOL)checkMimeType;
- (void)setCheckMimeType:(BOOL)arg0;
- (BOOL)checkDataLength;
- (void)setCheckDataLength:(BOOL)arg0;
- (void)setIsCocurrentCallback:(BOOL)arg0;
- (long long)minDataLengthForThumbnail;
- (void)setNeedHeicProgressDownloadForThumbnail:(BOOL)arg0;
- (void)setIsThumbnailExist:(long long)arg0;
- (void)setMinDataLengthForThumbnail:(long long)arg0;
- (BOOL)isHeicThumbDecodeFired;
- (void)setIsHeicThumbDecodeFired:(BOOL)arg0;
- (long long)receivedSize;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })smartCropRect;
- (void)setSmartCropRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0;
- (void)setReceivedSize:(long long)arg0;
- (void)setIsProgressiveDownload:(BOOL)arg0;
- (id)tempPath;
- (void)setTempPath:(id)arg0;
- (BOOL)downloadResumeEnabled;
- (void)setDownloadResumeEnabled:(BOOL)arg0;
- (void)setFinished:(BOOL)arg0;
- (BOOL)isFinished;
- (BOOL)isConcurrent;
- (void)setTimeoutInterval:(double)arg0;
- (void)setStartTime:(double)arg0;
- (void).cxx_destruct;
- (BOOL)isExecuting;
- (void)setRequest:(id)arg0;
- (id)initWithURL:(id)arg0;
- (void)setOptions:(unsigned long long)arg0;
- (id)identifier;
- (double)timeoutIntervalForResource;
- (double)timeoutInterval;
- (id)request;
- (id)delegate;
- (double)startTime;
- (void)cancel;
- (void)setTimeoutIntervalForResource:(double)arg0;
- (void)start;
- (void)setDelegate:(id)arg0;
- (unsigned long long)options;
- (void)setExecuting:(BOOL)arg0;
- (id)url;
- (void)setIdentifier:(id)arg0;
- (BOOL)asynchronous;
- (id)requestHeaders;
- (void)setRequestHeaders:(id)arg0;
- (long long)expectedSize;
- (void)setFinishTime:(double)arg0;
- (double)finishTime;

@end
