//
//     Generated by private class-dump
//

@class NSString, NSMutableDictionary, NSURL, NSMutableSet, NSDateFormatter;

@interface FMDatabase : NSObject {
    void *_db;
    BOOL _isExecutingStatement;
    double _startBusyRetryTime;
    NSMutableSet *_openResultSets;
    NSMutableSet *_openFunctions;
    NSDateFormatter *_dateFormat;
    BOOL _shouldCacheStatements;
    BOOL _traceExecution;
    BOOL _checkedOut;
    BOOL _crashOnErrors;
    BOOL _logsErrors;
    BOOL _isOpen;
    BOOL _isInTransaction;
    double _maxBusyRetryTimeInterval;
    NSMutableDictionary *_cachedStatements;
    NSString *_databasePath;
}

@property (nonatomic) unsigned int applicationID;
@property (nonatomic) unsigned int userVersion;
@property BOOL traceExecution;
@property BOOL checkedOut;
@property BOOL crashOnErrors;
@property BOOL logsErrors;
@property (retain) NSMutableDictionary *cachedStatements;
@property (nonatomic) BOOL isOpen;
@property (readonly, nonatomic) BOOL goodConnection;
@property (readonly, nonatomic) long long lastInsertRowId;
@property (readonly, nonatomic) int changes;
@property (readonly, nonatomic) BOOL isInTransaction;
@property (readonly, nonatomic) BOOL hasOpenResultSets;
@property (nonatomic) BOOL shouldCacheStatements;
@property (readonly, nonatomic) NSString *databasePath;
@property (readonly, nonatomic) NSURL *databaseURL;
@property (readonly, nonatomic) void *sqliteHandle;
@property (nonatomic) double maxBusyRetryTimeInterval;

+ (id)databaseWithPath:(id)arg0;
+ (id)databaseWithURL:(id)arg0;
+ (id)FMDBUserVersion;
+ (int)FMDBVersion;
+ (id)sqliteLibVersion;
+ (BOOL)isSQLiteThreadSafe;
+ (id)storeableDateFormat:(id)arg0;

- (int)changes;
- (BOOL)commit;
- (id)databasePath;
- (void)setUserVersion:(unsigned int)arg0;
- (unsigned int)applicationID;
- (BOOL)rollback;
- (id)initWithPath:(id)arg0;
- (id)init;
- (void)setIsOpen:(BOOL)arg0;
- (id)lastError;
- (void)setVersion:(int)arg0;
- (void).cxx_destruct;
- (void)setDateFormat:(id)arg0;
- (void)clearCachedStatements;
- (BOOL)open;
- (BOOL)shouldCacheStatements;
- (BOOL)interrupt;
- (unsigned int)userVersion;
- (BOOL)beginTransaction;
- (BOOL)close;
- (id)initWithURL:(id)arg0;
- (id)databaseURL;
- (long long)lastInsertRowId;
- (id)lastErrorMessage;
- (BOOL)setKey:(id)arg0;
- (BOOL)isOpen;
- (BOOL)executeUpdate:(id)arg0;
- (int)version;
- (id)executeQuery:(id)arg0;
- (BOOL)tableExists:(id)arg0;
- (id)stringFromDate:(id)arg0;
- (void *)sqliteHandle;
- (BOOL)beginExclusiveTransaction;
- (int)lastErrorCode;
- (void)dealloc;
- (id)dateFromString:(id)arg0;
- (void)setApplicationID:(unsigned int)arg0;
- (BOOL)isInTransaction;
- (id)cachedStatementForQuery:(id)arg0;
- (void)setCachedStatement:(id)arg0 forQuery:(id)arg1;
- (id)getSchema;
- (BOOL)beginDeferredTransaction;
- (id)stringForQuery:(id)arg0;
- (id)prepare:(id)arg0;
- (const char *)sqlitePath;
- (int)limitFor:(int)arg0 value:(int)arg1;
- (BOOL)openWithFlags:(int)arg0;
- (BOOL)openWithFlags:(int)arg0 vfs:(id)arg1;
- (void)setMaxBusyRetryTimeInterval:(double)arg0;
- (double)maxBusyRetryTimeInterval;
- (int)busyRetryTimeout;
- (void)setBusyRetryTimeout:(int)arg0;
- (BOOL)hasOpenResultSets;
- (void)closeOpenResultSets;
- (void)resultSetDidClose:(id)arg0;
- (BOOL)rekey:(id)arg0;
- (BOOL)rekeyWithData:(id)arg0;
- (BOOL)setKeyWithData:(id)arg0;
- (BOOL)hasDateFormatter;
- (BOOL)goodConnection;
- (void)warnInUse;
- (BOOL)databaseExists;
- (BOOL)hadError;
- (int)lastExtendedErrorCode;
- (id)errorWithMessage:(id)arg0;
- (int)bindObject:(id)arg0 toColumn:(int)arg1 inStatement:(struct sqlite3_stmt { } *)arg2;
- (void)extractSQL:(id)arg0 argumentsList:(char *)arg1 intoString:(id)arg2 arguments:(id)arg3;
- (id)executeQuery:(id)arg0 withParameterDictionary:(id)arg1;
- (id)executeQuery:(id)arg0 withArgumentsInArray:(id)arg1 orDictionary:(id)arg2 orVAList:(char *)arg3 shouldBind:(BOOL)arg4;
- (BOOL)bindStatement:(struct sqlite3_stmt { } *)arg0 WithArgumentsInArray:(id)arg1 orDictionary:(id)arg2 orVAList:(char *)arg3;
- (id)executeQueryWithFormat:(id)arg0;
- (id)executeQuery:(id)arg0 withArgumentsInArray:(id)arg1;
- (id)executeQuery:(id)arg0 values:(id)arg1 error:(id *)arg2;
- (id)executeQuery:(id)arg0 withVAList:(char *)arg1;
- (BOOL)executeUpdate:(id)arg0 error:(id *)arg1 withArgumentsInArray:(id)arg2 orDictionary:(id)arg3 orVAList:(char *)arg4;
- (BOOL)executeUpdate:(id)arg0 withArgumentsInArray:(id)arg1;
- (BOOL)executeUpdate:(id)arg0 values:(id)arg1 error:(id *)arg2;
- (BOOL)executeUpdate:(id)arg0 withParameterDictionary:(id)arg1;
- (BOOL)executeUpdate:(id)arg0 withVAList:(char *)arg1;
- (BOOL)executeUpdateWithFormat:(id)arg0;
- (BOOL)executeStatements:(id)arg0;
- (BOOL)executeStatements:(id)arg0 withResultBlock:(id /* block */)arg1;
- (BOOL)executeUpdate:(id)arg0 withErrorAndBindings:(id *)arg1;
- (BOOL)update:(id)arg0 withErrorAndBindings:(id *)arg1;
- (BOOL)beginImmediateTransaction;
- (BOOL)inTransaction;
- (BOOL)startSavePointWithName:(id)arg0 error:(id *)arg1;
- (BOOL)releaseSavePointWithName:(id)arg0 error:(id *)arg1;
- (BOOL)rollbackToSavePointWithName:(id)arg0 error:(id *)arg1;
- (id)inSavePoint:(id /* block */)arg0;
- (BOOL)checkpoint:(int)arg0 error:(id *)arg1;
- (BOOL)checkpoint:(int)arg0 name:(id)arg1 error:(id *)arg2;
- (BOOL)checkpoint:(int)arg0 name:(id)arg1 logFrameCount:(int *)arg2 checkpointCount:(int *)arg3 error:(id *)arg4;
- (void)setShouldCacheStatements:(BOOL)arg0;
- (void)makeFunctionNamed:(id)arg0 maximumArguments:(int)arg1 withBlock:(id /* block */)arg2;
- (void)makeFunctionNamed:(id)arg0 arguments:(int)arg1 block:(id /* block */)arg2;
- (int)valueType:(void *)arg0;
- (int)valueInt:(void *)arg0;
- (long long)valueLong:(void *)arg0;
- (double)valueDouble:(void *)arg0;
- (id)valueData:(void *)arg0;
- (id)valueString:(void *)arg0;
- (void)resultNullInContext:(void *)arg0;
- (void)resultInt:(int)arg0 context:(void *)arg1;
- (void)resultLong:(long long)arg0 context:(void *)arg1;
- (void)resultDouble:(double)arg0 context:(void *)arg1;
- (void)resultData:(id)arg0 context:(void *)arg1;
- (void)resultString:(id)arg0 context:(void *)arg1;
- (void)resultError:(id)arg0 context:(void *)arg1;
- (void)resultErrorCode:(int)arg0 context:(void *)arg1;
- (void)resultErrorNoMemoryInContext:(void *)arg0;
- (void)resultErrorTooBigInContext:(void *)arg0;
- (BOOL)traceExecution;
- (void)setTraceExecution:(BOOL)arg0;
- (BOOL)checkedOut;
- (void)setCheckedOut:(BOOL)arg0;
- (BOOL)crashOnErrors;
- (void)setCrashOnErrors:(BOOL)arg0;
- (BOOL)logsErrors;
- (void)setLogsErrors:(BOOL)arg0;
- (id)cachedStatements;
- (void)setCachedStatements:(id)arg0;
- (int)intForQuery:(id)arg0;
- (long long)longForQuery:(id)arg0;
- (BOOL)boolForQuery:(id)arg0;
- (double)doubleForQuery:(id)arg0;
- (id)dataForQuery:(id)arg0;
- (id)dateForQuery:(id)arg0;
- (id)getTableSchema:(id)arg0;
- (BOOL)columnExists:(id)arg0 inTableWithName:(id)arg1;
- (BOOL)columnExists:(id)arg0 columnName:(id)arg1;
- (BOOL)validateSQL:(id)arg0 error:(id *)arg1;

@end
