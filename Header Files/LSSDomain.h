//
//     Generated by private class-dump
//

@class NSString, NSDictionary, NSMutableDictionary, NSMutableArray;

@interface LSSDomain : NSObject <NSCopying> {
    BOOL _localDNSParseTimeout;
    BOOL _hasFinishedLocalDns;
    NSString *_name;
    NSMutableArray *_selectedNodes;
    unsigned long long _runningStatus;
    NSDictionary *_domainInfo;
    NSString *_requestID;
    NSMutableArray *_localDNSNodes;
    NSMutableArray *_preconnectedNodeIPs;
    NSMutableDictionary *_localDNSNodesMap;
    NSMutableDictionary *_selectedNodesMap;
    NSString *_connectionStatus;
}

@property (copy) NSDictionary *domainInfo;
@property (copy) NSString *requestID;
@property (copy, nonatomic) NSString *name;
@property (copy, nonatomic) NSMutableArray *localDNSNodes;
@property (copy, nonatomic) NSMutableArray *selectedNodes;
@property (copy, nonatomic) NSMutableArray *preconnectedNodeIPs;
@property (copy, nonatomic) NSMutableDictionary *localDNSNodesMap;
@property (copy, nonatomic) NSMutableDictionary *selectedNodesMap;
@property (copy, nonatomic) NSString *connectionStatus;
@property (readonly, nonatomic) unsigned long long type;
@property (readonly, nonatomic) BOOL shouldUseHTTPDNS;
@property (nonatomic) BOOL localDNSParseTimeout;
@property (nonatomic) BOOL hasFinishedLocalDns;
@property (readonly, copy, nonatomic) NSDictionary *info;
@property (nonatomic) unsigned long long runningStatus;

+ (id)domainWithDomainInfo:(id)arg0;

- (BOOL)shouldUseHTTPDNS;
- (unsigned long long)runningStatus;
- (void)setRunningStatus:(unsigned long long)arg0;
- (void)updateWithDomainInfo:(id)arg0;
- (id)localDNSNodes;
- (id)localDNSNodesMap;
- (id)selectedNodesMap;
- (id)preconnectedNodeIPs;
- (BOOL)localDNSParseTimeout;
- (BOOL)hasFinishedLocalDns;
- (void)setLocalDNSParseTimeout:(BOOL)arg0;
- (void)setHasFinishedLocalDns:(BOOL)arg0;
- (void)_updateSelectedNodes:(id)arg0;
- (void)_updateLocalDNS;
- (id)currentAvailableNodes;
- (void)updateLocalDNSRecord:(id)arg0;
- (id)copyLocalDNSNodes;
- (id)copySelectedNodes;
- (void)getIpResultFromList:(long long)arg0 requiredIpCount:(long long)arg1 recordIpList:(id)arg2 ipList:(id *)arg3 ipSet:(id *)arg4;
- (id)lightCopyForOnlyDomainName;
- (void)updateSelectedNodes:(id)arg0 userInfo:(id)arg1;
- (void)updateLocalDNS;
- (void)preconnectTCPFastOpenAvailableNodes;
- (unsigned long long)checkIpv6Nodes;
- (unsigned long long)checkUdpNodes;
- (id)getIpListByKey:(long long)arg0 requiredIpCount:(long long)arg1;
- (void)updateLocalDNSWithConnectionStatus:(id)arg0;
- (void)updateSelectedNodesWithConnectionStatus:(id)arg0 userInfo:(id)arg1 connectionStatus:(id)arg2;
- (void)setSelectedNodes:(id)arg0;
- (void)setLocalDNSNodes:(id)arg0;
- (void)setPreconnectedNodeIPs:(id)arg0;
- (void)setLocalDNSNodesMap:(id)arg0;
- (void)setSelectedNodesMap:(id)arg0;
- (id)init;
- (id)info;
- (void)setRequestID:(id)arg0;
- (id)requestID;
- (void).cxx_destruct;
- (void)flush;
- (id)copyWithZone:(struct _NSZone { } *)arg0;
- (unsigned long long)type;
- (id)connectionStatus;
- (id)initWithObject:(id)arg0;
- (void)setName:(id)arg0;
- (void)setConnectionStatus:(id)arg0;
- (id)description;
- (id)name;
- (id)domainInfo;
- (void)setDomainInfo:(id)arg0;
- (id)selectedNodes;

@end
