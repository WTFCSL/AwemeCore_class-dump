//
//     Generated by private class-dump
//

@class LBInnerNewLelinkConnection, NSMutableData, LBUPnPConnection, LBBarrageSetting, NSObject, LBLelinkPlayerItem, NSString, LBUPnPPlayer, LBLelinkProgressInfo, NSTimer, NSArray, LBADInfo, LBLelinkConnection, LBInnerNewLelinkPlayer, LEBAsyncSocket;
@protocol OS_dispatch_queue, LBLelinkPlayerDelegate;

@interface LBLelinkPlayer : NSObject <LEBUPnPPlayerDelegate, LBInnerNewLelinkPlayerDelegate, LEBAsyncSocketDelegate> {
    BOOL _pauseBarrage;
    BOOL _barrageBottomStartShow;
    BOOL _barrageAllowOverlap;
    BOOL _hideBarrage;
    BOOL _isOnCaptureProcess;
    id<LBLelinkPlayerDelegate> _delegate;
    LBLelinkConnection *_lelinkConnection;
    LBLelinkPlayerItem *_item;
    unsigned long long _barrageFlySpeed;
    unsigned long long _barrageMaxLine;
    LBUPnPConnection *_upnpConnection;
    LBInnerNewLelinkConnection *_innerNewLelinkConnection;
    LBUPnPPlayer *_upnpPlayer;
    LBInnerNewLelinkPlayer *_innerNewLelinkPlayer;
    LBLelinkProgressInfo *_progressInfo;
    unsigned long long _playStatus;
    double _playSpeedRate;
    NSString *_wrongPassth;
    LBBarrageSetting *_barrSetting;
    LEBAsyncSocket *_positiveLink;
    id /* block */ _completionHandler;
    NSString *_sessionID;
    NSMutableData *_receivedData;
    NSObject<OS_dispatch_queue> *_photoCaputureQueue;
    NSTimer *_countTimer;
    double _waitTime;
    NSString *_tid;
    NSString *_vuuid;
    NSString *_vsession;
    NSString *_currentMediaId;
    LBADInfo *_aDInfo;
    struct { long long state; long long detail; long long type; NSArray *pictures; } _harassInfo;
}

@property (retain, nonatomic) LBUPnPConnection *upnpConnection;
@property (retain, nonatomic) LBInnerNewLelinkConnection *innerNewLelinkConnection;
@property (retain, nonatomic) LBUPnPPlayer *upnpPlayer;
@property (retain, nonatomic) LBInnerNewLelinkPlayer *innerNewLelinkPlayer;
@property (retain, nonatomic) LBLelinkProgressInfo *progressInfo;
@property (nonatomic) unsigned long long playStatus;
@property (nonatomic) struct { long long state; long long detail; long long type; NSArray *pictures; } harassInfo;
@property (nonatomic) double playSpeedRate;
@property (nonatomic) NSString *wrongPassth;
@property (retain, nonatomic) LBBarrageSetting *barrSetting;
@property (retain, nonatomic) LEBAsyncSocket *positiveLink;
@property (copy, nonatomic) id /* block */ completionHandler;
@property (copy, nonatomic) NSString *sessionID;
@property (retain, nonatomic) NSMutableData *receivedData;
@property (nonatomic) BOOL isOnCaptureProcess;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *photoCaputureQueue;
@property (retain, nonatomic) NSTimer *countTimer;
@property (nonatomic) double waitTime;
@property (copy, nonatomic) NSString *tid;
@property (copy, nonatomic) NSString *vuuid;
@property (copy, nonatomic) NSString *vsession;
@property (copy, nonatomic) NSString *currentMediaId;
@property (retain, nonatomic) LBADInfo *aDInfo;
@property (weak, nonatomic) id<LBLelinkPlayerDelegate> delegate;
@property (retain, nonatomic) LBLelinkConnection *lelinkConnection;
@property (retain, nonatomic) LBLelinkPlayerItem *item;
@property (nonatomic, getter=isPauseBarrage) BOOL pauseBarrage;
@property (nonatomic) unsigned long long barrageFlySpeed;
@property (nonatomic, getter=isBarrageBottomStartShow) BOOL barrageBottomStartShow;
@property (nonatomic, getter=isAllowOverlap) BOOL barrageAllowOverlap;
@property (nonatomic) unsigned long long barrageMaxLine;
@property (nonatomic, getter=isHideBarrage) BOOL hideBarrage;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (unsigned long long)playStatus;
- (void)setPlayStatus:(unsigned long long)arg0;
- (void)setWaitTime:(double)arg0;
- (double)waitTime;
- (void)getPlaySpeed;
- (void)setTid:(id)arg0;
- (id)positiveLink;
- (void)initDefaultParam;
- (void)setPlaySpeedRate:(double)arg0;
- (void)setADInfo:(id)arg0;
- (void)innerPalyerPlayWithItem:(id)arg0;
- (id)innerNewLelinkConnection;
- (id)upnpConnection;
- (void)playerOnError:(id)arg0;
- (id)innerNewLelinkPlayer;
- (void)playWithItem:(id)arg0;
- (id)upnpPlayer;
- (id)barrSetting;
- (void)modifyBarrageSetting:(id)arg0;
- (void)innerPalyerPlay;
- (id)aDInfo;
- (void)resumePlay;
- (void)playWithADSenderInitiativeStop;
- (void)addVolume;
- (void)reduceVolume;
- (BOOL)isSupportChangePlaySpeed;
- (double)rateWithRateType:(unsigned long long)arg0;
- (void)setPlaySpeedWithRate:(unsigned long long)arg0;
- (BOOL)canSupportPlaySpeedSync;
- (BOOL)canPlayOnlineAudio;
- (BOOL)canPlayOnlineVedio;
- (BOOL)canPlayLocalPhoto;
- (BOOL)canPlayOnlinePhoto;
- (BOOL)canPlayLocalAudio;
- (BOOL)canPlayLocalVideo;
- (BOOL)canPassthLeBoData;
- (BOOL)canPassthIMData;
- (BOOL)canReceiveCollectActionResponse;
- (void)playWithStatus:(unsigned long long)arg0 reason:(unsigned long long)arg1;
- (void)playWithProgress:(id)arg0;
- (void)setMonitorActionsOnError:(id)arg0;
- (void)playWithPushResponse:(id)arg0;
- (void)playWithHarassInfo:(struct { long long x0; long long x1; long long x2; id x3; })arg0;
- (void)playWithLeboInternalData:(id)arg0;
- (void)playWithExternalData:(id)arg0;
- (void)delegatePlaySpeed:(double)arg0;
- (void)delegatePlaySpeedResponseError:(id)arg0;
- (void)playWithCurrentMediaId:(id)arg0;
- (void)setMonitorActions:(id)arg0;
- (void)playWithADStatus:(unsigned long long)arg0 reason:(unsigned long long)arg1;
- (void)setHarassInfo:(struct { long long x0; long long x1; long long x2; id x3; })arg0;
- (id)currentMediaId;
- (void)setCurrentMediaId:(id)arg0;
- (BOOL)canGetScreenCaptureWithLelinkService:(id)arg0;
- (BOOL)isOnCaptureProcess;
- (void)setIsOnCaptureProcess:(BOOL)arg0;
- (void)setPhotoCaputureQueue:(id)arg0;
- (void)setPositiveLink:(id)arg0;
- (void)countTimerMethod;
- (void)setCountTimer:(id)arg0;
- (void)postShortScreen;
- (void)setInnerNewLelinkConnection:(id)arg0;
- (void)setUpnpConnection:(id)arg0;
- (void)upnpPlayer:(id)arg0 onError:(id)arg1;
- (void)upnpPlayer:(id)arg0 progress:(id)arg1;
- (void)upnpPlayer:(id)arg0 palyStatus:(unsigned long long)arg1;
- (void)upnpPlayer:(id)arg0 setMonitorActionError:(id)arg1;
- (void)upnpPlayer:(id)arg0 pushResponse:(id)arg1;
- (void)innerNewLelinkPlayer:(id)arg0 onError:(id)arg1;
- (void)innerNewLelinkPlayer:(id)arg0 playStatus:(unsigned long long)arg1 reason:(unsigned long long)arg2;
- (void)innerNewLelinkPlayer:(id)arg0 progressInfo:(id)arg1;
- (void)innerNewLelinkPlayer:(id)arg0 setMonitorActionError:(id)arg1;
- (void)innerNewLelinkPlayer:(id)arg0 harassInfo:(struct { long long x0; long long x1; long long x2; id x3; })arg1;
- (void)innerNewLelinkPlayer:(id)arg0 internalData:(id)arg1;
- (void)innerNewLelinkPlayer:(id)arg0 externalData:(id)arg1;
- (void)innerNewLelinkPlayer:(id)arg0 playSpeed:(id)arg1;
- (void)innerNewLelinkPlayer:(id)arg0 playSpeedResponseError:(id)arg1;
- (void)innerNewLelinkPlayer:(id)arg0 currentMediaId:(id)arg1;
- (void)innerNewLelinkPlayer:(id)arg0 pushResponse:(id)arg1;
- (unsigned long long)playSpeedRateTypeWithRate:(double)arg0;
- (BOOL)canPlayMedia:(unsigned long long)arg0;
- (BOOL)supportOldBarrage;
- (BOOL)canSupportPushBarrage;
- (BOOL)canCurrentPushBarrage;
- (void)setHideBarrage:(BOOL)arg0;
- (void)setPauseBarrage:(BOOL)arg0;
- (void)setBarrageMaxLine:(unsigned long long)arg0;
- (void)setBarrageFlySpeed:(unsigned long long)arg0;
- (void)setBarrageBottomStartShow:(BOOL)arg0;
- (void)setBarrageAllowOverlap:(BOOL)arg0;
- (void)pushBarrageAry:(id)arg0;
- (void)pushPriorityBarrage:(id)arg0;
- (void)cloudMirrorExitMode:(unsigned long long)arg0;
- (BOOL)canSetterHeader;
- (BOOL)canSetterAes;
- (BOOL)canPassthData;
- (void)passthErrorInfoWithErrorCode:(long long)arg0 error:(id)arg1 handlerType:(int)arg2;
- (BOOL)canPassthSecretListen;
- (BOOL)canCacheVideoList;
- (void)cacheVideoList:(id)arg0 startIndex:(long long)arg1;
- (void)pushVideoList:(id)arg0 validPeriod:(long long)arg1 startMediaId:(id)arg2;
- (void)appendVideoList:(id)arg0 validPeriod:(long long)arg1;
- (void)clearVideoList;
- (void)playVideoListToMediaId:(id)arg0;
- (void)playNextMediaInVideoList;
- (void)playPrevMediaInVideoList;
- (void)switchAudioTrackWithIndex:(long long)arg0;
- (void)switchTemporaryPrivateMode:(BOOL)arg0;
- (BOOL)canKeepHistoryDev;
- (void)getScreenCaptureWithLelinkService:(id)arg0 completionHandler:(id /* block */)arg1;
- (void)zoomFromSize:(struct CGSize { double x0; double x1; })arg0 toDisplayArea:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg1;
- (void)rotateAngle:(long long)arg0;
- (BOOL)isPauseBarrage;
- (unsigned long long)barrageFlySpeed;
- (BOOL)isBarrageBottomStartShow;
- (BOOL)isAllowOverlap;
- (unsigned long long)barrageMaxLine;
- (BOOL)isHideBarrage;
- (void)setUpnpPlayer:(id)arg0;
- (void)setInnerNewLelinkPlayer:(id)arg0;
- (struct { long long x0; long long x1; long long x2; id x3; })harassInfo;
- (double)playSpeedRate;
- (void)setBarrSetting:(id)arg0;
- (id)photoCaputureQueue;
- (id)countTimer;
- (id)vsession;
- (void)setVsession:(id)arg0;
- (BOOL)canSwitchTemporaryPrivateMode;
- (BOOL)canPushVideoList;
- (BOOL)canSwitchAudioTrack;
- (id)wrongPassth;
- (void)passthLeBoInternalUseDataDic:(id)arg0 handlerType:(int)arg1;
- (void)passthThirdPartyExternalUseDataDic:(id)arg0 handlerType:(int)arg1 targetAppId:(id)arg2;
- (void)setWrongPassth:(id)arg0;
- (void)setVuuid:(id)arg0;
- (id)lelinkConnection;
- (void)setLelinkConnection:(id)arg0;
- (id)receivedData;
- (id)item;
- (id)init;
- (void).cxx_destruct;
- (void)setSessionID:(id)arg0;
- (id)vuuid;
- (id)sessionID;
- (void)setCompletionHandler:(id /* block */)arg0;
- (id)initWithConnection:(id)arg0;
- (void)stop;
- (id)delegate;
- (id /* block */)completionHandler;
- (void)setVolume:(long long)arg0;
- (void)setReceivedData:(id)arg0;
- (void)setDelegate:(id)arg0;
- (void)dealloc;
- (void)play;
- (void)pause;
- (void)setItem:(id)arg0;
- (id)tid;
- (void)seekTo:(long long)arg0;
- (id)progressInfo;
- (void)setProgressInfo:(id)arg0;
- (void)socket:(id)arg0 didConnectToHost:(id)arg1 port:(unsigned short)arg2;
- (void)socket:(id)arg0 didReadData:(id)arg1 withTag:(long long)arg2;
- (void)socket:(id)arg0 didWriteDataWithTag:(long long)arg1;
- (void)socketDidDisconnect:(id)arg0 withError:(id)arg1;

@end
