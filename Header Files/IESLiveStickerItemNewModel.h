//
//     Generated by private class-dump
//

@class NSString, NSArray, IESLiveStickerImageNewModel, IESLiveStickerFontConfigNew, NSNumber, NSDictionary;

@interface IESLiveStickerItemNewModel : IESLiveDynamicMTLModel <MTLJSONSerializing> {
    BOOL _isTextSticker;
    BOOL _isImageSticker;
    NSNumber *_textSize;
    NSNumber *_stickerID;
    NSNumber *_maxLength;
    NSString *_color;
    NSArray *_inputRect;
    IESLiveStickerImageNewModel *_image;
    NSArray *_initialRect;
    NSNumber *_textImageAdjustableStartPosition;
    NSNumber *_textImageAdjustableEndPosition;
    IESLiveStickerFontConfigNew *_fontConfig;
    double _xScaleFactor;
    double _yScaleFactor;
    NSString *_auditTextColor;
    struct CGPoint { double x; double y; } _scaleCenter;
    struct CGPoint { double x; double y; } _center;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _textRect;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _frame;
}

@property (readonly, nonatomic) NSNumber *textSize;
@property (readonly, nonatomic) NSNumber *stickerID;
@property (readonly, nonatomic) NSNumber *maxLength;
@property (readonly, copy, nonatomic) NSString *color;
@property (readonly, nonatomic) NSArray *inputRect;
@property (readonly, nonatomic) IESLiveStickerImageNewModel *image;
@property (readonly, nonatomic) NSArray *initialRect;
@property (copy, nonatomic) NSString *content;
@property (retain, nonatomic) NSNumber *type;
@property (retain, nonatomic) NSNumber *x;
@property (retain, nonatomic) NSNumber *y;
@property (retain, nonatomic) NSNumber *w;
@property (retain, nonatomic) NSNumber *h;
@property (retain, nonatomic) NSNumber *textImageAdjustableStartPosition;
@property (retain, nonatomic) NSNumber *textImageAdjustableEndPosition;
@property (retain, nonatomic) IESLiveStickerFontConfigNew *fontConfig;
@property (retain, nonatomic) NSString *rectString;
@property (retain, nonatomic) NSString *centerString;
@property (nonatomic) struct CGPoint { double x; double y; } scaleCenter;
@property (nonatomic) struct CGPoint { double x; double y; } center;
@property (nonatomic, getter=isTextSticker) BOOL isTextSticker;
@property (nonatomic, getter=isImageSticker) BOOL isImageSticker;
@property (nonatomic) double xScaleFactor;
@property (nonatomic) double yScaleFactor;
@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } textRect;
@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } frame;
@property (readonly, copy, nonatomic) NSString *auditTextColor;
@property (readonly, copy, nonatomic) NSDictionary *dictionaryValue;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (id)imageJSONTransformer;
+ (id)fontConfigJSONTransformer;
+ (id)stickerIDJSONTransformer;
+ (id)JSONKeyPathsByPropertyKey;

- (id)stickerID;
- (BOOL)isTextSticker;
- (void)setIsTextSticker:(BOOL)arg0;
- (double)xScaleFactor;
- (double)yScaleFactor;
- (BOOL)isImageSticker;
- (id)textImageAdjustableStartPosition;
- (void)setTextImageAdjustableStartPosition:(id)arg0;
- (id)textImageAdjustableEndPosition;
- (void)setTextImageAdjustableEndPosition:(id)arg0;
- (id)fontConfig;
- (void)setFontConfig:(id)arg0;
- (void)setIsImageSticker:(BOOL)arg0;
- (void)setXScaleFactor:(double)arg0;
- (void)setYScaleFactor:(double)arg0;
- (void)setTextRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0;
- (id)auditTextColor;
- (struct CGPoint { double x0; double x1; })scaleCenter;
- (void)setScaleCenter:(struct CGPoint { double x0; double x1; })arg0;
- (id)color;
- (void).cxx_destruct;
- (id)image;
- (void)setCenter:(struct CGPoint { double x0; double x1; })arg0;
- (BOOL)isEqual:(id)arg0;
- (void)setFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0;
- (id)maxLength;
- (struct CGPoint { double x0; double x1; })center;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame;
- (id)textSize;
- (id)inputRect;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })textRect;
- (id)initialRect;

@end
