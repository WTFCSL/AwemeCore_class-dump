//
//     Generated by private class-dump
//

@class BDTGPrivateKeyManager, BDTicketGuardConfig, NSString;

@interface BDTicketGuard : NSObject {
    BDTicketGuardConfig *_config;
    NSString *_domain;
    id /* block */ _eventTrackControllBlock;
}

@property (class, readonly, nonatomic) BDTGPrivateKeyManager *teeKeyManager;
@property (class, readonly, nonatomic) BDTGPrivateKeyManager *reeKeyManager;
@property (class, readonly, nonatomic) BOOL teeHasFailedBefore;
@property (class, readonly, nonatomic) BDTicketGuardConfig *config;
@property (class, copy, nonatomic) NSString *domain;
@property (class, readonly, copy, nonatomic) NSString *sdkVersion;
@property (class, readonly, copy, nonatomic) NSString *clientCert;
@property (class, readonly, copy, nonatomic) NSString *serverCertSN;
@property (class, copy, nonatomic) id /* block */ eventTrackControllBlock;

@property (retain, nonatomic) BDTicketGuardConfig *config;
@property (copy) NSString *domain;
@property (copy, nonatomic) id /* block */ eventTrackControllBlock;

+ (void)eventV3:(id)arg0 params:(id)arg1;
+ (void)preloadCert;
+ (void)loadCertWithCompletion:(id /* block */)arg0;
+ (void)p_preloadCert;
+ (void)p_loadCertWithCompletion:(id /* block */)arg0;
+ (void)trackFullPathWithTicketName:(id)arg0 eventType:(id)arg1 error:(id)arg2 extraInfo:(id)arg3;
+ (id)clientCert;
+ (id)serverCertSN;
+ (id)teeKeyManager;
+ (void)trackGetCertWithParams:(id)arg0 error:(id)arg1 startTimestamp:(double)arg2;
+ (void)trackGetPrivateKeyWithError:(id)arg0 startTimestamp:(double)arg1 keyType:(id)arg2 isFromCache:(BOOL)arg3 attemptCount:(int)arg4;
+ (BOOL)hasGeneratedForKeyType:(id)arg0;
+ (void)trackGetClientCSRWithResult:(id)arg0;
+ (void)trackCreateSignatureResult:(id)arg0 startTimestamp:(double)arg1;
+ (void)setHasGeneratedForKeyType:(id)arg0;
+ (void)trackGetPrivateKeySuccessWithTimes:(long long)arg0 isFromCache:(int)arg1;
+ (void)trackPrivateKeyDidChange:(id)arg0;
+ (void)trackKeyCertNotMatch:(BOOL)arg0;
+ (id)tsSignItemsInResponse:(id)arg0;
+ (id)snapshotForRequest:(id)arg0 response:(id)arg1;
+ (void)ticketDidUpdateWithRequset:(id)arg0 response:(id)arg1 ticketName:(id)arg2 ticket:(id)arg3 tsSign:(id)arg4;
+ (id)addHeadersToGetTicketRequest:(id)arg0 ticketName:(id)arg1;
+ (void)setTeeHasFailed;
+ (BOOL)enableRee;
+ (BOOL)teeHasFailedBefore;
+ (void)trackAddGetTicketHeaders:(id)arg0 error:(id)arg1 startTimestamp:(double)arg2;
+ (id)ticketGuardVersion;
+ (id)ticketGuardIterationVersion;
+ (void)trackGetTicketWithRequest:(id)arg0 response:(id)arg1 startTimestamp:(double)arg2 hasLocalClientCert:(int)arg3 hasRemoteClientCert:(int)arg4 hasServerData:(int)arg5;
+ (void)trackSignClientDataForRequestPath:(id)arg0 error:(id)arg1 startTimestamp:(double)arg2 attemptCount:(int)arg3;
+ (void)trackUseTicketIfFail:(id)arg0 response:(id)arg1;
+ (id)addHeadersToGetTicketRequest:(id)arg0;
+ (id)handleGetTicketRequest:(id)arg0;
+ (void)handleGetTicketResponse:(id)arg0 request:(id)arg1;
+ (id)handleUseTicketRequest:(id)arg0;
+ (id)ticketForRequestPath:(id)arg0 tag:(id)arg1;
+ (id)addHeadersToUseTicketRequest:(id)arg0 ticket:(id)arg1 tsSign:(id)arg2 ticketName:(id)arg3;
+ (id)addHeadersToUseTicketRequest:(id)arg0 ticket:(id)arg1 tsSign:(id)arg2;
+ (id)addHeadersToGetTicketRequestReeOnly:(id)arg0 timeout:(double)arg1;
+ (id)addHeadersToUseTicketRequestReeOnly:(id)arg0 ticket:(id)arg1 tsSign:(id)arg2 timeout:(double)arg3;
+ (void)trackGetPublicKeyWithError:(id)arg0 startTimestamp:(double)arg1;
+ (void)trackDecryptWithError:(id)arg0 startTimestamp:(double)arg1 keyType:(id)arg2;
+ (void)trackSDKLaunch;
+ (id)reeKeyManager;
+ (id /* block */)eventTrackControllBlock;
+ (void)setEventTrackControllBlock:(id /* block */)arg0;
+ (void)trackDecryptTimeout:(double)arg0 keyType:(id)arg1;
+ (id)decryptData:(id)arg0 timeout:(double)arg1 error:(id *)arg2;
+ (id)decryptDataForString:(id)arg0 error:(id *)arg1;
+ (id)decryptDataForString:(id)arg0 timeout:(double)arg1 error:(id *)arg2;
+ (id)reeDecryptData:(id)arg0 error:(id *)arg1;
+ (id)decryptHexString:(id)arg0 error:(id *)arg1;
+ (id)decryptHexString:(id)arg0 timeout:(double)arg1 error:(id *)arg2;
+ (id)decryptBase64String:(id)arg0 error:(id *)arg1;
+ (id)decryptBase64String:(id)arg0 timeout:(double)arg1 error:(id *)arg2;
+ (id)reeDecryptBase64StringForString:(id)arg0 timeout:(double)arg1 error:(id *)arg2;
+ (void)addTTNetRequestForPassportAccessTokenFilterBlock;
+ (id)reeGetTicketRequestHeadersWithUrl:(id)arg0 needTicketEncrypted:(BOOL)arg1 timeout:(double)arg2 error:(id *)arg3;
+ (id)reeUseTicketRequestHeadersWithUrl:(id)arg0 tsSignItem:(id)arg1 timeout:(double)arg2 error:(id *)arg3;
+ (id)decryptData:(id)arg0 keyType:(id)arg1 error:(id *)arg2;
+ (id)sharedInstance;
+ (id)config;
+ (id)domain;
+ (id)decryptData:(id)arg0 error:(id *)arg1;
+ (void)start;
+ (void)configure:(id)arg0;
+ (void)setDomain:(id)arg0;
+ (id)sdkVersion;

- (id /* block */)eventTrackControllBlock;
- (void)setEventTrackControllBlock:(id /* block */)arg0;
- (void)setConfig:(id)arg0;
- (void).cxx_destruct;
- (id)config;
- (id)domain;
- (void)setDomain:(id)arg0;

@end
