//
//     Generated by private class-dump
//

@class NSData, NSString, NSArray;

@interface IESMMTranscoderParam : NSObject <NSCopying> {
    BOOL _useUserBitrate;
    BOOL _useBitrateLog;
    BOOL _allowFrameReordering;
    BOOL _forceAllIFrame;
    BOOL _isReverseTrans;
    BOOL _allowRealTime;
    BOOL _forceReencode;
    BOOL _forceRemux;
    BOOL _adjustBitrateWithResolution;
    BOOL _adjustBitrateWithEffectFilter;
    BOOL _adjustBitrateWithVideoRate;
    BOOL _adjustBitrateAndKeyFrameIntervalWithAccelerateInfo;
    BOOL _useVideoDataOutputSize;
    BOOL _useVideoDataOutputSizeForReencode;
    BOOL _useOutputSizeLimited;
    BOOL _useUserRemuxResolutionLimit;
    BOOL _enableBYTEVC1EncodeInRecorder;
    BOOL _enableBYTEVC1EncodeInEditor;
    BOOL _forceH264EncodeInEditor;
    BOOL _enableHlgBytevcMain10;
    BOOL _enableAVInterLeaving;
    BOOL _isRecorderResolutionDegraded;
    int _bitrate;
    int _audioBitrate;
    int _audioChannels;
    int _audioFormatID;
    int _recorderEffectiveBitrate;
    int _maxEncodeFrameCache;
    int _minEncodeFrameCache;
    int _remuxBitrateLimit;
    int _remuxResolutionLimit;
    unsigned int _codecType;
    double _frameRate;
    double _audioSampleRate;
    NSData *_audioChannelLayout;
    double _maxKeyFrameDuration;
    NSString *_videoEntropyMode;
    NSString *_videoProfileLevel;
    NSArray *_splitTimePoints;
    long long _transType;
    long long _testID;
    NSString *_sceneKey;
    NSString *_bitrateSetting;
    NSString *_remuxBitrateLimitJson;
    long long _writerType;
    NSString *_colorPrimaries;
    NSString *_transferFunction;
    NSString *_yCbCrMatrix;
    double _imageQuality;
    long long _startTime;
    long long _endTime;
    struct CGSize { double width; double height; } _videoSize;
    struct CGSize { double width; double height; } _targetVideoSize;
    struct CGAffineTransform { double a; double b; double c; double d; double tx; double ty; } _transform;
}

@property (nonatomic) struct CGSize { double width; double height; } videoSize;
@property (nonatomic) struct CGSize { double width; double height; } targetVideoSize;
@property (nonatomic) double frameRate;
@property (nonatomic) int bitrate;
@property (nonatomic) BOOL useUserBitrate;
@property (nonatomic) BOOL useBitrateLog;
@property (nonatomic) int audioBitrate;
@property (nonatomic) int audioChannels;
@property (nonatomic) double audioSampleRate;
@property (nonatomic) int audioFormatID;
@property (retain, nonatomic) NSData *audioChannelLayout;
@property (nonatomic) double maxKeyFrameDuration;
@property (nonatomic) BOOL allowFrameReordering;
@property (nonatomic) BOOL forceAllIFrame;
@property (nonatomic) BOOL isReverseTrans;
@property (nonatomic) BOOL allowRealTime;
@property (retain, nonatomic) NSString *videoEntropyMode;
@property (retain, nonatomic) NSString *videoProfileLevel;
@property (nonatomic) int recorderEffectiveBitrate;
@property (nonatomic) BOOL forceReencode;
@property (nonatomic) BOOL forceRemux;
@property (nonatomic) BOOL adjustBitrateWithResolution;
@property (nonatomic) BOOL adjustBitrateWithEffectFilter;
@property (nonatomic) BOOL adjustBitrateWithVideoRate;
@property (nonatomic) BOOL adjustBitrateAndKeyFrameIntervalWithAccelerateInfo;
@property (retain, nonatomic) NSArray *splitTimePoints;
@property (nonatomic) int maxEncodeFrameCache;
@property (nonatomic) int minEncodeFrameCache;
@property (nonatomic) BOOL useVideoDataOutputSize;
@property (nonatomic) BOOL useVideoDataOutputSizeForReencode;
@property (nonatomic) BOOL useOutputSizeLimited;
@property (nonatomic) long long transType;
@property (nonatomic) long long testID;
@property (retain, nonatomic) NSString *sceneKey;
@property (nonatomic) struct CGAffineTransform { double a; double b; double c; double d; double tx; double ty; } transform;
@property (retain, nonatomic) NSString *bitrateSetting;
@property (nonatomic) int remuxBitrateLimit;
@property (retain, nonatomic) NSString *remuxBitrateLimitJson;
@property (nonatomic) BOOL useUserRemuxResolutionLimit;
@property (nonatomic) int remuxResolutionLimit;
@property (nonatomic) long long writerType;
@property (nonatomic) BOOL enableBYTEVC1EncodeInRecorder;
@property (nonatomic) BOOL enableBYTEVC1EncodeInEditor;
@property (nonatomic) BOOL forceH264EncodeInEditor;
@property (nonatomic) BOOL enableHlgBytevcMain10;
@property (nonatomic) BOOL enableAVInterLeaving;
@property (nonatomic) unsigned int codecType;
@property (retain, nonatomic) NSString *colorPrimaries;
@property (retain, nonatomic) NSString *transferFunction;
@property (retain, nonatomic) NSString *yCbCrMatrix;
@property (nonatomic) double imageQuality;
@property (nonatomic) long long startTime;
@property (nonatomic) long long endTime;
@property (nonatomic) BOOL isRecorderResolutionDegraded;

- (id)sceneKey;
- (void)setSceneKey:(id)arg0;
- (int)audioBitrate;
- (void)setAudioBitrate:(int)arg0;
- (BOOL)forceReencode;
- (BOOL)forceRemux;
- (BOOL)useUserBitrate;
- (id)remuxBitrateLimitJson;
- (int)remuxBitrateLimit;
- (BOOL)useUserRemuxResolutionLimit;
- (int)remuxResolutionLimit;
- (BOOL)useVideoDataOutputSize;
- (BOOL)enableAVInterLeaving;
- (double)maxKeyFrameDuration;
- (BOOL)adjustBitrateAndKeyFrameIntervalWithAccelerateInfo;
- (BOOL)adjustBitrateWithResolution;
- (BOOL)adjustBitrateWithEffectFilter;
- (long long)writerType;
- (struct CGSize { double x0; double x1; })targetVideoSize;
- (void)setUseVideoDataOutputSize:(BOOL)arg0;
- (void)setTargetVideoSize:(struct CGSize { double x0; double x1; })arg0;
- (BOOL)useBitrateLog;
- (void)setUseBitrateLog:(BOOL)arg0;
- (void)setUseUserBitrate:(BOOL)arg0;
- (int)maxEncodeFrameCache;
- (void)setMaxEncodeFrameCache:(int)arg0;
- (void)setMaxKeyFrameDuration:(double)arg0;
- (BOOL)allowFrameReordering;
- (void)setAllowFrameReordering:(BOOL)arg0;
- (BOOL)allowRealTime;
- (void)setAllowRealTime:(BOOL)arg0;
- (id)videoEntropyMode;
- (void)setVideoEntropyMode:(id)arg0;
- (id)videoProfileLevel;
- (void)setVideoProfileLevel:(id)arg0;
- (int)recorderEffectiveBitrate;
- (void)setRecorderEffectiveBitrate:(int)arg0;
- (void)setForceReencode:(BOOL)arg0;
- (void)setForceRemux:(BOOL)arg0;
- (void)setWriterType:(long long)arg0;
- (BOOL)enableBYTEVC1EncodeInRecorder;
- (void)setEnableBYTEVC1EncodeInRecorder:(BOOL)arg0;
- (BOOL)enableBYTEVC1EncodeInEditor;
- (void)setEnableBYTEVC1EncodeInEditor:(BOOL)arg0;
- (BOOL)forceH264EncodeInEditor;
- (void)setForceH264EncodeInEditor:(BOOL)arg0;
- (void)setAdjustBitrateWithResolution:(BOOL)arg0;
- (void)setAdjustBitrateWithEffectFilter:(BOOL)arg0;
- (void)setAdjustBitrateAndKeyFrameIntervalWithAccelerateInfo:(BOOL)arg0;
- (BOOL)adjustBitrateWithVideoRate;
- (void)setAdjustBitrateWithVideoRate:(BOOL)arg0;
- (void)setBitrateSetting:(id)arg0;
- (void)setRemuxBitrateLimitJson:(id)arg0;
- (BOOL)enableHlgBytevcMain10;
- (void)setEnableHlgBytevcMain10:(BOOL)arg0;
- (id)splitTimePoints;
- (void)setSplitTimePoints:(id)arg0;
- (void)setEnableAVInterLeaving:(BOOL)arg0;
- (void)setUseUserRemuxResolutionLimit:(BOOL)arg0;
- (void)setRemuxResolutionLimit:(int)arg0;
- (BOOL)forceAllIFrame;
- (void)setForceAllIFrame:(BOOL)arg0;
- (BOOL)isReverseTrans;
- (void)setIsReverseTrans:(BOOL)arg0;
- (BOOL)isRecorderResolutionDegraded;
- (void)resetParamWithID:(long long)arg0;
- (int)writerBitrateByType:(long long)arg0 size:(unsigned long long)arg1 fps:(float)arg2 effectNeedHighBitrate:(BOOL)arg3 workReport:(id)arg4 hasRecorderEffect:(BOOL)arg5;
- (float)getEncodeGopByType:(long long)arg0 workReport:(id)arg1;
- (int)getEncodeFpsByType:(long long)arg0;
- (int)writerAudioBitrateByType:(long long)arg0 workReport:(id)arg1;
- (float)getLensHDRBitrateRatioByType:(long long)arg0 workReport:(id)arg1;
- (BOOL)isTargetSizeNeedChanged;
- (BOOL)isRecorderBitrateChangeEnabled;
- (void)setAudioChannels:(int)arg0;
- (int)audioFormatID;
- (void)setAudioFormatID:(int)arg0;
- (id)audioChannelLayout;
- (void)setAudioChannelLayout:(id)arg0;
- (int)minEncodeFrameCache;
- (void)setMinEncodeFrameCache:(int)arg0;
- (BOOL)useVideoDataOutputSizeForReencode;
- (void)setUseVideoDataOutputSizeForReencode:(BOOL)arg0;
- (BOOL)useOutputSizeLimited;
- (void)setUseOutputSizeLimited:(BOOL)arg0;
- (void)setRemuxBitrateLimit:(int)arg0;
- (id)yCbCrMatrix;
- (void)setIsRecorderResolutionDegraded:(BOOL)arg0;
- (id)acc_transcoderParamDict;
- (id)init;
- (void)setStartTime:(long long)arg0;
- (void).cxx_destruct;
- (id)copyWithZone:(struct _NSZone { } *)arg0;
- (int)bitrate;
- (long long)endTime;
- (int)audioChannels;
- (long long)startTime;
- (void)setFrameRate:(double)arg0;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })transform;
- (void)setEndTime:(long long)arg0;
- (double)frameRate;
- (void)setTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })arg0;
- (void)setAudioSampleRate:(double)arg0;
- (double)audioSampleRate;
- (id)colorPrimaries;
- (void)setColorPrimaries:(id)arg0;
- (void)setBitrate:(int)arg0;
- (id)transferFunction;
- (void)setYCbCrMatrix:(id)arg0;
- (void)setTransferFunction:(id)arg0;
- (unsigned int)codecType;
- (void)setCodecType:(unsigned int)arg0;
- (struct CGSize { double x0; double x1; })videoSize;
- (void)setVideoSize:(struct CGSize { double x0; double x1; })arg0;
- (long long)transType;
- (void)setTransType:(long long)arg0;
- (id)bitrateSetting;
- (long long)testID;
- (void)setTestID:(long long)arg0;
- (void)setImageQuality:(double)arg0;
- (double)imageQuality;

@end
