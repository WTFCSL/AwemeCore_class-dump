//
//     Generated by private class-dump
//

@class RACSequence;

@interface RACSignal : RACStream

@property (readonly, nonatomic) RACSequence *sequence;

+ (id)return:(id)arg0;
+ (id)createSignal:(id /* block */)arg0;
+ (id)if:(id)arg0 then:(id)arg1 else:(id)arg2;
+ (id)defer:(id /* block */)arg0;
+ (id)interval:(double)arg0 onScheduler:(id)arg1 withLeeway:(double)arg2;
+ (id)try:(id /* block */)arg0;
+ (id)combineLatest:(id)arg0 reduce:(id /* block */)arg1;
+ (id)interval:(double)arg0 onScheduler:(id)arg1;
+ (id)switch:(id)arg0 cases:(id)arg1 default:(id)arg2;
+ (id)startLazilyWithScheduler:(id)arg0 block:(id /* block */)arg1;
+ (id)never;
+ (id)startEagerlyWithScheduler:(id)arg0 block:(id /* block */)arg1;
+ (id)createSignalWithServiceRegister:(id)arg0 serviceProtocol:(id)arg1;
+ (id)merge:(id)arg0;
+ (id)empty;
+ (id)error:(id)arg0;
+ (id)combineLatest:(id)arg0;

- (id)deliverOnMainThread;
- (id)or;
- (id)subscribeNext:(id /* block */)arg0 error:(id /* block */)arg1;
- (id)subscribeNext:(id /* block */)arg0;
- (id)and;
- (id)ignoreValues;
- (id)catchTo:(id)arg0;
- (id)replayLast;
- (id)throttle:(double)arg0 valuesPassingTest:(id /* block */)arg1;
- (id)aggregateWithStartFactory:(id /* block */)arg0 reduce:(id /* block */)arg1;
- (id)combineLatestWith:(id)arg0;
- (id)flatten:(unsigned long long)arg0;
- (id)aggregateWithStart:(id)arg0 reduce:(id /* block */)arg1;
- (id)aggregateWithStart:(id)arg0 reduceWithIndex:(id /* block */)arg1;
- (id)switchToLatest;
- (id)firstOrDefault:(id)arg0 success:(BOOL *)arg1 error:(id *)arg2;
- (id)groupBy:(id /* block */)arg0 transform:(id /* block */)arg1;
- (id)retry:(long long)arg0;
- (id)throttle:(double)arg0;
- (id)delay:(double)arg0;
- (id)try:(id /* block */)arg0;
- (id)tryMap:(id /* block */)arg0;
- (id)initially:(id /* block */)arg0;
- (id)bufferWithTime:(double)arg0 onScheduler:(id)arg1;
- (id)concat;
- (id)setKeyPath:(id)arg0 onObject:(id)arg1;
- (id)takeUntilReplacement:(id)arg0;
- (BOOL)waitUntilCompleted:(id *)arg0;
- (id)replayLazily;
- (id)reduceApply;
- (id)subscribeNext:(id /* block */)arg0 error:(id /* block */)arg1 completed:(id /* block */)arg2;
- (id)subscribeNext:(id /* block */)arg0 completed:(id /* block */)arg1;
- (id)subscribeError:(id /* block */)arg0;
- (id)subscribeCompleted:(id /* block */)arg0;
- (id)subscribeError:(id /* block */)arg0 completed:(id /* block */)arg1;
- (id)logNext;
- (id)logError;
- (id)logCompleted;
- (id)doError:(id /* block */)arg0;
- (id)doCompleted:(id /* block */)arg0;
- (id)logAll;
- (id)asynchronousFirstOrDefault:(id)arg0 success:(BOOL *)arg1 error:(id *)arg2 timeout:(double)arg3;
- (id)timeout:(double)arg0 onScheduler:(id)arg1;
- (id)deliverOn:(id)arg0;
- (BOOL)asynchronouslyWaitUntilCompleted:(id *)arg0 timeout:(double)arg1;
- (id)asynchronousFirstOrDefault:(id)arg0 success:(BOOL *)arg1 error:(id *)arg2;
- (BOOL)asynchronouslyWaitUntilCompleted:(id *)arg0;
- (id)firstOrDefault:(id)arg0;
- (id)zipWith:(id)arg0;
- (id)setKeyPath:(id)arg0 onObject:(id)arg1 nilValue:(id)arg2;
- (id)merge:(id)arg0;
- (id)not;
- (id)groupBy:(id /* block */)arg0;
- (id)then:(id /* block */)arg0;
- (id)sequence;
- (id)subscribe:(id)arg0;
- (id)all:(id /* block */)arg0;
- (id)concat:(id)arg0;
- (id)first;
- (id)description;
- (id)catch:(id /* block */)arg0;
- (id)publish;
- (id)replay;
- (id)any:(id /* block */)arg0;
- (id)retry;
- (id)collect;
- (id)subscribeOn:(id)arg0;
- (id)any;
- (id)dematerialize;
- (id)materialize;
- (id)sample:(id)arg0;
- (id)takeLast:(unsigned long long)arg0;
- (id)takeUntil:(id)arg0;
- (id)toArray;
- (id)finally:(id /* block */)arg0;
- (id)repeat;
- (id)multicast:(id)arg0;
- (id)doNext:(id /* block */)arg0;
- (id)bind:(id /* block */)arg0;

@end
