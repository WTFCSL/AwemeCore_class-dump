//
//     Generated by private class-dump
//

@class NSString, NSArray, AVAssetWriter, VEAudioEncodeConfig, VELimitLogger, NSURL, HTSGLContext, NSObject, AVAssetWriterInput;
@protocol OS_dispatch_queue, IESGLMovieWriterDelegate;

@interface VEAudioWriter : NSObject <VEMovieWriterDelegate> {
    BOOL _alreadyFinishedRecording;
    NSURL *_movieURL;
    NSString *_fileType;
    AVAssetWriter *_assetWriter;
    AVAssetWriterInput *_assetWriterAudioInput;
    struct { long long value; int timescale; unsigned int flags; long long epoch; } _startTime;
    struct { long long value; int timescale; unsigned int flags; long long epoch; } _previousFrameTime;
    struct { long long value; int timescale; unsigned int flags; long long epoch; } _previousAudioTime;
    struct { long long value; int timescale; unsigned int flags; long long epoch; } _previousOriginFrameTime;
    NSObject<OS_dispatch_queue> *_audioQueue;
    BOOL _audioEncodingIsFinished;
    BOOL _isRecording;
    BOOL _dropFrame;
    double _startFrameTime;
    BOOL _hasAudioTrack;
    BOOL _encodingLiveVideo;
    BOOL _shouldPassthroughAudio;
    BOOL _shouldInvalidateAudioSampleWhenDone;
    BOOL _paused;
    BOOL _disableWriteAuido;
    BOOL _enabled;
    BOOL _isAudioReady;
    BOOL _isBytevc;
    BOOL _isFromRecorder;
    BOOL _isVideoReady;
    BOOL _needStatisticProgress;
    BOOL _useEffectRecordRate;
    BOOL _useAudioEffect;
    BOOL _isFristAudioFrame;
    int _controlFrameRate;
    id /* block */ _completionBlock;
    id /* block */ _failureBlock;
    id /* block */ _videoInputReadyCallback;
    id /* block */ _audioInputReadyCallback;
    HTSGLContext *_movieWriterContext;
    id<IESGLMovieWriterDelegate> _delegate;
    id /* block */ _audioProcessingCallback;
    HTSGLContext *_context;
    double _effectRecordRate;
    id /* block */ _getVideoUrl;
    double _progressCurrentTime;
    double _progressStartTime;
    double _progressTotalTime;
    double _recordRate;
    unsigned long long _bitrate;
    double _captureFrameRate;
    id /* block */ _videoProcessingCallback;
    id /* block */ _dropframeCallback;
    NSArray *metaData;
    unsigned long long _inputRotation;
    long long _rendererType;
    double startWritingTime;
    NSString *_route;
    VEAudioEncodeConfig *_audioSettings;
    VELimitLogger *_limitLogger;
    double _fristAudioTime;
    double _fristVideoTime;
    struct { long long value; int timescale; unsigned int flags; long long epoch; } _maxLimitTime;
    struct { long long value; int timescale; unsigned int flags; long long epoch; } _duration;
    struct CGAffineTransform { double a; double b; double c; double d; double tx; double ty; } transform;
}

@property (retain, nonatomic) VEAudioEncodeConfig *audioSettings;
@property (retain, nonatomic) VELimitLogger *limitLogger;
@property double fristAudioTime;
@property double fristVideoTime;
@property BOOL isFristAudioFrame;
@property (retain, nonatomic) HTSGLContext *context;
@property (retain, nonatomic) NSString *route;
@property (nonatomic) double progressStartTime;
@property (nonatomic) double progressTotalTime;
@property (nonatomic) double progressCurrentTime;
@property (nonatomic) BOOL needStatisticProgress;
@property (nonatomic) BOOL isFromRecorder;
@property (nonatomic) BOOL isAudioReady;
@property (nonatomic) BOOL isVideoReady;
@property (nonatomic) BOOL hasAudioTrack;
@property (nonatomic) BOOL useAudioEffect;
@property (nonatomic) BOOL shouldPassthroughAudio;
@property (nonatomic) BOOL shouldInvalidateAudioSampleWhenDone;
@property (nonatomic) int controlFrameRate;
@property (copy, nonatomic) id /* block */ completionBlock;
@property (copy, nonatomic) id /* block */ failureBlock;
@property (copy, nonatomic) id /* block */ dropframeCallback;
@property (weak, nonatomic) id<IESGLMovieWriterDelegate> delegate;
@property (nonatomic) BOOL encodingLiveVideo;
@property (copy, nonatomic) id /* block */ videoInputReadyCallback;
@property (copy, nonatomic) id /* block */ audioInputReadyCallback;
@property (copy, nonatomic) id /* block */ audioProcessingCallback;
@property (copy, nonatomic) id /* block */ videoProcessingCallback;
@property (nonatomic) BOOL enabled;
@property (nonatomic) struct { long long value; int timescale; unsigned int flags; long long epoch; } duration;
@property (nonatomic) struct CGAffineTransform { double a; double b; double c; double d; double tx; double ty; } transform;
@property (copy, nonatomic) NSArray *metaData;
@property (nonatomic) BOOL paused;
@property (retain, nonatomic) HTSGLContext *movieWriterContext;
@property (nonatomic) double recordRate;
@property (nonatomic) unsigned long long bitrate;
@property (nonatomic) double captureFrameRate;
@property (nonatomic) double effectRecordRate;
@property (nonatomic) BOOL useEffectRecordRate;
@property (nonatomic) struct { long long value; int timescale; unsigned int flags; long long epoch; } maxLimitTime;
@property (nonatomic) BOOL disableWriteAuido;
@property (nonatomic) BOOL isBytevc;
@property (copy, nonatomic) id /* block */ getVideoUrl;
@property (nonatomic) unsigned long long inputRotation;
@property (nonatomic) long long rendererType;
@property (nonatomic) double startWritingTime;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (void)setInputRotation:(unsigned long long)arg0 atIndex:(long long)arg1;
- (void)setInputFramebuffer:(id)arg0 atIndex:(long long)arg1;
- (void)setInputSize:(struct CGSize { double x0; double x1; })arg0 atIndex:(long long)arg1;
- (void)endProcessing;
- (long long)nextAvailableTextureIndex;
- (struct CGSize { double x0; double x1; })maximumOutputSize;
- (BOOL)shouldIgnoreUpdatesToThisTarget;
- (id /* block */)videoProcessingCallback;
- (void)setVideoProcessingCallback:(id /* block */)arg0;
- (void)newFrameReadyAtTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg0 atIndex:(long long)arg1 exceptionBlock:(id /* block */)arg2;
- (BOOL)wantsMonochromeInput;
- (void)setMaxLimitTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg0;
- (void)setDropFrame:(BOOL)arg0;
- (void)setUseEffectRecordRate:(BOOL)arg0;
- (void)processAudioBuffer:(struct opaqueCMSampleBuffer { } *)arg0;
- (void)setLimitLogger:(id)arg0;
- (id)limitLogger;
- (void)finishRecordingWithCompletionHandler:(id /* block */)arg0;
- (double)progressTotalTime;
- (double)progressCurrentTime;
- (double)progressStartTime;
- (BOOL)shouldInvalidateAudioSampleWhenDone;
- (void)setShouldInvalidateAudioSampleWhenDone:(BOOL)arg0;
- (void)setProgressStartTime:(double)arg0;
- (void)setProgressTotalTime:(double)arg0;
- (void)setProgressCurrentTime:(double)arg0;
- (BOOL)isAudioReady;
- (void)setIsAudioReady:(BOOL)arg0;
- (double)getProgress;
- (BOOL)useAudioEffect;
- (void)setUseAudioEffect:(BOOL)arg0;
- (double)recordRate;
- (void)setRecordRate:(double)arg0;
- (double)effectRecordRate;
- (void)setEffectRecordRate:(double)arg0;
- (void)initializeMovieWriter;
- (void)delayStartRecording;
- (BOOL)p_startWritingWithRetry;
- (void)p_trackWriterStartCode:(long long)arg0;
- (void)checkReachedMaxLimitTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg0;
- (double)getSuitableSampleRate:(double)arg0;
- (void)appendPixelBufferAttachment:(struct __CVBuffer { } *)arg0;
- (id)initWithMovieURL:(id)arg0 size:(struct CGSize { double x0; double x1; })arg1 fileType:(id)arg2 videoSettings:(id)arg3 audioSettings:(id)arg4 encodeFrameAsHlg:(BOOL)arg5 isMultiEncoder:(BOOL)arg6 inputPixelFormat:(unsigned int)arg7 context:(id)arg8;
- (void)setHasAudioTrack:(BOOL)arg0 audioSettings:(id)arg1;
- (void)setFristVideoTime:(double)arg0;
- (double)fristVideoTime;
- (int)controlFrameRate;
- (id /* block */)dropframeCallback;
- (void)processAudioBuffer:(struct opaqueCMSampleBuffer { } *)arg0 successAudioCallback:(id /* block */)arg1;
- (id)initWithMovieURL:(id)arg0 size:(struct CGSize { double x0; double x1; })arg1;
- (id)initWithMovieURL:(id)arg0 size:(struct CGSize { double x0; double x1; })arg1 fileType:(id)arg2 videoSettings:(id)arg3 audioSettings:(id)arg4 encodeFrameAsHlg:(BOOL)arg5;
- (void)releaseWriter;
- (void)startRecordingInOrientation:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })arg0;
- (void)processVideoBuffer:(struct opaqueCMSampleBuffer { } *)arg0;
- (void)enableSynchronizationCallbacks;
- (void)setEffectPassThrough:(BOOL)arg0;
- (BOOL)needStatisticProgress;
- (void)setNeedStatisticProgress:(BOOL)arg0;
- (BOOL)isFromRecorder;
- (void)setIsFromRecorder:(BOOL)arg0;
- (BOOL)isVideoReady;
- (void)setIsVideoReady:(BOOL)arg0;
- (BOOL)shouldPassthroughAudio;
- (void)setShouldPassthroughAudio:(BOOL)arg0;
- (void)setControlFrameRate:(int)arg0;
- (void)setDropframeCallback:(id /* block */)arg0;
- (BOOL)encodingLiveVideo;
- (void)setEncodingLiveVideo:(BOOL)arg0;
- (id /* block */)videoInputReadyCallback;
- (void)setVideoInputReadyCallback:(id /* block */)arg0;
- (id /* block */)audioInputReadyCallback;
- (void)setAudioInputReadyCallback:(id /* block */)arg0;
- (id /* block */)audioProcessingCallback;
- (void)setAudioProcessingCallback:(id /* block */)arg0;
- (id)movieWriterContext;
- (void)setMovieWriterContext:(id)arg0;
- (BOOL)useEffectRecordRate;
- (struct { long long x0; int x1; unsigned int x2; long long x3; })maxLimitTime;
- (BOOL)disableWriteAuido;
- (void)setDisableWriteAuido:(BOOL)arg0;
- (BOOL)isBytevc;
- (void)setIsBytevc:(BOOL)arg0;
- (id /* block */)getVideoUrl;
- (void)setGetVideoUrl:(id /* block */)arg0;
- (double)startWritingTime;
- (void)setStartWritingTime:(double)arg0;
- (BOOL)isFristAudioFrame;
- (void)setIsFristAudioFrame:(BOOL)arg0;
- (double)fristAudioTime;
- (void)setFristAudioTime:(double)arg0;
- (id)metaData;
- (BOOL)paused;
- (id)outputURL;
- (BOOL)hasAudioTrack;
- (BOOL)enabled;
- (id /* block */)failureBlock;
- (void)setFailureBlock:(id /* block */)arg0;
- (void).cxx_destruct;
- (id)route;
- (long long)status;
- (void)startRecording;
- (id /* block */)completionBlock;
- (void)setContext:(id)arg0;
- (void)setCompletionBlock:(id /* block */)arg0;
- (void)setPaused:(BOOL)arg0;
- (unsigned long long)bitrate;
- (struct { long long x0; int x1; unsigned int x2; long long x3; })duration;
- (void)setRoute:(id)arg0;
- (id)audioSettings;
- (id)delegate;
- (id)context;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })transform;
- (void)setEnabled:(BOOL)arg0;
- (void)setAudioSettings:(id)arg0;
- (void)setDelegate:(id)arg0;
- (void)dealloc;
- (void)setMetaData:(id)arg0;
- (id)error;
- (void)setTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })arg0;
- (void)setDuration:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg0;
- (void)cancelRecording;
- (unsigned long long)inputRotation;
- (void)setInputRotation:(unsigned long long)arg0;
- (void)setBitrate:(unsigned long long)arg0;
- (id)assetWriter;
- (void)setHasAudioTrack:(BOOL)arg0;
- (long long)rendererType;
- (void)finishRecording;
- (double)captureFrameRate;
- (void)setCaptureFrameRate:(double)arg0;
- (void)setRendererType:(long long)arg0;

@end
