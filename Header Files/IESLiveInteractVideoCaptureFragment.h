//
//     Generated by private class-dump
//

@class NSString, IESLiveAudienceInteractPermissionChecker, IESLiveInteractVideoCapture, HTSLiveInteractiveAPI, IESLiveCountTimer, IESLiveFrequencyController, IESLiveInteractGuestVideoStateMachine, IESLiveLinkmicMonitor, NSNumber;
@protocol IESLiveMultiKTVRouter, IESLiveSubscription;

@interface IESLiveInteractVideoCaptureFragment : IESLiveRoomComponent <IESLiveInteractVideoCaptureRouter, IESLiveSocialInteractAction, IESLiveInteractAction, IESLiveInteractGuestVideoStateMachineDelegate, IESLiveKTVActions, HTSLiveMessageSubscriber, IESLiveMediaPermissionManagerAction, IESLiveRevenueInteractAction> {
    BOOL _isShowingNow;
    BOOL _hitCameraFrenquencyControl;
    BOOL _hasJoinChannel;
    BOOL _isResumeCapture;
    BOOL _isAfk;
    BOOL _isToastEnable;
    HTSLiveInteractiveAPI *_linkmicAPI;
    IESLiveInteractGuestVideoStateMachine *_videoStateMachine;
    IESLiveInteractVideoCapture *_cameraCapture;
    IESLiveCountTimer *_cameraFrenquencyFirstPartTimer;
    IESLiveCountTimer *_cameraFrenquencySecondPartTimer;
    long long _cameraOpenTotalDuration;
    NSNumber *_cameraOpenTimeStamp;
    IESLiveAudienceInteractPermissionChecker *_permissionChecker;
    id /* block */ _permissionCheckerContext;
    unsigned long long _currentScene;
    id<IESLiveMultiKTVRouter> _multiKTVRouter;
    id<IESLiveSubscription> _afkDisposable;
    IESLiveFrequencyController *_controlGuestCameraFrequencyController;
    IESLiveLinkmicMonitor *_linkmicMonitor;
    struct CGSize { double width; double height; } _originOutputSize;
    struct CGSize { double width; double height; } _cropOutputSize;
}

@property (nonatomic) BOOL isShowingNow;
@property (retain, nonatomic) HTSLiveInteractiveAPI *linkmicAPI;
@property (retain, nonatomic) IESLiveInteractGuestVideoStateMachine *videoStateMachine;
@property (retain, nonatomic) IESLiveInteractVideoCapture *cameraCapture;
@property (nonatomic) BOOL hitCameraFrenquencyControl;
@property (nonatomic) BOOL hasJoinChannel;
@property (nonatomic) BOOL isResumeCapture;
@property (retain, nonatomic) IESLiveCountTimer *cameraFrenquencyFirstPartTimer;
@property (retain, nonatomic) IESLiveCountTimer *cameraFrenquencySecondPartTimer;
@property (nonatomic) long long cameraOpenTotalDuration;
@property (retain, nonatomic) NSNumber *cameraOpenTimeStamp;
@property (retain, nonatomic) IESLiveAudienceInteractPermissionChecker *permissionChecker;
@property (copy, nonatomic) id /* block */ permissionCheckerContext;
@property (nonatomic) struct CGSize { double width; double height; } originOutputSize;
@property (nonatomic) struct CGSize { double width; double height; } cropOutputSize;
@property (nonatomic) unsigned long long currentScene;
@property (retain, nonatomic) id<IESLiveMultiKTVRouter> multiKTVRouter;
@property (retain, nonatomic) id<IESLiveSubscription> afkDisposable;
@property (nonatomic) BOOL isAfk;
@property (nonatomic) BOOL isToastEnable;
@property (retain, nonatomic) IESLiveFrequencyController *controlGuestCameraFrequencyController;
@property (retain, nonatomic) IESLiveLinkmicMonitor *linkmicMonitor;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (BOOL)componentShouldActive:(id)arg0;

- (void)startCameraCapture:(BOOL)arg0;
- (void)stopCameraCapture:(BOOL)arg0;
- (void)removeEffectNodes:(id)arg0;
- (void)sendMessage:(unsigned long long)arg0 param1:(unsigned long long)arg1 param2:(unsigned long long)arg2 userInfo:(id)arg3;
- (void)switchCameraSource;
- (void)setCurrentScene:(unsigned long long)arg0;
- (void)setToastEnable:(BOOL)arg0;
- (void)componentBindService;
- (void)componentCreate;
- (void)componentMount;
- (void)componentUnmount;
- (BOOL)isDarkFrameStreamPushing;
- (void)didJoinRevenueInteractChannelWithScene:(unsigned long long)arg0;
- (void)didLeaveRevenueInteractChannelWithScene:(unsigned long long)arg0;
- (BOOL)supportOpenCamera;
- (id)onlineUserWrapper:(id)arg0;
- (void)startInteractiveWithScene:(unsigned long long)arg0;
- (void)endInteractiveWithScene:(unsigned long long)arg0;
- (void)didJoinChannelWithLayout:(id)arg0;
- (void)willLeaveChannelWithLayout:(id)arg0;
- (void)didLeaveChannelWithLayout:(id)arg0;
- (id)linkmicMonitor;
- (void)setLinkmicMonitor:(id)arg0;
- (id)permissionChecker;
- (void)setPermissionChecker:(id)arg0;
- (BOOL)isAfk;
- (void)setIsAfk:(BOOL)arg0;
- (void)dealWithOpenCamera:(BOOL)arg0;
- (BOOL)enableCameraCapture;
- (BOOL)cameraClosedByOther;
- (BOOL)isResumeCapture;
- (void)stopCameraCapture:(BOOL)arg0 asyncAPIRequest:(BOOL)arg1;
- (id)resetCameraPreviewView:(id)arg0;
- (void)requestServer2StartVideoWithCompletion:(id /* block */)arg0;
- (void)requestServer2StartChorusWithCompletion:(id /* block */)arg0;
- (void)requestServer2StopChorusWithCompletion:(id /* block */)arg0;
- (void)clickDisableCamera;
- (void)changeCaptureInputType:(long long)arg0;
- (id)getCurrentEffectNodes;
- (void)applyEffectNodes:(id)arg0 enableFakeFace:(BOOL)arg1;
- (void)didBeginAudioSessionInterrupt;
- (void)didEndedAudioSessionInterrupt;
- (void)loadCameraCapture;
- (void)didChangedCameraCaptureEnabled:(BOOL)arg0;
- (void)openGuestCameraWithUserID:(id)arg0 cameraOpen:(BOOL)arg1;
- (long long)linkTypeForScene:(unsigned long long)arg0;
- (void)updateLinkType:(long long)arg0 forScene:(unsigned long long)arg1;
- (long long)cameraOpenDuration;
- (BOOL)enablePanelItemForUserID:(id)arg0 isOthers:(BOOL)arg1;
- (id)buildPanelItemForInteractUser:(id)arg0 isOthers:(BOOL)arg1;
- (void)selfStartVideoWithCompletion:(id /* block */)arg0;
- (void)mediaCaptureInterruptedWithStrategy:(unsigned long long)arg0;
- (void)mediaCaptureResumeedWithStrategy:(unsigned long long)arg0;
- (id)linkmicAPI;
- (void)setLinkmicAPI:(id)arg0;
- (BOOL)isMuteByOthersWithFromUid:(long long)arg0 toUid:(long long)arg1;
- (void)ackMessage:(id)arg0;
- (BOOL)hasJoinChannel;
- (BOOL)hitCameraFrenquencyControl;
- (id)multiKTVRouter;
- (void)setMultiKTVRouter:(id)arg0;
- (BOOL)isInEqualBigParty;
- (unsigned long long)cameraStatus;
- (void)cameraStatusDidChange:(unsigned long long)arg0;
- (void)selfClose:(BOOL)arg0 completion:(id /* block */)arg1;
- (id)controlGuestCameraFrequencyController;
- (void)setControlGuestCameraFrequencyController:(id)arg0;
- (void)setHasJoinChannel:(BOOL)arg0;
- (void)setIsToastEnable:(BOOL)arg0;
- (id)videoStateMachine;
- (void)setIsResumeCapture:(BOOL)arg0;
- (id)cameraFrenquencyFirstPartTimer;
- (void)setCameraFrenquencyFirstPartTimer:(id)arg0;
- (id)cameraFrenquencySecondPartTimer;
- (void)setCameraFrenquencySecondPartTimer:(id)arg0;
- (void)didReceiveCameraControlCommandWithCameraOpen:(BOOL)arg0 toUserID:(id)arg1 fromUserID:(id)arg2;
- (void)setAfkDisposable:(id)arg0;
- (void)cleanupCameraCapture;
- (void)cleanupVideoStateMachine;
- (id)afkDisposable;
- (void)loadVideoStateMachine;
- (id)cameraCapture;
- (void)resetCameraCountDuraton;
- (void)setCameraOpenTimeStamp:(id)arg0;
- (id)cameraOpenTimeStamp;
- (long long)cameraOpenTotalDuration;
- (void)setCameraOpenTotalDuration:(long long)arg0;
- (void)trackOpenCameraSuccessIfNeededWithLinkType:(int)arg0;
- (void)hitOpenCameraFrenquency;
- (BOOL)isCurrentVideoChorus;
- (BOOL)isToastEnable;
- (void)updateLiveCoreExtraInfo:(id)arg0 rtcExtraInfo:(id)arg1 cameraOpen:(BOOL)arg2;
- (void)realSelfStartVideoWithLinkType:(int)arg0 completion:(id /* block */)arg1;
- (void)reallyUpdateVideoLinkType:(int)arg0 error:(id)arg1 liveCoreExtraInfo:(id)arg2 rtcExtraInfo:(id)arg3 actively:(BOOL)arg4 completion:(id /* block */)arg5 reDoBlock:(id /* block */)arg6;
- (void)setHitCameraFrenquencyControl:(BOOL)arg0;
- (BOOL)enableLoadCameraCapture;
- (BOOL)isShowingNow;
- (void)setIsShowingNow:(BOOL)arg0;
- (void)cameraReplyWithtype:(unsigned long long)arg0 toUserID:(id)arg1 completion:(id /* block */)arg2;
- (void)trackOpenSelfCamera:(BOOL)arg0 clickType:(id)arg1;
- (void)trackOpenOthersCamera:(BOOL)arg0 userID:(id)arg1;
- (void)setCameraCapture:(id)arg0;
- (void)setVideoStateMachine:(id)arg0;
- (void)setCropOutputSize:(struct CGSize { double x0; double x1; })arg0;
- (unsigned long long)flattenSceneWithScene:(unsigned long long)arg0;
- (long long)getCurrentCaptureDevicePosition;
- (unsigned long long)transformedScene;
- (id /* block */)permissionCheckerContext;
- (void)setPermissionCheckerContext:(id /* block */)arg0;
- (struct CGSize { double x0; double x1; })originOutputSize;
- (void)setOriginOutputSize:(struct CGSize { double x0; double x1; })arg0;
- (struct CGSize { double x0; double x1; })cropOutputSize;
- (void).cxx_destruct;
- (unsigned long long)currentScene;
- (BOOL)isCapturing;
- (void)messageReceived:(id)arg0;

@end
