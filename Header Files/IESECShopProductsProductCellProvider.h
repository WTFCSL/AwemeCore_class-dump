//
//     Generated by private class-dump
//

@class IESECShopProductsHybridContext;

@interface IESECShopProductsProductCellProvider : NSObject {
    IESECShopProductsHybridContext *_context;
    struct unordered_map<iesec::shop::hybrid_products::cell_provider::HeightCacheKey, double, std::hash<HeightCacheKey>, std::equal_to<iesec::shop::hybrid_products::cell_provider::HeightCacheKey>, std::allocator<std::pair<const iesec::shop::hybrid_products::cell_provider::HeightCacheKey, double>>> { struct __hash_table<std::__hash_value_type<iesec::shop::hybrid_products::cell_provider::HeightCacheKey, double>, std::__unordered_map_hasher<iesec::shop::hybrid_products::cell_provider::HeightCacheKey, std::__hash_value_type<iesec::shop::hybrid_products::cell_provider::HeightCacheKey, double>, std::hash<HeightCacheKey>, std::equal_to<iesec::shop::hybrid_products::cell_provider::HeightCacheKey>>, std::__unordered_map_equal<iesec::shop::hybrid_products::cell_provider::HeightCacheKey, std::__hash_value_type<iesec::shop::hybrid_products::cell_provider::HeightCacheKey, double>, std::equal_to<iesec::shop::hybrid_products::cell_provider::HeightCacheKey>, std::hash<HeightCacheKey>>, std::allocator<std::__hash_value_type<iesec::shop::hybrid_products::cell_provider::HeightCacheKey, double>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<iesec::shop::hybrid_products::cell_provider::HeightCacheKey, double>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<iesec::shop::hybrid_products::cell_provider::HeightCacheKey, double>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<iesec::shop::hybrid_products::cell_provider::HeightCacheKey, double>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<iesec::shop::hybrid_products::cell_provider::HeightCacheKey, double>, void *> *> *>>> { void **__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<iesec::shop::hybrid_products::cell_provider::HeightCacheKey, double>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<iesec::shop::hybrid_products::cell_provider::HeightCacheKey, double>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<iesec::shop::hybrid_products::cell_provider::HeightCacheKey, double>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<iesec::shop::hybrid_products::cell_provider::HeightCacheKey, double>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<iesec::shop::hybrid_products::cell_provider::HeightCacheKey, double>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<iesec::shop::hybrid_products::cell_provider::HeightCacheKey, std::__hash_value_type<iesec::shop::hybrid_products::cell_provider::HeightCacheKey, double>, std::hash<HeightCacheKey>, std::equal_to<iesec::shop::hybrid_products::cell_provider::HeightCacheKey>>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<iesec::shop::hybrid_products::cell_provider::HeightCacheKey, std::__hash_value_type<iesec::shop::hybrid_products::cell_provider::HeightCacheKey, double>, std::equal_to<iesec::shop::hybrid_products::cell_provider::HeightCacheKey>, std::hash<HeightCacheKey>>> { float __value_; } __p3_; } __table_; } _height_cache;
}

+ (id)providerWithHybridContext:(id)arg0;

- (id)makeCellForType:(unsigned long long)arg0;
- (struct CGSize { double x0; double x1; })itemSizeForGoodsModel:(id)arg0 containerSize:(struct CGSize { double x0; double x1; })arg1 forType:(unsigned long long)arg2;
- (void).cxx_destruct;
- (id).cxx_construct;

@end
