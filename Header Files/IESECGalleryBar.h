//
//     Generated by private class-dump
//

@class CADisplayLink, __end_cap_, __end_;
@protocol IESECGalleryBarDelegate;

@interface IESECGalleryBar : UIView {
    struct vector<CALayer *, std::allocator<CALayer *>> { __end_ **__begin_; __end_cap_ **x0; struct __compressed_pair<CALayer *__strong *, std::allocator<CALayer *>> { id *__value_; } x1; } _progress_container_layers;
    struct vector<CALayer *, std::allocator<CALayer *>> { __end_ **__begin_; __end_cap_ **x0; struct __compressed_pair<CALayer *__strong *, std::allocator<CALayer *>> { id *__value_; } x1; } _progress_bars;
    struct unordered_map<unsigned long, std::vector<CGRect>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<const unsigned long, std::vector<CGRect>>>> { struct __hash_table<std::__hash_value_type<unsigned long, std::vector<CGRect>>, std::__unordered_map_hasher<unsigned long, std::__hash_value_type<unsigned long, std::vector<CGRect>>, std::hash<unsigned long>, std::equal_to<unsigned long>>, std::__unordered_map_equal<unsigned long, std::__hash_value_type<unsigned long, std::vector<CGRect>>, std::equal_to<unsigned long>, std::hash<unsigned long>>, std::allocator<std::__hash_value_type<unsigned long, std::vector<CGRect>>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::vector<CGRect>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::vector<CGRect>>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::vector<CGRect>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::vector<CGRect>>, void *> *> *>>> { void **__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::vector<CGRect>>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::vector<CGRect>>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::vector<CGRect>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long, std::vector<CGRect>>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::vector<CGRect>>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long, std::__hash_value_type<unsigned long, std::vector<CGRect>>, std::hash<unsigned long>, std::equal_to<unsigned long>>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<unsigned long, std::__hash_value_type<unsigned long, std::vector<CGRect>>, std::equal_to<unsigned long>, std::hash<unsigned long>>> { float __value_; } __p3_; } __table_; } _frames_map;
    CADisplayLink *_displayLink;
    id<IESECGalleryBarDelegate> _delegate;
    long long _numberOfItems;
    long long _currentItem;
    double _progressBarHeight;
}

@property (weak, nonatomic) id<IESECGalleryBarDelegate> delegate;
@property (nonatomic) long long numberOfItems;
@property (nonatomic) long long currentItem;
@property (nonatomic) double progressBarHeight;

- (void)updateItemAtIndex:(unsigned long long)arg0 toProgress:(double)arg1;
- (void)setProgressBarHeight:(double)arg0;
- (void)updateLayersIfNeeded;
- (struct vector<CGRect, std::allocator<CGRect>> { struct CGRect *x0; struct CGRect *x1; struct __compressed_pair<CGRect *, std::allocator<CGRect>> { struct CGRect *x0; } x2; })layerFramesInBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0;
- (double)progressBarSpacing;
- (double)progressBarHeight;
- (long long)numberOfItems;
- (void)setCurrentItem:(long long)arg0;
- (void).cxx_destruct;
- (long long)currentItem;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0;
- (id)delegate;
- (void)setNumberOfItems:(long long)arg0;
- (void)layoutSubviews;
- (void)setDelegate:(id)arg0;
- (void)dealloc;
- (id).cxx_construct;

@end
