//
//     Generated by private class-dump
//

@class NSMutableDictionary, LSLiveAudioUnitProcess, LiveStreamCapture, NSObject, NSDictionary, LSLiveAudioLoudness, LiveStreamMultiTimerManager, LiveCoreCamera, LiveCoreRunInfo, UIView, LiveStreamRenderSink, NSString, LiveStreamAudioCapture, AVAudioFile, AVAudioPlayer, NSNumber, LiveStreamSession, NSLock;
@protocol ILCRTCAudioSinkProtocol, ILiveCoreForInteractDelegate, LiveCoreCaptureDelegate, OS_dispatch_source, OS_dispatch_queue, ILCRTCVideoSinkProtocol;

@interface LiveCore : NSObject <LiveStreamSessionProtocol> {
    struct __CVBuffer { } *_darkFrameImageBuffer;
    LiveStreamMultiTimerManager *_pushDarkFrameTimer;
    BOOL _remoteSessionNeedRender;
    BOOL _needResetPerformanceProfile;
    short *_musicData;
    struct mutex { struct _opaque_pthread_mutex_t { long long __sig; char __opaque[56]; } __m_; } _sei_mutex;
    struct mutex { struct _opaque_pthread_mutex_t { long long __sig; char __opaque[56]; } __m_; } _user_layout_mutex;
    struct unique_ptr<avframework::VideoInfoStatisticManager, std::default_delete<avframework::VideoInfoStatisticManager>> { struct __compressed_pair<avframework::VideoInfoStatisticManager *, std::default_delete<avframework::VideoInfoStatisticManager>> { struct VideoInfoStatisticManager *__value_; } __ptr_; } statisticManager;
    LSLiveAudioLoudness *_audioLoudness;
    BOOL _gotAppUploader;
    BOOL _enableExternalAU;
    BOOL _enableKeepDarkFrame;
    BOOL _enablePipelineKTVCamera;
    BOOL _enableMergeRtcExtraDataToLiveStream;
    BOOL _willCloseLivingRoom;
    BOOL _changeToFullInteractOnlySelf;
    BOOL _interactIgnoreCaptureVideoBuffer;
    unsigned char _enableUpdateConfigCallAB;
    BOOL _enableCheckingCameraRunningStatus;
    BOOL _liveCoreLogEnabled;
    BOOL _mixOnClient;
    BOOL _audioDidCapturedData;
    BOOL _audioMute;
    BOOL _enableExternalClientMix;
    BOOL _externalPushDark;
    BOOL _releaseAudioCaptureInCleanUp;
    BOOL _audioMuteExceptBgm;
    BOOL _muteLocalAudioStream;
    BOOL _needCloseAEC;
    BOOL _audioCaptureEnterBackGround;
    BOOL _bMovieMode;
    BOOL _didKTVCameraSetPipeline;
    BOOL _useMVMode;
    BOOL _useSingleDirChorusMode;
    BOOL _forceCompositingLayout;
    BOOL _enableSkipMemsetMonitoringDataIfBgmPaused;
    BOOL _didStartLogTimer;
    BOOL _didReceivedFirstRemoteAudio;
    BOOL _sendVideoToInteract;
    BOOL _sendVideoToRTCGame;
    BOOL _needOpenAEC;
    BOOL _enableSeiCurrentShiftDiffTime;
    BOOL _audioplayPlayIsCompleted;
    int _deviceLevel;
    int _dagnosisSwitchFreq;
    LiveStreamSession *_liveSession;
    id /* block */ _statusChangedBlock;
    id /* block */ _didCapturedAudioFrame;
    id /* block */ _didCapturedAudioFrameWithSampleRate;
    id /* block */ _didRecordAudioFrame;
    id /* block */ _pushStreamVideoFrameRateChangedBlock;
    long long _reconnectCount;
    Class _appLogClass;
    SEL _appLogUploadMethod;
    unsigned long long _logLevel;
    unsigned long long _enabledModule;
    id /* block */ _queryIsNeedStreamingCallback;
    NSDictionary *_lensEnhancedAlgorithmParams;
    id /* block */ _shouldUpdateOptimumIPAddress;
    id /* block */ _excuteWithCommandAndUserInfo;
    id /* block */ _streamLogCallback;
    id /* block */ _networkQualityCallback;
    id /* block */ _hostInfoProvider;
    id /* block */ _debugLogBlock;
    NSNumber *_performanceLevel;
    long long _liveCoreLogFlag;
    LiveStreamRenderSink *_effectRenderSink;
    LiveStreamRenderSink *_aecRenderSink;
    LiveStreamRenderSink *_gameRenderSink;
    NSMutableDictionary *_user_layer_map;
    NSLock *_userLayerMap_lock;
    long long _runState;
    long long _captureMode;
    NSString *_mode;
    NSString *_category;
    unsigned long long _options;
    NSObject<OS_dispatch_source> *_logTimer;
    long long _firstVideoPts;
    long long _lastVideoPts;
    LiveStreamCapture *_capture;
    UIView *_previewView;
    NSString *_effectLicense;
    NSObject<OS_dispatch_queue> *_queue;
    NSObject<OS_dispatch_queue> *_timer_quque;
    NSObject<OS_dispatch_queue> *_filePlayQueue;
    LiveStreamMultiTimerManager *_timerManager;
    NSMutableDictionary *_propertyDict;
    LiveStreamAudioCapture *_audioCapture;
    LiveCoreRunInfo *_runInfo;
    LiveStreamRenderSink *_ktvRenderSink;
    LiveStreamRenderSink *_mvRenderSink;
    LiveStreamRenderSink *_karaokeRenderSink;
    LiveStreamRenderSink *_commonRenderSink;
    LiveStreamRenderSink *_chorusRenderSink;
    LiveStreamRenderSink *_audioFileRenderSink;
    id<ILCRTCVideoSinkProtocol> _rtcVideoSink;
    id<ILCRTCAudioSinkProtocol> _rtcAudioSink;
    id<ILCRTCVideoSinkProtocol> _rtcGameVideoSink;
    id<ILCRTCAudioSinkProtocol> _rtcGameAudioSink;
    id<ILiveCoreForInteractDelegate> _liveCoreForInteractDelegate;
    NSString *_interactCurrentUser;
    LSLiveAudioUnitProcess *_audioFileaudioUnit;
    AVAudioPlayer *_audioFilePlayer;
    AVAudioFile *_audioFileHandler;
    LiveCoreCamera *_camera;
    id /* block */ _didCapturedVideoFrame;
    id /* block */ _videoProcessingCallback;
    id /* block */ _interactVideoFrameCallback;
    long long _pipelineMode;
    long long _audioPlayerMode;
    long long _busiScene;
    id /* block */ _shouldUpdateInteractLayout;
    id /* block */ _didOfflineCallback;
    long long _seiCurrentShiftDiffTime;
    id /* block */ _audioFilePlayStoped;
    NSLock *_pushDarkLock;
    NSLock *_ktvAudioUnitLock;
    double _pullAudioCostTime;
    double _pushAudioCostTime;
    double _mixCostTime;
    id /* block */ _getAudioCallback;
    id /* block */ _getGameAudioCallback;
}

@property (class, nonatomic) BOOL interactDecouple;

@property (copy, nonatomic) id /* block */ lyricInfoDidReceiveCallback;
@property (nonatomic, getter=isReverberationEnabled) BOOL reverberationEnabled;
@property (copy, nonatomic) id /* block */ playAudioFrameCallback;
@property (retain, nonatomic) UIView *previewView;
@property (retain, nonatomic) LiveCoreCamera *camera;
@property (nonatomic) long long captureMode;
@property (copy, nonatomic) id /* block */ videoProcessingCallback;
@property (copy, nonatomic) id /* block */ didCapturedVideoFrame;
@property (weak, nonatomic) id<LiveCoreCaptureDelegate> captureDelegate;
@property (retain, nonatomic) LiveStreamSession *liveSession;
@property (retain, nonatomic) LiveStreamRenderSink *effectRenderSink;
@property (retain, nonatomic) LiveStreamRenderSink *aecRenderSink;
@property (retain, nonatomic) LiveStreamRenderSink *gameRenderSink;
@property (retain, nonatomic) NSMutableDictionary *user_layer_map;
@property (retain, nonatomic) NSLock *userLayerMap_lock;
@property (nonatomic) long long runState;
@property (nonatomic) long long captureMode;
@property (nonatomic) NSString *mode;
@property (nonatomic) NSString *category;
@property (nonatomic) unsigned long long options;
@property (retain, nonatomic) NSObject<OS_dispatch_source> *logTimer;
@property (nonatomic) long long firstVideoPts;
@property (nonatomic) long long lastVideoPts;
@property (nonatomic) BOOL mixOnClient;
@property (nonatomic) BOOL audioDidCapturedData;
@property (nonatomic) BOOL audioMute;
@property (nonatomic) BOOL enableExternalClientMix;
@property (retain, nonatomic) LiveStreamCapture *capture;
@property (nonatomic) int deviceLevel;
@property (retain, nonatomic) UIView *previewView;
@property (copy, nonatomic) NSString *effectLicense;
@property (nonatomic) BOOL externalPushDark;
@property (nonatomic) BOOL releaseAudioCaptureInCleanUp;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *queue;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *timer_quque;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *filePlayQueue;
@property (retain, nonatomic) LiveStreamMultiTimerManager *timerManager;
@property (retain, nonatomic) NSMutableDictionary *propertyDict;
@property (nonatomic) BOOL audioMuteExceptBgm;
@property (nonatomic) BOOL muteLocalAudioStream;
@property (nonatomic) BOOL needCloseAEC;
@property (nonatomic) BOOL audioCaptureEnterBackGround;
@property (nonatomic) BOOL bMovieMode;
@property (nonatomic) BOOL didKTVCameraSetPipeline;
@property (nonatomic) BOOL useMVMode;
@property (nonatomic) BOOL useSingleDirChorusMode;
@property (nonatomic) BOOL forceCompositingLayout;
@property (retain, nonatomic) LiveStreamAudioCapture *audioCapture;
@property (retain, nonatomic) LiveCoreRunInfo *runInfo;
@property (retain, nonatomic) LiveStreamRenderSink *ktvRenderSink;
@property (retain, nonatomic) LiveStreamRenderSink *mvRenderSink;
@property (retain, nonatomic) LiveStreamRenderSink *karaokeRenderSink;
@property (retain, nonatomic) LiveStreamRenderSink *commonRenderSink;
@property (retain, nonatomic) LiveStreamRenderSink *chorusRenderSink;
@property (retain, nonatomic) LiveStreamRenderSink *audioFileRenderSink;
@property (weak, nonatomic) id<ILCRTCVideoSinkProtocol> rtcVideoSink;
@property (weak, nonatomic) id<ILCRTCAudioSinkProtocol> rtcAudioSink;
@property (weak, nonatomic) id<ILCRTCVideoSinkProtocol> rtcGameVideoSink;
@property (weak, nonatomic) id<ILCRTCAudioSinkProtocol> rtcGameAudioSink;
@property (weak, nonatomic) id<ILiveCoreForInteractDelegate> liveCoreForInteractDelegate;
@property (copy, nonatomic) NSString *interactCurrentUser;
@property (nonatomic) BOOL enableSkipMemsetMonitoringDataIfBgmPaused;
@property (nonatomic) BOOL didStartLogTimer;
@property (retain, nonatomic) LSLiveAudioUnitProcess *audioFileaudioUnit;
@property (retain, nonatomic) AVAudioPlayer *audioFilePlayer;
@property (retain, nonatomic) AVAudioFile *audioFileHandler;
@property (retain, nonatomic) LiveCoreCamera *camera;
@property (copy, nonatomic) id /* block */ didCapturedVideoFrame;
@property (copy, nonatomic) id /* block */ videoProcessingCallback;
@property (copy, nonatomic) id /* block */ interactVideoFrameCallback;
@property (nonatomic) BOOL didReceivedFirstRemoteAudio;
@property (nonatomic) long long pipelineMode;
@property (nonatomic) BOOL sendVideoToInteract;
@property (nonatomic) BOOL sendVideoToRTCGame;
@property (nonatomic) long long audioPlayerMode;
@property (nonatomic) long long busiScene;
@property (copy, nonatomic) id /* block */ shouldUpdateInteractLayout;
@property (copy, nonatomic) id /* block */ didOfflineCallback;
@property (nonatomic) BOOL needOpenAEC;
@property (nonatomic) BOOL enableSeiCurrentShiftDiffTime;
@property (nonatomic) long long seiCurrentShiftDiffTime;
@property (copy, nonatomic) id /* block */ audioFilePlayStoped;
@property (nonatomic) BOOL audioplayPlayIsCompleted;
@property (retain, nonatomic) NSLock *pushDarkLock;
@property (retain, nonatomic) NSLock *ktvAudioUnitLock;
@property (nonatomic) int dagnosisSwitchFreq;
@property (nonatomic) double pullAudioCostTime;
@property (nonatomic) double pushAudioCostTime;
@property (nonatomic) double mixCostTime;
@property (copy, nonatomic) id /* block */ getAudioCallback;
@property (copy, nonatomic) id /* block */ getGameAudioCallback;
@property (copy, nonatomic) id /* block */ statusChangedBlock;
@property (copy, nonatomic) id /* block */ didCapturedAudioFrame;
@property (copy, nonatomic) id /* block */ didCapturedAudioFrameWithSampleRate;
@property (copy, nonatomic) id /* block */ didRecordAudioFrame;
@property (copy, nonatomic) id /* block */ pushStreamVideoFrameRateChangedBlock;
@property (nonatomic) long long reconnectCount;
@property (nonatomic) BOOL gotAppUploader;
@property (nonatomic) Class appLogClass;
@property (nonatomic) SEL appLogUploadMethod;
@property (nonatomic) unsigned long long logLevel;
@property (nonatomic) unsigned long long enabledModule;
@property (nonatomic) BOOL enableExternalAU;
@property (nonatomic) BOOL enableKeepDarkFrame;
@property (nonatomic) BOOL enablePipelineKTVCamera;
@property (nonatomic) BOOL enableMergeRtcExtraDataToLiveStream;
@property (nonatomic) BOOL willCloseLivingRoom;
@property (nonatomic) BOOL changeToFullInteractOnlySelf;
@property (nonatomic) BOOL interactIgnoreCaptureVideoBuffer;
@property (copy, nonatomic) id /* block */ queryIsNeedStreamingCallback;
@property (copy, nonatomic) NSDictionary *lensEnhancedAlgorithmParams;
@property (copy, nonatomic) id /* block */ shouldUpdateOptimumIPAddress;
@property (copy, nonatomic) id /* block */ excuteWithCommandAndUserInfo;
@property (nonatomic) unsigned char enableUpdateConfigCallAB;
@property (copy, nonatomic) id /* block */ streamLogCallback;
@property (copy, nonatomic) id /* block */ networkQualityCallback;
@property (copy, nonatomic) id /* block */ hostInfoProvider;
@property (nonatomic) BOOL enableCheckingCameraRunningStatus;
@property (copy, nonatomic) id /* block */ debugLogBlock;
@property (retain, nonatomic) NSNumber *performanceLevel;
@property (nonatomic) BOOL liveCoreLogEnabled;
@property (nonatomic) long long liveCoreLogFlag;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (id)getSdkVersion;
+ (void)setUpdateVersionCode:(id)arg0;
+ (id)getEffectABInfoWithLicense:(id)arg0;
+ (void)setEffectABInfo:(id)arg0 withLicense:(id)arg1;
+ (BOOL)ktvAllowed;
+ (void)setisStreamingDisplayInfoEnable:(BOOL)arg0;
+ (BOOL)isStreamingDisplayInfoEnable;
+ (id)showStreamingDisplayInfo;
+ (id)showInteractDisplayInfo;
+ (id)convertContourModelWithStruct:(struct contour_info_st { unsigned char x0; unsigned short x1; unsigned short x2; struct con_string_ { unsigned short x0; unsigned char x1[0]; } x3; struct contour_extra_ { unsigned char x0; unsigned short x1; unsigned char x2[0]; } x4; unsigned char x5; struct contour_item_ { unsigned short x0; struct point_ { unsigned short x0; unsigned short x1; } x1[0]; } x6[0]; } *)arg0;
+ (void)sendStreamLogToB:(id)arg0;
+ (void)setInteractDecouple:(BOOL)arg0;
+ (BOOL)interactDecouple;
+ (void)initialize;
+ (void)setAppVersion:(id)arg0;
+ (void)load;

- (void)setMusicVolume:(float)arg0;
- (id)audioCapture;
- (double)musicDuration;
- (double)currentPlayTime;
- (id)convertHexStrToData:(id)arg0;
- (int)getAECType;
- (void)setEnableAgc:(BOOL)arg0;
- (float)getMusicVolume;
- (void)setMusicPlayerVolume:(double)arg0;
- (float)getMusicPlayerVolume;
- (void)setEnableAudioPitchShifter:(BOOL)arg0;
- (BOOL)isEnableAudioPitchShifter;
- (id)audioEffect;
- (void)setAudioEffect:(id)arg0;
- (void)didCaptureVideoSampleBuffer:(struct opaqueCMSampleBuffer { } *)arg0;
- (void)exposureAtPoint:(struct CGPoint { double x0; double x1; })arg0;
- (void)setAudioCapture:(id)arg0;
- (void)pushPlayerAudioData:(struct AudioBufferList { unsigned int x0; struct AudioBuffer { unsigned int x0; unsigned int x1; void *x2; } x1[1]; } *)arg0 frames:(int)arg1 bytesPerSample:(int)arg2 channels:(int)arg3 sampleRate:(int)arg4;
- (void)pushPlayerAECAudioData:(struct AudioBufferList { unsigned int x0; struct AudioBuffer { unsigned int x0; unsigned int x1; void *x2; } x1[1]; } *)arg0 frames:(int)arg1 bytesPerSample:(int)arg2 channels:(int)arg3 sampleRate:(int)arg4;
- (void)pullMicAudio:(void *)arg0 size:(unsigned int)arg1 sampleRate:(int)arg2 timeStamp:(long long)arg3 mNumberChannels:(unsigned int)arg4 numberOfFrames:(int)arg5 processedData:(void *)arg6 earMonitorData:(void *)arg7;
- (void)processEarMonitorData:(void *)arg0 size:(unsigned int)arg1 sampleRate:(int)arg2 timeStamp:(long long)arg3 mNumberChannels:(unsigned int)arg4 numberOfFrames:(int)arg5;
- (void)callbackAudioLog:(id)arg0;
- (id)audioCoderSinkForNormal;
- (void *)audioCoderSinkForByteAudio;
- (void)onAudioCaptureEvent:(long long)arg0;
- (int)sizeForContourExtraStr:(id)arg0;
- (int)sizeForContourExtraData:(id)arg0;
- (struct con_string_ { unsigned short x0; unsigned char x1[0]; } *)contourExtraStr:(id)arg0;
- (struct contour_extra_ { unsigned char x0; unsigned short x1; unsigned char x2[0]; } *)contourExtraData:(id)arg0;
- (void)setEffectABLicense:(id)arg0;
- (void)setContourInfoHelper:(id)arg0;
- (id)contourInfoHelper;
- (void)fetchEffectDetectPhotoContentWithImage:(id)arg0 algorithmType:(id)arg1 isLastPhone:(BOOL)arg2 callback:(id /* block */)arg3;
- (void)setEffectRenderCacheTextureWithImage:(id)arg0 algorithmType:(id)arg1;
- (void)releaseEffectCapturedImage:(struct LSLiveEffectImage { char *x0; int x1; int x2; int x3; int x4; unsigned long long x5; void *x6; })arg0;
- (id)effectLicense;
- (void)setEffectLicense:(id)arg0;
- (void)startSpeechRecognizing;
- (void)stopSpeechRecognizing;
- (BOOL)isSpeechRecognizing;
- (void)setEffectABInfo:(id)arg0;
- (void)needAddMonitoringLinkMicAudioData;
- (void)needRemoveMonitoringLinkMicAudioData;
- (void)onLinkMicAudio:(void *)arg0 size:(unsigned int)arg1 numberOfFrames:(int)arg2 numberOfchannels:(int)arg3 sampleRate:(int)arg4 pts:(long long)arg5;
- (void)reportToServer:(id)arg0;
- (void)stopPushKaraokeAudio;
- (void)setKaraokeVideoMixerDescription:(long long)arg0 withPosition:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg1;
- (void)pauseMV;
- (void)playMV;
- (void)setEnableKaraokeMovieAudioPitchShifter:(BOOL)arg0;
- (BOOL)isEnableKaraokeMovieAudioPitchShifter;
- (void)setKaraokeMoviePitch:(double)arg0;
- (void)setKaraokeVideoMixerDescription:(long long)arg0 zOrder:(int)arg1 withPosition:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg2;
- (void)resetMovieRenderView:(id)arg0;
- (void)pushKaraokeMovieBuffer:(struct __CVBuffer { } *)arg0 andCMTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg1;
- (void)pushKaraokeMovieAudioBuffer:(float **)arg0 samples:(int)arg1;
- (void)prepareKaraokeMovieAudio:(int)arg0 channels:(int)arg1;
- (void)setKaraokeMixVolume:(float)arg0 captureVolume:(float)arg1;
- (void)setKaraokePlayVolume:(float)arg0;
- (BOOL)original_ktv_installed;
- (BOOL)replace_ktv_installed;
- (void)original_ktv_init;
- (void)replace_ktv_init;
- (void)original_ktv_stop;
- (void)replace_ktv_stop;
- (id)original_ktv_requestExtraData;
- (id)replace_ktv_requestExtraData;
- (void)original_ktv_didReceiveRTCExtraData:(id)arg0;
- (void)replace_ktv_didReceiveRTCExtraData:(id)arg0;
- (void)original_ktv_processAudioBufferList:(void *)arg0 inNumberFrames:(unsigned int)arg1 processedData:(void *)arg2 headphonesMonitoringData:(void *)arg3 channels:(int)arg4 dataSize:(unsigned int)arg5 sampleRate:(int)arg6 onlyLocalPlay:(BOOL)arg7;
- (void)replace_ktv_processAudioBufferList:(void *)arg0 inNumberFrames:(unsigned int)arg1 processedData:(void *)arg2 headphonesMonitoringData:(void *)arg3 channels:(int)arg4 dataSize:(unsigned int)arg5 sampleRate:(int)arg6 onlyLocalPlay:(BOOL)arg7;
- (void)original_ktv_processEarMonitorData:(void *)arg0 inNumberFrames:(unsigned int)arg1 channels:(int)arg2 dataSize:(unsigned int)arg3 sampleRate:(int)arg4 onlyLocalPlay:(BOOL)arg5;
- (void)replace_ktv_processEarMonitorData:(void *)arg0 inNumberFrames:(unsigned int)arg1 channels:(int)arg2 dataSize:(unsigned int)arg3 sampleRate:(int)arg4 onlyLocalPlay:(BOOL)arg5;
- (void)setReverberationEnabled:(BOOL)arg0;
- (void)p_stopBgMusic;
- (id)ktvAudioUnitLock;
- (id)scoreEngine;
- (id)ktvEngine;
- (BOOL)isRouteToSpeaker;
- (BOOL)isHeadphonesMonitoringEnabled;
- (BOOL)enableSkipMemsetMonitoringDataIfBgmPaused;
- (float)getAudioVolume;
- (id /* block */)playAudioFrameCallback;
- (id)musicLoudNormEngine;
- (BOOL)isEnableLoudNorm;
- (BOOL)muteLocalAudioStream;
- (id)ktvRenderSink;
- (void)renderAudioFile;
- (id)earMonitorKtvEngine;
- (id)lyricArray;
- (id)lyricStringArray;
- (id)bachContourInfoAndExtraDataUncompressWithData:(id)arg0;
- (id /* block */)contourModelCallBack;
- (id)liveSession;
- (int)sendSEIMsgWithKey:(id)arg0 value:(id)arg1 repeatTimes:(long long)arg2 keyFrameOnly:(BOOL)arg3 allowsCovered:(BOOL)arg4 timeGap:(int)arg5;
- (BOOL)enableMergeRtcExtraDataToLiveStream;
- (id /* block */)lyricInfoDidReceiveCallback;
- (long long)getTimestampWithNtpDiff;
- (long long)seiCurrentShiftDiffTime;
- (long long)pipelineMode;
- (void)setAudioPlayerMode:(long long)arg0;
- (void)setKtvRenderSink:(id)arg0;
- (long long)audioPlayerMode;
- (BOOL)useSingleDirChorusMode;
- (void)setEnablePlayer:(BOOL)arg0;
- (void)setMusicLoudNormEngine:(id)arg0;
- (void)stopBgMusic;
- (void)setEnablePipelineMode:(long long)arg0;
- (void)playBgMusicWithConfig:(id)arg0 createPlayerCompletion:(id /* block */)arg1 completionBlock:(id /* block */)arg2;
- (void)setLatestLyricInfo:(id)arg0;
- (void)setLyricArray:(id)arg0;
- (id)latestLyricInfo;
- (void)setLyricStringArray:(id)arg0;
- (void)setAudioMuteExceptBgm:(BOOL)arg0;
- (BOOL)liveCoreLogEnabled;
- (long long)liveCoreLogFlag;
- (void)logWithALogSource:(long long)arg0 logLevel:(int)arg1 log:(id)arg2;
- (void)setDisablePipelineMode:(long long)arg0;
- (void)setGetAudioCallback:(id /* block */)arg0;
- (void)setMicVolume:(float)arg0;
- (void)setMuteLocalAudioStream:(BOOL)arg0;
- (void)setAudioMute:(BOOL)arg0;
- (void)setEnableAudioLoudNorm:(BOOL)arg0 param:(float)arg1;
- (id)ktvReverb2Format;
- (id)ktvEqualizerFormat;
- (id)rockReverb2Format;
- (id)rockEqualizerFormat;
- (id)popularReverb2Format;
- (id)popularEqualizerFormat;
- (id)relaxedReverb2Format;
- (id)relaxedEqualizerFormat;
- (void)setScoreEngine:(id)arg0;
- (void)setKtvEngine:(id)arg0;
- (void)setEarMonitorKtvEngine:(id)arg0;
- (BOOL)isReverberationEnabled;
- (void)setLyricInfoDidReceiveCallback:(id /* block */)arg0;
- (void)setPlayAudioFrameCallback:(id /* block */)arg0;
- (BOOL)ktv_isInteractKTVAllowed;
- (void)playBgMusicWithURL:(id)arg0 loop:(BOOL)arg1 volume:(float)arg2 createPlayerCompletion:(id /* block */)arg3 completionBlock:(id /* block */)arg4;
- (void)sendLyricInfo:(id)arg0 withKey:(id)arg1;
- (void)sendLyricStringInfo:(id)arg0 withKey:(id)arg1;
- (void)pauseBgMusic;
- (void)resumeBgMusic;
- (BOOL)musicIsPlaying;
- (void)muteLocalAudioStream:(BOOL)arg0 exceptBgm:(BOOL)arg1;
- (void)setEnableLoudNorm:(BOOL)arg0;
- (void)setLoudNormParams:(id)arg0;
- (void)forceMediaMode:(BOOL)arg0;
- (void)applyReverb2Format:(id)arg0;
- (void)setAudioScoreEngine:(id)arg0;
- (void)setKtvEffectEngine:(id)arg0;
- (void)setKtvEarMonitorEffectEngine:(id)arg0;
- (void)setAudioFilePlayStoped:(id /* block */)arg0;
- (void)setAudioplayPlayIsCompleted:(BOOL)arg0;
- (void)setAudioFileaudioUnit:(id)arg0;
- (void)setAudioFileRenderSink:(id)arg0;
- (void)setFilePlayQueue:(id)arg0;
- (void)setAudioFilePlayer:(id)arg0;
- (id)audioFilePlayer;
- (void)setAudioFileHandler:(id)arg0;
- (id)audioFileRenderSink;
- (id)filePlayQueue;
- (void)playAudioFileInner:(id)arg0 audioFileWillPlay:(id /* block */)arg1 audioFileStoped:(id /* block */)arg2 audioFilePlayError:(id /* block */)arg3;
- (void)stopPlayAudioFileInner;
- (id)audioFileHandler;
- (void)stopPlayAudioFile;
- (id /* block */)audioFilePlayStoped;
- (void)initAudioFilePlayStatus;
- (void)playAudioFile:(id)arg0 audioFileWillPlay:(id /* block */)arg1 audioFileStoped:(id /* block */)arg2 audioFilePlayError:(id /* block */)arg3;
- (void)releasePlayAudioFile;
- (double)getFileDuration;
- (int)karaokeMovieZOrder;
- (void)setForceCompositingLayout:(BOOL)arg0;
- (void)setUseMVMode:(BOOL)arg0;
- (id)karaokeRenderSink;
- (void)setKaraokeRenderSink:(id)arg0;
- (void)resetPreviewOn:(id)arg0;
- (void)startVideoCapture:(id)arg0;
- (void)startVideoCapture:(id)arg0 withStateDelegate:(id)arg1;
- (void)setupVideoPath:(id)arg0 withStateDelegate:(id)arg1;
- (id)interactSeiNSData;
- (void)setInteractSeiNSData:(id)arg0;
- (id)getAndCleanUpInteractSeiDic;
- (id)interactSeiDic;
- (void)__setupCaptureWithEffect:(BOOL)arg0 withAsync:(BOOL)arg1;
- (void)setupVideoCamera:(id)arg0;
- (void)setPreviewMirror:(BOOL)arg0;
- (void)enableSingleView:(BOOL)arg0;
- (BOOL)fetchSingleViewStatus;
- (void)setSingleViewCropRegion:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0;
- (void)setLiveCapture:(id)arg0;
- (void)setInteractSeiDic:(id)arg0;
- (BOOL)startEffectBachAlgorithmWithConfig:(id)arg0;
- (BOOL)startEffectBachAlgorithmWithConfig:(id)arg0 seiFormat:(long long)arg1;
- (BOOL)stopEffectBachAlgorithm;
- (struct contour_info_st { unsigned char x0; unsigned short x1; unsigned short x2; struct con_string_ { unsigned short x0; unsigned char x1[0]; } x3; struct contour_extra_ { unsigned char x0; unsigned short x1; unsigned char x2[0]; } x4; unsigned char x5; struct contour_item_ { unsigned short x0; struct point_ { unsigned short x0; unsigned short x1; } x1[0]; } x6[0]; } *)bachContourInfoUncompressWithData:(id)arg0;
- (struct contour_info_st { unsigned char x0; unsigned short x1; unsigned short x2; struct con_string_ { unsigned short x0; unsigned char x1[0]; } x3; struct contour_extra_ { unsigned char x0; unsigned short x1; unsigned char x2[0]; } x4; unsigned char x5; struct contour_item_ { unsigned short x0; struct point_ { unsigned short x0; unsigned short x1; } x1[0]; } x6[0]; } *)bachContourInfoUncompressWithString:(id)arg0;
- (void)prepareCommonRenderSink;
- (void)stopAudioCaptureByScene:(id)arg0;
- (void)startFakeAudioCapture;
- (void)stopFakeAudioCapture;
- (BOOL)isMicOccupiedSilenced;
- (void)audioPlayerInterrupted:(BOOL)arg0;
- (void)pushAudioBuffer:(char *)arg0 andDataLen:(unsigned long long)arg1 sampelRate:(int)arg2 channels:(int)arg3 andBytesPerSample:(int)arg4 timestamp:(long long)arg5 trackId:(int)arg6;
- (void)setEnableAudioCaptureInBackground:(BOOL)arg0;
- (void)setEnableSpeaker:(BOOL)arg0;
- (void)setEnableNoiseSuppression:(BOOL)arg0 param:(float)arg1;
- (void)setEnableNoiseSuppressionWithType:(unsigned long long)arg0 enable:(BOOL)arg1 param:(float)arg2 resourceUrl:(id)arg3;
- (void)setEnableExternalSoundCard:(BOOL)arg0;
- (void)setVideoRecordCallback:(id /* block */)arg0;
- (void)setEnableAecOnHeadsetMode:(BOOL)arg0;
- (BOOL)isEnableSoftAec;
- (void)setAECType:(int)arg0;
- (void)setDiagnosisModelPath:(id)arg0;
- (void)setEnableSoftAec:(BOOL)arg0;
- (void)setEnableMediaVolOnSWAec:(BOOL)arg0;
- (BOOL)isEnableAecOnHeadsetMode;
- (void)setSoftAECModelPath:(id)arg0;
- (void)setHeadphonesMonitoringEnabled:(BOOL)arg0;
- (void)setEnableAudioLowLatency:(BOOL)arg0 ioBufferDuration:(float)arg1;
- (void)setEnablePlayoutEcho:(BOOL)arg0;
- (void)resetCheckAudioIOPipelineInterval:(double)arg0;
- (BOOL)isMicRunning;
- (BOOL)isFakeAudioCaptureRunning;
- (BOOL)isEchoCancellationEnabled;
- (BOOL)isAudioCaptureInterrupted;
- (int)getAudioRmsInCaptureTime;
- (void)setInputFrameCallback:(id /* block */)arg0;
- (void)setEffectFrameCallback:(id /* block */)arg0;
- (BOOL)setCroppedInputFrameCallbackWithRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0 originSize:(struct CGSize { double x0; double x1; })arg1 callback:(id /* block */)arg2;
- (BOOL)setCroppedEffectFrameCallbackWithRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0 originSize:(struct CGSize { double x0; double x1; })arg1 callback:(id /* block */)arg2;
- (struct __CVBuffer { } *)getPixelBufferWithIsEffected:(BOOL)arg0;
- (id)getJpegDataWithIsEffected:(BOOL)arg0 compressionRatio:(double)arg1;
- (void)configureAudioCatcher:(id)arg0 durationMs:(long long)arg1 format:(unsigned long long)arg2 isPeriodCatch:(BOOL)arg3 totalDurationMsOnPeriodCatch:(long long)arg4 outSampleHz:(int)arg5 outChannel:(int)arg6;
- (void)stopAudioCatcher;
- (struct LSLiveEffectImage { char *x0; int x1; int x2; int x3; int x4; unsigned long long x5; void *x6; })getEffectCapturedImagewithKey:(id)arg0;
- (void)enableAudioPushStream:(BOOL)arg0;
- (void)setContourDataCallBack:(id /* block */)arg0;
- (void)setContourModelCallBack:(id /* block */)arg0;
- (void)setEffectBachAlgorithmEnable:(BOOL)arg0 threshold:(long long)arg1;
- (id)bachContourInfoAndExtraDataUncompressWithString:(id)arg0;
- (void)setupAudioCaptureWithConfig:(id)arg0;
- (id)startAudioCaptureWithCert:(id)arg0;
- (id)stopAudioCaptureWithCert:(id)arg0;
- (id)audioCaptureInterrupted:(BOOL)arg0 withCert:(id)arg1;
- (void)setAudioRecordCallback:(id /* block */)arg0;
- (id)setEchoCancellationEnabled:(BOOL)arg0 withCert:(id)arg1;
- (void)setAutoResumeVideoCaptureOnAppActive:(BOOL)arg0;
- (void)setEnableAudioCaptureRespondToAppStatus:(BOOL)arg0;
- (void)audioCatchOnData:(id)arg0 startTimeMs:(long long)arg1 durationTimeMs:(long long)arg2 outSampleHz:(int)arg3 outChannel:(int)arg4 format:(unsigned long long)arg5;
- (void)audioCatchOnError:(int)arg0 message:(id)arg1;
- (void)audioCatchOnComplete;
- (void)startAudioCatcher;
- (void)onCaptureEvent:(int)arg0 code2:(int)arg1 message:(id)arg2;
- (void)onCaptureError:(int)arg0 code2:(int)arg1 message:(id)arg2;
- (id)byteAudioAuxRenderSink;
- (void)setHostInfoProvider:(id /* block */)arg0;
- (void)setStreamLogCallback:(id /* block */)arg0;
- (void)setReconnectCount:(long long)arg0;
- (void)setDeviceLevel:(int)arg0;
- (void)setGotAppUploader:(BOOL)arg0;
- (void)setUser_layer_map:(id)arg0;
- (void)setEnableKeepDarkFrame:(BOOL)arg0;
- (void)setEnablePipelineKTVCamera:(BOOL)arg0;
- (void)setDidKTVCameraSetPipeline:(BOOL)arg0;
- (void)setEnableMergeRtcExtraDataToLiveStream:(BOOL)arg0;
- (void)setChangeToFullInteractOnlySelf:(BOOL)arg0;
- (void)original_interact_init;
- (void)setRunInfo:(id)arg0;
- (void)setTimer_quque:(id)arg0;
- (void)setExternalPushDark:(BOOL)arg0;
- (void)setFirstVideoPts:(long long)arg0;
- (void)setLastVideoPts:(long long)arg0;
- (void)setBusinessScene:(long long)arg0;
- (void)setMixOnClient:(BOOL)arg0;
- (void)setEnableExternalClientMix:(BOOL)arg0;
- (void)setReleaseAudioCaptureInCleanUp:(BOOL)arg0;
- (BOOL)replace_timor_game_installed;
- (unsigned long long)enabledModule;
- (void)original_timor_game_status_did_changed:(long long)arg0;
- (void)original_interact_status_did_changed:(long long)arg0;
- (void)startCameraCaptureIfNeeded;
- (void)startCameraChecking;
- (void)stopCameraChecking;
- (BOOL)audioCaptureEnterBackGround;
- (void)setAudioCaptureEnterBackGround:(BOOL)arg0;
- (void)audioCaptureInterrupted:(BOOL)arg0;
- (BOOL)gotAppUploader;
- (void)setAppLogClass:(Class)arg0;
- (void)setAppLogUploadMethod:(SEL)arg0;
- (Class)appLogClass;
- (SEL)appLogUploadMethod;
- (void)setEnabledModule:(unsigned long long)arg0;
- (id)liveCoreForInteractDelegate;
- (void)invalidateLogTimer;
- (void)removeAllTimerBlock;
- (id)liveConfig;
- (id)aecRenderSink;
- (void)setAecRenderSink:(id)arg0;
- (void)setLiveSession:(id)arg0;
- (void)releaseDarkImageBuf;
- (id)getEAGLContext;
- (void)onPowerStateChanged;
- (void)onThermalStateChanged;
- (void)setPerformanceLevel:(id)arg0;
- (void)setLiveCoreLogEnabled:(BOOL)arg0;
- (void)parseLiveConfiguration:(id)arg0;
- (BOOL)mixOnClient;
- (id /* block */)pushStreamVideoFrameRateChangedBlock;
- (long long)getLatestAudioPts;
- (long long)reconnectCount;
- (id /* block */)shouldUpdateOptimumIPAddress;
- (void)setShouldUpdateOptimumIPAddress:(id /* block */)arg0;
- (id /* block */)excuteWithCommandAndUserInfo;
- (void)setExcuteWithCommandAndUserInfo:(id /* block */)arg0;
- (id)appendBasicLog;
- (id)appendVideoLog;
- (id)appendMessageLog;
- (BOOL)releaseAudioCaptureInCleanUp;
- (void)reportAudioDiagnosisFinalResult;
- (void)checkSendStatus:(id)arg0;
- (void)checkDeviceLevel;
- (BOOL)enableSeiCurrentShiftDiffTime;
- (void)setEnableSeiCurrentShiftDiffTime:(BOOL)arg0;
- (void)setSeiCurrentShiftDiffTime:(long long)arg0;
- (void)__updateStreamingBitrateRatio:(float)arg0 from:(id)arg1;
- (void)onPerformanceDegradeNotification:(id)arg0;
- (int)sendSEIMsgWithKey:(id)arg0 value:(id)arg1 repeatTimes:(long long)arg2;
- (id)mvRenderSink;
- (void)setMvRenderSink:(id)arg0;
- (id)commonRenderSink;
- (void)setCommonRenderSink:(id)arg0;
- (void)setEnableAutoResumeAudioCaptureOnAppActive:(BOOL)arg0;
- (void)setLiveConfigurationParamChangeCallback:(id)arg0;
- (id)runInfo;
- (void)__updateStreamingOutputSize:(struct CGSize { double x0; double x1; })arg0 from:(id)arg1;
- (void)stopStreamingForPrivate;
- (void)startStreamingByScene:(id)arg0;
- (id)liveCapture;
- (void)setEchoCancellationEnabled:(BOOL)arg0;
- (void)setEnableCalculateAudioLoudness:(BOOL)arg0;
- (void)generateNetworkStatusTimer;
- (void)setupCapturePipeline;
- (void)setPipelineMode:(long long)arg0;
- (void)p_setupCaptureDarkFrameMode;
- (void)stopPushDarkFrame;
- (void)p_setupVideoProcessPipeLine;
- (void)p_setupCaptureVideoBypassPipeLine;
- (void)startPushDarkFrame;
- (long long)firstVideoPts;
- (BOOL)enableExternalClientMix;
- (BOOL)bMovieMode;
- (BOOL)useMVMode;
- (BOOL)interactIgnoreCaptureVideoBuffer;
- (void)p_pushVideoBufferToInteract:(struct __CVBuffer { } *)arg0 timeInfo:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg1;
- (id /* block */)videoProcessingCallback;
- (BOOL)audioDidCapturedData;
- (BOOL)externalPushDark;
- (BOOL)pushDarkFrameForAudioStreamIfNeeded;
- (void)setAudioDidCapturedData:(BOOL)arg0;
- (void)updateStreamingConfiguration:(id)arg0 callback:(id /* block */)arg1;
- (unsigned char)enableUpdateConfigCallAB;
- (void)__updateStreamingBitrate:(long long)arg0 minBit:(long long)arg1 maxBit:(long long)arg2 from:(id)arg3;
- (void)__updateStreamingFrameRate:(int)arg0 from:(id)arg1;
- (void)checkDisableSitiForInteract:(BOOL)arg0;
- (void)checkFpsFallback:(BOOL)arg0;
- (void)checkDisableVQScoreForInteract:(BOOL)arg0;
- (void)checkDisableColorHistForInteract:(BOOL)arg0;
- (void)checkDisableVideoDenoiseForInteract:(BOOL)arg0;
- (void)checkDisableLensEnhancedBitrateRatioForInteract:(BOOL)arg0;
- (void)checkSeiPayloadProcessorForInteract:(BOOL)arg0;
- (void)updateStreamingConfiguration:(id)arg0;
- (id)lensEnhancedAlgorithmParams;
- (void)updateBitrateRatioForLensEnhancedAlgorithm:(float)arg0;
- (BOOL)enableKeepDarkFrame;
- (struct __CVBuffer { } *)darkFrameForAudioStream;
- (id)pushDarkLock;
- (BOOL)enablePipelineKTVCamera;
- (void)pushVideoBuffer:(struct __CVBuffer { } *)arg0 andCMTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg1;
- (void)stopStreamingByScene:(id)arg0;
- (void)stopStreamingForPrivateByScene:(id)arg0;
- (void)stopNetworkStatusTimer;
- (void)setAudioMute:(BOOL)arg0 event_from:(id)arg1;
- (float)getMicVolume;
- (int)sendSEIInfoInChorusWithKey:(id)arg0 value:(id)arg1;
- (void)updateInteractAuthInfo:(id)arg0 value:(id)arg1 Flag:(int)arg2 FrameType:(long long)arg3;
- (int)sendSEIMsgWithKey:(id)arg0 value:(id)arg1 repeatTimes:(long long)arg2 keyFrameOnly:(BOOL)arg3 allowsCovered:(BOOL)arg4 timeGap:(int)arg5 seiFlag:(int)arg6;
- (int)sendSEIMsgWithKey:(id)arg0 value:(id)arg1 repeatTimes:(long long)arg2 keyFrameOnly:(BOOL)arg3 allowsCovered:(BOOL)arg4 timeGap:(int)arg5 seiFlag:(int)arg6 pts:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg7;
- (void)addUserMetaData:(id)arg0 value:(id)arg1 flag:(int)arg2;
- (id)getStreamInfoForKey:(id)arg0;
- (long long)getTimestampForKey:(long long)arg0;
- (id)getAudioBytesSent;
- (id)getVideoBytesSent;
- (void)setEnableAudioMonitor:(BOOL)arg0 timefreq:(int)arg1;
- (void)setAudioMonitorDelegate:(id)arg0;
- (void)pushAudioBuffer:(char *)arg0 andDataLen:(unsigned long long)arg1 andInNumberFrames:(int)arg2 andCMTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg3;
- (void)original_timor_game_init;
- (void)original_timor_game_deinit;
- (void)reportLiveCoreLog:(id)arg0 params:(id)arg1;
- (void)refineAudioPlayerMode;
- (BOOL)didKTVCameraSetPipeline;
- (void)setVideoProcessingCallback:(id /* block */)arg0;
- (long long)p_getCurrentSysMillSeconds;
- (void)onLiveSdkParamsIssue:(id)arg0;
- (void)p_execPushRestart:(id)arg0;
- (void)p_execSwitchMixType:(id)arg0;
- (id)getInteractExtraData;
- (id)rtcVideoSink;
- (void)audioProcessWithData:(void *)arg0 size:(unsigned int)arg1 sampleRate:(int)arg2 timeStamp:(long long)arg3 mNumberChannels:(unsigned int)arg4 numberOfFrames:(unsigned int)arg5 processedData:(void *)arg6 earMonitorData:(void *)arg7;
- (long long)busiScene;
- (BOOL)audioMuteExceptBgm;
- (id)rtcAudioSink;
- (id)rtcGameAudioSink;
- (id /* block */)didCapturedAudioFrame;
- (id /* block */)didCapturedAudioFrameWithSampleRate;
- (void)audioProcessEarMonitorData:(void *)arg0 size:(unsigned int)arg1 sampleRate:(int)arg2 timeStamp:(long long)arg3 mNumberChannels:(unsigned int)arg4 numberOfFrames:(unsigned int)arg5;
- (id /* block */)getAudioCallback;
- (void)playerProcessWithData:(struct AudioBufferList { unsigned int x0; struct AudioBuffer { unsigned int x0; unsigned int x1; void *x2; } x1[1]; } *)arg0 frames:(int)arg1 bytesPerSample:(int)arg2 channels:(int)arg3 sampleRate:(int)arg4;
- (id /* block */)didRecordAudioFrame;
- (id /* block */)networkQualityCallback;
- (id)timer_quque;
- (void)executeTimerBLocks;
- (double)pullAudioCostTime;
- (double)pushAudioCostTime;
- (double)mixCostTime;
- (id)getAudioQosInfo;
- (BOOL)audioMute;
- (long long)lastVideoPts;
- (id /* block */)debugLogBlock;
- (void)streamSession:(id)arg0 onStatusChanged:(long long)arg1;
- (void)streamSession:(id)arg0 errorType:(long long)arg1 onError:(long long)arg2 errorMessage:(id)arg3;
- (void)updateLiveCoreModule:(unsigned long long)arg0;
- (void)setEnableCheckingCameraRunningStatus:(BOOL)arg0;
- (void)setEnableExternalAU:(BOOL)arg0;
- (void)saveAVAudioSession;
- (void)restoreAVAudioSession;
- (void)setupLiveSessionWithConfig:(id)arg0;
- (id)getStreamSession;
- (void)retryStreaming;
- (void)updatePSNRStatisticsFrames:(long long)arg0 periodSeconds:(long long)arg1 enable:(BOOL)arg2;
- (struct CGSize { double x0; double x1; })getCameraOutputSizeFromParams:(id)arg0;
- (void)onInteractSatusChange:(BOOL)arg0;
- (void)setLensEnhancedAlgorithmParams:(id)arg0;
- (int)sendSEIMsgWithKey:(id)arg0 value:(id)arg1 repeatTimes:(long long)arg2 keyFrameOnly:(BOOL)arg3 allowsCovered:(BOOL)arg4;
- (long long)getBitrateStrategy;
- (void)setEnableAudioDeviceMonitor:(BOOL)arg0 timefreq:(int)arg1;
- (void)setADMonitorDelegate:(id)arg0;
- (unsigned long long)getMetaAudioBitrate;
- (void)pushEffectedVideoBuffer:(struct __CVBuffer { } *)arg0 texture:(int)arg1 andCMTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg2;
- (void)pushEffectedVideoBufferAfterStarted:(struct __CVBuffer { } *)arg0 texture:(int)arg1 andCMTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg2;
- (void)startPushEffectedFrame;
- (void)stopPushEffectedFrame;
- (void)pushVideoBuffer:(struct __CVBuffer { } *)arg0 andTimestamp:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg1;
- (void)p_setRunState:(long long)arg0;
- (void)p_setMixOnClient:(BOOL)arg0;
- (BOOL)p_mixOnClient;
- (void)p_enableExternalClientMix:(BOOL)arg0;
- (BOOL)checkVendorClientMixPercentage:(id)arg0 clientType:(int)arg1 playMode:(id)arg2;
- (BOOL)getInteractStreamBitrate:(long long *)arg0 MinBitrate:(long long *)arg1 MaxBitrate:(long long *)arg2;
- (BOOL)getLivingStreamBitrate:(long long *)arg0 MinBitrate:(long long *)arg1 MaxBitrate:(long long *)arg2;
- (void)pushRestart:(id)arg0;
- (void)setAudioPlayerMixMode:(long long)arg0;
- (void)audioProcessWithData:(void *)arg0 size:(unsigned int)arg1 timeStamp:(long long)arg2 mNumberChannels:(unsigned int)arg3 numberOfFrames:(unsigned int)arg4 processedData:(void *)arg5 earMonitorData:(void *)arg6;
- (void)setGetGameAudioCallback:(id /* block */)arg0;
- (void)pullRecordAudio:(void *)arg0 numberOfFrames:(int)arg1 numberOfchannels:(int)arg2 pts:(long long)arg3;
- (void)generateLogTimer;
- (void)addTimerBlock:(id /* block */)arg0;
- (void)removeTimerBlock:(id /* block */)arg0;
- (id)appendAudioLog;
- (BOOL)original_interact_installed;
- (void)original_interact_cleanup;
- (void)original_interact_pushAudioDataToInteractSDK:(void *)arg0 size:(unsigned int)arg1 timeStamp:(long long)arg2;
- (void)original_interact_pushVideoBuffer:(struct __CVBuffer { } *)arg0 timeInfo:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg1;
- (void)original_interact_resumeMixedPushIfNeeded;
- (void)original_interact_updateStreamingWithParams:(id)arg0;
- (void)original_interact_switchMixType:(BOOL)arg0;
- (void)original_interact_leaveChannel;
- (BOOL)original_interact_isRunning;
- (void)original_interact_updateAuthinfo:(id)arg0 value:(id)arg1 Flag:(int)arg2 FrameType:(long long)arg3;
- (void)setDidCapturedAudioFrame:(id /* block */)arg0;
- (void)setDidCapturedAudioFrameWithSampleRate:(id /* block */)arg0;
- (void)setDidRecordAudioFrame:(id /* block */)arg0;
- (void)setPushStreamVideoFrameRateChangedBlock:(id /* block */)arg0;
- (BOOL)enableExternalAU;
- (BOOL)willCloseLivingRoom;
- (void)setWillCloseLivingRoom:(BOOL)arg0;
- (BOOL)changeToFullInteractOnlySelf;
- (void)setInteractIgnoreCaptureVideoBuffer:(BOOL)arg0;
- (id /* block */)queryIsNeedStreamingCallback;
- (void)setQueryIsNeedStreamingCallback:(id /* block */)arg0;
- (void)setEnableUpdateConfigCallAB:(unsigned char)arg0;
- (id /* block */)streamLogCallback;
- (void)setNetworkQualityCallback:(id /* block */)arg0;
- (id /* block */)hostInfoProvider;
- (BOOL)enableCheckingCameraRunningStatus;
- (void)setDebugLogBlock:(id /* block */)arg0;
- (id)performanceLevel;
- (void)setLiveCoreLogFlag:(long long)arg0;
- (id)effectRenderSink;
- (void)setEffectRenderSink:(id)arg0;
- (id)gameRenderSink;
- (void)setGameRenderSink:(id)arg0;
- (id)user_layer_map;
- (id)userLayerMap_lock;
- (void)setUserLayerMap_lock:(id)arg0;
- (int)deviceLevel;
- (BOOL)needCloseAEC;
- (void)setNeedCloseAEC:(BOOL)arg0;
- (void)setBMovieMode:(BOOL)arg0;
- (void)setUseSingleDirChorusMode:(BOOL)arg0;
- (BOOL)forceCompositingLayout;
- (id)chorusRenderSink;
- (void)setChorusRenderSink:(id)arg0;
- (void)setRtcVideoSink:(id)arg0;
- (void)setRtcAudioSink:(id)arg0;
- (id)rtcGameVideoSink;
- (void)setRtcGameVideoSink:(id)arg0;
- (void)setRtcGameAudioSink:(id)arg0;
- (void)setLiveCoreForInteractDelegate:(id)arg0;
- (id)interactCurrentUser;
- (void)setInteractCurrentUser:(id)arg0;
- (void)setEnableSkipMemsetMonitoringDataIfBgmPaused:(BOOL)arg0;
- (BOOL)didStartLogTimer;
- (void)setDidStartLogTimer:(BOOL)arg0;
- (id)audioFileaudioUnit;
- (id /* block */)didCapturedVideoFrame;
- (void)setDidCapturedVideoFrame:(id /* block */)arg0;
- (id /* block */)interactVideoFrameCallback;
- (void)setInteractVideoFrameCallback:(id /* block */)arg0;
- (BOOL)didReceivedFirstRemoteAudio;
- (void)setDidReceivedFirstRemoteAudio:(BOOL)arg0;
- (BOOL)sendVideoToInteract;
- (void)setSendVideoToInteract:(BOOL)arg0;
- (BOOL)sendVideoToRTCGame;
- (void)setSendVideoToRTCGame:(BOOL)arg0;
- (void)setBusiScene:(long long)arg0;
- (id /* block */)shouldUpdateInteractLayout;
- (void)setShouldUpdateInteractLayout:(id /* block */)arg0;
- (id /* block */)didOfflineCallback;
- (void)setDidOfflineCallback:(id /* block */)arg0;
- (BOOL)needOpenAEC;
- (void)setNeedOpenAEC:(BOOL)arg0;
- (BOOL)audioplayPlayIsCompleted;
- (void)setPushDarkLock:(id)arg0;
- (void)setKtvAudioUnitLock:(id)arg0;
- (int)dagnosisSwitchFreq;
- (void)setDagnosisSwitchFreq:(int)arg0;
- (void)setPullAudioCostTime:(double)arg0;
- (void)setPushAudioCostTime:(double)arg0;
- (void)setMixCostTime:(double)arg0;
- (id /* block */)getGameAudioCallback;
- (void)didCaptureAudioSampleBuffer:(struct opaqueCMSampleBuffer { } *)arg0;
- (long long)runState;
- (void)cleanUp;
- (void)setRunState:(long long)arg0;
- (void)setPitch:(double)arg0;
- (void)setLogLevel:(unsigned long long)arg0;
- (id)init;
- (void)setCaptureMode:(long long)arg0;
- (id)camera;
- (id)category;
- (void)debugLog:(id)arg0;
- (void)setCamera:(id)arg0;
- (void).cxx_destruct;
- (long long)captureMode;
- (void)setTimerManager:(id)arg0;
- (id)mode;
- (void)removeObserver;
- (void)setOptions:(unsigned long long)arg0;
- (id)initWithMode:(unsigned long long)arg0;
- (void)setCategory:(id)arg0;
- (void)setMode:(id)arg0;
- (id)propertyDict;
- (id)timerManager;
- (void)stopAudioCapture;
- (void)setAudioUnit:(id)arg0;
- (void)setPreviewView:(id)arg0;
- (void)startAudioCapture;
- (id)capture;
- (void)setAudioVolume:(float)arg0;
- (id)previewView;
- (id)queue;
- (BOOL)isStreaming;
- (unsigned long long)options;
- (void)dealloc;
- (unsigned long long)logLevel;
- (void)addObserver;
- (void)seekToTime:(double)arg0;
- (void)setQueue:(id)arg0;
- (id).cxx_construct;
- (void)setPropertyDict:(id)arg0;
- (id)audioUnit;
- (void)startVideoCapture;
- (void)stopVideoCapture;
- (void)setPreviewMode:(long long)arg0;
- (void)setShouldAutoReconnect:(BOOL)arg0;
- (struct AudioStreamBasicDescription { double x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; })audioStreamBasicDescription;
- (void)startStreaming;
- (id)logTimer;
- (void)setLogTimer:(id)arg0;
- (void)setCapture:(id)arg0;
- (id)captureDelegate;
- (void)setCaptureDelegate:(id)arg0;
- (void)stopStreaming;
- (id)commonLog;
- (id /* block */)statusChangedBlock;
- (void)setStatusChangedBlock:(id /* block */)arg0;

@end
