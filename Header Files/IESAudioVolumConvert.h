//
//     Generated by private class-dump
//

@class IESAudioConverter, NSObject, NSURL, NSMutableData, NSMutableArray, IESAudioVolumConvertConfig;
@protocol OS_dispatch_queue;

@interface IESAudioVolumConvert : NSObject {
    struct WaveformVisualizer { unsigned long long x0; unsigned char x1; } *_waveform;
    NSMutableArray *_volumesArray;
    NSMutableData *_volumesData;
    unsigned long long _volumeWidth;
    NSObject<OS_dispatch_queue> *_queue;
    BOOL _optAlgorithm;
    BOOL _enableWaveformDataExtractOpt;
    IESAudioConverter *_musicConverter;
    NSURL *_musicURL;
    long long _waveformType;
    double _waveformduration;
    unsigned long long _wavePointsCount;
    IESAudioVolumConvertConfig *_config;
    struct AudioStreamBasicDescription { double mSampleRate; unsigned int mFormatID; unsigned int mFormatFlags; unsigned int mBytesPerPacket; unsigned int mFramesPerPacket; unsigned int mBytesPerFrame; unsigned int mChannelsPerFrame; unsigned int mBitsPerChannel; unsigned int mReserved; } _absd;
}

@property (retain, nonatomic) IESAudioConverter *musicConverter;
@property (nonatomic) struct AudioStreamBasicDescription { double mSampleRate; unsigned int mFormatID; unsigned int mFormatFlags; unsigned int mBytesPerPacket; unsigned int mFramesPerPacket; unsigned int mBytesPerFrame; unsigned int mChannelsPerFrame; unsigned int mBitsPerChannel; unsigned int mReserved; } absd;
@property (retain, nonatomic) NSURL *musicURL;
@property (nonatomic) long long waveformType;
@property (nonatomic) double waveformduration;
@property (nonatomic) unsigned long long wavePointsCount;
@property (nonatomic) BOOL optAlgorithm;
@property (retain, nonatomic) IESAudioVolumConvertConfig *config;
@property (nonatomic) BOOL enableWaveformDataExtractOpt;

- (void)setWaveformduration:(double)arg0;
- (void)setOptAlgorithm:(BOOL)arg0;
- (id)getVolumePoints;
- (id)musicURL;
- (void)setMusicURL:(id)arg0;
- (void)startProcess;
- (void)setWaveformType:(long long)arg0;
- (void)setWavePointsCount:(unsigned long long)arg0;
- (long long)waveformType;
- (unsigned long long)wavePointsCount;
- (void)convertNewFile2:(id)arg0;
- (void)copyToBufferList:(struct AudioBufferList { unsigned int x0; struct AudioBuffer { unsigned int x0; unsigned int x1; void *x2; } x1[1]; } *)arg0 dstOffset:(long long)arg1 srcBufferList:(struct AudioBufferList { unsigned int x0; struct AudioBuffer { unsigned int x0; unsigned int x1; void *x2; } x1[1]; } *)arg2 srcOffset:(long long)arg3 copyFrams:(long long)arg4;
- (id)p_createAVReaderAudioOutput:(id)arg0;
- (void)waveFormProcess:(struct AudioBufferList { unsigned int x0; struct AudioBuffer { unsigned int x0; unsigned int x1; void *x2; } x1[1]; } *)arg0 maxFrameCount:(long long)arg1;
- (void)p_enqueueToProcessBuffer:(struct AudioBufferList { unsigned int x0; struct AudioBuffer { unsigned int x0; unsigned int x1; void *x2; } x1[1]; } *)arg0 fromDecodeBuffer:(struct AudioBufferList { unsigned int x0; struct AudioBuffer { unsigned int x0; unsigned int x1; void *x2; } x1[1]; } *)arg1 DecodeSampleNumber:(unsigned int)arg2 fullBufferHandler:(id /* block */)arg3;
- (void)convertNewFile3:(id)arg0;
- (void)asyncExecuteBlock:(id /* block */)arg0 callback:(id /* block */)arg1;
- (void)fetchVolumsArrayFromData;
- (int)decryptVideo:(id)arg0 dstPath:(id)arg1;
- (void)waveFormProcess:(float *)arg0 processSamples:(long long)arg1 maxFrameCount:(long long)arg2;
- (BOOL)p_isVideoType:(id)arg0;
- (void)getVolumeDataAsync:(id /* block */)arg0;
- (void)getVolumePointsAsync:(id /* block */)arg0;
- (double)waveformduration;
- (BOOL)optAlgorithm;
- (id)getVolumeData;
- (BOOL)enableWaveformDataExtractOpt;
- (void)setEnableWaveformDataExtractOpt:(BOOL)arg0;
- (void)setAbsd:(struct AudioStreamBasicDescription { double x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; })arg0;
- (struct AudioStreamBasicDescription { double x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; })absd;
- (void)setMusicConverter:(id)arg0;
- (void)convertNewFile:(id)arg0;
- (id)musicConverter;
- (void)setConfig:(id)arg0;
- (void).cxx_destruct;
- (id)config;
- (id)initWithConfig:(id)arg0;
- (void)dealloc;

@end
