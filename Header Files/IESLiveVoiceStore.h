//
//     Generated by private class-dump
//

@class HTSLiveCommentApi, HTSEventContext, NSString, HTSLiveUser_PublicAreaBadgeInfo, HTSLiveImage, IESLiveVoiceTranslater;
@protocol IESLiveAudioPlaybackProvider, IESLiveAudioRecorderProvider, IESLiveRoomService;

@interface IESLiveVoiceStore : NSObject <IESLiveAudioRecorderDelegate, HTSLiveMessageSubscriber, HTSLiveRoomRemoteActions, IESLiveCommentVoiceService> {
    BOOL _disableVoiceInput;
    BOOL _didEnterRoomExecuted;
    BOOL _enableAudioChat;
    BOOL _enableAutoPlay;
    BOOL _forceHide;
    long long _showIdentity;
    HTSLiveImage *_identityLabel;
    HTSLiveUser_PublicAreaBadgeInfo *localPublicAreaBadgeInfo;
    HTSEventContext *_trackContext;
    id<IESLiveRoomService> _roomModel;
    IESLiveVoiceTranslater *_voiceTranslater;
    NSString *_toastString;
    HTSLiveCommentApi *_commentApi;
    id<IESLiveAudioRecorderProvider> _recorder;
    id<IESLiveAudioPlaybackProvider> _audioPlayback;
}

@property (retain, nonatomic) HTSLiveCommentApi *commentApi;
@property (nonatomic) BOOL disableVoiceInput;
@property (nonatomic) BOOL didEnterRoomExecuted;
@property (retain, nonatomic) id<IESLiveAudioRecorderProvider> recorder;
@property (retain, nonatomic) id<IESLiveAudioPlaybackProvider> audioPlayback;
@property (nonatomic) BOOL forceHide;
@property (retain, nonatomic) HTSEventContext *trackContext;
@property (retain, nonatomic) id<IESLiveRoomService> roomModel;
@property (retain, nonatomic) IESLiveVoiceTranslater *voiceTranslater;
@property (nonatomic) BOOL enableAudioChat;
@property (nonatomic) BOOL enableAutoPlay;
@property (copy, nonatomic) NSString *toastString;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (retain, nonatomic) HTSLiveUser_PublicAreaBadgeInfo *localPublicAreaBadgeInfo;
@property (nonatomic) long long showIdentity;
@property (retain, nonatomic) HTSLiveImage *identityLabel;

- (id)trackContext;
- (void)setTrackContext:(id)arg0;
- (void)showToast:(id)arg0;
- (id)roomModel;
- (BOOL)enableAutoPlay;
- (void)setEnableAutoPlay:(BOOL)arg0;
- (id)toastString;
- (void)setToastString:(id)arg0;
- (void)setRoomModel:(id)arg0;
- (id)identityLabel;
- (void)setIdentityLabel:(id)arg0;
- (void)didUpdateRoom:(id)arg0 timeStamp:(id)arg1;
- (void)didEnterLiveRoom:(id)arg0;
- (BOOL)disableVoiceInput;
- (BOOL)enableAudioChat;
- (void)setEnableAudioChat:(BOOL)arg0;
- (BOOL)forceHide;
- (void)fetchAudioChatCodeFinished:(id /* block */)arg0;
- (void)resendAudioChatMessage:(id)arg0;
- (void)commentForbidden:(BOOL)arg0;
- (void)sendAnchorSpeechCommentMessageWithPath:(id)arg0 duration:(double)arg1 rtfContent:(id)arg2 content:(id)arg3 atUserContent:(id)arg4;
- (id)initWithRoomModel:(id)arg0 diContext:(id)arg1;
- (id)commentApi;
- (BOOL)isInMseqRoom;
- (long long)showIdentity;
- (id)localPublicAreaBadgeInfo;
- (void)setLocalPublicAreaBadgeInfo:(id)arg0;
- (void)setShowIdentity:(long long)arg0;
- (void)setCommentApi:(id)arg0;
- (id)audioPlayback;
- (void)setVoiceTranslater:(id)arg0;
- (void)checkAudioCommentAppearWithForceOption:(BOOL)arg0;
- (id)voiceTranslater;
- (void)setAudioPlayback:(id)arg0;
- (void)sendAudioCommentWithPath:(id)arg0 duration:(long long)arg1;
- (BOOL)didEnterRoomExecuted;
- (void)checkAudioCommentDisableWithForceOption:(BOOL)arg0;
- (void)fetchAudioChatConfigIfNeeded;
- (void)setDisableVoiceInput:(BOOL)arg0;
- (id)createFakeAudioChatMessageWithPath:(id)arg0 duration:(long long)arg1 rtfContent:(id)arg2 content:(id)arg3;
- (void)sendVoiceMessage:(id)arg0 isResend:(BOOL)arg1;
- (void)sendAnchorSpeechCommentMessage:(id)arg0;
- (void)setForceHide:(BOOL)arg0;
- (void)checkAudioChatAuth;
- (void)setDidEnterRoomExecuted:(BOOL)arg0;
- (void)recorderWillStart:(id)arg0;
- (void)recorder:(id)arg0 didReceivedAudioData:(struct IESLiveAudioQueueInputData { void *x0; struct OpaqueAudioQueue *x1; struct AudioQueueBuffer *x2; struct AudioTimeStamp *x3; unsigned int x4; struct AudioStreamPacketDescription *x5; } *)arg1;
- (void)recorderDidStop:(id)arg0;
- (void)recorderWithError:(id)arg0;
- (BOOL)canAudioComment;
- (void).cxx_destruct;
- (id)recorder;
- (void)setup;
- (void)setRecorder:(id)arg0;
- (void)addObserver;
- (void)messageReceived:(id)arg0;

@end
