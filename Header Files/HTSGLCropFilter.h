//
//     Generated by private class-dump
//

@interface HTSGLCropFilter : HTSGLFilter {
    struct CGSize { double width; double height; } _originallySuppliedInputSize;
    double _rotateAngle;
    BOOL _flipX;
    BOOL _flipY;
    BOOL _passMemOpt;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _cropRegion;
}

@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } cropRegion;
@property (nonatomic) BOOL passMemOpt;

- (void)renderToTextureWithVertices:(const float *)arg0 textureCoordinates:(const float *)arg1;
- (void)setInputRotation:(unsigned long long)arg0 atIndex:(long long)arg1;
- (void)setInputSize:(struct CGSize { double x0; double x1; })arg0 atIndex:(long long)arg1;
- (void)initializeRenderer:(id)arg0;
- (void)newFrameReadyAtTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg0 atIndex:(long long)arg1 exceptionBlock:(id /* block */)arg2;
- (void)setCropRegion:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0;
- (void)setPassMemOpt:(BOOL)arg0;
- (BOOL)passMemOpt;
- (id)initWithCropRegion:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0 context:(id)arg1;
- (void)updatePipeline:(long long)arg0;
- (id)initWithContext:(id)arg0;
- (void)setFillMode:(long long)arg0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })cropRegion;

@end
