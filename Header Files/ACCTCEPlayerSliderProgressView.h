//
//     Generated by private class-dump
//

@class ACCCameraSubscription, ACCTCEFakeProgressSliderView, UIPanGestureRecognizer, ACCTCEPlayerProgressSlider;

@interface ACCTCEPlayerSliderProgressView : UIView {
    BOOL _isSliding;
    BOOL _isHandleGesture;
    ACCTCEPlayerProgressSlider *_progressSlider;
    ACCTCEFakeProgressSliderView *_fakeProgressSlider;
    UIPanGestureRecognizer *_panGestureRecognizer;
    ACCCameraSubscription *_subscription;
    struct CGPoint { double x; double y; } _lastLocation;
}

@property (retain, nonatomic) ACCTCEPlayerProgressSlider *progressSlider;
@property (retain, nonatomic) ACCTCEFakeProgressSliderView *fakeProgressSlider;
@property (nonatomic) BOOL isSliding;
@property (retain, nonatomic) UIPanGestureRecognizer *panGestureRecognizer;
@property (nonatomic) BOOL isHandleGesture;
@property (nonatomic) struct CGPoint { double x; double y; } lastLocation;
@property (retain, nonatomic) ACCCameraSubscription *subscription;

- (void)progressSliderTouchBegan:(id)arg0;
- (void)progressSliderValueChanged:(id)arg0;
- (BOOL)isSliding;
- (void)setIsSliding:(BOOL)arg0;
- (void)updateProgressSliderToNormal;
- (void)progressSliderPanGesture:(id)arg0;
- (id)fakeProgressSlider;
- (void)setFakeProgressSlider:(id)arg0;
- (void)updateProgressSliderToWakeUp;
- (void)setIsHandleGesture:(BOOL)arg0;
- (BOOL)isHandleGesture;
- (void)addFakeProgressSliderIfNeeds;
- (id)strongDefaultThumbImage;
- (id)defaultThumbImage;
- (void)progressSliderTouchEnded:(id)arg0 bySlideScreen:(BOOL)arg1;
- (void)showFakeSliderIfNeeded;
- (void)restoreToNormalWhenTouchEnd;
- (void)progressSliderTouchEnded;
- (void)setPlayTime:(double)arg0 animated:(BOOL)arg1;
- (void)setMinTime:(double)arg0 maxTime:(double)arg1;
- (id)progressAlpha;
- (void)setPanGestureRecognizer:(id)arg0;
- (id)panGestureRecognizer;
- (void).cxx_destruct;
- (struct CGPoint { double x0; double x1; })lastLocation;
- (void)setLastLocation:(struct CGPoint { double x0; double x1; })arg0;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0;
- (void)setSubscription:(id)arg0;
- (void)reset;
- (void)addSubscriber:(id)arg0;
- (id)subscription;
- (void)removeSubscriber:(id)arg0;
- (void)setupUI;
- (id)progressSlider;
- (void)setProgressSlider:(id)arg0;

@end
