//
//     Generated by private class-dump
//

@class NSString, NSArray, HTSVideoData, HTSMixPlayerConfig, NSMutableDictionary, VELimitLogger, AVMutableAudioMix, NSObject, AVMutableComposition, HTSMediaExporter;
@protocol HTSMediaMixPlayerDelegate, OS_dispatch_semaphore;

@interface HTSMediaMixPlayer : AVPlayer <HTSMediaExportable> {
    BOOL _autoRepeat;
    BOOL _disableAutoResume;
    BOOL _isPlaying;
    BOOL _useNewModule;
    BOOL _isResetIteming;
    BOOL _usedForAVPlayLayer;
    float _previousRate;
    HTSMediaExporter *mediaExporter;
    HTSVideoData *_videoData;
    AVMutableComposition *_mixComposition;
    id<HTSMediaMixPlayerDelegate> _delegate;
    id /* block */ _playerCompleteBlock;
    id /* block */ _playerAutoRepeatBlock;
    id /* block */ _playerTimerBlock;
    AVMutableAudioMix *_audioMix;
    NSMutableDictionary *_playerTimeObserverDict;
    NSObject<OS_dispatch_semaphore> *_reload_sync_sem;
    id /* block */ _reloadCompleteBlock;
    HTSMixPlayerConfig *_playerConfig;
    VELimitLogger *_limitLogger;
    struct { long long value; int timescale; unsigned int flags; long long epoch; } _lastPlayTime;
    struct { long long value; int timescale; unsigned int flags; long long epoch; } _seekingTime;
}

@property (retain, nonatomic) AVMutableAudioMix *audioMix;
@property (nonatomic) float previousRate;
@property (nonatomic) BOOL isPlaying;
@property (retain, nonatomic) NSMutableDictionary *playerTimeObserverDict;
@property (nonatomic) BOOL useNewModule;
@property (nonatomic) BOOL isResetIteming;
@property (nonatomic) BOOL usedForAVPlayLayer;
@property (nonatomic) struct { long long value; int timescale; unsigned int flags; long long epoch; } seekingTime;
@property (retain, nonatomic) NSObject<OS_dispatch_semaphore> *reload_sync_sem;
@property (copy, nonatomic) id /* block */ reloadCompleteBlock;
@property (retain, nonatomic) HTSMixPlayerConfig *playerConfig;
@property (retain, nonatomic) VELimitLogger *limitLogger;
@property (nonatomic) BOOL autoRepeat;
@property (nonatomic) BOOL disableAutoResume;
@property (weak, nonatomic) HTSVideoData *videoData;
@property (readonly, nonatomic) NSArray *assets;
@property (retain, nonatomic) AVMutableComposition *mixComposition;
@property (weak, nonatomic) id<HTSMediaMixPlayerDelegate> delegate;
@property (nonatomic) struct { long long value; int timescale; unsigned int flags; long long epoch; } lastPlayTime;
@property (copy, nonatomic) id /* block */ playerCompleteBlock;
@property (copy, nonatomic) id /* block */ playerAutoRepeatBlock;
@property (copy, nonatomic) id /* block */ playerTimerBlock;
@property (retain, nonatomic) HTSMediaExporter *mediaExporter;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (id)createItemWith:(id)arg0 playerConfig:(id)arg1;
+ (id)audioPlayerWithVideoData:(id)arg0;
+ (id)mixPlayerWithVideoData:(id)arg0 withConfig:(id)arg1;

- (id)videoData;
- (struct { long long x0; int x1; unsigned int x2; long long x3; })lastPlayTime;
- (void)setLastPlayTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg0;
- (void)setVideoData:(id)arg0;
- (id)playerConfig;
- (void)setPlayerConfig:(id)arg0;
- (void)routeChanged:(id)arg0;
- (void)setVideoHeader:(id)arg0;
- (void)addVideoWithAsset:(id)arg0;
- (id)mediaExporter;
- (void)setMediaExporter:(id)arg0;
- (BOOL)exportAudio:(id /* block */)arg0;
- (void)setMixComposition:(id)arg0;
- (void)setLimitLogger:(id)arg0;
- (id)playerTimeObserverDict;
- (id)mixComposition;
- (void)replaceAudioAtIndex:(unsigned long long)arg0 withAudioAsset:(id)arg1;
- (float)previousRate;
- (BOOL)disableAutoResume;
- (void)setSeekingTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg0;
- (struct { long long x0; int x1; unsigned int x2; long long x3; })seekingTime;
- (void)setReloadCompleteBlock:(id /* block */)arg0;
- (void)resetSyncItem;
- (void)setPlayerTimerBlock:(id /* block */)arg0;
- (id /* block */)playerTimerBlock;
- (BOOL)isResetIteming;
- (void)didResetItem;
- (void)setIsResetIteming:(BOOL)arg0;
- (void)resetItemOuttimeCheck;
- (id /* block */)reloadCompleteBlock;
- (id)reload_sync_sem;
- (id /* block */)playerAutoRepeatBlock;
- (id /* block */)playerCompleteBlock;
- (void)setPreviousRate:(float)arg0;
- (id)limitLogger;
- (id)addVideoWithUrl:(id)arg0;
- (id)addAudioWithUrl:(id)arg0;
- (id)replaceAudioAtIndex:(unsigned long long)arg0 withAudioUrl:(id)arg1;
- (void)removeAudioAtIndex:(unsigned long long)arg0;
- (void)setTimeClipRange:(id)arg0 toVideoAtIndex:(unsigned long long)arg1;
- (void)setTimeClipRange:(id)arg0 toAudioAtIndex:(unsigned long long)arg1;
- (void)reloadSyncData;
- (double)currentTimeForAsset:(id)arg0;
- (void)addPeriodicTimeObserverForAsset:(id)arg0 actionBlock:(id /* block */)arg1;
- (void)removeTimeObserverForAsset:(id)arg0;
- (void)setDisableAutoResume:(BOOL)arg0;
- (void)setPlayerCompleteBlock:(id /* block */)arg0;
- (void)setPlayerAutoRepeatBlock:(id /* block */)arg0;
- (void)setPlayerTimeObserverDict:(id)arg0;
- (void)setReload_sync_sem:(id)arg0;
- (BOOL)useNewModule;
- (void)setUseNewModule:(BOOL)arg0;
- (BOOL)usedForAVPlayLayer;
- (void)setUsedForAVPlayLayer:(BOOL)arg0;
- (void)addAudioWithAsset:(id)arg0;
- (void)setVolumeForVideo:(float)arg0;
- (void)setVolumeForSubTrackVideo:(float)arg0;
- (void)setVolumeForAudio:(float)arg0;
- (void)setVolume:(float)arg0 forVideoAtIndex:(unsigned long long)arg1;
- (void)setVolume:(float)arg0 forAudioAtIndex:(unsigned long long)arg1;
- (BOOL)autoRepeat;
- (void)playItemStatusChange:(id)arg0 object:(id)arg1;
- (void)setAutoRepeat:(BOOL)arg0;
- (id)init;
- (void).cxx_destruct;
- (void)setAudioMix:(id)arg0;
- (void)stop;
- (void)reloadData;
- (void)setRate:(float)arg0;
- (id)delegate;
- (void)updateItem:(id)arg0;
- (BOOL)isPlaying;
- (id)assets;
- (void)setDelegate:(id)arg0;
- (void)dealloc;
- (void)pause;
- (void)setIsPlaying:(BOOL)arg0;
- (void)observeValueForKeyPath:(id)arg0 ofObject:(id)arg1 change:(id)arg2 context:(void *)arg3;
- (id)audioMix;
- (void)replay;
- (void)seekToTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg0 toleranceBefore:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg1 toleranceAfter:(struct { long long x0; int x1; unsigned int x2; long long x3; })arg2 completionHandler:(id /* block */)arg3;
- (void)reloadData:(id /* block */)arg0;
- (void)resetItem;

@end
