//
//     Generated by private class-dump
//

@class NSArray, IESLiveInteractConfigLayoutModel, NSString, IESLiveInteractionLayout;
@protocol IESLiveInteractionConfigLayoutCanvasAdjustable, IESLiveInteractConfigLayoutPreviewInputProtocol;

@interface IESLiveInteractConfigLayoutCalculatorInput : NSObject <IESLiveInteractConfigLayoutCalculatorInputProtocol> {
    BOOL _contentForceFillToHeight;
    id<IESLiveInteractConfigLayoutPreviewInputProtocol> _previewInput;
    double topOffset;
    double uiContainerBottomOffset;
    id<IESLiveInteractionConfigLayoutCanvasAdjustable> canvasAdapter;
    IESLiveInteractConfigLayoutModel *_innerModel;
    IESLiveInteractionLayout *_layout;
    NSArray *_preferrdGuestFrames;
    double _topMarginAddtion;
    double _bottomMarginAddtion;
    double _previewBottomAddtion;
    struct CGSize { double width; double height; } _mediaSize;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _preferredContainerFrame;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _preferredGuestListContainerFrame;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _preferredGuestListFrame;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _containerFrame;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _virtualContainerFrame;
}

@property (retain, nonatomic) IESLiveInteractConfigLayoutModel *innerModel;
@property (retain, nonatomic) IESLiveInteractionLayout *layout;
@property (copy, nonatomic) NSArray *preferrdGuestFrames;
@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } preferredGuestListFrame;
@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } containerFrame;
@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } virtualContainerFrame;
@property (nonatomic) struct CGSize { double width; double height; } mediaSize;
@property (nonatomic) double topMarginAddtion;
@property (nonatomic) double bottomMarginAddtion;
@property (nonatomic) BOOL contentForceFillToHeight;
@property (nonatomic) double previewBottomAddtion;
@property (readonly, nonatomic) IESLiveInteractConfigLayoutModel *model;
@property (readonly, nonatomic) BOOL calculateAnchorFrame;
@property (readonly, nonatomic) BOOL useHostStreamLayout;
@property (readonly, nonatomic) BOOL useCustomGuestList;
@property (readonly, nonatomic) BOOL needAddAnchorSlotWhichEqualToPlayer;
@property (retain, nonatomic) id<IESLiveInteractConfigLayoutPreviewInputProtocol> previewInput;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } preferredContainerFrame;
@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } preferredGuestListContainerFrame;
@property (nonatomic) double topOffset;
@property (nonatomic) double uiContainerBottomOffset;
@property (retain, nonatomic) id<IESLiveInteractionConfigLayoutCanvasAdjustable> canvasAdapter;

- (BOOL)isCurrentDevicePortrait;
- (BOOL)useHostStreamLayout;
- (double)topMarginAddtion;
- (double)bottomMarginAddtion;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })virtualContainerFrame;
- (BOOL)needAddAnchorSlotWhichEqualToPlayer;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })preferredGuestListFrame;
- (BOOL)useCustomGuestList;
- (id)preferrdGuestFrames;
- (BOOL)calculateAnchorFrame;
- (BOOL)contentForceFillToHeight;
- (void)setContentForceFillToHeight:(BOOL)arg0;
- (void)setPreviewBottomAddtion:(double)arg0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })preferredContainerFrame;
- (id)previewInput;
- (BOOL)p_needUseVirtualContainerFrame;
- (BOOL)isNonOverlapping1v6Layout;
- (double)nonOverlapping1v6TopMargin;
- (double)previewBottomAddtion;
- (double)nonOverlapping1v6BottomMargin;
- (double)nonOverlapping1v6StandardMargin;
- (void)p_updateInnerModelWithPreviewInput:(id)arg0;
- (void)calculatePreferredGuestListFrameForDynamicLayout1V6Horizontal;
- (void)p_processInnerModelForiPad;
- (void)updateScaleModeForAnchorIfNeeded;
- (void)calculateUIContainerAdapter;
- (void)calculateCanvasAdapter;
- (void)calculateCrossRoomStreamInsetsFor6v6;
- (void)calculateFloatDynamicGuestListForAnchor;
- (void)calculateLandScapeDeviceAndSteam;
- (void)setPreferredGuestListFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0;
- (BOOL)isFloatDynamicAnchor;
- (void)calculateFloatDynamicGuestListFrameForSingleViewAnchor;
- (void)p_calculateFloatDynamicGuestFrames;
- (void)setPreferrdGuestFrames:(id)arg0;
- (double)uiContainerBottomOffset;
- (id)canvasAdapter;
- (void)setPreviewInput:(id)arg0;
- (void)setPreferredContainerFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })preferredGuestListContainerFrame;
- (void)setPreferredGuestListContainerFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0;
- (void)setUiContainerBottomOffset:(double)arg0;
- (void)setCanvasAdapter:(id)arg0;
- (id)initWithLayoutModel:(id)arg0 layout:(id)arg1 diContext:(id)arg2;
- (void)setVirtualContainerFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0;
- (void)setTopMarginAddtion:(double)arg0;
- (void)setBottomMarginAddtion:(double)arg0;
- (double)topOffset;
- (void)setTopOffset:(double)arg0;
- (void)setLayout:(id)arg0;
- (void).cxx_destruct;
- (id)model;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })containerFrame;
- (BOOL)isAnchor;
- (BOOL)isValid;
- (BOOL)isPreview;
- (BOOL)isLandscape;
- (id)layout;
- (id)innerModel;
- (void)setInnerModel:(id)arg0;
- (void)setContainerFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0;
- (struct CGSize { double x0; double x1; })mediaSize;
- (void)setMediaSize:(struct CGSize { double x0; double x1; })arg0;
- (int)uiLayout;
- (void)calculate;

@end
