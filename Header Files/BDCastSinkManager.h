//
//     Generated by private class-dump
//

@class TTReachability, BDLinkSinkPlayer, NSString, NSMutableDictionary, BDCastThreadSafeMutableArray, NSObject, BDByteSinkNetService;
@protocol BDCastMediaRenderProtocol, OS_dispatch_queue, BDCastSinkManagerDelegate;

@interface BDCastSinkManager : NSObject <BDLinkSinkPlayerDelegate, BDByteSinkNetServiceDelegate, NSObject> {
    BOOL _bdlinkServerRunInBackground;
    BOOL _onVideoFrame;
    BOOL _autoSwitchMirrorSources;
    BOOL _userStartRtcMirror;
    BOOL _enableLog;
    id<BDCastSinkManagerDelegate> _delegate;
    long long _authorizedSdkType;
    NSString *_privateChannel;
    unsigned long long _bytelinkDelegateVideoFormat;
    unsigned long long _bytelinkDelegateAudioFormat;
    long long _preemptMode;
    long long _maxConnectCount;
    unsigned long long _backgroundTaskIdentifier;
    BDByteSinkNetService *_servicePublisher;
    BDLinkSinkPlayer *_bdlinkSinkPlayer;
    TTReachability *_reachability;
    NSString *_txtRecordVer;
    NSMutableDictionary *_localMediaRenderDic;
    NSMutableDictionary *_remoteMediaRenderDic;
    id<BDCastMediaRenderProtocol> _generalMediaRender;
    NSObject<OS_dispatch_queue> *_renderDicLock;
    NSString *_rtcAppID;
    NSString *_rtcRoomID;
    NSString *_rtcUserID;
    unsigned long long _mirrorSource;
    long long _logLevel;
    BDCastThreadSafeMutableArray *_connectedArray;
}

@property (nonatomic) BOOL enableAutoSwitchMirrorSources;
@property (readonly, nonatomic) id<BDCastMediaRenderProtocol> getGeneralMediaRender;
@property (nonatomic) unsigned long long backgroundTaskIdentifier;
@property (retain, nonatomic) BDByteSinkNetService *servicePublisher;
@property (retain, nonatomic) BDLinkSinkPlayer *bdlinkSinkPlayer;
@property (retain, nonatomic) TTReachability *reachability;
@property (nonatomic) BOOL onVideoFrame;
@property (nonatomic) long long authorizedSdkType;
@property (copy, nonatomic) NSString *txtRecordVer;
@property (retain, nonatomic) NSMutableDictionary *localMediaRenderDic;
@property (retain, nonatomic) NSMutableDictionary *remoteMediaRenderDic;
@property (retain, nonatomic) id<BDCastMediaRenderProtocol> generalMediaRender;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *renderDicLock;
@property (nonatomic) BOOL autoSwitchMirrorSources;
@property (copy, nonatomic) NSString *rtcAppID;
@property (copy, nonatomic) NSString *rtcRoomID;
@property (copy, nonatomic) NSString *rtcUserID;
@property (nonatomic) unsigned long long mirrorSource;
@property (nonatomic) BOOL userStartRtcMirror;
@property (nonatomic) BOOL enableLog;
@property (nonatomic) long long logLevel;
@property (retain, nonatomic) BDCastThreadSafeMutableArray *connectedArray;
@property (readonly, nonatomic) NSString *ipAddress;
@property (retain, nonatomic) NSString *displayName;
@property (weak, nonatomic) id<BDCastSinkManagerDelegate> delegate;
@property (nonatomic) BOOL bdlinkServerRunInBackground;
@property (copy, nonatomic) NSString *privateChannel;
@property (nonatomic) unsigned long long bytelinkDelegateVideoFormat;
@property (nonatomic) unsigned long long bytelinkDelegateAudioFormat;
@property (nonatomic) long long preemptMode;
@property (nonatomic) long long maxConnectCount;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (BOOL)initializeWithConfiguration:(id)arg0;
+ (void)enableConsoleLog:(BOOL)arg0;
+ (id)remoteTokenWith:(id)arg0 appKey:(id)arg1 roomID:(id)arg2 userID:(id)arg3 expiredTime:(int)arg4;
+ (void)initializeWithDisplayName:(id)arg0;
+ (id)sharedManagerWithDisplayName:(id)arg0 delegate:(id)arg1;
+ (id)sharedInstance;
+ (void)destroy;
+ (id)sdkVersion;

- (BOOL)enableLog;
- (void)setEnableLog:(BOOL)arg0;
- (void)setPrivateChannel:(id)arg0;
- (long long)sdkType;
- (void)setEnableLog:(BOOL)arg0 level:(long long)arg1;
- (void)enableBackgroundKeepAlive;
- (void)setString:(id)arg0 forDLNAKey:(long long)arg1;
- (void)startWithSdkType:(long long)arg0;
- (id)rtcAppID;
- (void)setRtcAppID:(id)arg0;
- (id)rtcRoomID;
- (id)rtcUserID;
- (void)setRtcUserID:(id)arg0;
- (void)setRtcRoomID:(id)arg0;
- (id)bdlinkPlayer:(id)arg0 browseDataWithServiceInfo:(id)arg1;
- (BOOL)bdlinkPlayer:(id)arg0 onPlay:(id)arg1 serviceInfo:(id)arg2;
- (BOOL)bdlinkPlayer:(id)arg0 onPauseWithServiceInfo:(id)arg1;
- (BOOL)bdlinkPlayer:(id)arg0 onResume:(id)arg1 serviceInfo:(id)arg2;
- (BOOL)bdlinkPlayer:(id)arg0 onStopWithServiceInfo:(id)arg1;
- (BOOL)bdlinkPlayer:(id)arg0 onSeek:(id)arg1 serviceInfo:(id)arg2;
- (BOOL)bdlinkPlayer:(id)arg0 onSetVolume:(id)arg1 serviceInfo:(id)arg2;
- (unsigned int)bdlinkPlayer:(id)arg0 getVolumeWithServiceInfo:(id)arg1;
- (BOOL)bdlinkPlayer:(id)arg0 onAddVolumeWithServiceInfo:(id)arg1;
- (BOOL)bdlinkPlayer:(id)arg0 onSubVolumeWithServiceInfo:(id)arg1;
- (BOOL)bdlinkPlayer:(id)arg0 onSpeed:(double)arg1 serviceInfo:(id)arg2;
- (id)bdlinkPlayer:(id)arg0 getPlayStateWithServiceInfo:(id)arg1;
- (id)bdlinkPlayer:(id)arg0 onRcvMessage:(id)arg1 serviceInfo:(id)arg2;
- (void)bdlinkPlayer:(id)arg0 didStartService:(id)arg1;
- (void)bdlinkPlayer:(id)arg0 didStopService:(id)arg1;
- (id)renderDicLock;
- (id)localMediaRenderDic;
- (id)remoteMediaRenderDic;
- (id)generalMediaRender;
- (BOOL)autoSwitchMirrorSources;
- (void)setAutoSwitchMirrorSources:(BOOL)arg0;
- (void)setGeneralMediaRender:(id)arg0;
- (BOOL)userStartRtcMirror;
- (BOOL)enableAutoSwitchMirrorSources;
- (BOOL)hasBytelinkConnection;
- (id)connectedArray;
- (long long)preemptMode;
- (long long)maxConnectCount;
- (void)disconnectByteLinkWithIp:(id)arg0;
- (void)setRender:(id)arg0 forKey:(id)arg1 renderType:(unsigned long long)arg2;
- (id)localMediaRenderObjectForKey:(id)arg0;
- (id)remoteMediaRenderObjectForKey:(id)arg0;
- (id)getGeneralMediaRender;
- (void)setEnableAutoSwitchMirrorSources:(BOOL)arg0;
- (void)setRemoteMirrorRoomID:(id)arg0 userID:(id)arg1;
- (void)startLocalMirrorService;
- (BOOL)startRemoteMirrorServiceWithToken:(id)arg0 error:(id *)arg1;
- (void)removeAllMediaRender;
- (void)stopRTCPlayer;
- (void)restartRtcPlayerIfNeeded;
- (id)handlePreemptWithConnectedIp:(id)arg0;
- (void)stopDLNAPlayer;
- (void)stopByteLinkPlayer;
- (void)setAuthorizedSdkType:(long long)arg0;
- (long long)authorizedSdkType;
- (void)startWithSdkType:(long long)arg0 needPublish:(BOOL)arg1;
- (BOOL)startBDLinkPlayer;
- (void)trackServiceWithServiceName:(id)arg0 sdkType:(long long)arg1;
- (id)bdlinkSinkPlayer;
- (id)servicePublisher;
- (id)txtRecordVer;
- (id)getBDLinkServieString;
- (BOOL)bdlinkServerRunInBackground;
- (void)setUserStartRtcMirror:(BOOL)arg0;
- (void)setMirrorSource:(unsigned long long)arg0;
- (void)stopBDLinkPlayer;
- (void)trackServiceWithServiceName:(id)arg0 andCategory:(id)arg1;
- (void)byte_cast_sink_receiveDidEnterBackgroundNotification:(id)arg0;
- (void)byte_cast_sink_receiveWillEnterForegroundNotification:(id)arg0;
- (void)netServiceDidNotPublish:(id)arg0;
- (void)startDLNAPlayer;
- (void)resetDLNATemplate;
- (BOOL)startByteLinkPlayer;
- (void)decodeInputWithId:(id)arg0 frameCount:(unsigned long long)arg1;
- (void)decodeOutputWithId:(id)arg0 frameCount:(unsigned long long)arg1;
- (void)renderFrameWithId:(id)arg0 frameCount:(unsigned long long)arg1;
- (void)sendMessage:(id)arg0 serviceInfo:(id)arg1 sdkType:(long long)arg2 callback:(id /* block */)arg3;
- (void)setBdlinkServerRunInBackground:(BOOL)arg0;
- (id)privateChannel;
- (unsigned long long)bytelinkDelegateVideoFormat;
- (void)setBytelinkDelegateVideoFormat:(unsigned long long)arg0;
- (unsigned long long)bytelinkDelegateAudioFormat;
- (void)setBytelinkDelegateAudioFormat:(unsigned long long)arg0;
- (void)setPreemptMode:(long long)arg0;
- (void)setMaxConnectCount:(long long)arg0;
- (void)setServicePublisher:(id)arg0;
- (void)setBdlinkSinkPlayer:(id)arg0;
- (BOOL)onVideoFrame;
- (void)setOnVideoFrame:(BOOL)arg0;
- (void)setTxtRecordVer:(id)arg0;
- (void)setLocalMediaRenderDic:(id)arg0;
- (void)setRemoteMediaRenderDic:(id)arg0;
- (void)setRenderDicLock:(id)arg0;
- (unsigned long long)mirrorSource;
- (void)setConnectedArray:(id)arg0;
- (void)setLogLevel:(long long)arg0;
- (id)init;
- (id)reachability;
- (void).cxx_destruct;
- (void)setReachability:(id)arg0;
- (void)stop;
- (void)setDisplayName:(id)arg0;
- (id)displayName;
- (id)delegate;
- (void)reachabilityChanged:(id)arg0;
- (void)start;
- (void)setDelegate:(id)arg0;
- (void)dealloc;
- (long long)logLevel;
- (void)netServiceDidPublish:(id)arg0;
- (unsigned long long)backgroundTaskIdentifier;
- (id)ipAddress;
- (void)setBackgroundTaskIdentifier:(unsigned long long)arg0;
- (void)stopKeepAlive;

@end
