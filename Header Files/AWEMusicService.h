//
//     Generated by private class-dump
//

@class NSTimer, AWEMusicPlayDuration, AWEMusicPlayerModel, AWEMusicPlayerQueue, RxMultipleDelegate, NSMutableDictionary, NSString, AWEAudioEngine, NSMutableArray, NSDictionary, AWEMusicExtraInfoManager;
@protocol AWEMusicServiceDelegate;

@interface AWEMusicService : HTSService <AWEAudioEngineDelegate, AWEMusicPlayerQueueDelegate, AWEAudioFocusProtocol, AWENowPlayingInfoPlayerProtocol, MusicService> {
    BOOL _resumePlayWhenInterruptionEnd;
    BOOL canBackgroundPlay;
    BOOL _isPlayingInterrupted;
    BOOL _didEnterBackground;
    BOOL _isPendingPlay;
    BOOL _isPlayingInner;
    BOOL _isSeeking;
    BOOL _isFirstPlay;
    long long scaleMode;
    long long _preloadMusicCount;
    NSDictionary *bizFlags;
    NSDictionary *trackParams;
    NSMutableDictionary *_nowPlayingInfo;
    id _playCommandTarget;
    id _pauseCommandTarget;
    id _previousCommandTarget;
    id _nextCommandTarget;
    id _seekCommandTarget;
    RxMultipleDelegate<AWEMusicServiceDelegate> *_multipleDelegate;
    AWEAudioEngine *_player;
    NSTimer *_timer;
    AWEMusicPlayerQueue *_currentQueue;
    long long _playStatus;
    double _seekToPlayTime;
    id /* block */ _workItem;
    AWEMusicPlayerModel *_playingModel;
    AWEMusicPlayerModel *_willPlayingModel;
    AWEMusicExtraInfoManager *_extraInfoManager;
    double _innerSeekToTime;
    NSMutableArray *_attachKeyArray;
    AWEMusicPlayDuration *_playDuration;
}

@property (retain, nonatomic) RxMultipleDelegate<AWEMusicServiceDelegate> *multipleDelegate;
@property (retain, nonatomic) AWEAudioEngine *player;
@property (retain, nonatomic) NSTimer *timer;
@property (retain, nonatomic) AWEMusicPlayerQueue *currentQueue;
@property (nonatomic) long long playStatus;
@property (nonatomic) double seekToPlayTime;
@property (nonatomic) BOOL isPlayingInterrupted;
@property (copy, nonatomic) id /* block */ workItem;
@property (retain, nonatomic) AWEMusicPlayerModel *playingModel;
@property (retain, nonatomic) AWEMusicPlayerModel *willPlayingModel;
@property (nonatomic) BOOL didEnterBackground;
@property (retain, nonatomic) AWEMusicExtraInfoManager *extraInfoManager;
@property (nonatomic) BOOL isPendingPlay;
@property (nonatomic) BOOL isPlayingInner;
@property (nonatomic) BOOL isSeeking;
@property (nonatomic) double innerSeekToTime;
@property (nonatomic) BOOL isFirstPlay;
@property (retain, nonatomic) NSMutableArray *attachKeyArray;
@property (retain, nonatomic) AWEMusicPlayDuration *playDuration;
@property (retain, nonatomic) NSMutableDictionary *nowPlayingInfo;
@property (retain, nonatomic) id playCommandTarget;
@property (retain, nonatomic) id pauseCommandTarget;
@property (retain, nonatomic) id previousCommandTarget;
@property (retain, nonatomic) id nextCommandTarget;
@property (retain, nonatomic) id seekCommandTarget;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) long long scaleMode;
@property (nonatomic) BOOL resumePlayWhenInterruptionEnd;
@property (nonatomic) BOOL fadeInOutEnable;
@property (nonatomic) long long preloadMusicCount;
@property (nonatomic) BOOL canBackgroundPlay;
@property (retain, nonatomic) NSDictionary *bizFlags;
@property (retain, nonatomic) NSDictionary *trackParams;

+ (id)service;

- (void)playForRemoteControl;
- (void)pauseForRemoteControl;
- (void)seekToTimeForRemoteControl:(double)arg0;
- (void)playPrevForRemoteControl;
- (void)playNextForRemoteControl;
- (BOOL)canPlayForRemoteControl;
- (BOOL)canPauseForRemoteControl;
- (BOOL)canPlayPrevForRemoteControl;
- (BOOL)canPlayNextForRemoteControl;
- (BOOL)canSeekForRemoteControl;
- (long long)playBitrate;
- (id)trackParams;
- (void)setCanBackgroundPlay:(BOOL)arg0;
- (void)setTrackParams:(id)arg0;
- (id)playingModel;
- (void)setMusicModels:(id)arg0 current:(id)arg1 queueId:(id)arg2;
- (void)appendMusicModels:(id)arg0;
- (id)currentPlayModel;
- (BOOL)resumePlayWhenInterruptionEnd;
- (void)setResumePlayWhenInterruptionEnd:(BOOL)arg0;
- (BOOL)fadeInOutEnable;
- (void)setFadeInOutEnable:(BOOL)arg0;
- (long long)preloadMusicCount;
- (void)setPreloadMusicCount:(long long)arg0;
- (BOOL)canBackgroundPlay;
- (id)bizFlags;
- (void)setBizFlags:(id)arg0;
- (BOOL)isPlayingInner;
- (id)willPlayingModel;
- (void)pauseWithType:(long long)arg0;
- (void)stopWithType:(long long)arg0;
- (void)seekToTime:(double)arg0 completion:(id /* block */)arg1 renderComplete:(id /* block */)arg2;
- (BOOL)isLoadStatePlayable;
- (double)actualDuration;
- (double)actualPlaybackTime;
- (long long)playStatus;
- (void)setQueue:(id)arg0 method:(long long)arg1;
- (void)feedQueue:(id)arg0;
- (BOOL)updateCurrentModel:(id)arg0;
- (BOOL)updateCurrentModel:(id)arg0 method:(long long)arg1;
- (BOOL)updateCurrentModelWithoutPlay:(id)arg0;
- (BOOL)updateCurrentModelWithoutPlay:(id)arg0 method:(long long)arg1;
- (void)resetRemotePlayInfo;
- (void)setMusicModels:(id)arg0 current:(id)arg1 queueId:(id)arg2 method:(long long)arg3;
- (void)playFinishToNext;
- (void)goPrevWithNotification;
- (void)goNextWithNotification;
- (BOOL)canGoPrev;
- (BOOL)canGoNext;
- (long long)getCacheSizeByModel:(id)arg0;
- (void)attachObject:(id)arg0 forKey:(id)arg1;
- (id)getAttachedObjectForKey:(id)arg0;
- (void)updateTrackParams:(id)arg0;
- (void)manualAuidoOver;
- (void)removeRemoteControlCommand;
- (void)setPlayStatus:(long long)arg0;
- (void)setPlayDuration:(id)arg0;
- (void)setIsSeeking:(BOOL)arg0;
- (void)audioEnginePlaybackTimeChanged:(id)arg0;
- (void)audioEngine:(id)arg0 didFinishedWithError:(id)arg1;
- (void)audioEngineUserStopped:(id)arg0;
- (void)audioEngine:(id)arg0 didChangeStallState:(long long)arg1 actionType:(long long)arg2 reason:(unsigned long long)arg3;
- (void)audioEngine:(id)arg0 playbackStateChanged:(long long)arg1;
- (void)audioEngineReadyToPlay:(id)arg0;
- (void)audioEnginePrepared:(id)arg0;
- (void)audioEngineReadyToDisPlay:(id)arg0;
- (id)audioEngineApiForFetcher:(id)arg0;
- (BOOL)audioIsPlaying;
- (void)audioPause;
- (void)audioRemoveRemoteControlCommand;
- (void)receiveNotes:(id)arg0;
- (void)onAudioPlay:(id)arg0;
- (void)onAudioOver:(id)arg0 duration:(double)arg1;
- (id)multipleDelegate;
- (void)queueDidUpdatePlayList:(id)arg0;
- (void)queue:(id)arg0 didChangeLoopModeFromLoopMode:(unsigned long long)arg1;
- (void)goPrev;
- (void)goNext;
- (void)setMultipleDelegate:(id)arg0;
- (void)setIsFirstPlay:(BOOL)arg0;
- (void)setExtraInfoManager:(id)arg0;
- (id)extraInfoManager;
- (void)resignPlayingPlayer;
- (BOOL)goNextIsManual:(BOOL)arg0 isFinished:(BOOL)arg1 animation:(BOOL)arg2;
- (double)innerSeekToTime;
- (void)playIsFirst:(BOOL)arg0;
- (void)setIsPlayingInner:(BOOL)arg0;
- (void)setIsPendingPlay:(BOOL)arg0;
- (void)p_setAudioSessionActive;
- (void)becomePlayingPlayer;
- (void)realPlay:(BOOL)arg0;
- (void)p_preparePlayerModel:(id)arg0 completion:(id /* block */)arg1;
- (void)mCheck:(id)arg0;
- (void)setCurrentQueue:(id)arg0;
- (id)attachKeyArray;
- (void)setAuthentication:(id)arg0;
- (void)resetNowPlayingInfo;
- (void)setInnerSeekToTime:(double)arg0;
- (void)updateNowPlayingInfoPlayback;
- (void)setSeekToPlayTime:(double)arg0;
- (BOOL)p_updateCurrentModel:(id)arg0;
- (void)playCurrent;
- (BOOL)p_updateCurrentModelWithoutPlay:(id)arg0;
- (void)setCurrentToPlay;
- (void)p_playNextIsManual:(BOOL)arg0 isFinished:(BOOL)arg1;
- (void)setCurrentToPlayReadyBlock:(id /* block */)arg0;
- (void)setWillPlayingModel:(id)arg0;
- (void)setPlayingModel:(id)arg0;
- (void)playStatusChanged:(long long)arg0;
- (void)onTimer:(id)arg0;
- (BOOL)p_isPlayerInitialized;
- (void)setIsPlayingInterrupted:(BOOL)arg0;
- (BOOL)isPlayingInterrupted;
- (id /* block */)workItem;
- (void)setWorkItem:(id /* block */)arg0;
- (void)preloadNextMusicItems;
- (double)seekToPlayTime;
- (void)updatePreviousAndNextCommandStatus;
- (void)reloadNowPlayingInfoPlayback;
- (void)playWithNotification;
- (void)pauseWithNotification;
- (id)nextPlayQueue;
- (id)historyPlayQueue;
- (id)playCommandTarget;
- (void)setPlayCommandTarget:(id)arg0;
- (id)pauseCommandTarget;
- (void)setPauseCommandTarget:(id)arg0;
- (id)previousCommandTarget;
- (void)setPreviousCommandTarget:(id)arg0;
- (id)nextCommandTarget;
- (void)setNextCommandTarget:(id)arg0;
- (id)seekCommandTarget;
- (void)setSeekCommandTarget:(id)arg0;
- (BOOL)isPendingPlay;
- (void)setAttachKeyArray:(id)arg0;
- (id)timer;
- (id)nowPlayingInfo;
- (long long)playbackState;
- (id)init;
- (BOOL)didEnterBackground;
- (void)setStartTime:(double)arg0;
- (void).cxx_destruct;
- (void)stop;
- (id)currentQueue;
- (void)removeObjectForKey:(id)arg0;
- (void)setPlayer:(id)arg0;
- (double)duration;
- (void)setDidEnterBackground:(BOOL)arg0;
- (void)setTimer:(id)arg0;
- (void)addObserver:(id)arg0;
- (void)setNowPlayingInfo:(id)arg0;
- (BOOL)isPlaying;
- (double)playbackTime;
- (id)playerView;
- (void)clear;
- (BOOL)isSeeking;
- (id)queue;
- (void)dealloc;
- (void)play;
- (void)pause;
- (void)seekToTime:(double)arg0;
- (void)setQueue:(id)arg0;
- (void)removeObserver:(id)arg0;
- (id)player;
- (BOOL)looping;
- (void)prepareToPlay;
- (double)durationWatched;
- (double)playableDuration;
- (void)setIsLooping:(BOOL)arg0;
- (void)setupNotifications;
- (void)setScaleMode:(long long)arg0;
- (long long)scaleMode;
- (id)playDuration;
- (BOOL)isFirstPlay;
- (void)seekToTime:(double)arg0 completion:(id /* block */)arg1;

@end
