//
//     Generated by private class-dump
//

@class NSObject, AVMDLDataLoaderConfigure, NSMutableDictionary;
@protocol OS_dispatch_queue, AVMDLDataLoaderProtocol, AVMDLEngineDataCenterProtocol;

@interface AVMDLDataLoader : NSObject {
    struct AVMDLManagerInterface { void /* function */ **x0; } *_mdlManager;
    NSObject<OS_dispatch_queue> *_delegate_queue;
    id<AVMDLDataLoaderProtocol> _delegate;
    long long _preloadStrategy;
    AVMDLDataLoaderConfigure *_configure;
    NSMutableDictionary *_loaderItems;
    unsigned long long _mdlDataSourceId;
    NSMutableDictionary *_waitingCopyItem;
    id<AVMDLEngineDataCenterProtocol> _dataCenter;
}

@property (retain, nonatomic) AVMDLDataLoaderConfigure *configure;
@property (retain, nonatomic) NSMutableDictionary *loaderItems;
@property unsigned long long mdlDataSourceId;
@property (retain, nonatomic) NSMutableDictionary *waitingCopyItem;
@property (weak, nonatomic) id<AVMDLEngineDataCenterProtocol> dataCenter;
@property (weak, nonatomic) id<AVMDLDataLoaderProtocol> delegate;
@property (nonatomic) long long preloadStrategy;

+ (void)setUpFirstDNSParseType:(long long)arg0 backup:(long long)arg1;
+ (void)setUpDNSTTL:(long long)arg0;
+ (void)setUpBackupDNSParserWaitTime:(double)arg0;
+ (void)setNetClient:(id)arg0;
+ (void)setUpFirstDNSParseType:(long long)arg0;
+ (id)dnsTTHostString;
+ (id)dnsGoogleHostString;
+ (id)urlEncode:(id)arg0;
+ (id)dataLoaderWithConfigure:(id)arg0;
+ (id)makeTsFileKey:(id)arg0 Uri:(id)arg1;
+ (id)getNetworkName:(long long)arg0;
+ (void)setUpDNSEnableParallel:(long long)arg0;
+ (void)setUpDNSEnableRefresh:(long long)arg0;
+ (void)setCustomHttpDNS:(id)arg0;
+ (void)setNetClientV1:(id /* block */)arg0;
+ (void)setDnsTTHostString:(id)arg0;
+ (void)setDnsGoogleHostString:(id)arg0;
+ (void)setDnsServerHostString:(id)arg0;
+ (id)dnsServerHostString;
+ (void)setTestReachabilityHostString:(id)arg0;
+ (id)testReachabilityHostString;
+ (void)setNetUnReachableStopRetry:(BOOL)arg0;
+ (id)urlDecode:(id)arg0;
+ (id)urlEncodeByQueryComponent:(id)arg0;
+ (id)version;
+ (id)shareInstance;

- (void)handleNotify:(id)arg0;
- (void)_networkDidChangeEvent:(id)arg0;
- (void)_networkDidChangeEvent1:(id)arg0;
- (void)refreshIpReachable;
- (void)setConfigure:(id)arg0;
- (void)updateDNSInfo:(id)arg0 ipList:(id)arg1 expiredTime:(long long)arg2 dnsType:(int)arg3;
- (void)setInt64ValueByKey:(long long)arg0 StrKey:(id)arg1 Value:(long long)arg2;
- (long long)getInt64ValueByKey:(long long)arg0;
- (void)setPreloadStrategy:(long long)arg0;
- (id)getStringValue:(int)arg0;
- (void *)getMdlProtocolHandle;
- (void *)getIOManagerHandle;
- (int)onNetworkIndex:(unsigned int)arg0;
- (long long)getUrlGenerator;
- (void)setAlogWriteCallback:(void /* function */ *)arg0;
- (void)_setupAVMDL2Config;
- (void)_setupAVMDLConfiger:(void *)arg0;
- (id)proloadProxyUrlByKey:(id)arg0 rawKey:(id)arg1 preloadSize:(unsigned long long)arg2 urls:(id)arg3 filePath:(id)arg4;
- (id)preloadProxyUrlByKey:(id)arg0 rawKey:(id)arg1 preloadOffset:(unsigned long long)arg2 preloadSize:(unsigned long long)arg3 urls:(id)arg4 filePath:(id)arg5 priority:(long long)arg6 header:(id)arg7;
- (id)preloadProxyUrlByKey:(id)arg0 rawKey:(id)arg1 preloadSize:(unsigned long long)arg2 urls:(id)arg3 filePath:(id)arg4 priority:(long long)arg5 header:(id)arg6;
- (id)proxyUrlByKey:(id)arg0 rawKey:(id)arg1 limitSize:(unsigned long long)arg2 urls:(id)arg3 filePath:(id)arg4;
- (id)proxyUrlByKey:(id)arg0 rawKey:(id)arg1 limitSize:(unsigned long long)arg2 urls:(id)arg3 filePath:(id)arg4 fileType:(long long)arg5;
- (id)downloadUrl:(id)arg0 rawKey:(id)arg1 urls:(id)arg2;
- (id)generateUrlByTaskSpec:(id)arg0;
- (id)_generateUrlByTaskSpec:(id)arg0;
- (void)suspendDownloadByKey:(id)arg0;
- (void)startTaskByKey:(id)arg0;
- (void)cancelTaskByKey:(id)arg0;
- (void)cancelAllIdle;
- (long long)getClearSizeByClearAll;
- (id)getIoStatInfo;
- (void)forceClearAllCaches;
- (BOOL)switchToDefaultNetwork;
- (BOOL)switchToCellularNetwork;
- (id)getCDNLog:(id)arg0;
- (int)getDownloadCountByVid:(id)arg0;
- (id)getPreloadTraceId:(id)arg0;
- (void)resetPreloadTraceId:(id)arg0;
- (id)getPlayLog:(id)arg0;
- (int)getIoWriteError:(id)arg0;
- (void)cleanCacheDir:(id)arg0 force:(long long)arg1;
- (void)removeFileCacheByKey:(id)arg0;
- (void)forceRemoveFileCacheByKey:(id)arg0;
- (long long)getAllCacheSize;
- (long long)getCacheSizeByKey:(id)arg0;
- (long long)tryQuickGetCacheSizeByKey:(id)arg0;
- (long long)quickQueryCacheSizeByKey:(id)arg0;
- (void)cacheSizeByKey:(id)arg0 result:(id /* block */)arg1;
- (long long)getCacheSize:(id)arg0 filePath:(id)arg1;
- (void)getCacheSize:(id)arg0 filePath:(id)arg1 result:(id /* block */)arg2;
- (id)getCacheFileInfo:(id)arg0;
- (id)getCacheFileInfo:(id)arg0 filePath:(id)arg1;
- (void)setFileAutoDeleteFlag:(id)arg0 flag:(long long)arg1;
- (void)asyncCopy:(id)arg0;
- (void)_copyInternal:(id)arg0;
- (void)_copyFile:(id)arg0;
- (void)_handleCopyMsg:(int)arg0 info:(id)arg1;
- (void)clearAllDNSCache;
- (void)clearDNSAndSocketCache;
- (void)preConnectByHost:(id)arg0 port:(int)arg1;
- (BOOL)_supportPoxy:(id)arg0;
- (id)handleGetStringBykey:(id)arg0 code:(long long)arg1 type:(long long)arg2;
- (id)handleGetInt64ByKey:(long long)arg0 param:(id)arg1 defaultValue:(id)arg2;
- (void)handleNotifyOnDelegateQueue:(id)arg0;
- (void)_appendLog:(id)arg0;
- (id)_removeRepeatedUrls:(id)arg0;
- (id)_getTaskFailReason:(long long)arg0 task:(long long)arg1 info:(id)arg2;
- (id)waitingCopyItem;
- (void)setPreloadParallelNum:(long long)arg0;
- (void)setSocketTrainingCenterConfigStr:(id)arg0;
- (void)setNetSchedulerConfigStr:(id)arg0;
- (void)suspendPreconnect;
- (void)resumePreconnect;
- (long long)preloadStrategy;
- (id)loaderItems;
- (void)setLoaderItems:(id)arg0;
- (unsigned long long)mdlDataSourceId;
- (void)setMdlDataSourceId:(unsigned long long)arg0;
- (void)setWaitingCopyItem:(id)arg0;
- (id)dataCenter;
- (void)setDataCenter:(id)arg0;
- (id)configure;
- (void).cxx_destruct;
- (void)start:(id *)arg0;
- (void)close;
- (void)stop;
- (id)getVersion;
- (void)_applicationDidEnterBackground:(id)arg0;
- (id)delegate;
- (void)clearAllCaches;
- (void)setDelegate:(id)arg0;
- (void)dealloc;
- (void)cancelAll;
- (void)startDownload:(id)arg0;

@end
