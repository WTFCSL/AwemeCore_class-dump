//
//     Generated by private class-dump
//

@class HGSTLQueue, NSString, HGTimer, HGRunningDispatchThread, NSDate, HGUniqueID;
@protocol HGContextProtocol;

@interface HGRuntime : NSObject <HGUniqueID, HGRunningDispatchQueueDelegate, HGRuntimeAyncCallProtocol> {
    id<HGContextProtocol> _JSContext;
    BOOL _isContextReady;
    BOOL _isSubscribeReady;
    BOOL _isContextThreadForceStopped;
    BOOL _isPreloadCore;
    HGUniqueID *_uniqueID;
    id /* block */ _publishCallBack;
    id /* block */ _onDocumentReadyCallBack;
    id /* block */ _onForcedStoppedCallBack;
    HGSTLQueue *_subscribePendingQueue;
    HGTimer *_appTimer;
    HGRunningDispatchThread *_contextMergedDispatchQueue;
    NSString *_caller;
    long long _coreExecCost;
    NSDate *_coreExecEnd;
    NSDate *_coreExecBegin;
}

@property (class, copy, nonatomic) id /* block */ jscCSBlock;
@property (class, copy, nonatomic) id /* block */ hostCSBlock;

@property (retain, nonatomic) HGSTLQueue *subscribePendingQueue;
@property (retain, nonatomic) HGTimer *appTimer;
@property (nonatomic) BOOL isContextThreadForceStopped;
@property (retain, nonatomic) HGRunningDispatchThread *contextMergedDispatchQueue;
@property (copy, nonatomic) NSString *caller;
@property (nonatomic) long long coreExecCost;
@property (retain, nonatomic) NSDate *coreExecEnd;
@property (retain, nonatomic) NSDate *coreExecBegin;
@property (nonatomic) BOOL isPreloadCore;
@property (retain, nonatomic) HGUniqueID *uniqueID;
@property (copy, nonatomic) id /* block */ publishCallBack;
@property (copy, nonatomic) id /* block */ onDocumentReadyCallBack;
@property (copy, nonatomic) id /* block */ onForcedStoppedCallBack;
@property (nonatomic) BOOL isContextReady;
@property (nonatomic) BOOL isSubscribeReady;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (id /* block */)hostCSBlock;
+ (id /* block */)jscCSBlock;
+ (void)setHostCSBlock:(id /* block */)arg0;
+ (void)setJscCSBlock:(id /* block */)arg0;

- (void)setPublishCallBack:(id /* block */)arg0;
- (id)coreExecEnd;
- (void)evaluateScript:(id)arg0 completion:(id /* block */)arg1;
- (void)subscribeHandler:(id)arg0 sourceID:(long long)arg1 data:(id)arg2 completion:(id /* block */)arg3;
- (void)setupClearBlockWithoutStop:(id /* block */)arg0;
- (void)setContextMergedDispatchQueue:(id)arg0;
- (id)contextMergedDispatchQueue;
- (void)setJSContext:(id)arg0;
- (void)initPropertiesBeforeCommon;
- (void)setupContextBeforeCommon;
- (void)setCoreExecBegin:(id)arg0;
- (id)JSContext;
- (id)coreExecBegin;
- (void)setCoreExecCost:(long long)arg0;
- (void)setCoreExecEnd:(id)arg0;
- (void)setIsSubscribeReady:(BOOL)arg0;
- (BOOL)isContextThreadForceStopped;
- (void)updateUniqueID:(id)arg0;
- (void)initPropertiesAfterCommon;
- (void)setupContextAfterCommon;
- (void)setupContextDone;
- (void)dispatchAsyncInContextThread:(id /* block */)arg0;
- (id)invoke:(id)arg0 param:(id)arg1 callbackID:(id)arg2;
- (void)publish:(id)arg0 param:(id)arg1 appPageIDs:(id)arg2;
- (id)call:(id)arg0 param:(id)arg1 callbackID:(id)arg2;
- (void)onDocumentReady;
- (void)createRuntimeWithRuntimeType:(unsigned long long)arg0;
- (void)stopDispatchAsyncWith:(id /* block */)arg0;
- (void)logException:(id)arg0 exception:(id)arg1;
- (id)appTimer;
- (void)loadScript:(id)arg0 withFileSource:(id)arg1 completion:(id /* block */)arg2;
- (void)callbackInvoke:(id)arg0 data:(id)arg1;
- (id /* block */)publishCallBack;
- (void)cancelAllPendingAsyncDispatch;
- (void)enableAcceptAsyncDispatch:(BOOL)arg0;
- (void)logExceptionWithJSC:(id)arg0 exception:(id)arg1;
- (void)setIsContextThreadForceStopped:(BOOL)arg0;
- (void)setAppTimer:(id)arg0;
- (void)setSubscribePendingQueue:(id)arg0;
- (void)setIsContextReady:(BOOL)arg0;
- (void)_logExceptionWithParams:(id)arg0;
- (id /* block */)onForcedStoppedCallBack;
- (id)invoke:(id)arg0 param:(id)arg1 callbackID:(id)arg2 completion:(id /* block */)arg3;
- (id)call:(id)arg0 paramDict:(id)arg1 callbackID:(id)arg2 completion:(id /* block */)arg3;
- (id)call:(id)arg0 paramDict:(id)arg1 callbackID:(id)arg2;
- (void)callbackCall:(id)arg0 data:(id)arg1;
- (id)call:(id)arg0 param:(id)arg1 callbackID:(id)arg2 completion:(id /* block */)arg3;
- (id /* block */)onDocumentReadyCallBack;
- (BOOL)isSubscribeReady;
- (id)subscribePendingQueue;
- (void)addSubscribeHandlerToPendingQueue:(id)arg0 sourceID:(long long)arg1 data:(id)arg2 completion:(id /* block */)arg3;
- (void)executeAllPendingSubscribe;
- (void)subscribeDirectly:(id)arg0 sourceID:(long long)arg1 data:(id)arg2 completion:(id /* block */)arg3;
- (void)onHGRunningThreadQueueFatal:(id)arg0;
- (void)loadScriptWithURL:(id)arg0 completion:(id /* block */)arg1;
- (void)onHGRunningThreadForceStopped:(id)arg0;
- (void)setOnDocumentReadyCallBack:(id /* block */)arg0;
- (void)setOnForcedStoppedCallBack:(id /* block */)arg0;
- (BOOL)isContextReady;
- (long long)coreExecCost;
- (BOOL)isPreloadCore;
- (void)setIsPreloadCore:(BOOL)arg0;
- (id)caller;
- (id)init;
- (void).cxx_destruct;
- (id)uniqueID;
- (void)setUniqueID:(id)arg0;
- (id)initWithType:(unsigned long long)arg0;
- (void)setCaller:(id)arg0;
- (void)dealloc;

@end
