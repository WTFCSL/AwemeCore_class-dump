//
//     Generated by private class-dump
//

@protocol IESLiveSmallWindowActions;

@protocol IESLiveSmallWindowService <NSObject>

@property (nonatomic) BOOL selfManage;
@property (weak, nonatomic) id<IESLiveSmallWindowActions> smallwindowDelegate;
@property (nonatomic) BOOL needBackToLastPos;
@property (nonatomic) BOOL disableSmallWindow;
@property (nonatomic) BOOL isMultiLinkMic;
@property (nonatomic) BOOL useTapActionOnly;
@property (readonly, nonatomic) BOOL manualHideSmallWindow;
@property (readonly, nonatomic) BOOL isOuterInteract;
@property (readonly, nonatomic) BOOL didHideWindow;
@property (nonatomic) double hideDelayTime;

- (void)showSmallLiveWindowFrom:(id)arg0;
- (void)hideSmallLiveWindow;
- (void)registerAllowListVCClass:(Class)arg0 withTag:(id)arg1;
- (void)unregisterAllowListVCClass:(Class)arg0;
- (void)setSmallWindowHiddenCompletion:(id /* block */)arg0;
- (void)setTapSmallWindowAction:(id /* block */)arg0;
- (void)setTapSmallWindowAction:(id /* block */)arg0 liveResponse:(BOOL)arg1;
- (void)setSmallWindowMuteStateDidChangedAction:(id /* block */)arg0;
- (BOOL)hasWindowView;
- (void)resumeSmallWindowStream;
- (void)setSelfManage:(BOOL)arg0;
- (void)startVideoRendering;
- (void)pauseSmallWindowStream;
- (void)setUseTapActionOnly:(BOOL)arg0;
- (void)showSmallLiveWindowFrom:(id)arg0 withRoomID:(id)arg1 metaParams:(id)arg2 preferOptions:(id)arg3 callTrace:(id)arg4 completion:(id /* block */)arg5;
- (void)showSmallLiveWindowFrom:(id)arg0 withRoomID:(id)arg1 metaParams:(id)arg2;
- (void)transferSmallLiveToView:(id)arg0;
- (void)returnSmallLiveToService;
- (void)setSmallWindowMute:(BOOL)arg0;
- (void)clearSmallwindowActionBlock;
- (void)resumeMiniWindow;
- (void)stopVideoRendering;
- (void)setSmallLiveWindowTop:(double)arg0;
- (void)showSmallLiveWindowFrom:(id)arg0 extraParam:(id)arg1;
- (void)showSmallLiveWindowFrom:(id)arg0 extraParam:(id)arg1 callTrace:(id)arg2 completion:(id /* block */)arg3;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })getSmallWindowViewRect;
- (BOOL)selfManage;
- (BOOL)useTapActionOnly;
- (void)pauseMiniWindow;
- (BOOL)didHideWindow;
- (BOOL)manualHideSmallWindow;
- (void)hideSmallWindow;
- (id)targetDowngradeQualitySDKKeyWithBuzType:(long long)arg0;
- (void)smoothlySwitchResolutionToSDKKey:(id)arg0 forceSwitchIfFailed:(BOOL)arg1 switchReason:(long long)arg2 smallWindowBuzType:(long long)arg3 completion:(id /* block */)arg4 switchResultCompletion:(id /* block */)arg5;
- (BOOL)shouldDowngradeSmallWindowQualityWithBuzType:(long long)arg0;
- (void)showSmallLiveWindowFrom:(id)arg0 extraParam:(id)arg1 preferOptions:(id)arg2 callTrace:(id)arg3 completion:(id /* block */)arg4;
- (void)clearSmallWindowWithCurrentRoom:(id)arg0;
- (void)showSmallWindowFrom:(id)arg0 completion:(id /* block */)arg1;
- (id)shownSmallWindowVCS;
- (BOOL)hasPlayerView;
- (BOOL)vcIsSupportSmallWindow:(id)arg0;
- (id)fromInfo:(id)arg0;
- (void)switchResolution:(id)arg0 complete:(id /* block */)arg1;
- (id)smallwindowDelegate;
- (void)setSmallwindowDelegate:(id)arg0;
- (BOOL)needBackToLastPos;
- (void)setNeedBackToLastPos:(BOOL)arg0;
- (BOOL)disableSmallWindow;
- (void)setDisableSmallWindow:(BOOL)arg0;
- (BOOL)isMultiLinkMic;
- (void)setIsMultiLinkMic:(BOOL)arg0;
- (BOOL)isOuterInteract;
- (double)hideDelayTime;
- (void)setHideDelayTime:(double)arg0;

@end
