//
//     Generated by private class-dump
//

@class UIScrollView, NSString, UITextField, NSDictionary, UIView, BDNovelPreload, TTWebViewBridgeEngine;
@protocol BDNovelLoadFailViewProtocol, BDNovelWebViewProtocol, BDNovelLoadingViewProtocol, BDNovelWebContainerViewDelegate;

@interface BDNovelWebContainerView : UIView <BDNovelWebViewDelegate> {
    BOOL _hasReceivePageRender;
    BOOL _useCustomVisibleEvent;
    BOOL _isCustomVisible;
    BOOL _isVisible;
    BOOL _isInBackground;
    BOOL _isFirstAppear;
    BOOL _isLoadDetailReportFinish;
    BDNovelPreload *_preload;
    UIView<BDNovelWebViewProtocol> *_webView;
    id<BDNovelWebContainerViewDelegate> _delegate;
    NSDictionary *_wapStayPageArg;
    id /* block */ _novelWebPageRenderCompletion;
    UIView<BDNovelLoadingViewProtocol> *_loadingIndicatorView;
    UIView<BDNovelLoadFailViewProtocol> *_failIndicatorView;
    UIView *_shieldView;
    UITextField *_shieldTextField;
    NSString *_urlString;
    double _startLoadRequestTime;
    long long _startTime;
    long long _didStartLoadTime;
    NSDictionary *_timingPerformance;
}

@property (nonatomic) BOOL isVisible;
@property (nonatomic) BOOL isInBackground;
@property (copy, nonatomic) id /* block */ novelWebPageRenderCompletion;
@property (nonatomic) BOOL isFirstAppear;
@property (retain, nonatomic) UIView<BDNovelLoadingViewProtocol> *loadingIndicatorView;
@property (retain, nonatomic) UIView<BDNovelLoadFailViewProtocol> *failIndicatorView;
@property (retain, nonatomic) UIView *shieldView;
@property (retain, nonatomic) UITextField *shieldTextField;
@property (retain, nonatomic) UIView<BDNovelWebViewProtocol> *webView;
@property (copy, nonatomic) NSString *urlString;
@property (nonatomic) BOOL isLoadDetailReportFinish;
@property (nonatomic) double startLoadRequestTime;
@property (nonatomic) long long startTime;
@property (nonatomic) long long didStartLoadTime;
@property (copy, nonatomic) NSDictionary *timingPerformance;
@property (retain, nonatomic) BDNovelPreload *preload;
@property (readonly, nonatomic) TTWebViewBridgeEngine *bridgeEngine;
@property (nonatomic) BOOL hasReceivePageRender;
@property (weak, nonatomic) id<BDNovelWebContainerViewDelegate> delegate;
@property (copy, nonatomic) NSDictionary *wapStayPageArg;
@property (nonatomic) BOOL useCustomVisibleEvent;
@property (nonatomic) BOOL isCustomVisible;
@property (readonly, nonatomic) UIScrollView *scrollView;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (id)fetchHookConsoleLog;
+ (void)fireEvent:(id)arg0 data:(id)arg1;

- (void)setIsInBackground:(BOOL)arg0;
- (id)ttr_url;
- (void)ttr_fireEvent:(id)arg0 data:(id)arg1;
- (void)ttr_evaluateJavaScript:(id)arg0 completionHandler:(id /* block */)arg1;
- (void)sendTrackDataFromURLString:(id)arg0;
- (id)shieldTextField;
- (id)shieldView;
- (void)setShieldView:(id)arg0;
- (void)setShieldTextField:(id)arg0;
- (void)setWapStayPageArg:(id)arg0;
- (id)wapStayPageArg;
- (void)reportSladarWithState:(id)arg0;
- (void)eventWebFinishMonitorWithError:(id)arg0 isBack:(BOOL)arg1;
- (void)reportSladarWithState:(id)arg0 error:(id)arg1;
- (void)timingPerformanceWithComplete:(id /* block */)arg0;
- (void)innerInitWebView;
- (void)setIsFirstAppear:(BOOL)arg0;
- (void)setNovelWebPageRenderCompletion:(id /* block */)arg0;
- (void)innerBridgeApi;
- (void)bdn_installHookConsoleLog;
- (id)bridgeEngine;
- (BOOL)useCustomVisibleEvent;
- (BOOL)isCustomVisible;
- (void)setHasReceivePageRender:(BOOL)arg0;
- (id /* block */)novelWebPageRenderCompletion;
- (void)__showLoadingIndicator:(id)arg0;
- (void)__hideLoadingIndicator;
- (void)monitorDealloc;
- (void)monitorBeginLoadRequest;
- (BOOL)shouldHandleLog:(id)arg0;
- (void)monitorDidStartLoad;
- (void)monitorDidFinishLoad;
- (void)monitorDidFailLoadWithError:(id)arg0;
- (void)monitorDidTerminate;
- (id)preInjectStr;
- (void)sendV3TrackDataFromURLString:(id)arg0;
- (void)invokeVisibleEventWithParams:(id)arg0;
- (void)invokeInvisibleEventWithParams:(id)arg0;
- (BOOL)enablePreload;
- (id)failIndicatorView;
- (void)setFailIndicatorView:(id)arg0;
- (void)reloadInputRequest;
- (void)configNovelWebPageRenderJSBCompletion:(id /* block */)arg0;
- (void)fetchForJsonFromUrl:(id)arg0 params:(id)arg1 headerField:(id)arg2 needCommonParams:(BOOL)arg3 method:(id)arg4 callback:(id /* block */)arg5;
- (void)notifyVisible;
- (void)loadUrlString:(id)arg0 joinCustomParams:(BOOL)arg1;
- (BOOL)hasReceivePageRender;
- (void)setIsCustomVisible:(BOOL)arg0;
- (BOOL)isLoadDetailReportFinish;
- (void)setIsLoadDetailReportFinish:(BOOL)arg0;
- (double)startLoadRequestTime;
- (void)setStartLoadRequestTime:(double)arg0;
- (long long)didStartLoadTime;
- (void)setDidStartLoadTime:(long long)arg0;
- (id)timingPerformance;
- (void)setTimingPerformance:(id)arg0;
- (void)setUseCustomVisibleEvent:(BOOL)arg0;
- (void)handlePreloadInfos:(id)arg0;
- (void)loadUrlString:(id)arg0;
- (void)invokeVisibleEvent;
- (void)invokeInvisibleEvent;
- (void)configTransparent;
- (void)sendStayEventWithTimeInterval:(id)arg0;
- (void)webViewDidTerminate:(id)arg0;
- (id)urlString;
- (void)setWebView:(id)arg0;
- (void)setStartTime:(long long)arg0;
- (id)webView;
- (void).cxx_destruct;
- (void)setIsVisible:(BOOL)arg0;
- (id)preload;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0;
- (void)didMoveToWindow;
- (id)delegate;
- (long long)startTime;
- (BOOL)isInBackground;
- (void)setUrlString:(id)arg0;
- (void)layoutSubviews;
- (void)setDelegate:(id)arg0;
- (void)dealloc;
- (id)scrollView;
- (BOOL)isVisible;
- (void)loadRequest:(id)arg0;
- (void)webView:(id)arg0 didFailLoadWithError:(id)arg1;
- (BOOL)webView:(id)arg0 shouldStartLoadWithRequest:(id)arg1 navigationType:(long long)arg2;
- (void)webViewDidStartLoad:(id)arg0;
- (void)webViewDidFinishLoad:(id)arg0;
- (BOOL)isFirstAppear;
- (void)userContentController:(id)arg0 didReceiveScriptMessage:(id)arg1;
- (void)appDidBecomeActive;
- (id)loadingIndicatorView;
- (void)setLoadingIndicatorView:(id)arg0;
- (void)setPreload:(id)arg0;
- (id)createWebView;
- (void)appWillResignActive;

@end
