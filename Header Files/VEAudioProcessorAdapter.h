//
//     Generated by private class-dump
//

@class NSString;

@interface VEAudioProcessorAdapter : NSObject {
    struct AudioStreamBasicDescription { double mSampleRate; unsigned int mFormatID; unsigned int mFormatFlags; unsigned int mBytesPerPacket; unsigned int mFramesPerPacket; unsigned int mBytesPerFrame; unsigned int mChannelsPerFrame; unsigned int mBitsPerChannel; unsigned int mReserved; } m_asbd;
    struct shared_ptr<ITEAudioSamples> { struct ITEAudioSamples *__ptr_; struct __shared_weak_count *__cntrl_; } m_outputSample;
    unsigned int m_planeCount;
    struct AudioBufferList { unsigned int x0; struct AudioBuffer { unsigned int x0; unsigned int x1; void *x2; } x1[1]; } *m_outputBufferList;
    struct unique_ptr<mammon::Effect, std::default_delete<mammon::Effect>> { struct __compressed_pair<mammon::Effect *, std::default_delete<mammon::Effect>> { struct Effect *__value_; } __ptr_; } m_limitProcessor;
    float m_volume;
    struct TEARCWrapper<ITEModelClip, std::shared_ptr> { struct shared_ptr<ITEModelClip> { struct ITEModelClip *__ptr_; struct __shared_weak_count *__cntrl_; } mPtr; } m_clip;
    struct tagSTEAudioParameters { unsigned int nSampleRate; int eSampleFormat; unsigned int nChannelCount; unsigned int nBitRate; } m_sAudioRes;
    long long m_seqTime;
    long long m_startTime;
    BOOL m_enableAudioEffect;
    BOOL m_supportMultiEffect;
    struct shared_ptr<TEAudioEffectCache> { struct TEAudioEffectCache *__ptr_; struct __shared_weak_count *__cntrl_; } m_audioEffectCache;
    struct shared_ptr<ITEAudioEffect> { struct ITEAudioEffect *__ptr_; struct __shared_weak_count *__cntrl_; } m_speedEffect;
    struct shared_ptr<TEFilter> { struct TEFilter *__ptr_; struct __shared_weak_count *__cntrl_; } m_speedFilter;
    NSString *_path;
}

@property (retain, nonatomic) NSString *path;

- (id)initWithTEReaderUnit:(void *)arg0 asbd:(struct AudioStreamBasicDescription { double x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; })arg1;
- (void)getOutputBufferList:(struct AudioBufferList **)arg0;
- (void)setPath:(id)arg0;
- (void).cxx_destruct;
- (void)processAudioSamples:(struct AudioBufferList { unsigned int x0; struct AudioBuffer { unsigned int x0; unsigned int x1; void *x2; } x1[1]; } *)arg0;
- (id)path;
- (void)dealloc;
- (void)reset;
- (id).cxx_construct;

@end
