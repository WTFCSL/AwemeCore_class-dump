//
//     Generated by private class-dump
//

@class UIView, VEImagePreview;

@interface VEImage : NSObject {
    id /* block */ _algorithmResultsCallback;
    id /* block */ _mutilFrameCallback;
    unsigned long long _algorithm;
    long long _imageNativeHandle;
    VEImagePreview *_surface;
    double _scale;
    struct CGSize { double width; double height; } _maxRenderSize;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _surfaceFrame;
}

@property (nonatomic) long long imageNativeHandle;
@property (nonatomic) struct CGSize { double width; double height; } maxRenderSize;
@property (retain, nonatomic) VEImagePreview *surface;
@property (nonatomic) double scale;
@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } surfaceFrame;
@property (readonly, nonatomic) UIView *preview;
@property (copy, nonatomic) id /* block */ algorithmResultsCallback;
@property (copy, nonatomic) id /* block */ mutilFrameCallback;
@property (readonly, nonatomic) unsigned long long algorithm;

- (void)deleteLayer:(id)arg0;
- (void)clearEffect;
- (struct CGSize { double x0; double x1; })maxRenderSize;
- (id /* block */)algorithmResultsCallback;
- (void)setAlgorithmResultsCallback:(id /* block */)arg0;
- (void)enableOpenGL3:(BOOL)arg0;
- (void)setSurfaceFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0;
- (void)initPreviewSurface;
- (id)initWithMaxRenderSize:(struct CGSize { double x0; double x1; })arg0 useNewLooper:(BOOL)arg1;
- (long long)imageNativeHandle;
- (void)renderLayerQueue;
- (int)addTextSticker:(id)arg0 infoParams:(struct VEImageInfoStickerParams { float x0; float x1; float x2; float x3; float x4; float x5; int x6; } *)arg1;
- (int)addStickerWithPath:(id)arg0 param:(id)arg1 infoParams:(struct VEImageInfoStickerParams { float x0; float x1; float x2; float x3; float x4; float x5; int x6; } *)arg2;
- (id)convertBitmapRGBA8ToUIImage:(char *)arg0 withWidth:(int)arg1 withHeight:(int)arg2 withColorSpace:(struct __CFString { } *)arg3;
- (id)initWithNewLooper:(BOOL)arg0;
- (void)enableCanvas:(long long)arg0 canvasHeight:(long long)arg1;
- (void)enableUndoRedo;
- (void)sendMsgToEffect:(int)arg0 arg1:(long long)arg1 arg2:(long long)arg2 arg3:(id)arg3;
- (void)enableAnimateSticker:(BOOL)arg0;
- (void)enableAnimateEffect:(BOOL)arg0;
- (void)enableRenderInTimer:(BOOL)arg0;
- (void)setRenderTimerFrameRate:(int)arg0 type:(int)arg1;
- (void)addImageLayerWithImage:(id)arg0 setupBlock:(id /* block */)arg1;
- (void)addPanoramicLayer:(id)arg0 panoramicPath:(id)arg1;
- (void)addImageLayerWithFrameFilePath:(id)arg0 width:(int)arg1 height:(int)arg2 setupBlock:(id /* block */)arg3;
- (void)addTransparentLayer:(int)arg0 height:(int)arg1 setupBlock:(id /* block */)arg2;
- (void)replaceImageLayerWithImage:(id)arg0 setupBlock:(id /* block */)arg1;
- (void)setCurrentLayerNeedAlgorithm:(BOOL)arg0;
- (void)addImageLayer:(id)arg0;
- (void)translateWithOffset:(struct CGPoint { double x0; double x1; })arg0;
- (void)translateCanvasWithOffset:(struct CGPoint { double x0; double x1; })arg0;
- (void)rotationWithDegree:(double)arg0 anchorPoint:(struct CGPoint { double x0; double x1; })arg1;
- (void)rotationCanvasWithDegree:(double)arg0 anchorPoint:(struct CGPoint { double x0; double x1; })arg1;
- (void)scaleWithScale:(struct CGSize { double x0; double x1; })arg0 anchor:(struct CGPoint { double x0; double x1; })arg1;
- (void)scaleCanvasWithScale:(struct CGSize { double x0; double x1; })arg0 anchor:(struct CGPoint { double x0; double x1; })arg1;
- (void)redoWithIndex:(long long)arg0 hasScissorNode:(BOOL)arg1;
- (void)undoWithIndex:(long long)arg0 hasScissorNode:(BOOL)arg1;
- (id)getUndoRedoList:(BOOL)arg0;
- (id)getLastUndoCommand;
- (void)switchFilterWithPathOne:(const char *)arg0 pathOne:(id)arg1 pathTwo:(id)arg2 intensity:(double)arg3 progress:(double)arg4;
- (void)setComposerSlideFilter:(id)arg0 pathTwo:(id)arg1 intensity:(double)arg2 progress:(double)arg3;
- (void)setComposerWithPath:(id)arg0 tagName:(const char *)arg1 tagValue:(double)arg2;
- (void)setColorPrimaries:(unsigned long long)arg0 TransferFunction:(unsigned long long)arg1 YCbCrMatrix:(unsigned long long)arg2;
- (void)setComposersWithPath:(id)arg0 tagName:(const char *)arg1 tagValues:(id)arg2;
- (void)setComposerResource:(id)arg0;
- (void)removeComposerWithPath:(id)arg0 tagName:(id)arg1 value:(id)arg2;
- (void)removeComposerWithoutUndoWithPath:(id)arg0 tagName:(id)arg1;
- (void)setOneValueFilterWithType:(unsigned long long)arg0 path:(id)arg1 value:(double)arg2;
- (void)executeConfirm;
- (void)executeConfirmParams;
- (void)selectWithCoordWithPosition:(struct CGPoint { double x0; double x1; })arg0;
- (void)selectWithCoordWithIndex:(id)arg0;
- (void)cancelSelect:(long long)arg0;
- (void)renderLayerQueueForceSync;
- (void)contrastImage:(int)arg0;
- (void)customContrastImage:(id)arg0 isSave:(BOOL)arg1;
- (int)addInfoStickerTemplate:(id)arg0 param:(id)arg1;
- (int)updateInfoStickerTemplateParam:(int)arg0 json:(id)arg1;
- (id)nativeGetInfoStickerTemplateParam:(int)arg0;
- (int)addTextSticker:(id)arg0;
- (int)updateTextSticker:(int)arg0 json:(id)arg1;
- (int)addStickerWithPath:(id)arg0 param:(id)arg1;
- (int)addStickerWithLayer:(id)arg0;
- (int)removeStickerWithIndex:(long long)arg0;
- (int)stickerSetScaleWithIndex:(long long)arg0 scale:(struct CGSize { double x0; double x1; })arg1;
- (int)stickerSetPositonWithIndex:(long long)arg0 point:(struct CGPoint { double x0; double x1; })arg1;
- (int)doInfoStickerTranslateWithScreenResolution:(long long)arg0 offsetX:(double)arg1 offsetY:(double)arg2;
- (struct CGPoint { double x0; double x1; })getInfoStickerPositionWithIndex:(long long)arg0;
- (int)stickerSetRotationWithIndex:(int)arg0 rotation:(double)arg1;
- (int)doInfoStickerRotate:(int)arg0 degree:(double)arg1;
- (int)stickerSetAlphaWithIndex:(int)arg0 alpha:(double)arg1;
- (int)stickerSetOrderInLayer:(int)arg0 order:(int)arg1;
- (struct TEInfoStickerBoundingBoxT { float x0; float x1; float x2; float x3; })getStickerBoundingBoxWitnIndex:(int)arg0 needScale:(BOOL)arg1;
- (struct _VEImageLayerInfo { struct CGPoint { double x0; double x1; } x0; struct CGPoint { double x0; double x1; } x1; struct CGPoint { double x0; double x1; } x2; struct CGPoint { double x0; double x1; } x3; float x4; float x5; float x6; })getInfoStickerBoundingBoxWithScreenResolution:(int)arg0 needScale:(BOOL)arg1;
- (int)setInfoStickerAnimNewWithIndex:(int)arg0 type:(int)arg1 anim_path:(id)arg2 duration:(double)arg3;
- (int)setInfoStickerAnimParamWithIndex:(int)arg0 type:(int)arg1 params:(id)arg2;
- (int)addBrushSticker:(id)arg0;
- (void)setStickerBrushResource:(id)arg0;
- (void)beginStickerBrus:(int)arg0;
- (void)endStickerBrush;
- (void)undoRedoStickerBrush:(BOOL)arg0 entityIndex:(int)arg1;
- (void)clearStickerBrush:(int)arg0;
- (void)setStickerBrushParams:(id)arg0;
- (void)getStickerBrushState:(int)arg0 undoCount:(int *)arg1 redoCount:(int *)arg2 strokeSize:(float *)arg3 boundingBox:(struct TEInfoStickerBoundingBoxT { float x0; float x1; float x2; float x3; } *)arg4;
- (int)addVectorSticker:(id)arg0;
- (void)addVectorGraphicsWithParams:(int)arg0 path:(id)arg1 params:(id)arg2;
- (id)getVectorCurrentGraphics:(int)arg0;
- (void)removeVectorGraphicsWithId:(int)arg0 geometryID:(id)arg1;
- (id)getVectorGraphicsParamsWithId:(int)arg0 geometryID:(id)arg1;
- (void)updateVectorGraphicsParamsWithId:(int)arg0 geometryID:(id)arg1 geometryParams:(id)arg2 isMilestone:(BOOL)arg3;
- (void)setVectorGraphicsBrushEnable:(int)arg0 enable:(BOOL)arg1;
- (void)undoRedoVectorGraphics:(int)arg0 isUndo:(BOOL)arg1;
- (struct IMAGE_PIXEL_COLOR_X { unsigned char x0 : 8; unsigned char x1 : 8; unsigned char x2 : 8; unsigned char x3 : 8; })getImagePixelColorWithPoint:(struct CGPoint { double x0; double x1; })arg0 size:(struct CGSize { double x0; double x1; })arg1;
- (struct _VEImageLayerInfo { struct CGPoint { double x0; double x1; } x0; struct CGPoint { double x0; double x1; } x1; struct CGPoint { double x0; double x1; } x2; struct CGPoint { double x0; double x1; } x3; float x4; float x5; float x6; })queryCurrentLayerFrame;
- (struct _VEImageLayerInfo { struct CGPoint { double x0; double x1; } x0; struct CGPoint { double x0; double x1; } x1; struct CGPoint { double x0; double x1; } x2; struct CGPoint { double x0; double x1; } x3; float x4; float x5; float x6; })queryCurrentLayerFrame:(BOOL)arg0 isLayerInCanvas:(BOOL)arg1;
- (BOOL)queryCurrentLayerExist;
- (id)getCurrentSelectLayerId;
- (void)setLayerCanvasRect:(float)arg0 ldy:(float)arg1 rux:(float)arg2 ruy:(float)arg3;
- (id)getCurrentImage:(BOOL)arg0 isPanoramic:(BOOL)arg1;
- (id)getCurrentImageWithFormat:(int)arg0 format:(int)arg1 compression:(double)arg2;
- (BOOL)saveCurrentImageWithFormatToPath:(id)arg0 type:(int)arg1 format:(int)arg2 compression:(double)arg3;
- (struct CGSize { double x0; double x1; })getCurrentLayerSize;
- (id)imageFromCVPixelBuffer:(struct __CVBuffer { } *)arg0;
- (void)processGestureWithPath:(const char *)arg0 commandID:(const char *)arg1 type:(int)arg2 point:(struct CGPoint { double x0; double x1; })arg3 offset:(struct CGPoint { double x0; double x1; })arg4 factor:(float)arg5 etc:(float)arg6;
- (void)updateComposerNodeWithPath:(id)arg0 tagName:(const char *)arg1 tagValue:(float)arg2;
- (void)setPaintBrushEnableWithPath:(id)arg0 tagName:(const char *)arg1 enable:(BOOL)arg2;
- (void)setPaintBrushStrokeColorWithPath:(id)arg0 color:(id)arg1;
- (BOOL)isBrushOverlappedWithPath:(id)arg0 bounds:(struct TEInfoStickerBoundingBoxT { float x0; float x1; float x2; float x3; })arg1;
- (void)updatePaintParamsWithPath:(id)arg0 config:(id)arg1;
- (void)cutoutImageWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0 isCanvas:(BOOL)arg1;
- (void)addEffectHDRFilterWithPath:(id)arg0 intensity:(double)arg1;
- (void)setFBeautify:(long long)arg0;
- (void)registerMutilFrameResults:(id /* block */)arg0;
- (id)cacheCurrentFrame:(id)arg0 isScissor:(BOOL)arg1;
- (void)registerAlgorithmResultsCallback:(id /* block */)arg0 algorithm:(unsigned long long)arg1;
- (void)unRegisterAlgorithmAlgorithm:(unsigned long long)arg0;
- (void)requestRenderAlgorithm;
- (void)undoRedoBursh:(id)arg0 isUndo:(BOOL)arg1;
- (void)requestImageRenderAlgorithmWithImage:(id)arg0;
- (int)removeMagnifier:(BOOL)arg0;
- (int)updateMagnifierWithPoint:(struct CGPoint { double x0; double x1; })arg0 radius:(double)arg1 passEffectRender:(BOOL)arg2;
- (BOOL)isBrushOverlapped:(id)arg0 left:(float)arg1 top:(float)arg2 right:(float)arg3 bottom:(float)arg4;
- (void)enableRenderAutomation:(BOOL)arg0;
- (void)saveFinishLoadLayerInfo;
- (void)saveFinalDisplayLayerInfo;
- (void)nativeResetEffectEngine;
- (void)nativeUpdateAlgorithmCache;
- (void)nativeEnableMmap:(BOOL)arg0;
- (void)clearLiquefyBuffer;
- (void)initLensHdrEngine:(id)arg0 count:(int)arg1 infoBuffer:(id)arg2;
- (void)enableLensHdr:(BOOL)arg0;
- (int)setSmartMattingMask:(const char *)arg0 width:(int)arg1 height:(int)arg2 index:(int)arg3;
- (int)enableImageMatting:(id)arg0 matting:(BOOL)arg1;
- (void)setBackgroundImage:(const char *)arg0 width:(int)arg1 height:(int)arg2;
- (void)removeBackGroundImage;
- (void)setEffectTextureCachePathAndSize:(id)arg0 memSize:(int)arg1 cacheSize:(int)arg2;
- (int)enableLayerShow:(BOOL)arg0;
- (void)setBackgroundBoxCount:(float)arg0;
- (id /* block */)mutilFrameCallback;
- (void)setMutilFrameCallback:(id /* block */)arg0;
- (void)setImageNativeHandle:(long long)arg0;
- (void)setMaxRenderSize:(struct CGSize { double x0; double x1; })arg0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })surfaceFrame;
- (unsigned long long)algorithm;
- (id)init;
- (void).cxx_destruct;
- (id)preview;
- (double)scale;
- (void)dealloc;
- (void)setScale:(double)arg0;
- (id)surface;
- (void)setBackgroundColor:(int)arg0;
- (void)setSurface:(id)arg0;
- (void)renderEffect;

@end
