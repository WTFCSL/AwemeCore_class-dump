//
//     Generated by private class-dump
//

@class NSURL, IESLiveKTVPreStreamController, NSDictionary, HTSLiveStreamUrl_LiveCoreSDKData_PullData_Options_Quality, IESLiveBigPartyPreStreamController, UIView, IESLiveInteractiveSEIParser, NSString, IESLiveDI, IESLiveBigPartyPreStreamAdapterWrapper, IESLivePlayerAudioLoudness, AWELiveRevenuePreStreamController, IESLiveFeedAudioView, AWEAwemeModel, NSNumber, NSArray, UIImageView;
@protocol IESLivePlayerControllerDelegate, IESLivePlayerProtocol, AWELivePaidStreamViewModelProtocol, AWELivePaidLivePlayerDelegate;

@interface AWELiveVideoAudioPreStreamView : NSObject <IESLivePlayerControllerDelegate, IESLiveBigPartyPreStreamDelegate, IESLiveBigPartyPreStreamDataSource, AWELivePaidLivePlayerDelegate, IESLiveInteractionAsyncResourceLoader, IESLivePreStreamPlayerProvider, IESLivePaidStreamAction, AWELivePaidStreamViewModelDelegate, AWELiveStreamPlayer> {
    BOOL shouldCleanCoverImage;
    BOOL isAutoTransition;
    BOOL _isNeedUpdateMultiLinkerLayout;
    BOOL _enableDelayClearPlayerView;
    BOOL _currentRoomShouldDelayClear;
    BOOL _isShowing;
    BOOL _userNeedshowAudioView;
    BOOL _userAudioSmallMode;
    BOOL _shouldHidePreview;
    BOOL _isIntimateChatOn;
    BOOL _isPKGoingOn;
    BOOL _isMultiLinkerGoingOn;
    BOOL _enableLinkMicCrop;
    id /* block */ coverTransition;
    id<IESLivePlayerControllerDelegate> delegate;
    id<AWELivePaidLivePlayerDelegate> paidLiveDelegate;
    NSDictionary *logExtraDict;
    unsigned long long preAlignMode;
    long long preScaleType;
    NSArray *multiLinkerGridRatioFrames;
    id<IESLivePlayerProtocol> _player;
    IESLiveDI *_roomDI;
    UIImageView *_cover;
    UIView *_wrapper;
    AWEAwemeModel *_model;
    IESLiveFeedAudioView *_audioView;
    NSNumber *_currentRoomID;
    UIView *_bigPartyContainer;
    IESLiveBigPartyPreStreamController *_bigPartyController;
    IESLiveBigPartyPreStreamAdapterWrapper *_bigPartyPreStreamAdapter;
    long long _bigPartyContentModeEqual;
    long long _bigPartyContentModeNonOverlapping;
    IESLiveInteractiveSEIParser *_seiParser;
    NSNumber *_gridsOffsetY;
    NSNumber *_gridsOffsetX;
    IESLiveKTVPreStreamController *_ktvController;
    id<AWELivePaidStreamViewModelProtocol> _paidLiveViewModel;
    HTSLiveStreamUrl_LiveCoreSDKData_PullData_Options_Quality *_beforePlayerQuality;
    HTSLiveStreamUrl_LiveCoreSDKData_PullData_Options_Quality *_playerQuality;
    AWELiveRevenuePreStreamController *_revenueShareController;
    UIView *_revenueViewContainer;
    double _currentPKStreamRatio;
    long long _liveSource;
    NSString *_defaultQuality;
    struct CGSize { double width; double height; } mediaSize;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _pkRatioFrame;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _pkCropSize;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _renderViewFrame;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _multilinkerCropSize;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _multilinkerRatioFrame;
}

@property (retain, nonatomic) id<IESLivePlayerProtocol> player;
@property (retain, nonatomic) IESLiveDI *roomDI;
@property (retain, nonatomic) UIImageView *cover;
@property (retain, nonatomic) UIView *wrapper;
@property (retain, nonatomic) AWEAwemeModel *model;
@property (nonatomic) BOOL enableDelayClearPlayerView;
@property (nonatomic) BOOL currentRoomShouldDelayClear;
@property (retain, nonatomic) IESLiveFeedAudioView *audioView;
@property (retain, nonatomic) NSNumber *currentRoomID;
@property (nonatomic) BOOL isShowing;
@property (nonatomic) BOOL userNeedshowAudioView;
@property (nonatomic) BOOL userAudioSmallMode;
@property (nonatomic) BOOL shouldHidePreview;
@property (retain, nonatomic) UIView *bigPartyContainer;
@property (retain, nonatomic) IESLiveBigPartyPreStreamController *bigPartyController;
@property (retain, nonatomic) IESLiveBigPartyPreStreamAdapterWrapper *bigPartyPreStreamAdapter;
@property (nonatomic) long long bigPartyContentModeEqual;
@property (nonatomic) long long bigPartyContentModeNonOverlapping;
@property (retain, nonatomic) IESLiveInteractiveSEIParser *seiParser;
@property (nonatomic) BOOL isIntimateChatOn;
@property (nonatomic) BOOL isPKGoingOn;
@property (retain, nonatomic) NSNumber *gridsOffsetY;
@property (retain, nonatomic) NSNumber *gridsOffsetX;
@property (retain, nonatomic) IESLiveKTVPreStreamController *ktvController;
@property (retain, nonatomic) id<AWELivePaidStreamViewModelProtocol> paidLiveViewModel;
@property (retain, nonatomic) HTSLiveStreamUrl_LiveCoreSDKData_PullData_Options_Quality *beforePlayerQuality;
@property (retain, nonatomic) HTSLiveStreamUrl_LiveCoreSDKData_PullData_Options_Quality *playerQuality;
@property (retain, nonatomic) AWELiveRevenuePreStreamController *revenueShareController;
@property (retain, nonatomic) UIView *revenueViewContainer;
@property (nonatomic) double currentPKStreamRatio;
@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } pkRatioFrame;
@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } pkCropSize;
@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } renderViewFrame;
@property (nonatomic) BOOL isMultiLinkerGoingOn;
@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } multilinkerCropSize;
@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } multilinkerRatioFrame;
@property (nonatomic) BOOL enableLinkMicCrop;
@property (nonatomic) long long liveSource;
@property (copy, nonatomic) NSString *defaultQuality;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) struct CGSize { double width; double height; } mediaSize;
@property (retain, nonatomic) NSArray *multiLinkerGridRatioFrames;
@property (nonatomic) long long preScaleType;
@property (nonatomic) unsigned long long preAlignMode;
@property (nonatomic) BOOL isNeedUpdateMultiLinkerLayout;
@property (retain, nonatomic) IESLivePlayerAudioLoudness *sourceLoudness;
@property (copy, nonatomic) id /* block */ coverTransition;
@property (nonatomic) BOOL shouldCleanCoverImage;
@property (nonatomic) BOOL isAutoTransition;
@property (nonatomic) long long scaleType;
@property (weak, nonatomic) id<IESLivePlayerControllerDelegate> delegate;
@property (nonatomic) BOOL muted;
@property (nonatomic) double volume;
@property (copy, nonatomic) NSDictionary *logExtraDict;
@property (readonly, nonatomic) unsigned long long playbackState;
@property (readonly, nonatomic) NSURL *contentURL;
@property (readonly, copy, nonatomic) NSString *currentStreamData;
@property (weak, nonatomic) id<AWELivePaidLivePlayerDelegate> paidLiveDelegate;

- (void)stopAsync:(BOOL)arg0;
- (id)currentRoomID;
- (void)setIsShowing:(BOOL)arg0;
- (void)setLogExtraDict:(id)arg0;
- (id)logExtraDict;
- (id)cover;
- (void)player:(id)arg0 loadStateDidChange:(unsigned long long)arg1;
- (void)player:(id)arg0 didReceiveError:(id)arg1;
- (void)player:(id)arg0 playbackStateDidChange:(unsigned long long)arg1;
- (void)player:(id)arg0 mediaSizeDidChange:(struct CGSize { double x0; double x1; })arg1;
- (void)player:(id)arg0 didReceiveMetaInfo:(id)arg1 processed:(BOOL)arg2;
- (void)playerFrozen:(id)arg0;
- (void)playerResume:(id)arg0;
- (void)playerDidCleared:(id)arg0;
- (void)onLoudness:(float)arg0 soucePeak:(float)arg1 targetLufs:(float)arg2 isEnableExternalAETargetLufs:(BOOL)arg3;
- (void)setCover:(id)arg0;
- (void)didSetAttachingDIContext;
- (id)defaultQuality;
- (id)anchorID;
- (id)initWithPlayer:(id)arg0 liveSource:(long long)arg1;
- (id /* block */)coverTransition;
- (void)setCoverTransition:(id /* block */)arg0;
- (BOOL)shouldCleanCoverImage;
- (void)setShouldCleanCoverImage:(BOOL)arg0;
- (BOOL)isAutoTransition;
- (void)setIsAutoTransition:(BOOL)arg0;
- (id)currentStreamData;
- (id)paidLiveDelegate;
- (void)setPaidLiveDelegate:(id)arg0;
- (BOOL)isAudioChatLive;
- (BOOL)isEqualWithStreamData:(id)arg0 orStreamURL:(id)arg1;
- (void)reloadURL:(id)arg0 sdkParams:(id)arg1;
- (void)reloadWithStreamData:(id)arg0 streamURL:(id)arg1;
- (void)reloadStreamData:(id)arg0 orStreamURL:(id)arg1 sdkParams:(id)arg2;
- (void)reloadStreamData:(id)arg0 orStreamURL:(id)arg1 sdkParams:(id)arg2 withQualityKey:(id)arg3;
- (void)reloadWithStreamData:(id)arg0;
- (void)setCoverImageWithURLArray:(id)arg0;
- (void)setCoverImageWithURLArray:(id)arg0 placeholder:(id)arg1 completion:(id /* block */)arg2;
- (void)doCoverTransition;
- (void)removeCoverTransition;
- (void)showCoverIfNeeded:(BOOL)arg0;
- (void)setNeedShowAudioView:(BOOL)arg0;
- (void)setAudioViewSmallMode:(BOOL)arg0;
- (void)setBigPartyContentModeWithEqual:(long long)arg0 nonOverlapping:(long long)arg1;
- (void)updateBackSticker;
- (void)setShouldDelayClearPlayerView:(BOOL)arg0;
- (void)willEnterRoom;
- (void)loadCustomShareBusinessWithDelegate:(id)arg0;
- (void)preparePlayerWithStreamData:(id)arg0;
- (void)readytoDropPlayerForReuse;
- (void)updatePlayerWithPlayer:(id)arg0;
- (BOOL)isAudioLive;
- (void)setCurrentRoomID:(id)arg0;
- (BOOL)isValidRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0;
- (void)trialTimeDidChange:(double)arg0;
- (void)viewStatusDidChange:(long long)arg0 hasShareTickets:(BOOL)arg1;
- (BOOL)needMuteForFreeTrial;
- (id)customTrialView;
- (id)customTrialContainerView;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })renderViewFrame;
- (void)setRenderViewFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0;
- (id)roomDI;
- (void)setRoomDI:(id)arg0;
- (id)createWrapperView;
- (id)createCoverView;
- (void)layoutCoverImageView:(id)arg0 playerView:(id)arg1 wrapper:(id)arg2;
- (void)setupcoverTransitionWithCover:(id)arg0 playerView:(id)arg1;
- (void)clearCompleted;
- (void)receiveChannelMessage:(id)arg0;
- (void)setAudioView:(id)arg0;
- (id)audioView;
- (id)bigPartyController;
- (void)setBigPartyController:(id)arg0;
- (id)multiLinkerGridRatioFrames;
- (long long)liveSource;
- (void)setLiveSource:(long long)arg0;
- (void)shouldOpenSecurity:(BOOL)arg0;
- (void)shouldStopStream:(BOOL)arg0;
- (BOOL)isIntimateChatOn;
- (void)setMultiLinkerGridRatioFrames:(id)arg0;
- (long long)preScaleType;
- (void)setPreScaleType:(long long)arg0;
- (unsigned long long)preAlignMode;
- (void)setPreAlignMode:(unsigned long long)arg0;
- (BOOL)isNeedUpdateMultiLinkerLayout;
- (void)setIsNeedUpdateMultiLinkerLayout:(BOOL)arg0;
- (id)bigPartyPreStreamAdapter;
- (id)ktvController;
- (id)playerQuality;
- (void)setPlayerQuality:(id)arg0;
- (void)setBeforePlayerQuality:(id)arg0;
- (void)updatePlayerTrackInfo:(int)arg0;
- (id)beforePlayerQuality;
- (BOOL)isPKGoingOn;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })pkCropSize;
- (BOOL)isMultiLinkerGoingOn;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })multilinkerCropSize;
- (void)adjustVolumeEffectTargetLufs;
- (void)choosePlayerSpecifySceneForLOB;
- (void)adjustWholeVolumeEffectParam;
- (id)vrBgEventParams;
- (void)mediaSizeDidChange:(struct CGSize { double x0; double x1; })arg0;
- (void)dealWithLinkMicWithMetaInfo:(id)arg0;
- (void)removeFakeBizeView;
- (void)dealPKSEIWithMetaInfo:(id)arg0 room:(id)arg1;
- (void)dealMultiLinkerSEIWithMetaInfo:(id)arg0 room:(id)arg1;
- (id)seiParser;
- (void)setGridsOffsetY:(id)arg0;
- (void)setGridsOffsetX:(id)arg0;
- (id)gridsOffsetY;
- (void)setIsIntimateChatOn:(BOOL)arg0;
- (void)resetMultiLinkerParams;
- (void)setupMultiLinkerPlayerParamIfNeeded;
- (void)setIsMultiLinkerGoingOn:(BOOL)arg0;
- (void)setMultilinkerCropSize:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0;
- (void)setMultilinkerRatioFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })multilinkerRatioFrame;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })losePrecisionRectWith:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0;
- (void)checkPKPlayerPropState;
- (void)setIsPKGoingOn:(BOOL)arg0;
- (double)caculateStreamRatioHeightWithRatio:(double)arg0;
- (void)setCurrentPKStreamRatio:(double)arg0;
- (void)setPkCropSize:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0;
- (double)currentPKStreamRatio;
- (void)setPkRatioFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })pkRatioFrame;
- (BOOL)isFromFeedVideo;
- (id)gridsOffsetX;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })changeLandscapeMediaSize:(struct CGSize { double x0; double x1; })arg0;
- (void)bigPartyDidActivate;
- (void)bigPartyDidDeactivate;
- (void)bigPartyLayoutStyleStart:(id)arg0;
- (void)bigPartyLayoutStyleEnd:(id)arg0;
- (id)playerForBigParty;
- (id)seiReceiverForBigParty;
- (id)containerForBigParty;
- (id)playerContainerForBigParty;
- (struct CGSize { double x0; double x1; })mediaSizeForBigParty;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })containerFrameForBigParty;
- (long long)bigPartyContentModeForEqual;
- (long long)bigPartyContentModeForNonOverlapping;
- (id)playModeListForBigParty;
- (void)setSeiParser:(id)arg0;
- (void)setBigPartyPreStreamAdapter:(id)arg0;
- (void)setKtvController:(id)arg0;
- (void)asyncLoadResourceUsingBlock:(id /* block */)arg0;
- (void)setDefaultQuality:(id)arg0;
- (void)setUserNeedshowAudioView:(BOOL)arg0;
- (void)setUserAudioSmallMode:(BOOL)arg0;
- (void)setShouldHidePreview:(BOOL)arg0;
- (void)setEnableDelayClearPlayerView:(BOOL)arg0;
- (void)setCurrentRoomShouldDelayClear:(BOOL)arg0;
- (void)setEnableLinkMicCrop:(BOOL)arg0;
- (void)setBigPartyContentModeEqual:(long long)arg0;
- (void)setBigPartyContentModeNonOverlapping:(long long)arg0;
- (BOOL)delayClearPlayerViewABValue;
- (BOOL)currentRoomShouldDelayClear;
- (id)paidLiveViewModel;
- (void)installPaidStream:(id)arg0;
- (id)p_feedAudioPreviewViewWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0 userModel:(id)arg1 listModel:(id)arg2 roomModel:(id)arg3 smallModel:(BOOL)arg4;
- (void)removeAudioView;
- (void)showAudioView;
- (void)updateRenderFrameIfNeeded;
- (BOOL)enableLinkMicCrop;
- (BOOL)shouldHidePreview;
- (void)showAudioViewIfNeedWithMetaInfo:(id)arg0;
- (BOOL)updateCurrentRoomShouldDelayClear;
- (void)reloadStreamData:(id)arg0 orStreamURL:(id)arg1 sdkParams:(id)arg2 withQualityKey:(id)arg3 usePrepareMode:(BOOL)arg4;
- (void)setupBigPartyController;
- (void)realReloadWithStreamData:(id)arg0 streamURL:(id)arg1 sdkParams:(id)arg2 usePrepareMode:(BOOL)arg3;
- (void)processVideoAudioEffect;
- (void)trackForQuality:(id)arg0 type:(long long)arg1;
- (long long)changeContentMode:(long long)arg0;
- (BOOL)enableDelayClearPlayerView;
- (id)revenueShareController;
- (id)bigPartyContainer;
- (long long)bigPartyContentModeEqual;
- (long long)bigPartyContentModeNonOverlapping;
- (void)setRevenueShareController:(id)arg0;
- (id)revenueViewContainer;
- (void)dealPCStreamMultilinkerCropSize:(id)arg0;
- (void)realReloadWithStreamData:(id)arg0 streamURL:(id)arg1 sdkParams:(id)arg2;
- (BOOL)userNeedshowAudioView;
- (BOOL)userAudioSmallMode;
- (void)setBigPartyContainer:(id)arg0;
- (void)setPaidLiveViewModel:(id)arg0;
- (void)setRevenueViewContainer:(id)arg0;
- (void)setModel:(id)arg0;
- (unsigned long long)playbackState;
- (void).cxx_destruct;
- (BOOL)muted;
- (id)initWithPlayer:(id)arg0;
- (double)volume;
- (id)model;
- (void)setMuted:(BOOL)arg0;
- (id)contentURL;
- (void)close;
- (void)stop;
- (BOOL)isShowing;
- (void)setPlayer:(id)arg0;
- (id)delegate;
- (void)setVolume:(double)arg0;
- (id)playerView;
- (void)setDelegate:(id)arg0;
- (void)play;
- (void)pause;
- (void)reset;
- (id)player;
- (id)wrapper;
- (id)roomID;
- (void)updateWithModel:(id)arg0;
- (struct CGSize { double x0; double x1; })mediaSize;
- (long long)scaleType;
- (void)setScaleType:(long long)arg0;
- (void)setWrapper:(id)arg0;

@end
