//
//     Generated by private class-dump
//

@interface WCTChainCall : WCTCore {
    struct Error { int m_code; int m_type; struct map<WCDB::Error::Key, WCDB::ErrorValue, std::less<WCDB::Error::Key>, std::allocator<std::pair<const WCDB::Error::Key, WCDB::ErrorValue>>> { struct __tree<std::__value_type<WCDB::Error::Key, WCDB::ErrorValue>, std::__map_value_compare<WCDB::Error::Key, std::__value_type<WCDB::Error::Key, WCDB::ErrorValue>, std::less<WCDB::Error::Key>, true>, std::allocator<std::__value_type<WCDB::Error::Key, WCDB::ErrorValue>>> { void *__begin_node_; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<WCDB::Error::Key, WCDB::ErrorValue>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, std::__map_value_compare<WCDB::Error::Key, std::__value_type<WCDB::Error::Key, WCDB::ErrorValue>, std::less<WCDB::Error::Key>, true>> { unsigned long long __value_; } __pair3_; } __tree_; } m_infos; } _error;
    struct shared_ptr<WCDB::Ticker> { struct Ticker *__ptr_; struct __shared_weak_count *__cntrl_; } _ticker;
}

- (void)setStatisticsEnabled:(BOOL)arg0;
- (BOOL)bindProperty:(const void *)arg0 ofObject:(id)arg1 toStatementHandle:(void *)arg2 atIndex:(int)arg3 withError:(void *)arg4;
- (BOOL)bindWithValue:(id)arg0 toStatementHandle:(void *)arg1 atIndex:(int)arg2 withError:(void *)arg3;
- (void).cxx_destruct;
- (double)cost;
- (id).cxx_construct;
- (id)error;

@end
