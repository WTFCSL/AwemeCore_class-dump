//
//     Generated by private class-dump
//

@class NSArray, NSMutableDictionary, NSString;

@interface TTBridgeAuthManager : NSObject <TTBridgeAuthorization, TTBridgeAuthDefaultSettings> {
    BOOL _authEnabled;
    BOOL _geckoAuthEnabled;
    NSString *_authRequesthHost;
    NSMutableDictionary *_friendDomainMethods;
    NSArray *_remoteInnerDomains;
    NSArray *_innerDomains;
}

@property (retain, nonatomic) NSMutableDictionary *friendDomainMethods;
@property (copy, nonatomic) NSArray *remoteInnerDomains;
@property (copy, nonatomic) NSArray *innerDomains;
@property (nonatomic) BOOL authEnabled;
@property (copy) NSString *authRequesthHost;
@property (nonatomic) BOOL geckoAuthEnabled;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (void)configureWithAccessKey:(id)arg0 commonParams:(id /* block */)arg1;
+ (void)configureWithAuthDomain:(id)arg0 accessKey:(id)arg1 commonParams:(id /* block */)arg2;
+ (void)configureWithAuthDomain:(id)arg0 accessKey:(id)arg1 boeHostSuffix:(id)arg2 afterDelay:(double)arg3 commonParams:(id /* block */)arg4;
+ (BOOL)_isAuthorizedBridgeCommand:(id)arg0 engine:(id)arg1 domain:(id)arg2;
+ (id)rexxarPublicBridge;
+ (BOOL)isInnerDomain:(id)arg0;
+ (BOOL)_isAuthorizedBridgeCommand:(id)arg0 engine:(id)arg1 URL:(id)arg2;
+ (id)allocWithZone:(struct _NSZone { } *)arg0;
+ (id)sharedManager;

- (BOOL)engine:(id)arg0 isAuthorizedBridge:(id)arg1 domain:(id)arg2;
- (void)engine:(id)arg0 isAuthorizedBridge:(id)arg1 domain:(id)arg2 completion:(id /* block */)arg3;
- (BOOL)engine:(id)arg0 isAuthorizedMeta:(id)arg1 domain:(id)arg2;
- (BOOL)engine:(id)arg0 isAuthorizedBridge:(id)arg1 URL:(id)arg2;
- (id)innerDomains;
- (void)setInnerDomains:(id)arg0;
- (id)defaultAuthRequesthHost;
- (id)defaultInnerDomains;
- (id)adjustedDomains:(id)arg0;
- (BOOL)geckoAuthEnabled;
- (id)friendDomainMethods;
- (id)authRequesthHost;
- (id)remoteInnerDomains;
- (void)updateInnerDomainsFromRemote:(id)arg0 shouldUpdateGeckoPrivateDomains:(BOOL)arg1;
- (void)startGetAuthConfigWithPartnerClientKey:(id)arg0 partnerDomain:(id)arg1 secretKey:(id)arg2 finishBlock:(id /* block */)arg3;
- (void)updateInnerDomainsFromRemote:(id)arg0;
- (BOOL)isInnerDomainForURL:(id)arg0;
- (void)setAuthRequesthHost:(id)arg0;
- (void)setGeckoAuthEnabled:(BOOL)arg0;
- (void)setFriendDomainMethods:(id)arg0;
- (void)setRemoteInnerDomains:(id)arg0;
- (id)init;
- (void).cxx_destruct;
- (id)copyWithZone:(struct _NSZone { } *)arg0;
- (void)setAuthEnabled:(BOOL)arg0;
- (BOOL)authEnabled;

@end
