//
//     Generated by private class-dump
//

@class UIColor, NSString;

@interface AWEDemaciaPlayerProgressSlider : UISlider <AWEFeedProgressSliderProtocol> {
    BOOL _isUsedForMain;
    BOOL _limitUpperActionArea;
    BOOL _isV3SettingNotDefaultStyle;
    BOOL _enableFixFeedProgress;
    double _hotZoneMinimumY;
    double _hotZoneMaximumY;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _lastBounds;
}

@property (nonatomic) float value;
@property (nonatomic) float maximumValue;
@property (nonatomic) float minimumValue;
@property (retain, nonatomic) UIColor *minimumTrackTintColor;
@property (retain, nonatomic) UIColor *maximumTrackTintColor;
@property (nonatomic) BOOL limitUpperActionArea;
@property (nonatomic, getter=isContinuous) BOOL continuous;
@property (nonatomic) BOOL isV3SettingNotDefaultStyle;
@property (nonatomic) double hotZoneMinimumY;
@property (nonatomic) double hotZoneMaximumY;
@property (nonatomic) BOOL isUsedForMain;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } lastBounds;
@property (nonatomic) BOOL isUsedForMain;
@property (nonatomic) BOOL limitUpperActionArea;
@property (nonatomic) BOOL isV3SettingNotDefaultStyle;
@property (nonatomic) double hotZoneMinimumY;
@property (nonatomic) double hotZoneMaximumY;
@property (nonatomic) BOOL enableFixFeedProgress;

- (void)setIsUsedForMain:(BOOL)arg0;
- (BOOL)isUsedForMain;
- (double)hotZoneMinimumY;
- (BOOL)limitUpperActionArea;
- (BOOL)isV3SettingNotDefaultStyle;
- (double)hotZoneMaximumY;
- (BOOL)enableFixFeedProgress;
- (void)setValue:(float)arg0 animatedDuration:(double)arg1;
- (void)setLimitUpperActionArea:(BOOL)arg0;
- (void)setIsV3SettingNotDefaultStyle:(BOOL)arg0;
- (void)setHotZoneMinimumY:(double)arg0;
- (void)setHotZoneMaximumY:(double)arg0;
- (void)setEnableFixFeedProgress:(BOOL)arg0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })trackRectForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0;
- (BOOL)pointInside:(struct CGPoint { double x0; double x1; })arg0 withEvent:(id)arg1;
- (unsigned long long)accessibilityTraits;
- (void)accessibilityDecrement;
- (BOOL)gestureRecognizerShouldBegin:(id)arg0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })thumbRectForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0 trackRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg1 value:(float)arg2;
- (void)accessibilityIncrement;
- (BOOL)isAccessibilityElement;
- (id)hitTest:(struct CGPoint { double x0; double x1; })arg0 withEvent:(id)arg1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })lastBounds;
- (void)setLastBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0;

@end
