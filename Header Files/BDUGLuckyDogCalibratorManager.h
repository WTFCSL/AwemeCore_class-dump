//
//     Generated by private class-dump
//

@class NSString, NSObject;
@protocol OS_dispatch_source, OS_dispatch_queue;

@interface BDUGLuckyDogCalibratorManager : NSObject <BDUGLuckyCleanCacheDelegateProtocol, BDUGLuckyDogCalibratorProtocol, BDUGServiceABTestProtocol> {
    BOOL _isTimerRunning;
    BOOL _fromBackground;
    BOOL _hasTrySetHostTime;
    double _serverTimeInterval;
    NSObject<OS_dispatch_source> *_dispatchTimer;
    NSObject<OS_dispatch_queue> *_dispatchQueue;
    long long _cachedSystemBootTime;
    double _cachedLocalTime;
    double _cachedServerTime;
    double _hostTimeInterval;
}

@property (nonatomic) double serverTimeInterval;
@property (retain, nonatomic) NSObject<OS_dispatch_source> *dispatchTimer;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *dispatchQueue;
@property (nonatomic) BOOL isTimerRunning;
@property (nonatomic) long long cachedSystemBootTime;
@property (nonatomic) double cachedLocalTime;
@property (nonatomic) double cachedServerTime;
@property (nonatomic) BOOL fromBackground;
@property (nonatomic) double hostTimeInterval;
@property (nonatomic) BOOL hasTrySetHostTime;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (id)p_getValueInDictionary:(id)arg0 withKey:(id)arg1;
+ (void)registerResponseSerializerBlock;
+ (void)calibrateLocalDateWithResponse:(id)arg0;
+ (void)setupCalibratorServerListener;
+ (BOOL)__isV2;
+ (double)fallbackElapsedBootTime;
+ (double)elapsedBootTime;
+ (void)preStartupCalibratorModule;
+ (id)ABSetting;
+ (unsigned long long)effectTime;
+ (BOOL)isDefaultABTest;
+ (void)onCleanCache;
+ (id)sharedInstance;
+ (id)moduleName;
+ (id)serviceProtocol;

- (void)__setupNotification;
- (id)accurateCurrentServerDate;
- (double)currentServerTimestampInMS;
- (void)updateServerTime:(double)arg0 source:(id)arg1 extra:(id)arg2;
- (void)__resetServerTimeWhenColdLaunchIfNeeded;
- (double)serverTimeInterval;
- (void)__trackWithEvent:(id)arg0 params:(id)arg1;
- (BOOL)fromBackground;
- (double)__calculateServerTime;
- (void)__monitorInvalidTimestampWithSource:(id)arg0 extra:(id)arg1;
- (void)setServerTimeInterval:(double)arg0;
- (void)__monitorUnusualChangeFrom:(double)arg0 to:(double)arg1 source:(id)arg2 extra:(id)arg3;
- (void)__setupTimer;
- (double)cachedServerTime;
- (void)__saveServeTimeToCache;
- (void)calibrateLocalDateWithServerTimeInterval:(double)arg0 source:(id)arg1 extra:(id)arg2;
- (void)setIsTimerRunning:(BOOL)arg0;
- (long long)cachedSystemBootTime;
- (double)cachedLocalTime;
- (void)setCachedSystemBootTime:(long long)arg0;
- (void)setCachedLocalTime:(double)arg0;
- (void)setCachedServerTime:(double)arg0;
- (void)__onAppDidBecomeActive:(id)arg0;
- (void)setFromBackground:(BOOL)arg0;
- (BOOL)isTimerRunning;
- (void)__suspendTimer;
- (BOOL)__canClearCache;
- (double)hostTimeInterval;
- (BOOL)hasTrySetHostTime;
- (void)setHasTrySetHostTime:(BOOL)arg0;
- (void)setHostTimeInterval:(double)arg0;
- (void)__onAppWillResignActive:(id)arg0;
- (void)__clearCachedTime;
- (id)init;
- (void).cxx_destruct;
- (void)setDispatchQueue:(id)arg0;
- (void)setDispatchTimer:(id)arg0;
- (BOOL)isAvailable;
- (id)dispatchQueue;
- (id)dispatchTimer;
- (void)dealloc;

@end
