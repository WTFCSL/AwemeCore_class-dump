//
//     Generated by private class-dump
//

@class BDWebImageRequest, NSString, NSDictionary, NSURL, NSError, NSNumber;

@interface BDImagePerformanceRecoder : NSObject {
    BOOL _enableReport;
    BDWebImageRequest *_request;
    NSString *_identifier;
    NSString *_category;
    NSURL *_imageURL;
    NSString *_mimeType;
    double _timeStamp;
    double _overallStartTime;
    long long _options;
    NSError *_error;
    long long _statusCode;
    long long _resultFrom;
    double _cacheSeekStartTime;
    double _cacheSeekEndTime;
    double _thumbCacheSeekStartTime;
    double _thumbCacheSeekEndTime;
    unsigned long long _cacheType;
    double _downloadStartTime;
    double _downloadEndTime;
    NSNumber *_DNSDuration;
    NSNumber *_connetDuration;
    NSNumber *_sslDuration;
    NSNumber *_sendDuration;
    NSNumber *_waitDuration;
    NSNumber *_receiveDuration;
    double _totalBytes;
    double _receivedBytes;
    NSNumber *_isSocketReused;
    NSNumber *_isCached;
    NSNumber *_isFromProxy;
    NSString *_remoteIP;
    NSNumber *_remotePort;
    NSString *_requestLog;
    NSString *_nwSessionTrace;
    NSDictionary *_responseHeaders;
    NSNumber *_isHitCDNCache;
    NSString *_imageXDemotion;
    NSString *_imageXWantedFormat;
    NSString *_imageXRealGotFormat;
    NSNumber *_imageXConsistent;
    unsigned long long _codeType;
    double _decodeStartTime;
    double _decodeEndTime;
    double _thumbDecodeStartTime;
    double _thumbDecodeEndTime;
    NSString *_isDecodeImageQualityAbnormal;
    double _cacheImageBeginTime;
    double _cacheImageEndTime;
    double _overallEndTime;
    double _repackStartTime;
    double _repackEndTime;
    double _thumbFindLocationEndTime;
    double _thumbDownloadEndTime;
    double _thumbOverallEndTime;
    double _thumbBytes;
    unsigned long long _exceptionType;
    struct CGSize { double width; double height; } _requestImageSize;
    struct CGSize { double width; double height; } _originalImageSize;
    struct CGSize { double width; double height; } _viewSize;
}

@property (weak) BDWebImageRequest *request;
@property (nonatomic) BOOL enableReport;
@property (copy, nonatomic) NSString *identifier;
@property (copy, nonatomic) NSString *category;
@property (retain, nonatomic) NSURL *imageURL;
@property (copy, nonatomic) NSString *mimeType;
@property (nonatomic) double timeStamp;
@property (nonatomic) double overallStartTime;
@property (nonatomic) long long options;
@property (retain, nonatomic) NSError *error;
@property (nonatomic) long long statusCode;
@property (nonatomic) long long resultFrom;
@property (nonatomic) struct CGSize { double width; double height; } requestImageSize;
@property (nonatomic) struct CGSize { double width; double height; } originalImageSize;
@property (nonatomic) struct CGSize { double width; double height; } viewSize;
@property (nonatomic) double cacheSeekStartTime;
@property (nonatomic) double cacheSeekEndTime;
@property (nonatomic) double thumbCacheSeekStartTime;
@property (nonatomic) double thumbCacheSeekEndTime;
@property (readonly, nonatomic) double cacheSeekDuration;
@property (readonly, nonatomic) double thumbCacheSeekDuration;
@property (nonatomic) unsigned long long cacheType;
@property (readonly, nonatomic) double queueDuration;
@property (nonatomic) double downloadStartTime;
@property (nonatomic) double downloadEndTime;
@property (retain, nonatomic) NSNumber *DNSDuration;
@property (retain, nonatomic) NSNumber *connetDuration;
@property (retain, nonatomic) NSNumber *sslDuration;
@property (retain, nonatomic) NSNumber *sendDuration;
@property (retain, nonatomic) NSNumber *waitDuration;
@property (retain, nonatomic) NSNumber *receiveDuration;
@property (readonly, nonatomic) double downloadDuration;
@property (nonatomic) double totalBytes;
@property (nonatomic) double receivedBytes;
@property (retain, nonatomic) NSNumber *isSocketReused;
@property (retain, nonatomic) NSNumber *isCached;
@property (retain, nonatomic) NSNumber *isFromProxy;
@property (copy, nonatomic) NSString *remoteIP;
@property (retain, nonatomic) NSNumber *remotePort;
@property (copy, nonatomic) NSString *requestLog;
@property (copy, nonatomic) NSString *nwSessionTrace;
@property (copy, nonatomic) NSDictionary *responseHeaders;
@property (retain, nonatomic) NSNumber *isHitCDNCache;
@property (copy, nonatomic) NSString *imageXDemotion;
@property (copy, nonatomic) NSString *imageXWantedFormat;
@property (copy, nonatomic) NSString *imageXRealGotFormat;
@property (retain, nonatomic) NSNumber *imageXConsistent;
@property (nonatomic) unsigned long long codeType;
@property (nonatomic) double decodeStartTime;
@property (nonatomic) double decodeEndTime;
@property (nonatomic) double thumbDecodeStartTime;
@property (nonatomic) double thumbDecodeEndTime;
@property (readonly, nonatomic) double decodeDuration;
@property (readonly, nonatomic) double thumbDecodeDuration;
@property (copy, nonatomic) NSString *isDecodeImageQualityAbnormal;
@property (nonatomic) double cacheImageBeginTime;
@property (nonatomic) double cacheImageEndTime;
@property (readonly, nonatomic) double cacheImageDuration;
@property (nonatomic) double overallEndTime;
@property (readonly, nonatomic) double overallDuration;
@property (nonatomic) double repackStartTime;
@property (nonatomic) double repackEndTime;
@property (nonatomic) double thumbFindLocationEndTime;
@property (nonatomic) double thumbDownloadEndTime;
@property (nonatomic) double thumbOverallEndTime;
@property (nonatomic) double thumbBytes;
@property (readonly, nonatomic) double repackDuration;
@property (readonly, nonatomic) double thumbFindLocationDuration;
@property (readonly, nonatomic) double thumbDownloadDuration;
@property (readonly, nonatomic) double thumbOverallDuration;
@property (nonatomic) unsigned long long exceptionType;

- (void)setRequestLog:(id)arg0;
- (id)requestLog;
- (id)imageMonitorV2Log;
- (id)remoteIP;
- (void)setDNSDuration:(id)arg0;
- (void)setConnetDuration:(id)arg0;
- (void)setSslDuration:(id)arg0;
- (void)setWaitDuration:(id)arg0;
- (id)isSocketReused;
- (void)setIsSocketReused:(id)arg0;
- (id)isFromProxy;
- (void)setIsFromProxy:(id)arg0;
- (void)setRemoteIP:(id)arg0;
- (void)setNwSessionTrace:(id)arg0;
- (void)setIsHitCDNCache:(id)arg0;
- (void)setImageXDemotion:(id)arg0;
- (void)setImageXWantedFormat:(id)arg0;
- (void)setImageXRealGotFormat:(id)arg0;
- (id)imageXRealGotFormat;
- (void)setImageXConsistent:(id)arg0;
- (id)connetDuration;
- (id)sslDuration;
- (id)waitDuration;
- (id)nwSessionTrace;
- (id)isHitCDNCache;
- (id)imageXDemotion;
- (id)imageXWantedFormat;
- (id)imageXConsistent;
- (double)cacheSeekDuration;
- (double)validIntervalFromBegin:(double)arg0 toEnd:(double)arg1;
- (struct CGSize { double x0; double x1; })requestImageSize;
- (double)decodeDuration;
- (double)thumbDecodeDuration;
- (double)thumbBytes;
- (double)thumbFindLocationDuration;
- (double)thumbDownloadDuration;
- (double)thumbCacheSeekDuration;
- (double)repackDuration;
- (id)isDecodeImageQualityAbnormal;
- (long long)resultFrom;
- (double)receivedBytes;
- (double)cacheImageDuration;
- (double)thumbOverallDuration;
- (BOOL)enableReport;
- (void)setEnableReport:(BOOL)arg0;
- (double)overallStartTime;
- (void)setOverallStartTime:(double)arg0;
- (void)setRequestImageSize:(struct CGSize { double x0; double x1; })arg0;
- (double)cacheSeekStartTime;
- (void)setCacheSeekStartTime:(double)arg0;
- (double)cacheSeekEndTime;
- (void)setCacheSeekEndTime:(double)arg0;
- (double)thumbCacheSeekStartTime;
- (void)setThumbCacheSeekStartTime:(double)arg0;
- (double)thumbCacheSeekEndTime;
- (void)setThumbCacheSeekEndTime:(double)arg0;
- (double)downloadEndTime;
- (void)setDownloadEndTime:(double)arg0;
- (void)setReceivedBytes:(double)arg0;
- (double)decodeStartTime;
- (void)setDecodeStartTime:(double)arg0;
- (double)decodeEndTime;
- (void)setDecodeEndTime:(double)arg0;
- (double)thumbDecodeStartTime;
- (void)setThumbDecodeStartTime:(double)arg0;
- (double)thumbDecodeEndTime;
- (void)setThumbDecodeEndTime:(double)arg0;
- (double)cacheImageBeginTime;
- (void)setCacheImageBeginTime:(double)arg0;
- (double)cacheImageEndTime;
- (void)setCacheImageEndTime:(double)arg0;
- (double)overallEndTime;
- (double)repackStartTime;
- (void)setRepackStartTime:(double)arg0;
- (double)repackEndTime;
- (void)setRepackEndTime:(double)arg0;
- (double)thumbFindLocationEndTime;
- (void)setThumbFindLocationEndTime:(double)arg0;
- (double)thumbDownloadEndTime;
- (void)setThumbDownloadEndTime:(double)arg0;
- (double)thumbOverallEndTime;
- (void)setThumbBytes:(double)arg0;
- (void)setExceptionType:(unsigned long long)arg0;
- (void)setThumbOverallEndTime:(double)arg0;
- (void)setResultFrom:(long long)arg0;
- (void)setOverallEndTime:(double)arg0;
- (void)setIsDecodeImageQualityAbnormal:(id)arg0;
- (long long)statusCode;
- (double)totalBytes;
- (void)setStatusCode:(long long)arg0;
- (id)initWithRequest:(id)arg0;
- (id)DNSDuration;
- (id)category;
- (id)mimeType;
- (void).cxx_destruct;
- (void)setResponseHeaders:(id)arg0;
- (double)timeStamp;
- (id)remotePort;
- (void)setImageURL:(id)arg0;
- (void)setRequest:(id)arg0;
- (id)responseHeaders;
- (unsigned long long)exceptionType;
- (void)setOptions:(long long)arg0;
- (void)setCategory:(id)arg0;
- (id)identifier;
- (id)imageURL;
- (void)setMimeType:(id)arg0;
- (id)request;
- (double)downloadStartTime;
- (struct CGSize { double x0; double x1; })viewSize;
- (void)setError:(id)arg0;
- (long long)options;
- (void)setRemotePort:(id)arg0;
- (id)sendDuration;
- (void)setDownloadStartTime:(double)arg0;
- (id)error;
- (void)setIdentifier:(id)arg0;
- (void)setSendDuration:(id)arg0;
- (void)setTimeStamp:(double)arg0;
- (void)setViewSize:(struct CGSize { double x0; double x1; })arg0;
- (id)isCached;
- (void)setIsCached:(id)arg0;
- (struct CGSize { double x0; double x1; })originalImageSize;
- (void)setOriginalImageSize:(struct CGSize { double x0; double x1; })arg0;
- (unsigned long long)cacheType;
- (void)setCacheType:(unsigned long long)arg0;
- (void)setTotalBytes:(double)arg0;
- (double)overallDuration;
- (unsigned long long)codeType;
- (double)downloadDuration;
- (void)setCodeType:(unsigned long long)arg0;
- (void)setReceiveDuration:(id)arg0;
- (id)receiveDuration;
- (double)queueDuration;

@end
