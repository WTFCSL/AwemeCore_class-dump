//
//     Generated by private class-dump
//

@class BDUGLocationContinueTask, BDUGLocationDiscreteTask, NSMapTable, NSMutableDictionary, BDUGLocationHeadingTask;

@interface BDUGLocationImpl : NSObject {
    struct _opaque_pthread_mutex_t { long long __sig; char __opaque[56]; } _monitorMutex;
    BOOL _isDebug;
    BDUGLocationDiscreteTask *_discreteTask;
    BDUGLocationContinueTask *_continueTask;
    BDUGLocationHeadingTask *_headingTask;
    NSMapTable *_monitorMap;
    NSMutableDictionary *_submitMap;
    struct CLLocationCoordinate2D { double latitude; double longitude; } _debug2D;
}

@property (retain, nonatomic) BDUGLocationDiscreteTask *discreteTask;
@property (retain, nonatomic) BDUGLocationContinueTask *continueTask;
@property (retain, nonatomic) BDUGLocationHeadingTask *headingTask;
@property (retain, nonatomic) NSMapTable *monitorMap;
@property (nonatomic) BOOL isDebug;
@property struct CLLocationCoordinate2D { double latitude; double longitude; } debug2D;
@property (retain, nonatomic) NSMutableDictionary *submitMap;

+ (BOOL)isAuthorizationStatusEnabled;
+ (void)getCurrentLocationServiceEnabledWithCompletion:(id /* block */)arg0;
+ (void)getCurrentLocationAuthorizationStatusWithCompletion:(id /* block */)arg0;
+ (void)isAuthorizationStatusEnabledWithCompletion:(id /* block */)arg0;
+ (long long)currentLocationAuthorizationAccuracyStatus;
+ (id)sharedInstance;
+ (BOOL)headingAvailable;
+ (long long)currentLocationAuthorizationStatus;
+ (BOOL)locationServiceEnabled;

- (void)subscribeToHeadingUpdatesForTarget:(id)arg0 completion:(id /* block */)arg1;
- (void)unsubscribeToHeadingUpdatesForTarget:(id)arg0;
- (void)requestTemporaryFullAccuracyAuthorizationWithPurposeKey:(id)arg0 cert:(id)arg1 completion:(id /* block */)arg2;
- (void)requestWhenInUseAuthorizationWithCert:(id)arg0 completion:(id /* block */)arg1;
- (void)_requestWhenInUseAuthorizationWithCert:(id)arg0 completion:(id /* block */)arg1;
- (void)_requestTemporaryFullAccuracyAuthorizationWithPurposeKey:(id)arg0 cert:(id)arg1 completion:(id /* block */)arg2;
- (id)requestLocationWithCert:(id)arg0 option:(id)arg1 completion:(id /* block */)arg2;
- (id)requestLocationWithDesiredAccuracy:(long long)arg0 cacheTime:(double)arg1 isUseCacheTime:(BOOL)arg2 timeout:(double)arg3 autoSubmit:(BOOL)arg4 dataLevel:(long long)arg5 uploadSource:(id)arg6 option:(id)arg7 cert:(id)arg8 completion:(id /* block */)arg9;
- (struct CLLocationCoordinate2D { double x0; double x1; })debug2D;
- (void)_debugReportCustomLocation:(id)arg0 dataLevel:(long long)arg1 option:(id)arg2 cert:(id)arg3 completion:(id /* block */)arg4;
- (id)discreteTask;
- (void)_toggleLocationMonitorsWithLocationInfo:(id)arg0;
- (void)_triggerSubmitV2ObserverCallbackWithInfo:(id)arg0 logID:(id)arg1;
- (void)_subscribeToLocationUpdatesForTarget:(id)arg0 desiredAccuracy:(long long)arg1 distanceFilter:(double)arg2 dataLevel:(long long)arg3 uploadSource:(id)arg4 option:(id)arg5 cert:(id)arg6 reverseGeo:(BOOL)arg7 completion:(id /* block */)arg8;
- (id)lastLocationInfo;
- (void)monitorLocationChangeForTarget:(id)arg0 desiredLevel:(long long)arg1 completion:(id /* block */)arg2;
- (id)monitorMap;
- (id)headingTask;
- (void)setDebug2D:(struct CLLocationCoordinate2D { double x0; double x1; })arg0;
- (id)submitMap;
- (void)_checkLocationChangedWithLocationInfo:(id)arg0;
- (void)currentLocationAuthorizationAccuracy:(id /* block */)arg0;
- (void)requestWhenInUseAuthorizationWithCompletion:(id /* block */)arg0;
- (id)requestLocationWithCert:(id)arg0 completion:(id /* block */)arg1;
- (id)requestLocationWithDesiredAccuracy:(long long)arg0 cacheTime:(double)arg1 isUseCacheTime:(BOOL)arg2 timeout:(double)arg3 autoSubmit:(BOOL)arg4 dataLevel:(long long)arg5 completion:(id /* block */)arg6;
- (id)requestLocationWithDesiredAccuracy:(long long)arg0 cacheTime:(double)arg1 isUseCacheTime:(BOOL)arg2 timeout:(double)arg3 autoSubmit:(BOOL)arg4 dataLevel:(long long)arg5 uploadSource:(id)arg6 completion:(id /* block */)arg7;
- (void)cancelLocationRequest:(id)arg0;
- (void)subscribeToLocationUpdatesForTarget:(id)arg0 cert:(id)arg1 option:(id)arg2 completion:(id /* block */)arg3;
- (void)subscribeToLocationUpdatesForTarget:(id)arg0 desiredAccuracy:(long long)arg1 distanceFilter:(double)arg2 dataLevel:(long long)arg3 uploadSource:(id)arg4 option:(id)arg5 completion:(id /* block */)arg6;
- (void)unsubscribeToLocationUpdatesForTarget:(id)arg0;
- (id)lastLocationInfoWithCert:(id)arg0;
- (void)monitorLocationChangeForTarget:(id)arg0 cert:(id)arg1 completion:(id /* block */)arg2;
- (void)cancelLocationChangeMonitorForTarget:(id)arg0;
- (void)setCustomLatitude:(double)arg0 longitude:(double)arg1;
- (void)setDebugWifiMacAddress:(id)arg0;
- (void)setDebugWifiName:(id)arg0;
- (void)addSubmitObserverForKey:(id)arg0 callback:(id /* block */)arg1;
- (void)removeSubmitObserverForKey:(id)arg0;
- (void)setDiscreteTask:(id)arg0;
- (void)setContinueTask:(id)arg0;
- (void)setHeadingTask:(id)arg0;
- (void)setMonitorMap:(id)arg0;
- (void)setSubmitMap:(id)arg0;
- (id)init;
- (void).cxx_destruct;
- (void)requestTemporaryFullAccuracyAuthorizationWithPurposeKey:(id)arg0 completion:(id /* block */)arg1;
- (void)setDebug:(BOOL)arg0;
- (id)continueTask;
- (BOOL)isDebug;
- (void)setIsDebug:(BOOL)arg0;
- (BOOL)isDebugMode;

@end
