//
//     Generated by private class-dump
//

@class NSMapTable, NSString, UIView, IESLiveLinkmicCanvasView, IESLiveLinkmicCanvasViewModel;
@protocol IESLiveLinkmicCanvasViewManagerDataSource, IESLiveLinkmicCanvasLayoutProvider;

@interface IESLiveLinkmicCanvasViewManager : NSObject <IESLiveLinkmicSessionViewProvider, IESLiveLinkmicCanvasManager> {
    BOOL _cameraPreviewIsInAnimation;
    id<IESLiveLinkmicCanvasLayoutProvider> _layoutProvider;
    id<IESLiveLinkmicCanvasViewManagerDataSource> _dataSource;
    NSMapTable *_linkMicIDToRTCView;
    IESLiveLinkmicCanvasView *_canvasView;
    IESLiveLinkmicCanvasViewModel *_canvasViewModel;
    UIView *_cameraPreview;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _cameraPreviewOriginFrame;
}

@property (retain, nonatomic) IESLiveLinkmicCanvasView *canvasView;
@property (retain, nonatomic) IESLiveLinkmicCanvasViewModel *canvasViewModel;
@property (retain, nonatomic) NSMapTable *linkMicIDToRTCView;
@property (retain, nonatomic) UIView *cameraPreview;
@property (nonatomic) BOOL cameraPreviewIsInAnimation;
@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } cameraPreviewOriginFrame;
@property (weak, nonatomic) id<IESLiveLinkmicCanvasViewManagerDataSource> dataSource;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (retain, nonatomic) id<IESLiveLinkmicCanvasLayoutProvider> layoutProvider;

- (void)didSetAttachingDIContext;
- (id)cameraPreview;
- (void)setCameraPreview:(id)arg0;
- (BOOL)hasRTCSessionViewWithLinkmicID:(id)arg0;
- (void)setCameraCornerHidden:(BOOL)arg0;
- (id)sessionViewWithLinkmicId:(id)arg0;
- (id)linkMicIDToRTCView;
- (void)updateCameraPreview;
- (id)canvasViewModel;
- (void)resetCameraPreview;
- (void)updateSessionViews;
- (id)cameraEffectProvider;
- (BOOL)cameraPreviewIsInAnimation;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })cameraPreviewOriginFrame;
- (void)setCameraPreviewOriginFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0;
- (void)setCameraPreviewIsInAnimation:(BOOL)arg0;
- (void)addCameraPreviewIfNeeded;
- (void)updateWithLayoutProvider:(id)arg0;
- (id)currentCanvasWithLayoutProvider:(id)arg0;
- (void)insertRTCSessionView:(id)arg0 linkmicID:(id)arg1;
- (void)bindRTCSessionViewWithLinkmicID:(id)arg0 toUser:(id)arg1;
- (void)insertLinkMicUser:(id)arg0;
- (BOOL)onRecievedSEIResult:(id)arg0;
- (void)setLinkMicIDToRTCView:(id)arg0;
- (void)setCanvasViewModel:(id)arg0;
- (id)layoutProvider;
- (void)setLayoutProvider:(id)arg0;
- (id)canvasView;
- (void)setDataSource:(id)arg0;
- (id)dataSource;
- (void).cxx_destruct;
- (void)setCanvasView:(id)arg0;
- (id)currentCanvas;
- (void)clean;
- (void)clearCanvas;

@end
