//
//     Generated by private class-dump
//

@class UIColor, NSString, UIView, UITapGestureRecognizer;
@protocol AWETeenModePlayerProgressSliderDelegate;

@interface AWETeenModePlayerProgressSlider : UISlider <UIGestureRecognizerDelegate> {
    BOOL _isUsedForMain;
    BOOL _limitUpperActionArea;
    BOOL _clickable;
    BOOL _showPlayableTrack;
    BOOL _thumbAnimation;
    id<AWETeenModePlayerProgressSliderDelegate> _delegate;
    double _hotZoneMinimumY;
    double _hotZoneMaximumY;
    double _percentage;
    double _playableValue;
    UIColor *_playableTrackTintColor;
    double _trackHeight;
    double _thumbScaleRatio;
    UIView *_thumbView;
    UIView *_playableTrack;
    UITapGestureRecognizer *_tapGesture;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _lastBounds;
}

@property (retain, nonatomic) UIView *thumbView;
@property (retain, nonatomic) UIView *playableTrack;
@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } lastBounds;
@property (retain, nonatomic) UITapGestureRecognizer *tapGesture;
@property (weak, nonatomic) id<AWETeenModePlayerProgressSliderDelegate> delegate;
@property (nonatomic) double hotZoneMinimumY;
@property (nonatomic) double hotZoneMaximumY;
@property (nonatomic) double percentage;
@property (nonatomic) BOOL isUsedForMain;
@property (nonatomic) BOOL limitUpperActionArea;
@property (nonatomic) BOOL clickable;
@property (nonatomic) BOOL showPlayableTrack;
@property (nonatomic) double playableValue;
@property (retain, nonatomic) UIColor *playableTrackTintColor;
@property (nonatomic) double trackHeight;
@property (nonatomic) double thumbScaleRatio;
@property (nonatomic) BOOL thumbAnimation;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (void)setClickable:(BOOL)arg0;
- (void)setIsUsedForMain:(BOOL)arg0;
- (double)trackHeight;
- (void)setTrackHeight:(double)arg0;
- (BOOL)isUsedForMain;
- (double)hotZoneMinimumY;
- (BOOL)limitUpperActionArea;
- (double)hotZoneMaximumY;
- (void)setLimitUpperActionArea:(BOOL)arg0;
- (void)setHotZoneMinimumY:(double)arg0;
- (void)setHotZoneMaximumY:(double)arg0;
- (BOOL)clickable;
- (void)setShowPlayableTrack:(BOOL)arg0;
- (void)setThumbAnimation:(BOOL)arg0;
- (void)setThumbScaleRatio:(double)arg0;
- (void)setPlayableTrackTintColor:(id)arg0;
- (void)setThumbView:(id)arg0 size:(struct CGSize { double x0; double x1; })arg1;
- (void)p_bindAction;
- (void)p_updatePlayableTrackIfNeeded;
- (void)p_singleTapGesture:(id)arg0;
- (id)playableTrack;
- (BOOL)showPlayableTrack;
- (double)playableValue;
- (id)defaultThumbView;
- (struct CGSize { double x0; double x1; })defaultThumbSize;
- (void)p_valueChanged;
- (void)p_touchBegan;
- (void)p_touchEnded;
- (BOOL)thumbAnimation;
- (void)p_thumbHighlightedWithCompletion:(id /* block */)arg0;
- (void)p_thumbLowlightedWithCompletion:(id /* block */)arg0;
- (double)thumbScaleRatio;
- (void)setPlayableValue:(double)arg0;
- (id)playableTrackTintColor;
- (void)setPlayableTrack:(id)arg0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })trackRectForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0;
- (BOOL)pointInside:(struct CGPoint { double x0; double x1; })arg0 withEvent:(id)arg1;
- (id)init;
- (void).cxx_destruct;
- (void)setThumbImage:(id)arg0 forState:(unsigned long long)arg1;
- (id)thumbView;
- (BOOL)gestureRecognizer:(id)arg0 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0;
- (id)tapGesture;
- (id)delegate;
- (BOOL)gestureRecognizerShouldBegin:(id)arg0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })thumbRectForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0 trackRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg1 value:(float)arg2;
- (void)setDelegate:(id)arg0;
- (id)hitTest:(struct CGPoint { double x0; double x1; })arg0 withEvent:(id)arg1;
- (double)percentage;
- (void)setThumbView:(id)arg0;
- (void)setTapGesture:(id)arg0;
- (void)setPercentage:(double)arg0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })lastBounds;
- (void)setLastBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0;

@end
