//
//     Generated by private class-dump
//

@class NSString, IESLiveChatChannelLinkmicAPI, IESLiveChatChannelPermissionChecker, IESLiveChatChannelLinkmicRTCService, IESLiveCountTimer, RoomChannelInfo, IESLiveChatChannelLinkmicMonitorImpl, IESLiveChatChannelLinkmicUserManager, IESLiveLinkmicLinkerAudience;
@protocol IESLiveLinkmicLinkInviteContext, IESLiveCompoundSubscription, IESLiveRoomService, IESLiveLinkmicLinkServiceDelegate;

@interface IESLiveChatChannelLinkmicManager : NSObject <IESLiveLinkmicLinkerAudienceDataSource, IESLiveLinkmicLinkServiceInterface, IESLiveLinkmicLinkerDelegate, HTSLiveMessageSubscriber, IESLiveChatChannelMonitorDataSource, IESLiveAirPlayAction, IESLiveChatChannelLinkmicRouter> {
    BOOL _isRetryFecthingRTCInfo;
    BOOL _isActivate;
    id<IESLiveLinkmicLinkServiceDelegate> linkDelegate;
    RoomChannelInfo *_channelInfo;
    NSString *_rtcChannelID;
    id<IESLiveRoomService> _room;
    IESLiveLinkmicLinkerAudience *_linker;
    IESLiveChatChannelLinkmicAPI *_api;
    IESLiveChatChannelLinkmicRTCService *_rtcService;
    id<IESLiveCompoundSubscription> _disposable;
    id<IESLiveLinkmicLinkInviteContext> _inviteMessage;
    IESLiveChatChannelLinkmicUserManager *_userManager;
    IESLiveChatChannelPermissionChecker *_permissonChecker;
    IESLiveCountTimer *_checkLinkerStatusTmer;
    IESLiveChatChannelLinkmicMonitorImpl *_linkmicMonitor;
    id /* block */ _playbackVolumeChangeBlock;
}

@property (retain, nonatomic) RoomChannelInfo *channelInfo;
@property (retain, nonatomic) NSString *rtcChannelID;
@property (retain, nonatomic) id<IESLiveRoomService> room;
@property (retain, nonatomic) IESLiveLinkmicLinkerAudience *linker;
@property (retain, nonatomic) IESLiveChatChannelLinkmicAPI *api;
@property (retain, nonatomic) IESLiveChatChannelLinkmicRTCService *rtcService;
@property (retain, nonatomic) id<IESLiveCompoundSubscription> disposable;
@property (retain, nonatomic) id<IESLiveLinkmicLinkInviteContext> inviteMessage;
@property (retain, nonatomic) IESLiveChatChannelLinkmicUserManager *userManager;
@property (nonatomic) BOOL isRetryFecthingRTCInfo;
@property (nonatomic) BOOL isActivate;
@property (retain, nonatomic) IESLiveChatChannelPermissionChecker *permissonChecker;
@property (retain, nonatomic) IESLiveCountTimer *checkLinkerStatusTmer;
@property (retain, nonatomic) IESLiveChatChannelLinkmicMonitorImpl *linkmicMonitor;
@property (copy, nonatomic) id /* block */ playbackVolumeChangeBlock;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (weak, nonatomic) id<IESLiveLinkmicLinkServiceDelegate> linkDelegate;

+ (long long)currentPlaybackVolumeWithChannelID:(id)arg0;
+ (long long)currentPlayerMixVolume;

- (void)didSetAttachingDIContext;
- (id)userManager;
- (void)registerMessage;
- (void)setUserManager:(id)arg0;
- (void)setDisposable:(id)arg0;
- (id)disposable;
- (void)setChannelInfo:(id)arg0;
- (void)startConnectToDevice;
- (void)appDidActive;
- (void)appResignActive;
- (void)onAirplayClose;
- (BOOL)isCurrentUserLinked;
- (void)enterLinkmic;
- (void)enterLinkmicWithParams:(id)arg0 completion:(id /* block */)arg1;
- (void)leaveLinkmic;
- (void)leaveLinkmicWithParams:(id)arg0 completion:(id /* block */)arg1;
- (void)stopLinkmic;
- (void)stopLinkmicWithParams:(id)arg0 completion:(id /* block */)arg1;
- (void)applyLinkmicWithParams:(id)arg0 completion:(id /* block */)arg1;
- (void)cancelApplyLinkmicWithParams:(id)arg0 completion:(id /* block */)arg1;
- (void)inviteLinkmic:(id)arg0 params:(id)arg1 completion:(id /* block */)arg2;
- (void)cancelInviteLinkmic:(id)arg0 params:(id)arg1 completion:(id /* block */)arg2;
- (void)permitLinkmic:(id)arg0 params:(id)arg1 completion:(id /* block */)arg2;
- (void)refuseLinkmic:(id)arg0 params:(id)arg1 completion:(id /* block */)arg2;
- (void)replyLinkmic:(BOOL)arg0 params:(id)arg1 completion:(id /* block */)arg2;
- (void)muteAudio:(id)arg0 mute:(BOOL)arg1 reason:(id)arg2;
- (void)muteAudio:(id)arg0 mute:(BOOL)arg1 reason:(id)arg2 completion:(id /* block */)arg3;
- (void)muteCurrentUserAudio:(BOOL)arg0 reason:(id)arg1;
- (void)muteCurrentUserAudio:(BOOL)arg0 reason:(id)arg1 completion:(id /* block */)arg2;
- (void)muteAllRemoteAudio:(BOOL)arg0;
- (BOOL)isRemoteAudioMuted;
- (void)kickoutLinkmic:(id)arg0 params:(id)arg1 completion:(id /* block */)arg2;
- (id)linkedUserList;
- (id)waitingUserList;
- (BOOL)isCurrentUserEnterLinkmic;
- (BOOL)isCurrentUserWaiting;
- (BOOL)isAudioMixEnabled;
- (void)setPermissonChecker:(id)arg0;
- (BOOL)isRetryFecthingRTCInfo;
- (void)setIsRetryFecthingRTCInfo:(BOOL)arg0;
- (void)setupWithChannelInfo:(id)arg0;
- (void)setRtcChannelID:(id)arg0;
- (void)setRtcService:(id)arg0;
- (id)rtcService;
- (id)initWithChannelInfo:(id)arg0 diContext:(id)arg1;
- (void)setLinker:(id)arg0;
- (void)addNotificationsObserver;
- (BOOL)isActivate;
- (void)enableAudioProcess:(BOOL)arg0;
- (void)removeNotificationsObserver;
- (void)setIsActivate:(BOOL)arg0;
- (id)linker;
- (BOOL)isEnterLinkmic;
- (void)setPlaybackVolume:(long long)arg0 resetOrigin:(BOOL)arg1;
- (id /* block */)playbackVolumeChangeBlock;
- (void)setPlaybackVolumeChangeBlock:(id /* block */)arg0;
- (long long)currentPlaybackVolume;
- (void)enterLinkmicWithChannelInfo:(id)arg0 params:(id)arg1 completion:(id /* block */)arg2;
- (void)showToastIfNeeded:(id)arg0;
- (void)setupPlaybackVolume;
- (void)setupPlayerMixVolume;
- (void)leaveLinkmicWithChannelInfo:(id)arg0 params:(id)arg1 completion:(id /* block */)arg2;
- (void)stopLinkmicWithChannelInfo:(id)arg0 params:(id)arg1 completion:(id /* block */)arg2;
- (void)applyLinkmicWithChannelInfo:(id)arg0 params:(id)arg1 completion:(id /* block */)arg2;
- (void)doAfterAudioPermissionChecked:(id /* block */)arg0 failure:(id /* block */)arg1;
- (void)cancelApplyLinkmicWithChannelInfo:(id)arg0 params:(id)arg1 completion:(id /* block */)arg2;
- (void)inviteLinkmicWithChannelInfo:(id)arg0 user:(id)arg1 params:(id)arg2 completion:(id /* block */)arg3;
- (void)permitLinkmicWithChannelInfo:(id)arg0 user:(id)arg1 params:(id)arg2 completion:(id /* block */)arg3;
- (void)refuseLinkmicWithChannelInfo:(id)arg0 user:(id)arg1 params:(id)arg2 completion:(id /* block */)arg3;
- (void)replyLinkmicWithChannelInfo:(id)arg0 isAgree:(BOOL)arg1 params:(id)arg2 completion:(id /* block */)arg3;
- (id)rtcChannelID;
- (id)linkmicMonitor;
- (id)permissonChecker;
- (void)applyWithMode:(long long)arg0 seatIndex:(long long)arg1 params:(id)arg2 completion:(id /* block */)arg3;
- (void)startCheckLinkerStatus;
- (void)stopCheckLinkerStatus;
- (long long)chatChannelLinkmicStateWithLinkmicUserState:(long long)arg0;
- (void)setCheckLinkerStatusTmer:(id)arg0;
- (id)checkLinkerStatusTmer;
- (void)startCheckLinkerStatusCountDownTimerWithTimeInterval:(double)arg0;
- (id)userServiceWithLinker:(id)arg0;
- (id)linkServiceWithLinker:(id)arg0;
- (id)mediaServiceWithLinker:(id)arg0;
- (void)turnOnWithParams:(id)arg0 completion:(id /* block */)arg1;
- (void)turnOffWithParams:(id)arg0 completion:(id /* block */)arg1;
- (void)inviteWithSecUserID:(id)arg0 seatIndex:(long long)arg1 params:(id)arg2 completion:(id /* block */)arg3;
- (void)cancelInviteWithSecUserID:(id)arg0 params:(id)arg1 completion:(id /* block */)arg2;
- (void)replyInviteWithType:(unsigned long long)arg0 toSecUserId:(id)arg1 params:(id)arg2 completion:(id /* block */)arg3;
- (void)cancelApplyWithParams:(id)arg0 completion:(id /* block */)arg1;
- (void)replyApplyWithType:(unsigned long long)arg0 toSecUserId:(id)arg1 params:(id)arg2 completion:(id /* block */)arg3;
- (void)permitWithUserID:(id)arg0 secUserID:(id)arg1 params:(id)arg2 completion:(id /* block */)arg3;
- (void)joinChannel:(id)arg0 completion:(id /* block */)arg1;
- (void)kickoutWithUserID:(id)arg0 secUserID:(id)arg1 params:(id)arg2 completion:(id /* block */)arg3;
- (void)leaveChannel:(id)arg0 completion:(id /* block */)arg1;
- (void)silenceWithUserID:(id)arg0 secUserID:(id)arg1 isSilence:(BOOL)arg2 params:(id)arg3 completion:(id /* block */)arg4;
- (void)linkmicLinker:(id)arg0 onUserDidJoined:(id)arg1;
- (void)linkmicLinker:(id)arg0 onUserDidLeave:(id)arg1;
- (void)linkmicLinker:(id)arg0 onUserVolumeChanged:(id)arg1 volume:(long long)arg2;
- (void)linkmicLinker:(id)arg0 onTotalVolumeChanged:(long long)arg1;
- (void)linkmicLinker:(id)arg0 onUserMuteChanged:(id)arg1 mute:(BOOL)arg2;
- (void)linkmicLinker:(id)arg0 onCurrentUserMuteChanged:(BOOL)arg1;
- (void)onDidLinkmicUserListUpdatedWithLinker:(id)arg0;
- (void)linkmicLinker:(id)arg0 userStateDidChangedFrom:(long long)arg1 to:(long long)arg2;
- (void)linkmicLinker:(id)arg0 onReceivedInvite:(id)arg1 extraData:(id)arg2;
- (void)linkmicLinker:(id)arg0 onReceivedLinkCancelInvite:(id)arg1;
- (void)linkmicLinker:(id)arg0 onReceivedReply:(id)arg1 isAgreed:(BOOL)arg2;
- (BOOL)linkmicLinker:(id)arg0 onReceivedPermit:(id)arg1 isAgreed:(BOOL)arg2;
- (void)linkmicLinker:(id)arg0 onReceivedApply:(id)arg1;
- (void)linkmicLinker:(id)arg0 onReceivedKickout:(id)arg1;
- (void)linkmicLinker:(id)arg0 onQuitWithError:(id)arg1;
- (id)currentChannelInfo;
- (void)onPlaybackVolumeChanged:(id /* block */)arg0;
- (void)setPlayerMixVolume:(long long)arg0;
- (void)setLinkmicMonitor:(id)arg0;
- (void)willResignActive;
- (void).cxx_destruct;
- (void)deactivate;
- (void)setup;
- (void)reloadData;
- (void)activate;
- (id)currentUser;
- (void)dealloc;
- (id)room;
- (void)setRoom:(id)arg0;
- (void)messageReceived:(id)arg0;
- (id)inviteMessage;
- (void)setInviteMessage:(id)arg0;
- (id)linkDelegate;
- (void)setLinkDelegate:(id)arg0;
- (void)setPlaybackVolume:(long long)arg0;
- (id)channelInfo;
- (id)api;
- (void)clean;
- (void)setApi:(id)arg0;

@end
