//
//     Generated by private class-dump
//

@class NSNumber, NSString, AWEMusicDSPEventModel, NSObject, AWEMusicFeedViewModel;
@protocol MusicService;

@interface LunaPlayEventService : NSObject <AWEMusicServiceDelegate> {
    BOOL _isCustomUser;
    BOOL _eventProgressBarMove;
    BOOL _eventBackgroundPlay;
    BOOL _eventIsLyricMove;
    BOOL _lyricsMoved;
    BOOL _progressBarMoved;
    BOOL _prepareToPlay;
    BOOL _haveCalledMusicChanged;
    BOOL _isFirstMusic;
    BOOL _isMusicPlayComplete;
    BOOL _isPlayStarted;
    int _playActionTime;
    AWEMusicDSPEventModel *_eventModel;
    NSString *_page;
    NSString *_enterFrom;
    NSString *_enterMiniMethod;
    NSString *_from_item_id;
    NSString *_from_meta_song_id;
    NSString *_enterMethod;
    NSString *_previousPage;
    NSString *_playActionType;
    double _eventSingleDuration;
    double _eventTotalDuration;
    double _eventStarTime;
    double _musicChangeTime;
    double _playStartTime;
    double _playQualityStartTime;
    double _fstFrameDuration;
    AWEMusicFeedViewModel *_currentModel;
    NSObject<MusicService> *_service;
    double _playStallStartTime;
    NSString *_media_start_play_mode;
    NSString *_lastModelKey;
    double _background_dur;
    double _background_dur_start;
    long long _cacheSize;
    NSNumber *_volumeHandlerID;
    double _volumeChangedInterval;
    double _volumeStart;
    double _volumeMin;
    double _volumeMax;
    long long _stallAction;
    NSString *_playFinishType;
}

@property (nonatomic) double eventSingleDuration;
@property (nonatomic) double eventTotalDuration;
@property (nonatomic) double eventStarTime;
@property (nonatomic) double musicChangeTime;
@property (nonatomic) double playStartTime;
@property (nonatomic) double playQualityStartTime;
@property (nonatomic) double fstFrameDuration;
@property (nonatomic) BOOL eventProgressBarMove;
@property (nonatomic) BOOL eventBackgroundPlay;
@property (nonatomic) BOOL eventIsLyricMove;
@property (retain, nonatomic) AWEMusicFeedViewModel *currentModel;
@property (weak, nonatomic) NSObject<MusicService> *service;
@property (nonatomic) double playStallStartTime;
@property (nonatomic) BOOL lyricsMoved;
@property (nonatomic) BOOL progressBarMoved;
@property (copy, nonatomic) NSString *media_start_play_mode;
@property (nonatomic) BOOL prepareToPlay;
@property (nonatomic) int playActionTime;
@property (copy, nonatomic) NSString *lastModelKey;
@property (nonatomic) BOOL haveCalledMusicChanged;
@property (nonatomic) BOOL isFirstMusic;
@property (nonatomic) BOOL isMusicPlayComplete;
@property (nonatomic) double background_dur;
@property (nonatomic) double background_dur_start;
@property (nonatomic) long long cacheSize;
@property (retain, nonatomic) NSNumber *volumeHandlerID;
@property (nonatomic) double volumeChangedInterval;
@property (nonatomic) double volumeStart;
@property (nonatomic) double volumeMin;
@property (nonatomic) double volumeMax;
@property (nonatomic) BOOL isPlayStarted;
@property (nonatomic) long long stallAction;
@property (copy, nonatomic) NSString *playFinishType;
@property (nonatomic) BOOL isCustomUser;
@property (retain, nonatomic) AWEMusicDSPEventModel *eventModel;
@property (copy, nonatomic) NSString *page;
@property (copy, nonatomic) NSString *enterFrom;
@property (copy, nonatomic) NSString *enterMiniMethod;
@property (copy, nonatomic) NSString *from_item_id;
@property (copy, nonatomic) NSString *from_meta_song_id;
@property (copy, nonatomic) NSString *enterMethod;
@property (copy, nonatomic) NSString *previousPage;
@property (copy, nonatomic) NSString *playActionType;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (void)enterMusicScene;
+ (id)commonEventParams;
+ (id)audioCommonEventParams:(id)arg0 musicService:(id)arg1;
+ (id)playEventService:(id)arg0;
+ (id)networkType;

- (void)setEnterFrom:(id)arg0;
- (void)setEnterMethod:(id)arg0;
- (id)enterMethod;
- (id)enterFrom;
- (void)musicService:(id)arg0 didFinishedWithError:(id)arg1;
- (void)musicService:(id)arg0 playStatusChanged:(long long)arg1;
- (void)musicServiceReadyToDisPlay:(id)arg0;
- (void)musicServiceReadyToPlay:(id)arg0;
- (void)musicServiceDidPause:(id)arg0 pauseType:(long long)arg1;
- (void)musicServiceDidStop:(id)arg0 type:(long long)arg1;
- (void)musicServiceDidSeek:(id)arg0;
- (void)musicServiceMusicChanged:(id)arg0;
- (void)musicService:(id)arg0 didChangeStallState:(long long)arg1 actionType:(long long)arg2 reason:(unsigned long long)arg3;
- (void)musicServiceWillGoPrevFromRemote:(id)arg0;
- (void)musicServiceWillGoNextFromRemote:(id)arg0;
- (void)onWillPrev:(id)arg0;
- (void)onDidPrev:(id)arg0;
- (void)onWillNext:(id)arg0 isManual:(BOOL)arg1 isFinished:(BOOL)arg2;
- (void)onDidNext:(id)arg0 isManual:(BOOL)arg1 isFinished:(BOOL)arg2;
- (void)onWillUpdateTo:(id)arg0 service:(id)arg1 withoutPlay:(BOOL)arg2 method:(long long)arg3;
- (void)onDidUpdateTo:(id)arg0 service:(id)arg1 withoutPlay:(BOOL)arg2 method:(long long)arg3;
- (void)onManualAudioOver:(id)arg0;
- (id)initWithMusicService:(id)arg0;
- (id)backup_event_params;
- (void)restore_event_params:(id)arg0;
- (void)markLyricsMoved;
- (double)playStartTime;
- (void)setPlayStartTime:(double)arg0;
- (void)receiveNotes:(id)arg0;
- (BOOL)eventBackgroundPlay;
- (void)setEventBackgroundPlay:(BOOL)arg0;
- (id)playActionType;
- (void)setPlayActionType:(id)arg0;
- (id)playFinishType;
- (void)setPlayFinishType:(id)arg0;
- (void)setVolumeHandlerID:(id)arg0;
- (id)volumeHandlerID;
- (void)setIsPlayStarted:(BOOL)arg0;
- (BOOL)isPlayStarted;
- (id)enterMethod:(id)arg0;
- (void)calculateSingleDuration:(BOOL)arg0;
- (void)audioOver:(id)arg0;
- (void)eventClear;
- (void)setEventProgressBarMove:(BOOL)arg0;
- (void)setEventSingleDuration:(double)arg0;
- (void)setEventTotalDuration:(double)arg0;
- (void)setEventStarTime:(double)arg0;
- (void)setEventIsLyricMove:(BOOL)arg0;
- (double)eventStarTime;
- (double)eventSingleDuration;
- (double)eventTotalDuration;
- (BOOL)eventProgressBarMove;
- (BOOL)eventIsLyricMove;
- (id)eventModel;
- (void)setEventModel:(id)arg0;
- (void)setEnterMiniMethod:(id)arg0;
- (id)enterMiniMethod;
- (void)setPlayActionTime:(int)arg0;
- (void)updateCurrentVolume:(double)arg0;
- (void)audioFinishWithType:(id)arg0;
- (id)premiumType;
- (void)trackEvent:(id)arg0 params:(id)arg1 model:(id)arg2;
- (double)playQualityStartTime;
- (void)setFstFrameDuration:(double)arg0;
- (double)musicChangeTime;
- (void)setPrepareToPlay:(BOOL)arg0;
- (double)fstFrameDuration;
- (double)getCurrentSystemVolum;
- (void)setVolumeMax:(double)arg0;
- (void)setVolumeMin:(double)arg0;
- (void)setVolumeStart:(double)arg0;
- (BOOL)isFirstMusic;
- (void)reportAudioPlay;
- (void)setProgressBarMoved:(BOOL)arg0;
- (BOOL)haveCalledMusicChanged;
- (void)setIsFirstMusic:(BOOL)arg0;
- (void)setHaveCalledMusicChanged:(BOOL)arg0;
- (void)setMusicChangeTime:(double)arg0;
- (void)setPlayQualityStartTime:(double)arg0;
- (void)setIsMusicPlayComplete:(BOOL)arg0;
- (double)background_dur_start;
- (double)background_dur;
- (void)setBackground_dur:(double)arg0;
- (void)setBackground_dur_start:(double)arg0;
- (BOOL)progressBarMoved;
- (BOOL)isMusicPlayComplete;
- (double)volumeStart;
- (void)setPlayStallStartTime:(double)arg0;
- (void)setStallAction:(long long)arg0;
- (double)playStallStartTime;
- (long long)stallAction;
- (id)lastModelKey;
- (void)setLastModelKey:(id)arg0;
- (int)playActionTime;
- (double)volumeChangedInterval;
- (void)setVolumeChangedInterval:(double)arg0;
- (void)setFrom_item_id:(id)arg0;
- (void)setFrom_meta_song_id:(id)arg0;
- (id)from_meta_song_id;
- (id)from_item_id;
- (void)setIsCustomUser:(BOOL)arg0;
- (BOOL)isCustomUser;
- (void)setLyricsMoved:(BOOL)arg0;
- (void)setMedia_start_play_mode:(id)arg0;
- (id)playerCommonParams:(id)arg0;
- (void)reportTrackShow:(id)arg0;
- (BOOL)lyricsMoved;
- (id)p_playFinishActionOf:(long long)arg0;
- (id)p_playActionOf:(long long)arg0;
- (id)media_start_play_mode;
- (long long)cacheSize;
- (id)page;
- (void).cxx_destruct;
- (void)setService:(id)arg0;
- (void)setPage:(id)arg0;
- (double)volumeMin;
- (void)setCacheSize:(long long)arg0;
- (double)volumeMax;
- (void)dealloc;
- (id)service;
- (id)previousPage;
- (void)setPreviousPage:(id)arg0;
- (BOOL)prepareToPlay;
- (void)setCurrentModel:(id)arg0;
- (id)currentModel;
- (void)setupNotifications;

@end
