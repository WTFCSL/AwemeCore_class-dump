//
//     Generated by private class-dump
//

@class NSMapTable, NSTimer, NSString, NSDate, NSNumber;
@protocol HTSLiveAudienceWatchTimeDelegate;

@interface HTSLiveAudienceWatchTime : NSObject <IESLiveRoomWatchTimeService> {
    BOOL _invalid;
    BOOL _livePaused;
    BOOL _isPaused;
    BOOL _liveDurationTracked;
    id<HTSLiveAudienceWatchTimeDelegate> _delegate;
    NSMapTable *_observers;
    NSTimer *_timer;
    NSDate *_initialTime;
    NSDate *_livePlayTime;
    NSDate *_curCameraPlayTime;
    NSDate *_curContentPlayTime;
    NSDate *_playBackTime;
    double _playBackTotalDuration;
    NSDate *_lastOrientationChangedTime;
    NSDate *_curOrientationWatchTime;
    double _CurOrientationStopDuration;
    NSDate *_startTime;
    NSDate *_lastPauseTime;
    NSDate *_lastContinueTime;
    double _totalPauseDuration;
    NSDate *_stopTime;
    double _lastStopDuration;
    double _stopDuration;
    unsigned long long _minitTickTimes;
    NSTimer *_videoOverTimer;
    NSDate *_videoOverDate;
    NSDate *_enterBackgroundTime;
    NSNumber *_firstStopWatchingReason;
    unsigned long long _lastStopWatchingReason;
    NSDate *_liveDurationTrackTime;
    double _afterTrackStopDuration;
}

@property (retain, nonatomic) NSMapTable *observers;
@property (retain, nonatomic) NSTimer *timer;
@property (retain, nonatomic) NSDate *initialTime;
@property (retain, nonatomic) NSDate *livePlayTime;
@property (retain, nonatomic) NSDate *curCameraPlayTime;
@property (retain, nonatomic) NSDate *curContentPlayTime;
@property (retain, nonatomic) NSDate *playBackTime;
@property (nonatomic) double playBackTotalDuration;
@property (retain, nonatomic) NSDate *lastOrientationChangedTime;
@property (retain, nonatomic) NSDate *curOrientationWatchTime;
@property (nonatomic) double CurOrientationStopDuration;
@property (retain, nonatomic) NSDate *startTime;
@property (retain, nonatomic) NSDate *lastPauseTime;
@property (retain, nonatomic) NSDate *lastContinueTime;
@property (nonatomic, getter=isLivePaused) BOOL livePaused;
@property (nonatomic) double totalPauseDuration;
@property (retain, nonatomic) NSDate *stopTime;
@property (nonatomic) double lastStopDuration;
@property (nonatomic) double stopDuration;
@property (nonatomic) unsigned long long minitTickTimes;
@property (retain, nonatomic) NSTimer *videoOverTimer;
@property (retain, nonatomic) NSDate *videoOverDate;
@property (retain, nonatomic) NSDate *enterBackgroundTime;
@property (nonatomic) BOOL isPaused;
@property (retain, nonatomic) NSNumber *firstStopWatchingReason;
@property (readonly, nonatomic) long long watchDuration;
@property (nonatomic) unsigned long long lastStopWatchingReason;
@property (nonatomic) BOOL liveDurationTracked;
@property (retain, nonatomic) NSDate *liveDurationTrackTime;
@property (nonatomic) double afterTrackStopDuration;
@property (weak, nonatomic) id<HTSLiveAudienceWatchTimeDelegate> delegate;
@property (nonatomic) BOOL invalid;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (void)startTracker;
- (void)setLastPauseTime:(id)arg0;
- (id)lastPauseTime;
- (void)setEnterBackgroundTime:(id)arg0;
- (id)enterBackgroundTime;
- (long long)watchDuration;
- (id)firstStopWatchingReason;
- (void)setFirstStopWatchingReason:(id)arg0;
- (BOOL)isLivePaused;
- (id)playBackTime;
- (void)setPlayBackTime:(id)arg0;
- (double)stopDuration;
- (double)liveroomStartWatchingTime;
- (long long)timeSinceInitial;
- (void)setLastStopDuration:(double)arg0;
- (double)lastStopDuration;
- (void)setMinitTickTimes:(unsigned long long)arg0;
- (unsigned long long)minitTickTimes;
- (void)startLivePlay;
- (void)videoOverWillAppear;
- (void)stopWatchingFor:(unsigned long long)arg0;
- (void)stopWatchingFor:(unsigned long long)arg0 needTrackDuration:(BOOL)arg1;
- (void)videoOverDisAppear;
- (void)closeWatchingFor:(unsigned long long)arg0;
- (void)vsResumeWatching;
- (void)trackBackgroundTimeIfNeededWithEndReason:(unsigned long long)arg0;
- (void)updateInitialTime:(id)arg0;
- (void)recordWatchTime;
- (void)changeContentStream;
- (long long)liveDurationTrackDuration;
- (BOOL)isLiveDurationTracked;
- (void)changeCameraStream;
- (void)vsOrientationWillChange;
- (void)stopPlayBackTimer;
- (void)startPlayBackTimer;
- (void)setLivePaused:(BOOL)arg0;
- (void)setVideoOverDate:(id)arg0;
- (void)videoOverTrackStart;
- (id)videoOverTimer;
- (void)videoOverPartForKey:(id)arg0;
- (void)setVideoOverTimer:(id)arg0;
- (id)videoOverDate;
- (void)videoOverTrack:(double)arg0 forKey:(id)arg1;
- (void)setCurOrientationWatchTime:(id)arg0;
- (void)setCurCameraPlayTime:(id)arg0;
- (void)setCurContentPlayTime:(id)arg0;
- (void)setStopDuration:(double)arg0;
- (BOOL)liveDurationTracked;
- (double)afterTrackStopDuration;
- (void)setAfterTrackStopDuration:(double)arg0;
- (double)CurOrientationStopDuration;
- (void)setCurOrientationStopDuration:(double)arg0;
- (void)_trackVSOrientationDurationWithCloseLive:(BOOL)arg0;
- (id)curOrientationWatchTime;
- (id)lastOrientationChangedTime;
- (void)setLastOrientationChangedTime:(id)arg0;
- (id)lastContinueTime;
- (void)p_callCameraPlayTimeDelegate;
- (void)p_callCameraContentPlayTimeDelegate;
- (void)setLastContinueTime:(id)arg0;
- (void)vsPauseWatching;
- (void)setLastStopWatchingReason:(unsigned long long)arg0;
- (double)stayPageTracker;
- (void)setLiveDurationTracked:(BOOL)arg0;
- (void)setLiveDurationTrackTime:(id)arg0;
- (void)p_terminationWatching;
- (void)p_closeLiveWatching;
- (id)livePlayTime;
- (double)playBackTotalDuration;
- (void)setPlayBackTotalDuration:(double)arg0;
- (void)resetVideoOverTimer;
- (double)totalPauseDuration;
- (void)setTotalPauseDuration:(double)arg0;
- (unsigned long long)lastStopWatchingReason;
- (void)setLivePlayTime:(id)arg0;
- (id)curCameraPlayTime;
- (id)curContentPlayTime;
- (id)liveDurationTrackTime;
- (id)timer;
- (id)init;
- (void)resume;
- (void)setStartTime:(id)arg0;
- (void)startWatching;
- (void).cxx_destruct;
- (id)observers;
- (void)setInvalid:(BOOL)arg0;
- (void)setInitialTime:(id)arg0;
- (void)setObservers:(id)arg0;
- (id)delegate;
- (void)setTimer:(id)arg0;
- (id)startTime;
- (id)stopTime;
- (BOOL)isPaused;
- (void)addObserver:(id)arg0;
- (id)initialTime;
- (void)setDelegate:(id)arg0;
- (void)dealloc;
- (void)pause;
- (void)removeObserver:(id)arg0;
- (void)setIsPaused:(BOOL)arg0;
- (void)setStopTime:(id)arg0;
- (BOOL)invalid;

@end
