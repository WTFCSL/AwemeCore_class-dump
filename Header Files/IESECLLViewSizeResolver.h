//
//     Generated by private class-dump
//

@class NSString;

@interface IESECLLViewSizeResolver : NSObject <IESECLLViewLayoutContext> {
    struct unordered_map<std::string, IESECLLViewHolder *, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, IESECLLViewHolder *>>> { struct __hash_table<std::__hash_value_type<std::string, IESECLLViewHolder *>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, IESECLLViewHolder *>, std::hash<std::string>, std::equal_to<std::string>>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, IESECLLViewHolder *>, std::equal_to<std::string>, std::hash<std::string>>, std::allocator<std::__hash_value_type<std::string, IESECLLViewHolder *>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, IESECLLViewHolder *>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, IESECLLViewHolder *>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, IESECLLViewHolder *>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, IESECLLViewHolder *>, void *> *> *>>> { void **__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, IESECLLViewHolder *>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, IESECLLViewHolder *>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, IESECLLViewHolder *>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, IESECLLViewHolder *>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::string, IESECLLViewHolder *>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, IESECLLViewHolder *>, std::hash<std::string>, std::equal_to<std::string>>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, IESECLLViewHolder *>, std::equal_to<std::string>, std::hash<std::string>>> { float __value_; } __p3_; } __table_; } _viewMap;
    struct shared_ptr<ll::layout_context> { struct layout_context *__ptr_; struct __shared_weak_count *__cntrl_; } _layoutContext;
    struct shared_ptr<ll::layout_computer> { struct layout_computer *__ptr_; struct __shared_weak_count *__cntrl_; } _layoutComputer;
}

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (id)initWithBuilder:(id /* block */)arg0 dataSource:(id)arg1;
- (id)viewHolderForViewWithIdentifier:(id)arg0;
- (void).cxx_destruct;
- (id)initWithBuilder:(id /* block */)arg0;
- (struct CGSize { double x0; double x1; })sizeThatFits:(struct CGSize { double x0; double x1; })arg0;
- (id).cxx_construct;

@end
