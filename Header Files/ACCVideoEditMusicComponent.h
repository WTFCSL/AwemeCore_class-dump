//
//     Generated by private class-dump
//

@class UIView, NSString, ACCMusicPickerViewController, ACCVideoEditMusicViewModel, AWEBinding, ACCMusicVolumeViewModel, ACCMusicPlayerService, ACCEditMusicBizModule, ACCMusicPickerCreationBiz;
@protocol ACCEditorOneClickFilmingApplyDiffService, ACCMusicPanelViewProtocol, ACCMusicRecommendListRepositoryProtocol, UIViewControllerTransitioningDelegate, ACCEditClipV1ServiceProtocol, ACCVideoEditTipsService, ACCEditElementBindService, ACCSelectTemplateServiceProtocol, ACCEditFrameExtractServiceProtocol, ACCAutoCaptionServiceProtocol, ACCEditCutMusicServiceProtocol, ACCEditTransitionServiceProtocol, ACCRichTextEditorServiceProtocol, ACCDUXActionSheetProtocol, ACCAdvanceEditServiceProtocol, ACCEditScanServiceProtocol, ACCEditVoiceChangerServiceProtocol, ACCAIGCEffectServiceProtocol, ACCEditSpecialEffectServiceProtocol, ACCScrollStringButtonProtocol, ACCEditClipServiceProtocol, ACCSequenceEditServiceProtocol, ACCTrimCropEditServiceProtocol, ACCEditViewContainer, ACCEditVolumeServiceProtocol, ACCLyricsStickerServiceProtocol, ACCEditServiceProtocol, ACCMusicModelProtocol, ACCSequencePlayControlServiceProtocol;

@interface ACCVideoEditMusicComponent : ACCFeatureComponent <ACCEditMusicServiceDelegate, ACCPanelViewDelegate, ACCMusicCollectMessage, ACCEditSessionLifeCircleEvent, ACCDraftResourceRecoverProtocol, ACCVideoEditTipsServiceSubscriber, ACCSequenceEditServicePlayerSubscriber, ACCEditScanServiceSubscriber, ACCTrimCropEditorListener, ACCMusicPickerViewControllerPresenter, ACCMusicListBizHandler, ACCMusicPickerViewControllerDelegate, ACCEditFrameExtractSubscriber> {
    BOOL _shouldRefetchFavorites;
    BOOL _isMusicStoryCutEnable;
    BOOL _musicPanelHasBeenSelected;
    BOOL _musicIsOfflineFlag;
    BOOL _keyboardVisible;
    BOOL _didSensorialRenderFinished;
    BOOL _waitingToFetchFramesAndUPload;
    id<ACCMusicModelProtocol> selectedMusic;
    UIView<ACCMusicPanelViewProtocol> *_musicPanelView;
    id<ACCEditViewContainer> _viewContainer;
    UIView<ACCScrollStringButtonProtocol> *_selectMusicButton;
    id<ACCVideoEditTipsService> _tipsSerivce;
    id<ACCEditServiceProtocol> _editService;
    id<ACCEditCutMusicServiceProtocol> _cutMusicService;
    id<ACCLyricsStickerServiceProtocol> _lyricsStickerService;
    id<ACCEditVolumeServiceProtocol> _volumeService;
    id<ACCEditClipServiceProtocol> _clipService;
    id<ACCEditClipV1ServiceProtocol> _clipV1Service;
    id<ACCSelectTemplateServiceProtocol> _selectTemplateService;
    id<ACCEditTransitionServiceProtocol> _transitionService;
    id<ACCAdvanceEditServiceProtocol> _advanceEditService;
    id<ACCSequenceEditServiceProtocol> _sequenceEditService;
    id<ACCSequencePlayControlServiceProtocol> _sequencePlayControl;
    id<ACCDUXActionSheetProtocol> _actionSheet;
    ACCEditMusicBizModule *_musicBizModule;
    id<ACCTrimCropEditServiceProtocol> _trimCropService;
    id<UIViewControllerTransitioningDelegate> _transDelegate;
    UIView *_sequenceMediaContainerSuperView;
    ACCVideoEditMusicViewModel *_viewModel;
    id<ACCEditElementBindService> _editElementBindService;
    double _showMusicPanelTime;
    id<ACCRichTextEditorServiceProtocol> _richTextEditorService;
    id<ACCEditScanServiceProtocol> _editScanService;
    id<ACCAutoCaptionServiceProtocol> _autoCaptionService;
    id<ACCEditVoiceChangerServiceProtocol> _voiceChangerService;
    id<ACCAIGCEffectServiceProtocol> _aigcService;
    id<ACCEditFrameExtractServiceProtocol> _frameExtractService;
    id<ACCEditSpecialEffectServiceProtocol> _specialEffectService;
    id<ACCEditorOneClickFilmingApplyDiffService> _oneClickFilmingApplyDiffService;
    ACCMusicPlayerService *_musicPlayerService;
    id<ACCMusicRecommendListRepositoryProtocol> _recommendListRepository;
    ACCMusicPickerViewController *_musicPickerController;
    ACCMusicPickerCreationBiz *_musicPickerCreationBiz;
    AWEBinding *_extractFrameBinding;
    ACCMusicVolumeViewModel *_volumeViewModel;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _playerOriginalFrame;
}

@property (retain, nonatomic) UIView<ACCMusicPanelViewProtocol> *musicPanelView;
@property (weak, nonatomic) id<ACCEditViewContainer> viewContainer;
@property (retain, nonatomic) UIView<ACCScrollStringButtonProtocol> *selectMusicButton;
@property (weak, nonatomic) id<ACCVideoEditTipsService> tipsSerivce;
@property (weak, nonatomic) id<ACCEditServiceProtocol> editService;
@property (weak, nonatomic) id<ACCEditCutMusicServiceProtocol> cutMusicService;
@property (weak, nonatomic) id<ACCLyricsStickerServiceProtocol> lyricsStickerService;
@property (weak, nonatomic) id<ACCEditVolumeServiceProtocol> volumeService;
@property (weak, nonatomic) id<ACCEditClipServiceProtocol> clipService;
@property (weak, nonatomic) id<ACCEditClipV1ServiceProtocol> clipV1Service;
@property (weak, nonatomic) id<ACCSelectTemplateServiceProtocol> selectTemplateService;
@property (weak, nonatomic) id<ACCEditTransitionServiceProtocol> transitionService;
@property (weak, nonatomic) id<ACCAdvanceEditServiceProtocol> advanceEditService;
@property (weak, nonatomic) id<ACCSequenceEditServiceProtocol> sequenceEditService;
@property (weak, nonatomic) id<ACCSequencePlayControlServiceProtocol> sequencePlayControl;
@property (retain, nonatomic) id<ACCDUXActionSheetProtocol> actionSheet;
@property (retain, nonatomic) ACCEditMusicBizModule *musicBizModule;
@property (weak, nonatomic) id<ACCTrimCropEditServiceProtocol> trimCropService;
@property (retain, nonatomic) id<UIViewControllerTransitioningDelegate> transDelegate;
@property (weak, nonatomic) UIView *sequenceMediaContainerSuperView;
@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } playerOriginalFrame;
@property (retain, nonatomic) ACCVideoEditMusicViewModel *viewModel;
@property (nonatomic) BOOL shouldRefetchFavorites;
@property (nonatomic) BOOL isMusicStoryCutEnable;
@property (nonatomic) BOOL musicPanelHasBeenSelected;
@property (weak, nonatomic) id<ACCEditElementBindService> editElementBindService;
@property (nonatomic) BOOL musicIsOfflineFlag;
@property (nonatomic) BOOL keyboardVisible;
@property (nonatomic) double showMusicPanelTime;
@property (weak, nonatomic) id<ACCRichTextEditorServiceProtocol> richTextEditorService;
@property (weak, nonatomic) id<ACCEditScanServiceProtocol> editScanService;
@property (weak, nonatomic) id<ACCAutoCaptionServiceProtocol> autoCaptionService;
@property (weak, nonatomic) id<ACCEditVoiceChangerServiceProtocol> voiceChangerService;
@property (weak, nonatomic) id<ACCAIGCEffectServiceProtocol> aigcService;
@property (weak, nonatomic) id<ACCEditFrameExtractServiceProtocol> frameExtractService;
@property (weak, nonatomic) id<ACCEditSpecialEffectServiceProtocol> specialEffectService;
@property (weak, nonatomic) id<ACCEditorOneClickFilmingApplyDiffService> oneClickFilmingApplyDiffService;
@property (retain, nonatomic) ACCMusicPlayerService *musicPlayerService;
@property (nonatomic) BOOL didSensorialRenderFinished;
@property (nonatomic) BOOL waitingToFetchFramesAndUPload;
@property (retain, nonatomic) id<ACCMusicRecommendListRepositoryProtocol> recommendListRepository;
@property (retain, nonatomic) ACCMusicPickerViewController *musicPickerController;
@property (retain, nonatomic) ACCMusicPickerCreationBiz *musicPickerCreationBiz;
@property (retain, nonatomic) AWEBinding *extractFrameBinding;
@property (retain, nonatomic) ACCMusicVolumeViewModel *volumeViewModel;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (retain, nonatomic) id<ACCMusicModelProtocol> selectedMusic;

+ (void)regenerateTheNecessaryResourcesForPublishViewModel:(id)arg0 completion:(id /* block */)arg1;

- (void)bindViewModel;
- (void)componentDidMount;
- (void)componentDidUnmount;
- (void)componentDidAppear;
- (void)componentWillDisappear;
- (unsigned long long)preferredLoadPhase;
- (void)componentWillAppear;
- (id)transitionService;
- (void)setTransitionService:(id)arg0;
- (id)editService;
- (void)loadComponentView;
- (void)setEditService:(id)arg0;
- (void)bindServices:(id)arg0;
- (void)panelViewController:(id)arg0 willShowPanelView:(id)arg1;
- (void)panelViewController:(id)arg0 didShowPanelView:(id)arg1;
- (void)panelViewController:(id)arg0 willDismissPanelView:(id)arg1;
- (void)panelViewController:(id)arg0 didDismissPanelView:(id)arg1;
- (void)closeSearchPage;
- (id)sequenceEditService;
- (void)setSequenceEditService:(id)arg0;
- (id)stickerService;
- (id)serviceBindingArray;
- (void)firstRenderWithEditService:(id)arg0;
- (void)sensorialRenderWithEditService:(id)arg0;
- (void)setMusicBizModule:(id)arg0;
- (id)musicBizModule;
- (id)tipsSerivce;
- (id)frameExtractService;
- (id)barItem;
- (void)didToggleMusicCollectStateWithMusicId:(id)arg0 collect:(BOOL)arg1 sender:(id)arg2;
- (void)updateChallenge;
- (void)p_initialForLVAudioFrame;
- (void)initializePitayaMusicRelatedAlgorithms;
- (void)setSelectedMusic:(id)arg0;
- (void)trackPitayaPredictResultForMusicPanelPreloadMusicList;
- (void)refreshVideoEditMusicRelatedUI;
- (BOOL)shouldRefetchFavorites;
- (void)setShouldRefetchFavorites:(BOOL)arg0;
- (void)checkNeedDeselectMusic;
- (void)updateMusicButton;
- (void)showMusicSelectPanelView;
- (id)musicPickerController;
- (id)musicPanelView;
- (id)cutMusicService;
- (id)clipService;
- (BOOL)showMusicFeatureDisableToast;
- (id)volumeService;
- (id)clipV1Service;
- (void)p_deselectMusic;
- (id)selectMusicButton;
- (BOOL)preconditionDisablePlayMusic;
- (id)selectTemplateService;
- (void)updateSelectMusicTitle;
- (void)refreshMusicRelatedButton;
- (void)selectMusicWithType:(unsigned long long)arg0;
- (void)selectMusicInPanel;
- (void)selectMusicInLibrary;
- (void)showMusicPanel;
- (void)setMusicPanelView:(id)arg0;
- (void)dismissMusicPanelWithClip:(BOOL)arg0;
- (void)doDeselectMusic:(id)arg0 autoPlay:(BOOL)arg1;
- (void)doSelectMusic:(id)arg0 error:(id)arg1;
- (id)transDelegate;
- (id)selectedMusic;
- (double)showMusicPanelTime;
- (void)setShowMusicPanelTime:(double)arg0;
- (void)setMusicPanelHasBeenSelected:(BOOL)arg0;
- (void)triggleSelectMusic;
- (void)p_commonCloseButtonOnMusicButtonAciton;
- (BOOL)musicPanelHasBeenSelected;
- (void)selectMusicButtonClicked:(id)arg0;
- (void)didClickCloseButtonOnMusicButton:(id)arg0;
- (id)recommendListRepository;
- (void)setMusicPickerController:(id)arg0;
- (void)setupMusicPickerCreationBiz;
- (id)musicPickerCreationBiz;
- (void)setMusicPickerCreationBiz:(id)arg0;
- (BOOL)allowApplyAutoMusicWithEditMusicService:(id)arg0;
- (void)tipService:(id)arg0 didTappedImageBubbleWithFunctionType:(long long)arg1;
- (void)didFinishFrameExtract;
- (void)sequenceEditService:(id)arg0 changedWithAddedIndexSet:(id)arg1 deletedIndexSet:(id)arg2;
- (id)viewControllerPresentMusicPicker:(id)arg0;
- (id)panelViewControllerPresentMusicPicker:(id)arg0;
- (void)musicListClipMusic:(id)arg0;
- (void)musicListSelectMusicPlayable:(id)arg0 withUrl:(id)arg1;
- (void)musicListSelectMusicDownloaded:(id)arg0 withUrl:(id)arg1;
- (void)musicListDeselectMusic:(id)arg0;
- (BOOL)musicListShouldEnableClipForMusic:(id)arg0;
- (void)picker:(id)arg0 didFinishPickingMusic:(id)arg1;
- (void)pickerShowMusicSearch:(id)arg0;
- (id)sequencePlayControl;
- (void)dismissPicker:(id)arg0;
- (void)setSelectMusicButton:(id)arg0;
- (void)setTipsSerivce:(id)arg0;
- (void)setCutMusicService:(id)arg0;
- (void)setClipService:(id)arg0;
- (void)setClipV1Service:(id)arg0;
- (void)setVolumeService:(id)arg0;
- (void)setSelectTemplateService:(id)arg0;
- (void)setFrameExtractService:(id)arg0;
- (void)setSequencePlayControl:(id)arg0;
- (void)setTransDelegate:(id)arg0;
- (void)setRecommendListRepository:(id)arg0;
- (void)p_handleOfflineMusicIfNeeded;
- (void)updateMusicButtonLayout;
- (unsigned long long)scrollStringAnimationType;
- (id)voiceChangerService;
- (void)setVoiceChangerService:(id)arg0;
- (void)didExitTrimCropEditor;
- (id)specialEffectService;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })playerOriginalFrame;
- (void)setSequenceMediaContainerSuperView:(id)arg0;
- (void)setPlayerOriginalFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0;
- (id)sequenceMediaContainerSuperView;
- (void)setSpecialEffectService:(id)arg0;
- (id)advanceEditService;
- (void)setAdvanceEditService:(id)arg0;
- (id)richTextEditorService;
- (void)setRichTextEditorService:(id)arg0;
- (id)p_reactedBGMAsset;
- (BOOL)buttonEnable;
- (id)lyricsStickerService;
- (void)setLyricsStickerService:(id)arg0;
- (id)editElementBindService;
- (void)setEditElementBindService:(id)arg0;
- (id)oneClickFilmingApplyDiffService;
- (void)setOneClickFilmingApplyDiffService:(id)arg0;
- (void)clickScanStickerOpenSearchPage;
- (void)updateVideoMainTrackDuration:(double)arg0;
- (id)aigcService;
- (void)setAigcService:(id)arg0;
- (void)trackAdvanceEditTipUnselectMusicEventForPreAction:(BOOL)arg0;
- (void)didSelectToolBarModel:(id)arg0;
- (id)volumeViewModel;
- (void)setVolumeViewModel:(id)arg0;
- (void)setupSelectedMusicBinding;
- (id)autoCaptionService;
- (void)setAutoCaptionService:(id)arg0;
- (id)trimCropService;
- (void)setTrimCropService:(id)arg0;
- (id)editScanService;
- (void)setEditScanService:(id)arg0;
- (void)setMusicPlayerService:(id)arg0;
- (id)musicPlayerService;
- (void)configSelectMusicButtonIfNeeded;
- (void)workspaceDidChange:(long long)arg0;
- (void)initializeBgm;
- (void)setExtractFrameBinding:(id)arg0;
- (id)extractFrameBinding;
- (void)preloadRecommendListIfNeeded;
- (void)observeRepoMusicMusicChange;
- (void)handleOfflineMusic;
- (void)handleFirstRenderFetchFramesAndUPloadTask;
- (void)setWaitingToFetchFramesAndUPload:(BOOL)arg0;
- (BOOL)didSensorialRenderFinished;
- (void)setDidSensorialRenderFinished:(BOOL)arg0;
- (BOOL)waitingToFetchFramesAndUPload;
- (void)setMusicIsOfflineFlag:(BOOL)arg0;
- (void)showRecommendedAIMusicBubble;
- (BOOL)selectMusicbuttonEnable;
- (void)changeMusicWithMusicId:(id)arg0;
- (void)p_syncGenericTemplateData:(id)arg0;
- (void)p_syncOneClickFilmTemplateData:(id)arg0;
- (void)removeMusicIfNeeded;
- (void)switchMusicPlayer;
- (void)p_syncTemplateData:(id)arg0;
- (void)resetMainTrackDuration:(double)arg0;
- (void)updateVoiceChangerIfNeeded;
- (BOOL)p_shouldShowAdditionalActionButtonOnMusicButton;
- (void)setIsMusicStoryCutEnable:(BOOL)arg0;
- (BOOL)isMusicStoryCutEnable;
- (BOOL)musicIsOfflineFlag;
- (void)selectMusicWithType:(unsigned long long)arg0 source:(unsigned long long)arg1;
- (void)selectMusicInLibrary:(unsigned long long)arg0;
- (void)handleAdvanceEditTipDeleteAction:(BOOL)arg0;
- (void)showAIMusicRecommedBubble:(id)arg0 forView:(id)arg1 inDirection:(long long)arg2 music:(id)arg3;
- (void)updateMusicButton:(BOOL)arg0;
- (id)musicCoverButtonIcon;
- (BOOL)p_shouldConfigSelectMusicUI;
- (void)refreshMusicRelatedButton:(BOOL)arg0;
- (void)refreshVideoEditMusicRelatedUI:(BOOL)arg0;
- (void)keyboardDidHide:(id)arg0;
- (void).cxx_destruct;
- (id)containerViewController;
- (void)keyboardWillShow:(id)arg0;
- (BOOL)keyboardVisible;
- (void)setViewModel:(id)arg0;
- (id)viewModel;
- (void)dealloc;
- (void)setKeyboardVisible:(BOOL)arg0;
- (id)volumeView;
- (void)updateUIWithState:(id)arg0;
- (id)viewContainer;
- (void)setViewContainer:(id)arg0;
- (void)setActionSheet:(id)arg0;
- (id)actionSheet;
- (void)showMusicPicker;

@end
