//
//     Generated by private class-dump
//

@class IESMMTranscoderParam, NSString, HTSVideoData, NSArray, IESMMImageMovieInfo, NSMutableDictionary, NSDictionary, IESMMCanvasConfig, IESVideoAddEdgeData, AVAsset;

@interface ACCVEVideoData : NSObject <ACCEditVideoDataProtocol> {
    BOOL _forbidChangeCanvasSize;
    NSString *_draftFolder;
    HTSVideoData *_videoData;
    NSString *_mattingAudioPath;
}

@property (copy, nonatomic) NSString *mattingAudioPath;
@property (readonly, nonatomic) HTSVideoData *videoData;
@property (readonly, nonatomic) BOOL useVEPublic;
@property (nonatomic) BOOL willSeekToRealFrame;
@property (copy, nonatomic) NSString *identifier;
@property (nonatomic) BOOL disableMetadataInfo;
@property (readonly, nonatomic) double totalVideoDuration;
@property (readonly, nonatomic) double currentTotalDuration;
@property (readonly, nonatomic) double totalDurationWithTimeMachine;
@property (nonatomic) BOOL isFastImport;
@property (nonatomic) BOOL isRecordFromCamera;
@property (nonatomic) BOOL isMicMuted;
@property (copy, nonatomic) NSDictionary *movieInputFillType;
@property (nonatomic) double maxTrackDuration;
@property (copy, nonatomic) NSDictionary *dataInfo;
@property (nonatomic) struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } importTransform;
@property (copy, nonatomic) NSDictionary *metaRecordInfo;
@property (readonly, nonatomic) BOOL isHDR;
@property (readonly, nonatomic) double totalVideoDurationAddTimeMachine;
@property (retain, nonatomic) IESMMTranscoderParam *transParam;
@property (nonatomic) BOOL useAVAssetReader;
@property (copy, nonatomic) NSDictionary *videoCurves;
@property (retain, nonatomic) AVAsset *videoHeader;
@property (copy, nonatomic) NSArray *videoAssets;
@property (copy, nonatomic) NSArray *subTrackVideoAssets;
@property (nonatomic) int previewFrameRate;
@property (copy, nonatomic) NSDictionary *videoTimeScaleInfo;
@property (copy, nonatomic) NSArray *audioAssets;
@property (copy, nonatomic) NSArray *bgAudioAssets;
@property (nonatomic) double totalBGAudioDuration;
@property (nonatomic) BOOL isDetectMode;
@property (readonly, nonatomic) BOOL hasRecordAudio;
@property (copy, nonatomic) NSDictionary *audioSoundFilterInfo;
@property (copy, nonatomic) NSDictionary *videoSoundFilterInfo;
@property (readonly, nonatomic) BOOL videoAssetsAllHaveAudioTrack;
@property (readonly, nonatomic) BOOL videoAssetsAllMuted;
@property (retain, nonatomic) NSString *musicID;
@property (copy, nonatomic) NSDictionary *assetRotationsInfo;
@property (copy, nonatomic) NSDictionary *assetTransformInfo;
@property (retain, nonatomic) AVAsset *endingWaterMarkAudio;
@property (copy, nonatomic) NSDictionary *volumnInfo;
@property (copy, nonatomic) NSDictionary *bingoVideoKeys;
@property (copy, nonatomic) NSArray *pcmDataPaths;
@property (copy, nonatomic) NSDictionary *videoTimeClipInfo;
@property (copy, nonatomic) NSDictionary *audioTimeClipInfo;
@property (nonatomic) long long studio_videoClipResolveType;
@property (nonatomic) BOOL notSupportCrossplat;
@property (nonatomic) BOOL crossplatCompile;
@property (nonatomic) BOOL crossplatInput;
@property (nonatomic) BOOL crossplatMultiTrack;
@property (nonatomic) BOOL enableVideoAnimation;
@property (copy, nonatomic) NSDictionary *canvasInfo;
@property (retain, nonatomic) NSMutableDictionary *textureVerticesMap;
@property (copy, nonatomic) NSDictionary *canvasConfigsMap;
@property (copy, nonatomic) NSDictionary *templateConfigsMap;
@property (retain, nonatomic) IESMMCanvasConfig *preferCanvasConfig;
@property (nonatomic) BOOL forbidChangeCanvasSize;
@property (nonatomic) struct CGSize { double x0; double x1; } canvasSize;
@property (nonatomic) struct CGSize { double x0; double x1; } normalizeSize;
@property (nonatomic) long long contentSource;
@property (copy, nonatomic) NSDictionary *movieAnimationType;
@property (copy, nonatomic) id /* block */ effectFilterPathBlock;
@property (nonatomic) long long effect_timeMachineType;
@property (retain, nonatomic) AVAsset *effect_reverseAsset;
@property (readonly, copy, nonatomic) NSArray *effect_timeRange;
@property (copy, nonatomic) NSArray *effect_operationTimeRange;
@property (nonatomic) double effect_timeMachineBeginTime;
@property (nonatomic) double effect_newTimeMachineDuration;
@property (readonly, nonatomic) double effect_videoDuration;
@property (readonly, copy, nonatomic) NSDictionary *effect_dictionary;
@property (copy, nonatomic) NSDictionary *extraInfo;
@property (retain, nonatomic) NSString *extraMetaInfo;
@property (copy, nonatomic) NSDictionary *accelerateInfo;
@property (readonly, copy, nonatomic) NSString *getAudioDataMD5;
@property (readonly, copy, nonatomic) NSString *getReverseVideoDataMD5;
@property (copy, nonatomic) NSDictionary *photoAssetsInfo;
@property (copy, nonatomic) NSDictionary *photoAssetsImageInfo;
@property (copy, nonatomic) NSArray *photoMovieAssets;
@property (readonly, nonatomic) BOOL isNewImageMovie;
@property (retain, nonatomic) IESMMImageMovieInfo *imageMovieInfo;
@property (copy, nonatomic) NSArray *infoStickers;
@property (retain, nonatomic) IESVideoAddEdgeData *infoStickerAddEdgeData;
@property (copy, nonatomic) NSString *draftFolder;
@property (readonly, copy, nonatomic) NSString *cacheDirPath;
@property (retain) NSMutableDictionary *urlDict;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (id)videoDataWithDraftFolder:(id)arg0;
+ (id)videoDataWithVideoData:(id)arg0 draftFolder:(id)arg1;
+ (id)videoDataWithVideoAsset:(id)arg0 draftFolder:(id)arg1;

- (void)setExtraInfo:(id)arg0;
- (id)infoStickers;
- (void)setSticker:(long long)arg0 offsetX:(double)arg1 offsetY:(double)arg2;
- (void)setInfoStickers:(id)arg0;
- (id)videoData;
- (id)musicID;
- (BOOL)isFastImport;
- (void)setDataInfo:(id)arg0;
- (id)urlDict;
- (void)setUrlDict:(id)arg0;
- (double)maxTrackDuration;
- (void)setMusicID:(id)arg0;
- (id)draftFolder;
- (void)setDraftFolder:(id)arg0;
- (id)accelerateInfo;
- (void)setAccelerateInfo:(id)arg0;
- (BOOL)useVEPublic;
- (BOOL)isRecordFromCamera;
- (void)setIsRecordFromCamera:(BOOL)arg0;
- (id)imageMovieInfo;
- (void)setImageMovieInfo:(id)arg0;
- (double)totalVideoDuration;
- (id)transParam;
- (void)setTransParam:(id)arg0;
- (id)extraMetaInfo;
- (double)totalVideoDurationAddTimeMachine;
- (void)effect_cleanOperation;
- (void)effect_reCalculateEffectiveTimeRange;
- (double)effect_currentTimeMachineDurationWithType:(long long)arg0;
- (void)setMetaData:(id)arg0 recordInfo:(long long)arg1 MD5:(id)arg2 needStore:(BOOL)arg3;
- (BOOL)isNewImageMovie;
- (void)setImageMovieInfoWithUIImages:(id)arg0 imageShowDuration:(id)arg1;
- (id)infoStickerAddEdgeData;
- (void)setInfoStickerAddEdgeData:(id)arg0;
- (double)totalBGAudioDuration;
- (void)setIsFastImport:(BOOL)arg0;
- (BOOL)isMicMuted;
- (void)setIsMicMuted:(BOOL)arg0;
- (id)metaRecordInfo;
- (void)setMetaRecordInfo:(id)arg0;
- (id)dataInfo;
- (id)preferCanvasConfig;
- (void)setPreferCanvasConfig:(id)arg0;
- (struct CGSize { double x0; double x1; })normalizeSize;
- (void)setNormalizeSize:(struct CGSize { double x0; double x1; })arg0;
- (BOOL)notSupportCrossplat;
- (void)setNotSupportCrossplat:(BOOL)arg0;
- (BOOL)crossplatCompile;
- (void)setCrossplatCompile:(BOOL)arg0;
- (BOOL)crossplatInput;
- (void)setCrossplatInput:(BOOL)arg0;
- (BOOL)crossplatMultiTrack;
- (void)setCrossplatMultiTrack:(BOOL)arg0;
- (BOOL)disableMetadataInfo;
- (void)setDisableMetadataInfo:(BOOL)arg0;
- (void)setExtraMetaInfo:(id)arg0;
- (BOOL)isDetectMode;
- (void)setIsDetectMode:(BOOL)arg0;
- (id)effect_timeRange;
- (id)effect_operationTimeRange;
- (id)effect_reverseAsset;
- (void)setEffect_reverseAsset:(id)arg0;
- (id)effect_dictionary;
- (double)effect_videoDuration;
- (id)videoHeader;
- (void)setVideoHeader:(id)arg0;
- (id)endingWaterMarkAudio;
- (void)setEndingWaterMarkAudio:(id)arg0;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })importTransform;
- (void)setImportTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })arg0;
- (id)volumnInfo;
- (id)bgAudioAssets;
- (id)videoSoundFilterInfo;
- (id)audioSoundFilterInfo;
- (id)addVideoWithAsset:(id)arg0;
- (id)canvasConfigsMap;
- (id)videoAssets;
- (id)subTrackVideoAssets;
- (id)photoAssetsInfo;
- (id)videoTimeClipInfo;
- (id /* block */)effectFilterPathBlock;
- (void)removeVideoAsset:(id)arg0;
- (id)assetTransformInfo;
- (id)videoCurves;
- (id)canvasInfo;
- (id)addSubTrackWithAsset:(id)arg0;
- (void)setVideoAssets:(id)arg0;
- (id)videoTimeScaleInfo;
- (id)movieAnimationType;
- (void)setMaxTrackDuration:(double)arg0;
- (void)clearReverseAsset;
- (void)muteMicrophone:(BOOL)arg0;
- (id)timeMachine;
- (id)movieInputFillType;
- (id)bingoVideoKeys;
- (id)assetRotationsInfo;
- (id)photoAssetsImageInfo;
- (id)photoMovieAssets;
- (id)audioTimeClipInfo;
- (void)setPhotoAssetsInfo:(id)arg0;
- (double)totalDurationWithTimeMachine;
- (id)getAudioDataMD5;
- (id)getReverseVideoDataMD5;
- (void)moveVideoAssetFromIndex:(long long)arg0 toIndex:(long long)arg1;
- (id)pcmDataPaths;
- (void)setPcmDataPaths:(id)arg0;
- (void)setPhotoAssetsImageInfo:(id)arg0;
- (void)setAssetRotationsInfo:(id)arg0;
- (double)currentTotalDuration;
- (void)setMovieAnimationType:(id)arg0;
- (void)setMovieInputFillType:(id)arg0;
- (void)setPhotoMovieAssets:(id)arg0;
- (void)setAssetTransformInfo:(id)arg0;
- (void)setVideoCurves:(id)arg0;
- (void)setBingoVideoKeys:(id)arg0;
- (void)setBgAudioAssets:(id)arg0;
- (BOOL)useAVAssetReader;
- (void)setUseAVAssetReader:(BOOL)arg0;
- (struct { long long x0; int x1; unsigned int x2; long long x3; })getVideoDuration:(id)arg0;
- (void)setMetaData:(id)arg0 recordInfo:(long long)arg1;
- (void)removeAllVideoAsset;
- (void)removeAudioAsset:(id)arg0;
- (void)removeAllAudioAsset;
- (void)addAudioWithAsset:(id)arg0;
- (void)addAudioWithAssets:(id)arg0;
- (void)clearAllEffectAndTimeMachine;
- (BOOL)hasRecordAudio;
- (void)setVolumeForVideo:(float)arg0;
- (void)setVolumeForAudio:(float)arg0;
- (void)removeAudioTimeClipInfoWithAsset:(id)arg0;
- (void)addAudioTimeClipInfos:(id)arg0;
- (void)setCanvasInfo:(id)arg0;
- (void)setTextureVerticesMap:(id)arg0;
- (void)setCanvasConfigsMap:(id)arg0;
- (void)setEffectFilterPathBlock:(id /* block */)arg0;
- (id)textureVerticesMap;
- (BOOL)enableVideoAnimation;
- (void)setEnableVideoAnimation:(BOOL)arg0;
- (struct { struct { long long x0; int x1; unsigned int x2; long long x3; } x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; })videoTimeClipRangeForAsset:(id)arg0;
- (void)setSubTrackVideoAssets:(id)arg0;
- (void)setAudioAssets:(id)arg0;
- (void)setVideoTimeClipInfo:(id)arg0;
- (void)setVideoTimeScaleInfo:(id)arg0;
- (void)setAudioTimeClipInfo:(id)arg0;
- (void)setVolumnInfo:(id)arg0;
- (double)videoRateForAsset:(id)arg0;
- (struct { struct { long long x0; int x1; unsigned int x2; long long x3; } x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; })audioTimeClipRangeForAsset:(id)arg0;
- (id)volumeForAsset:(id)arg0;
- (id)initWithVideoData:(id)arg0 draftFolder:(id)arg1;
- (void)updateCanvasInfoWithCanvasSource:(id)arg0 asset:(id)arg1;
- (void)acc_convertCanvasSizeFromSize:(struct CGSize { double x0; double x1; })arg0 toSize:(struct CGSize { double x0; double x1; })arg1;
- (void)awe_setMutedWithAsset:(id)arg0;
- (void)updateAudioTimeClipInfoWithClipRange:(id)arg0 asset:(id)arg1;
- (long long)effect_timeMachineType;
- (void)updateVolumeInfoWithVolumes:(id)arg0 asset:(id)arg1;
- (void)updateVideoTimeClipInfoWithClipRange:(id)arg0 asset:(id)arg1;
- (void)updateAssetRotationsInfoWithRotateType:(id)arg0 asset:(id)arg1;
- (long long)studio_videoClipResolveType;
- (void)setStudio_videoClipResolveType:(long long)arg0;
- (BOOL)videoAssetsAllMuted;
- (void)updateMovieInputFillTypeWithType:(id)arg0 asset:(id)arg1;
- (id)acc_videoAssetAtIndex:(unsigned long long)arg0;
- (void)updateVideoTimeScaleInfoWithScale:(id)arg0 asset:(id)arg1;
- (void)updateAssetTransformInfoWithTransformInfo:(id)arg0 asset:(id)arg1;
- (void)setTemplateConfigsMap:(id)arg0;
- (void)setEffectTimeRangeFollowMainTrack;
- (void)updateMovieAnimationTypeWithFilter:(id)arg0 asset:(id)arg1;
- (void)updatePhotoAssetInfoWithURL:(id)arg0 asset:(id)arg1;
- (id)mattingAudioPath;
- (void)setMattingAudioPath:(id)arg0;
- (void)awe_muteOriginalAudio;
- (BOOL)videoAssetsAllHaveAudioTrack;
- (void)updateCacheDirPath:(id)arg0;
- (double)acc_totalVideoDuration;
- (void)acc_addVideoAssetDict:(id)arg0 fromVideoData:(id)arg1;
- (void)acc_addAudioAssetDict:(id)arg0 fromVideoData:(id)arg1;
- (void)acc_replaceVideoAssetAtIndex:(long long)arg0 withAsset:(id)arg1 fromVideoData:(id)arg2;
- (void)acc_replaceVideoAssetsInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })arg0 withAssets:(id)arg1 fromVideoData:(id)arg2;
- (id)templateConfigsMap;
- (void)updateCanvasConfigsMapWithConfig:(id)arg0 asset:(id)arg1;
- (void)updatePhotoAssetsImageInfoWithImage:(id)arg0 asset:(id)arg1;
- (void)removeAudioWithAssets:(id)arg0;
- (id)canvasConfigWithAsset:(id)arg0;
- (BOOL)willSeekToRealFrame;
- (void)updateVideoCurvesWithCurveSource:(id)arg0 asset:(id)arg1;
- (void)acc_getRestoreVideoDurationWithSegmentCompletion:(id /* block */)arg0;
- (double)effect_newTimeMachineDuration;
- (void)updateSoundFilterInfoWithFilters:(id)arg0 asset:(id)arg1;
- (void)removeSoundFilterWithFilter:(id)arg0 asset:(id)arg1;
- (void)updateVideoSoundFilterInfoWithFilters:(id)arg0 asset:(id)arg1;
- (void)removeVideoSoundFilterWithFilter:(id)arg0 asset:(id)arg1;
- (void)updateCanvasConfigsMapWithConfigAndCommit:(id)arg0 asset:(id)arg1;
- (void)removeAllPitchAudioFilters;
- (id)acc_safeAudioTimeClipInfo:(id)arg0;
- (BOOL)acc_audioAssetEqualTo:(id)arg0;
- (BOOL)acc_videoAssetEqualTo:(id)arg0;
- (id)videoDataUUID;
- (void)setWillSeekToRealFrame:(BOOL)arg0;
- (void)setTotalBGAudioDuration:(double)arg0;
- (void)setAudioSoundFilterInfo:(id)arg0;
- (void)setVideoSoundFilterInfo:(id)arg0;
- (BOOL)forbidChangeCanvasSize;
- (void)setForbidChangeCanvasSize:(BOOL)arg0;
- (void)setEffect_timeMachineType:(long long)arg0;
- (void)setEffect_operationTimeRange:(id)arg0;
- (double)effect_timeMachineBeginTime;
- (void)setEffect_timeMachineBeginTime:(double)arg0;
- (void)setEffect_newTimeMachineDuration:(double)arg0;
- (id)audioClipRangeOfAsset:(id)arg0;
- (id)init;
- (void).cxx_destruct;
- (void)setContentSource:(long long)arg0;
- (long long)contentSource;
- (id)copyWithZone:(struct _NSZone { } *)arg0;
- (id)identifier;
- (void)setCanvasSize:(struct CGSize { double x0; double x1; })arg0;
- (BOOL)isHDR;
- (struct CGSize { double x0; double x1; })canvasSize;
- (void)setIdentifier:(id)arg0;
- (void)prepareWithCompletion:(id /* block */)arg0;
- (id)audioAssets;
- (id)extraInfo;
- (id)cacheDirPath;
- (int)previewFrameRate;
- (void)setPreviewFrameRate:(int)arg0;

@end
