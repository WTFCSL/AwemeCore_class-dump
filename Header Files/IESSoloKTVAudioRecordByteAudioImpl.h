//
//     Generated by private class-dump
//

@class NSObject, NSString, IESLiveGCDTimer;
@protocol OS_dispatch_queue;

@interface IESSoloKTVAudioRecordByteAudioImpl : NSObject <IESSoloKTVAudioRecordProtocol> {
    BOOL _isEarBackOpen;
    NSString *_currentScene;
    long long _karaokeId;
    id /* block */ _recordStartBlock;
    id /* block */ _playAudioStartBlock;
    id /* block */ _playAudioEndingCallback;
    id /* block */ _playAudioPositionBlock;
    IESLiveGCDTimer *_playAudioPositionTimer;
    double _timerSecond;
    NSObject<OS_dispatch_queue> *_recordQueue;
    double _audioDuration;
    NSString *_audioHandleKey;
    double _recordDelayTime;
    double _playDelayTime;
    double _maxStartRecordDuration;
    double _startRecordTime;
    IESLiveGCDTimer *_recordStateTimer;
    IESLiveGCDTimer *_countTimer;
    NSObject<OS_dispatch_queue> *_timerQueue;
}

@property (copy, nonatomic) id /* block */ recordStartBlock;
@property (copy, nonatomic) id /* block */ playAudioStartBlock;
@property (copy, nonatomic) id /* block */ playAudioEndingCallback;
@property (copy, nonatomic) id /* block */ playAudioPositionBlock;
@property (retain, nonatomic) IESLiveGCDTimer *playAudioPositionTimer;
@property (nonatomic) double timerSecond;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *recordQueue;
@property (nonatomic) double audioDuration;
@property (retain, nonatomic) NSString *audioHandleKey;
@property (nonatomic) BOOL isEarBackOpen;
@property (nonatomic) double recordDelayTime;
@property (nonatomic) double playDelayTime;
@property (nonatomic) double maxStartRecordDuration;
@property (nonatomic) double startRecordTime;
@property (retain, nonatomic) IESLiveGCDTimer *recordStateTimer;
@property (retain, nonatomic) IESLiveGCDTimer *countTimer;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *timerQueue;
@property (retain, nonatomic) NSString *currentScene;
@property (nonatomic) long long karaokeId;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (double)recordDuration;
- (void)updateAudioConfig:(id)arg0;
- (void)stopRecord:(id /* block */)arg0;
- (void)setStartRecordTime:(double)arg0;
- (double)startRecordTime;
- (void)setCountTimer:(id)arg0;
- (id)countTimer;
- (void)setCurrentScene:(id)arg0;
- (void)startRecord:(id /* block */)arg0;
- (void)removeAllFilter;
- (void)setKaraokeId:(long long)arg0;
- (double)getRecordDelayTime;
- (void)setRecordDelayTime:(double)arg0;
- (void)updateHeadsetVolume:(int)arg0;
- (void)updateRecordVolume:(int)arg0;
- (id)getAudioFileType;
- (BOOL)isPlayAudioStop;
- (void)setEarMonitor:(BOOL)arg0;
- (void)startByteAudioReportTimer;
- (void)cancelByteAudioReportTimer;
- (void)setTimerSecond:(double)arg0;
- (void)setPlayDelayTime:(double)arg0;
- (void)setMaxStartRecordDuration:(double)arg0;
- (void)stopRecordInternal;
- (void)stopPlayAudioInternal;
- (void)setRecordStartBlock:(id /* block */)arg0;
- (BOOL)isEarBackOpen;
- (void)startRecordStateTimer;
- (double)recordDelayTime;
- (void)setPlayAudioStartBlock:(id /* block */)arg0;
- (void)seekAllPlayAudioToTime:(int)arg0;
- (void)setAudioHandleKey:(id)arg0;
- (void)startAudioPlayTimer;
- (void)stopAudioPlayTimer;
- (struct ByteAudioAuxStream { void /* function */ **x0; } *)findPlayAudioWithKey:(id)arg0;
- (double)timerSecond;
- (id)audioHandleKey;
- (void)setPlayAudioPositionBlock:(id /* block */)arg0;
- (void)setPlayAudioEndingCallback:(id /* block */)arg0;
- (void)setIsEarBackOpen:(BOOL)arg0;
- (id)playAudioPositionTimer;
- (void)callbackPlayAudio;
- (void)setPlayAudioPositionTimer:(id)arg0;
- (id /* block */)playAudioEndingCallback;
- (id /* block */)playAudioStartBlock;
- (id /* block */)playAudioPositionBlock;
- (double)playAudioPosition;
- (double)playAudioDuration;
- (void)stopRecordStateTimer;
- (double)playDelayTime;
- (void)startRecordStateTimerCallback:(BOOL)arg0;
- (double)maxStartRecordDuration;
- (void)setRecordStateTimer:(id)arg0;
- (id /* block */)recordStartBlock;
- (id)recordStateTimer;
- (long long)karaokeId;
- (void)reportByteAudioEngineInputReport;
- (void)reportByteAudioEngineOuputReport;
- (void)reportByteAudioEngineReport:(id)arg0 eventKey:(id)arg1;
- (void)setCanDispatchAudioBuffer:(BOOL)arg0;
- (void)setCanDispatchAudioBufferFront:(BOOL)arg0;
- (BOOL)canDispatchAudioBuffer;
- (void)addEarFilters:(void *)arg0;
- (void)addEncodeFilters:(void *)arg0;
- (void)startPlayAudioAtTime:(float)arg0 completion:(id /* block */)arg1;
- (void)stopPlayAudio:(id /* block */)arg0;
- (void)pausePlayAudio;
- (void)resumePlayAudio:(id /* block */)arg0;
- (void)addPlayAudioWithPath:(id)arg0 loudness:(float)arg1;
- (void)removePlayAudioWithPath:(id)arg0;
- (void)mutePlayAudioWithPath:(id)arg0 isMute:(BOOL)arg1 unMuteVolume:(int)arg2;
- (void)updatePlayAudioWithPath:(id)arg0 volume:(int)arg1;
- (void)seekPlayAudioWithPath:(id)arg0 seekMS:(int)arg1 autoPlay:(BOOL)arg2;
- (void)seekPlayAudioWithPathAutoPlay:(id)arg0 seekMS:(int)arg1;
- (void)setPlayAudioPositionCallback:(id /* block */)arg0;
- (void)updatePlayAudioEndingCallback:(id /* block */)arg0;
- (void)updateTone:(int)arg0;
- (id)init;
- (BOOL)isRecording;
- (void).cxx_destruct;
- (id)timerQueue;
- (void)addFilters:(void *)arg0;
- (id)currentScene;
- (BOOL)isPlaying;
- (void)dealloc;
- (double)audioDuration;
- (id)recordQueue;
- (void)setAudioDuration:(double)arg0;
- (void)setTimerQueue:(id)arg0;
- (void)setRecordQueue:(id)arg0;

@end
