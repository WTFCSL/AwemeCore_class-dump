//
//     Generated by private class-dump
//

@class NSDateFormatter, NSMutableDictionary, NSDictionary, NSMutableArray, NSObject;
@protocol OS_dispatch_queue;

@interface IESLiveMemorySnapshot : NSObject {
    struct unordered_map<Class, int, std::hash<Class>, std::equal_to<Class>, std::allocator<std::pair<const Class, int>>> { struct __hash_table<std::__hash_value_type<Class, int>, std::__unordered_map_hasher<Class, std::__hash_value_type<Class, int>, std::hash<Class>, std::equal_to<Class>>, std::__unordered_map_equal<Class, std::__hash_value_type<Class, int>, std::equal_to<Class>, std::hash<Class>>, std::allocator<std::__hash_value_type<Class, int>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<Class, int>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<Class, int>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<Class, int>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<Class, int>, void *> *> *>>> { void **__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<Class, int>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<Class, int>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<Class, int>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<Class, int>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<Class, int>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<Class, std::__hash_value_type<Class, int>, std::hash<Class>, std::equal_to<Class>>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<Class, std::__hash_value_type<Class, int>, std::equal_to<Class>, std::hash<Class>>> { float __value_; } __p3_; } __table_; } onceAllocTime;
    struct unordered_map<Class, int, std::hash<Class>, std::equal_to<Class>, std::allocator<std::pair<const Class, int>>> { struct __hash_table<std::__hash_value_type<Class, int>, std::__unordered_map_hasher<Class, std::__hash_value_type<Class, int>, std::hash<Class>, std::equal_to<Class>>, std::__unordered_map_equal<Class, std::__hash_value_type<Class, int>, std::equal_to<Class>, std::hash<Class>>, std::allocator<std::__hash_value_type<Class, int>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<Class, int>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<Class, int>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<Class, int>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<Class, int>, void *> *> *>>> { void **__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<Class, int>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<Class, int>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<Class, int>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<Class, int>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<Class, int>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<Class, std::__hash_value_type<Class, int>, std::hash<Class>, std::equal_to<Class>>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<Class, std::__hash_value_type<Class, int>, std::equal_to<Class>, std::hash<Class>>> { float __value_; } __p3_; } __table_; } onceMemorySlice;
    struct unordered_map<Class, int, std::hash<Class>, std::equal_to<Class>, std::allocator<std::pair<const Class, int>>> { struct __hash_table<std::__hash_value_type<Class, int>, std::__unordered_map_hasher<Class, std::__hash_value_type<Class, int>, std::hash<Class>, std::equal_to<Class>>, std::__unordered_map_equal<Class, std::__hash_value_type<Class, int>, std::equal_to<Class>, std::hash<Class>>, std::allocator<std::__hash_value_type<Class, int>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<Class, int>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<Class, int>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<Class, int>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<Class, int>, void *> *> *>>> { void **__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<Class, int>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<Class, int>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<Class, int>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<Class, int>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<Class, int>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<Class, std::__hash_value_type<Class, int>, std::hash<Class>, std::equal_to<Class>>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<Class, std::__hash_value_type<Class, int>, std::equal_to<Class>, std::hash<Class>>> { float __value_; } __p3_; } __table_; } preMemorySnapshot;
    struct vector<std::vector<std::pair<Class, int>>, std::allocator<std::vector<std::pair<Class, int>>>> { void *__begin_; void *__end_; struct __compressed_pair<std::vector<std::pair<Class, int>> *, std::allocator<std::vector<std::pair<Class, int>>>> { void *__value_; } __end_cap_; } memorySlices;
    struct vector<std::vector<std::pair<Class, int>>, std::allocator<std::vector<std::pair<Class, int>>>> { void *__begin_; void *__end_; struct __compressed_pair<std::vector<std::pair<Class, int>> *, std::allocator<std::vector<std::pair<Class, int>>>> { void *__value_; } __end_cap_; } allocTimeSlices;
    BOOL _buildBusiness;
    NSDictionary *_memoryMetrics;
    NSObject<OS_dispatch_queue> *_samplingQueue;
    id _memoryWarningObserver;
    long long _memoryWarning;
    long long _memorystacking;
    NSMutableArray *_snapshotHeaders;
    NSDateFormatter *_dateFormatter;
    NSMutableDictionary *_globalLeaks;
}

@property (retain, nonatomic) NSObject<OS_dispatch_queue> *samplingQueue;
@property (retain, nonatomic) id memoryWarningObserver;
@property (nonatomic) long long memoryWarning;
@property (nonatomic) long long memorystacking;
@property (nonatomic) BOOL buildBusiness;
@property (retain, nonatomic) NSMutableArray *snapshotHeaders;
@property (retain, nonatomic) NSDateFormatter *dateFormatter;
@property (retain, nonatomic) NSMutableDictionary *globalLeaks;
@property (retain, nonatomic) NSDictionary *memoryMetrics;

+ (id)sharedInstance;

- (void)setMemoryWarning:(long long)arg0;
- (void)setSnapshotHeaders:(id)arg0;
- (void)setSamplingQueue:(id)arg0;
- (void)setMemorystacking:(long long)arg0;
- (void)setBuildBusiness:(BOOL)arg0;
- (BOOL)buildBusiness;
- (id)samplingQueue;
- (void)syncGenerateSnapshot;
- (id)snapshotHeaders;
- (id)samplingHeader;
- (void)sortSnapshot;
- (id)constructMetrics;
- (void)matchingObjectsDiff:(struct unordered_map<Class, int, std::hash<Class>, std::equal_to<Class>, std::allocator<std::pair<const Class, int>>> { struct __hash_table<std::__hash_value_type<Class, int>, std::__unordered_map_hasher<Class, std::__hash_value_type<Class, int>, std::hash<Class>, std::equal_to<Class>>, std::__unordered_map_equal<Class, std::__hash_value_type<Class, int>, std::equal_to<Class>, std::hash<Class>>, std::allocator<std::__hash_value_type<Class, int>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<Class, int>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<Class, int>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<Class, int>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<Class, int>, void *> *> *>>> { void **x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<Class, int>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<Class, int>, void *> *> *>> { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<Class, int>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<Class, int>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<Class, int>, void *> *> { void *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<Class, std::__hash_value_type<Class, int>, std::hash<Class>, std::equal_to<Class>>> { unsigned long long x0; } x2; struct __compressed_pair<float, std::__unordered_map_equal<Class, std::__hash_value_type<Class, int>, std::equal_to<Class>, std::hash<Class>>> { float x0; } x3; } x0; })arg0 metrics:(id)arg1;
- (id)calculateIncrementWithSourceSnapshot:(struct unordered_map<Class, int, std::hash<Class>, std::equal_to<Class>, std::allocator<std::pair<const Class, int>>> { struct __hash_table<std::__hash_value_type<Class, int>, std::__unordered_map_hasher<Class, std::__hash_value_type<Class, int>, std::hash<Class>, std::equal_to<Class>>, std::__unordered_map_equal<Class, std::__hash_value_type<Class, int>, std::equal_to<Class>, std::hash<Class>>, std::allocator<std::__hash_value_type<Class, int>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<Class, int>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<Class, int>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<Class, int>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<Class, int>, void *> *> *>>> { void **x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<Class, int>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<Class, int>, void *> *> *>> { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<Class, int>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<Class, int>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<Class, int>, void *> *> { void *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<Class, std::__hash_value_type<Class, int>, std::hash<Class>, std::equal_to<Class>>> { unsigned long long x0; } x2; struct __compressed_pair<float, std::__unordered_map_equal<Class, std::__hash_value_type<Class, int>, std::equal_to<Class>, std::hash<Class>>> { float x0; } x3; } x0; })arg0 destSnapshot:(struct unordered_map<Class, int, std::hash<Class>, std::equal_to<Class>, std::allocator<std::pair<const Class, int>>> { struct __hash_table<std::__hash_value_type<Class, int>, std::__unordered_map_hasher<Class, std::__hash_value_type<Class, int>, std::hash<Class>, std::equal_to<Class>>, std::__unordered_map_equal<Class, std::__hash_value_type<Class, int>, std::equal_to<Class>, std::hash<Class>>, std::allocator<std::__hash_value_type<Class, int>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<Class, int>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<Class, int>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<Class, int>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<Class, int>, void *> *> *>>> { void **x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<Class, int>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<Class, int>, void *> *> *>> { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<Class, int>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<Class, int>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<Class, int>, void *> *> { void *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<Class, std::__hash_value_type<Class, int>, std::hash<Class>, std::equal_to<Class>>> { unsigned long long x0; } x2; struct __compressed_pair<float, std::__unordered_map_equal<Class, std::__hash_value_type<Class, int>, std::equal_to<Class>, std::hash<Class>>> { float x0; } x3; } x0; })arg1;
- (void)trackerMemoryLeaksWithParams:(id)arg0 model:(long long)arg1 metrics:(id)arg2;
- (id)globalLeaks;
- (void)setGlobalLeaks:(id)arg0;
- (void)outMemorySampling:(id)arg0;
- (long long)memorystacking;
- (id)mapMemorySliceToDictionary;
- (id)mapKeySlicesToDictionary;
- (id)mapAllocTimesToDictionary;
- (void)trackerMemoryWithCategory:(id)arg0 params:(id)arg1;
- (id)mapFinalMemorySliceToDictionary;
- (void)cleanSnapshot;
- (void)configureExtraWhiteList:(id)arg0;
- (void)buildWatchBusinessInfo;
- (void)asyncGenerateSnapshot;
- (id)instanceSnapshot;
- (void)asyncGenerateLeaksSnapshot;
- (void)willReportMemorySlices:(id /* block */)arg0;
- (void)cleanTrackCache;
- (id)init;
- (void).cxx_destruct;
- (void)setDateFormatter:(id)arg0;
- (id)dateFormatter;
- (void)dealloc;
- (id).cxx_construct;
- (id)memoryWarningObserver;
- (void)setMemoryWarningObserver:(id)arg0;
- (long long)memoryWarning;
- (void)setMemoryMetrics:(id)arg0;
- (id)memoryMetrics;

@end
