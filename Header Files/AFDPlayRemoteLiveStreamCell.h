//
//     Generated by private class-dump
//

@class AWEAwemeModel, NSString, AFDPlayRemoteLiveStreamAudioContext, AFDPlayRemoteLiveStreamControlView, AWELiveRoomModel, UIButton, UIViewController, AFDPlayRemoteFeedStreamCellContext, AFDPlayRemoteLiveStreamCloseView;
@protocol AWEFeedTableViewCellViewControllerProtocol, AWERTVFeedContentControllers, AWELivePreStreamViewControllerProtocol, AFDPlayRemoteFeedStreamCellDelegate;

@interface AFDPlayRemoteLiveStreamCell : UITableViewCell <AWELivePreStreamLiveDelegate, AWELiveRoomMessage, AFDPlayRemoteFeedStreamCellProtocol> {
    BOOL _isPlaying;
    BOOL _isActive;
    BOOL _hasReceiveFirstFrame;
    BOOL _isFirstAudioFrameReceived;
    UIViewController *parentViewController;
    id<AFDPlayRemoteFeedStreamCellDelegate> delegate;
    AWEAwemeModel *_model;
    struct EngineAudioWrapper { void /* function */ *x0; void /* function */ *x1; void /* function */ *x2; void /* function */ *x3; void *x4; } *_audioWrapper;
    long long _pureMode;
    id<AWERTVFeedContentControllers> _rtvFeedContentControllers;
    UIViewController<AWEFeedTableViewCellViewControllerProtocol, AWELivePreStreamViewControllerProtocol> *_livestreamPlayer;
    AFDPlayRemoteFeedStreamCellContext *_context;
    AFDPlayRemoteLiveStreamCloseView *_liveCloseView;
    AFDPlayRemoteLiveStreamAudioContext *_audioContext;
    AWELiveRoomModel *_liveRoomModel;
    UIButton *_fullScreenButton;
    AFDPlayRemoteLiveStreamControlView *_landscapeControlView;
}

@property (readonly, nonatomic) UIViewController<AWEFeedTableViewCellViewControllerProtocol, AWELivePreStreamViewControllerProtocol> *livestreamPlayer;
@property (readonly, nonatomic) AFDPlayRemoteFeedStreamCellContext *context;
@property (nonatomic) BOOL isPlaying;
@property (nonatomic) BOOL isActive;
@property (nonatomic) BOOL hasReceiveFirstFrame;
@property (retain, nonatomic) AFDPlayRemoteLiveStreamCloseView *liveCloseView;
@property (retain, nonatomic) AFDPlayRemoteLiveStreamAudioContext *audioContext;
@property (retain, nonatomic) AWELiveRoomModel *liveRoomModel;
@property (retain, nonatomic) UIButton *fullScreenButton;
@property (retain, nonatomic) AFDPlayRemoteLiveStreamControlView *landscapeControlView;
@property (nonatomic) BOOL isFirstAudioFrameReceived;
@property (nonatomic) long long pureMode;
@property (retain, nonatomic) id<AWERTVFeedContentControllers> rtvFeedContentControllers;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (weak, nonatomic) id<AFDPlayRemoteFeedStreamCellDelegate> delegate;
@property (nonatomic) struct EngineAudioWrapper { void /* function */ *x0; void /* function */ *x1; void /* function */ *x2; void /* function */ *x3; void *x4; } *audioWrapper;
@property (weak, nonatomic) UIViewController *parentViewController;
@property (readonly, nonatomic) AWEAwemeModel *model;

- (void)pauseWithAnimation;
- (void)playWithAnimation;
- (void)setPureMode:(long long)arg0;
- (BOOL)pauseBySingleClick;
- (struct EngineAudioWrapper { void /* function */ *x0; void /* function */ *x1; void /* function */ *x2; void /* function */ *x3; void *x4; } *)audioWrapper;
- (void)setAudioWrapper:(struct EngineAudioWrapper { void /* function */ *x0; void /* function */ *x1; void /* function */ *x2; void /* function */ *x3; void *x4; } *)arg0;
- (void)audienceQuitAllRoomWithSlideVC:(id)arg0 player:(id)arg1 context:(id)arg2;
- (long long)pureMode;
- (id)liveRoomModel;
- (void)setFullScreenButton:(id)arg0;
- (void)setLiveRoomModel:(id)arg0;
- (void)__createComponents;
- (void)seekToProgress:(long long)arg0;
- (void)configWithAwemeModel:(id)arg0 context:(id)arg1;
- (BOOL)playerUseAudioMix;
- (id)rtvFeedContentControllers;
- (void)updatePureMode:(long long)arg0;
- (void)updatePlaySpeed:(id)arg0;
- (BOOL)__isLandscapeOrientationLayout;
- (long long)playingProgress;
- (void)seekToAwemeProgress:(id)arg0;
- (id)awemePlayingProgress;
- (void)setRtvFeedContentControllers:(id)arg0;
- (void)hidePauseView:(BOOL)arg0;
- (void)pauseWithIcon:(BOOL)arg0;
- (id)requestReusePlayer;
- (void)applyReusePlayer:(id)arg0;
- (void)__refreshFullScreenButtonVisibleState;
- (id)livestreamPlayer;
- (id)landscapeControlView;
- (void)__updateScalingTypeForOrientationLayoutChange;
- (BOOL)hasReceiveFirstFrame;
- (void)setIsFirstAudioFrameReceived:(BOOL)arg0;
- (void)onLivePlayerFirstFrameRender;
- (void)__onUserAvatarClick;
- (void)__createControlViews;
- (void)fullScreenButtonClicked:(id)arg0;
- (BOOL)__isEnableShowFullScreenButton;
- (void)setHasReceiveFirstFrame:(BOOL)arg0;
- (BOOL)isFirstAudioFrameReceived;
- (void)willOpenAudioRenderWithSampleRate:(int)arg0 channels:(int)arg1 duration:(int)arg2;
- (void)willProcessAudioFrameWithRawData:(float **)arg0 samples:(int)arg1 timeStamp:(long long)arg2;
- (id)liveCloseView;
- (void)setLiveCloseView:(id)arg0;
- (void)onLivePlayerClose;
- (void)onLiveStreamFinish;
- (void)onRenderAudioFrame:(id)arg0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })targetLandscapePlayerFrameForProposedPlayerFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0;
- (void)setLandscapeControlView:(id)arg0;
- (void)prepareForDisplay;
- (double)currentPlaybackTime;
- (id)initWithStyle:(long long)arg0 reuseIdentifier:(id)arg1;
- (double)totalTime;
- (void)resume;
- (void).cxx_destruct;
- (void)setIsActive:(BOOL)arg0;
- (id)model;
- (void)viewWillTransitionToSize:(struct CGSize { double x0; double x1; })arg0 withTransitionCoordinator:(id)arg1;
- (void)stop;
- (long long)mediaType;
- (void)didMoveToWindow;
- (id)delegate;
- (id)context;
- (BOOL)isActive;
- (void)prepareForReuse;
- (BOOL)isPlaying;
- (void)setVolume:(float)arg0;
- (double)videoDuration;
- (void)layoutSubviews;
- (void)setDelegate:(id)arg0;
- (void)dealloc;
- (void)play;
- (void)pause;
- (void)reset;
- (void)setIsPlaying:(BOOL)arg0;
- (void)setMute:(BOOL)arg0;
- (id)parentViewController;
- (void)setParentViewController:(id)arg0;
- (long long)playState;
- (void)setAudioContext:(id)arg0;
- (id)audioContext;
- (id)fullScreenButton;
- (void)willDisplay;
- (void)seekToTime:(double)arg0 completion:(id /* block */)arg1;

@end
