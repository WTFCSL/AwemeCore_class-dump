//
//     Generated by private class-dump
//

@class NSDate, NSString, TTNetworkManagerApiParameters, NSTimer, UrlMatchRule, NSMutableDictionary, NSMutableSet, NSMutableArray, TTHttpTaskChromium;

@interface TTConcurrentHttpTask : TTHttpTask {
    struct atomic<bool> { struct __cxx_atomic_impl<bool, std::__cxx_atomic_base_impl<bool>> { _Atomic BOOL __a_value; } __a_; } isTaskResumed;
    BOOL _skipSSLCertificateError;
    BOOL _isStreamingTask;
    BOOL _enableHttpCache;
    BOOL _isCancelled;
    BOOL _isCompleted;
    BOOL _isRedirectionCallbackedToUser;
    BOOL _isMarkingWinnerWithBlockErrorCodeSet;
    float _taskPriority;
    long long _state;
    double _recvHeaderTimeout;
    double _readDataTimeout;
    double _protectTimeout;
    double _timeoutInterval;
    TTNetworkManagerApiParameters *_outerApiParams;
    unsigned long long _requestApiType;
    double _connectTimeInterval;
    NSMutableArray *_concurrentHost;
    unsigned long long _concurrentTaskId;
    NSString *_transactionId;
    NSDate *_firstTaskStartTime;
    unsigned long long _subTaskSeqNumber;
    NSMutableDictionary *_subTaskSequenceDict;
    TTHttpTaskChromium *_winnerTask;
    unsigned long long _resumedTaskCount;
    NSMutableSet *_sentHostSet;
    unsigned long long _callbackedTaskCount;
    NSMutableDictionary *_callbackInfoDict;
    NSTimer *_timer;
    long long _throttleSpeed;
    UrlMatchRule *_matchRule;
    NSMutableArray *_tasksInfo;
    double _startTime;
    double _endTime;
}

@property (retain, nonatomic) TTNetworkManagerApiParameters *outerApiParams;
@property (nonatomic) unsigned long long requestApiType;
@property (nonatomic) double connectTimeInterval;
@property (retain) NSMutableArray *concurrentHost;
@property (nonatomic) unsigned long long concurrentTaskId;
@property (copy, nonatomic) NSString *transactionId;
@property (retain, nonatomic) NSDate *firstTaskStartTime;
@property (nonatomic) unsigned long long subTaskSeqNumber;
@property (retain) NSMutableDictionary *subTaskSequenceDict;
@property (retain) TTHttpTaskChromium *winnerTask;
@property unsigned long long resumedTaskCount;
@property (retain) NSMutableSet *sentHostSet;
@property unsigned long long callbackedTaskCount;
@property (retain, nonatomic) NSMutableDictionary *callbackInfoDict;
@property (retain) NSTimer *timer;
@property BOOL isCancelled;
@property BOOL isCompleted;
@property BOOL isRedirectionCallbackedToUser;
@property long long throttleSpeed;
@property float taskPriority;
@property (retain, nonatomic) UrlMatchRule *matchRule;
@property (nonatomic) BOOL isMarkingWinnerWithBlockErrorCodeSet;
@property (retain, nonatomic) NSMutableArray *tasksInfo;
@property (nonatomic) double startTime;
@property (nonatomic) double endTime;

+ (BOOL)parseIfConcurrentRequestSwitchEnabled:(id)arg0 switchName:(id)arg1;
+ (BOOL)isMatchingWithNoRetry:(id)arg0;
+ (id)parseConcurrentRequestMatchRules:(id)arg0;
+ (id)getConcurrentHostAccordingToRules:(id)arg0 withUrl:(id)arg1;
+ (BOOL)forbidConcurrentTaskIfNeed:(id)arg0;
+ (double)parseConcurrentRequestConnectInterval:(id)arg0 preferMatchRule:(id)arg1;
+ (BOOL)isConservativeStrategyEnabled:(id)arg0;
+ (void)updateFailCountAndForbiddenTime:(id)arg0;
+ (void)lazyInitStaticRuleObj;
+ (id)constructRuleWithItem:(id)arg0 hostGroup:(id)arg1 equalGroup:(id)arg2 prefixGroup:(id)arg3 patternGroup:(id)arg4;
+ (id)buildJSONConcurrentTask:(id)arg0 params:(id)arg1 method:(id)arg2 needCommonParams:(BOOL)arg3 headerField:(id)arg4 requestSerializer:(Class)arg5 responseSerializer:(Class)arg6 autoResume:(BOOL)arg7 verifyRequest:(BOOL)arg8 isCustomizedCookie:(BOOL)arg9 callback:(id /* block */)arg10 callbackWithResponse:(id /* block */)arg11 dispatch_queue:(id)arg12 concurrentRequestConfig:(id)arg13;
+ (id)buildBinaryConcurrentTask:(id)arg0 params:(id)arg1 method:(id)arg2 needCommonParams:(BOOL)arg3 headerField:(id)arg4 enableHttpCache:(BOOL)arg5 requestSerializer:(Class)arg6 responseSerializer:(Class)arg7 autoResume:(BOOL)arg8 isCustomizedCookie:(BOOL)arg9 headerCallback:(id /* block */)arg10 dataCallback:(id /* block */)arg11 callback:(id /* block */)arg12 callbackWithResponse:(id /* block */)arg13 redirectCallback:(id /* block */)arg14 progress:(id *)arg15 dispatch_queue:(id)arg16 redirectHeaderDataCallbackQueue:(id)arg17 concurrentRequestConfig:(id)arg18;
+ (id)buildWebviewConcurrentTask:(id)arg0 mainDocURL:(id)arg1 autoResume:(BOOL)arg2 enableHttpCache:(BOOL)arg3 redirectCallback:(id /* block */)arg4 headerCallback:(id /* block */)arg5 dataCallback:(id /* block */)arg6 callbackWithResponse:(id /* block */)arg7 concurrentRequestConfig:(id)arg8;
+ (void)clearMatchRules:(id)arg0;

- (void)setThrottleNetSpeed:(long long)arg0;
- (void)setRecvHeaderTimeout:(double)arg0;
- (void)setReadDataTimeout:(double)arg0;
- (id)matchRule;
- (void)setMatchRule:(id)arg0;
- (void)setProtectTimeout:(double)arg0;
- (BOOL)enableHttpCache;
- (void)setEnableHttpCache:(BOOL)arg0;
- (long long)throttleSpeed;
- (double)protectTimeout;
- (double)recvHeaderTimeout;
- (double)readDataTimeout;
- (void)setSkipSSLCertificateError:(BOOL)arg0;
- (void)setThrottleSpeed:(long long)arg0;
- (void)setConcurrentHost:(id)arg0;
- (id)concurrentHost;
- (id)initWithRequestInterval:(double)arg0 URLString:(id)arg1 concurrentHost:(id)arg2 requestModel:(id)arg3 params:(id)arg4 method:(id)arg5 needCommonParams:(BOOL)arg6 headerField:(id)arg7 enableHttpCache:(BOOL)arg8 verifyRequest:(BOOL)arg9 isCustomizedCookie:(BOOL)arg10 constructingBodyWithBlock:(id /* block */)arg11 bodyField:(id)arg12 filePath:(id)arg13 offset:(unsigned long long)arg14 length:(unsigned long long)arg15 progress:(id *)arg16 requestSerializer:(Class)arg17 requestApiType:(unsigned long long)arg18 concurrentTaskId:(unsigned long long)arg19 transactionId:(id)arg20 modelResponseSerializer:(Class)arg21 useJsonResponseSerializer:(BOOL)arg22 jsonResponseSerializer:(Class)arg23 binaryResponseSerializer:(Class)arg24 modelCallback:(id /* block */)arg25 modelCallbackWithResponse:(id /* block */)arg26 headerCallback:(id /* block */)arg27 dataCallback:(id /* block */)arg28 callback:(id /* block */)arg29 callbackWithResponse:(id /* block */)arg30 redirectCallback:(id /* block */)arg31 dispatch_queue:(id)arg32 destination:(id)arg33 isAppend:(BOOL)arg34 progressCallback:(id /* block */)arg35 completionHandler:(id /* block */)arg36 timeout:(double)arg37 redirectHeaderDataCallbackQueue:(id)arg38 nsrequest:(id)arg39 mainDocURL:(id)arg40 matchRule:(id)arg41;
- (id)initWithRequestInterval:(double)arg0 concurrentHost:(id)arg1 URLString:(id)arg2 params:(id)arg3 method:(id)arg4 needCommonParams:(BOOL)arg5 headerField:(id)arg6 requestSerializer:(Class)arg7 requestApiType:(unsigned long long)arg8 concurrentTaskId:(unsigned long long)arg9 transactionId:(id)arg10 responseSerializer:(Class)arg11 verifyRequest:(BOOL)arg12 isCustomizedCookie:(BOOL)arg13 callback:(id /* block */)arg14 callbackWithResponse:(id /* block */)arg15 dispatch_queue:(id)arg16 matchRule:(id)arg17;
- (id)initWithRequestInterval:(double)arg0 concurrentHost:(id)arg1 URLString:(id)arg2 params:(id)arg3 method:(id)arg4 needCommonParams:(BOOL)arg5 headerField:(id)arg6 enableHttpCache:(BOOL)arg7 requestSerializer:(Class)arg8 requestApiType:(unsigned long long)arg9 concurrentTaskId:(unsigned long long)arg10 transactionId:(id)arg11 responseSerializer:(Class)arg12 isCustomizedCookie:(BOOL)arg13 headerCallback:(id /* block */)arg14 dataCallback:(id /* block */)arg15 callback:(id /* block */)arg16 callbackWithResponse:(id /* block */)arg17 redirectCallback:(id /* block */)arg18 progress:(id *)arg19 dispatch_queue:(id)arg20 redirectHeaderDataCallbackQueue:(id)arg21 matchRule:(id)arg22;
- (id)initWithRequestInterval:(double)arg0 concurrentHost:(id)arg1 requestApiType:(unsigned long long)arg2 concurrentTaskId:(unsigned long long)arg3 transactionId:(id)arg4 nsrequest:(id)arg5 mainDocURL:(id)arg6 enableHttpCache:(BOOL)arg7 redirectCallback:(id /* block */)arg8 headerCallback:(id /* block */)arg9 dataCallback:(id /* block */)arg10 callbackWithResponse:(id /* block */)arg11 matchRule:(id)arg12;
- (void)setOuterApiParams:(id)arg0;
- (void)setRequestApiType:(unsigned long long)arg0;
- (void)setConnectTimeInterval:(double)arg0;
- (void)setConcurrentTaskId:(unsigned long long)arg0;
- (void)setSubTaskSequenceDict:(id)arg0;
- (void)setCallbackInfoDict:(id)arg0;
- (void)setTasksInfo:(id)arg0;
- (void)setSentHostSet:(id)arg0;
- (void)asyncStopTimer;
- (id)subTaskSequenceDict;
- (unsigned long long)requestApiType;
- (id)generateJSONTask;
- (id)generateBinaryTask;
- (id)generateWebviewTask;
- (unsigned long long)subTaskSeqNumber;
- (id)getOneSubtask;
- (void)generateSubtaskStartInfo:(id)arg0 startTimeInterval:(double)arg1;
- (void)asyncStartTimer;
- (id)tasksInfo;
- (double)connectTimeInterval;
- (void)runOnceInTimer;
- (void)startTimerInternalInMainThread;
- (void)stopTimerInternalInMainThread;
- (void)handleWrapperHeaderCallback:(id)arg0 withResponse:(id)arg1;
- (BOOL)isTreatingNon2xxResponseAsSuccess;
- (void)markWinnerAndCancelTasksInternal:(id)arg0;
- (void)callbackHeaderToUser:(id)arg0 withResponse:(id)arg1;
- (id)winnerTask;
- (void)setWinnerTask:(id)arg0;
- (void)setIsMarkingWinnerWithBlockErrorCodeSet:(BOOL)arg0;
- (id)outerApiParams;
- (BOOL)isRedirectionCallbackedToUser;
- (void)setIsRedirectionCallbackedToUser:(BOOL)arg0;
- (unsigned long long)resumedTaskCount;
- (unsigned long long)callbackedTaskCount;
- (id)addConcurrentAndIsRetryQueryIfNeed:(id)arg0 originalQuery:(id)arg1;
- (void)setSubTaskSeqNumber:(unsigned long long)arg0;
- (id)firstTaskStartTime;
- (void)setFirstTaskStartTime:(id)arg0;
- (void)addTimeoutSettingForTaskIfNotTimeout:(id)arg0;
- (void)addOtherSettingsForTask:(id)arg0;
- (void)addWrapperHeaderCallbackForTask:(id)arg0 taskNumber:(unsigned long long)arg1;
- (id)generateNewRequestURLAndAddTaskCount;
- (BOOL)doDispatchWithUrl:(id *)arg0 andDispatchInfo:(id)arg1;
- (void)setResumedTaskCount:(unsigned long long)arg0;
- (void)handleCallbackWithResponseError:(id)arg0 withObject:(id)arg1 withResponse:(id)arg2 taskSeqNumber:(unsigned long long)arg3;
- (void)addHeaderCallbackAndTimeoutSettings:(id)arg0 subtaskNumber:(unsigned long long)arg1;
- (void)markWinnerAndCancelOtherTasks:(unsigned long long)arg0 accordingToError:(id)arg1;
- (void)generateSubtaskEndInfo:(id)arg0 withResponse:(id)arg1 taskSeqNumber:(unsigned long long)arg2;
- (id)generateFinalConcurrentRequestLogInfo;
- (void)callbackCommonResultToUser:(id)arg0 obj:(id)arg1 response:(id)arg2;
- (id)callbackInfoDict;
- (BOOL)isTTNetworkTimeout:(id)arg0;
- (BOOL)isCancelledByUser;
- (void)setCallbackedTaskCount:(unsigned long long)arg0;
- (BOOL)isAllResumedSubtaskCompleted;
- (void)updateMatchRuleInfo;
- (BOOL)isProtectTimeoutReached:(id)arg0;
- (unsigned long long)concurrentTaskId;
- (id)sentHostSet;
- (void)addWrapperRedirectCallbackForTask:(id)arg0;
- (void)addWrapperDataCallbackForTask:(id)arg0;
- (BOOL)isMarkingWinnerWithBlockErrorCodeSet;
- (void)syncStartTimer;
- (void)syncStopTimer;
- (void)setIsStreamingTask:(BOOL)arg0;
- (BOOL)skipSSLCertificateError;
- (BOOL)isStreamingTask;
- (id)timer;
- (void)readDataOfMinLength:(unsigned long long)arg0 maxLength:(unsigned long long)arg1 timeout:(double)arg2 completionHandler:(id /* block */)arg3;
- (void)setTimeoutInterval:(double)arg0;
- (BOOL)isCompleted;
- (void)resume;
- (void)setStartTime:(double)arg0;
- (void).cxx_destruct;
- (long long)state;
- (void)suspend;
- (void)setPriority:(float)arg0;
- (double)endTime;
- (double)timeoutInterval;
- (void)setTimer:(id)arg0;
- (double)startTime;
- (void)cancel;
- (BOOL)isCancelled;
- (void)setEndTime:(double)arg0;
- (void)setIsCancelled:(BOOL)arg0;
- (id)transactionId;
- (void)setTransactionId:(id)arg0;
- (float)taskPriority;
- (void)setTaskPriority:(float)arg0;
- (void)setIsCompleted:(BOOL)arg0;
- (void)restartTimer;

@end
