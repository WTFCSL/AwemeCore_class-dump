//
//     Generated by private class-dump
//

@class AWEDTOClipRangeEntry, NSString, NSDictionary, AWEDTOMusicTraceData, AWEDTOMusicTrimData, AWEDTOMusicVolumeModel, AWEDTOMusicClipData;
@protocol ACCMusicModelProtocol;

@interface AWEDTOMusicModel : MTLModel <MTLJSONSerializing> {
    BOOL _enableMusicLoop;
    BOOL _isLvAudioFrameModel;
    BOOL _useSuggestClipRange;
    BOOL _voiceVolumeDisable;
    BOOL _disableMusicModule;
    BOOL _useWholeMusic;
    BOOL _hitAudioRangeChangeTestInImageAlbum;
    BOOL _hitVolumeChangeTestInImageAlbum;
    BOOL _enableEditPageMusicLoop;
    BOOL _postDownload;
    BOOL _showMusicCapsule;
    BOOL _needAiClip;
    NSString *_selectedFrom;
    long long _recordMusicFrom;
    AWEDTOMusicClipData *_bgmClipRange;
    double _musicVolume;
    NSString *_editMusicFrom;
    long long _musicType;
    NSString *_strongBeatPath;
    double _voiceVolume;
    AWEDTOClipRangeEntry *_clipRange;
    NSString *_bgmFile;
    AWEDTOMusicTraceData *_trace;
    NSString *_importMusicId;
    NSString *_similarMusicId;
    NSDictionary *_musicTrackInfo;
    NSString *_binUri;
    AWEDTOMusicTrimData *_musicTrimData;
    AWEDTOMusicVolumeModel *_volumeModel;
}

@property (retain, nonatomic) id<ACCMusicModelProtocol> music;
@property (copy, nonatomic) NSString *selectedFrom;
@property (nonatomic) long long recordMusicFrom;
@property (retain, nonatomic) AWEDTOMusicClipData *bgmClipRange;
@property (nonatomic) double musicVolume;
@property (nonatomic) BOOL enableMusicLoop;
@property (copy, nonatomic) NSString *editMusicFrom;
@property (nonatomic) long long musicType;
@property (copy, nonatomic) NSString *strongBeatPath;
@property (nonatomic) double voiceVolume;
@property (nonatomic) BOOL isLvAudioFrameModel;
@property (nonatomic) BOOL useSuggestClipRange;
@property (retain, nonatomic) AWEDTOClipRangeEntry *clipRange;
@property (copy, nonatomic) NSString *bgmFile;
@property (retain, nonatomic) AWEDTOMusicTraceData *trace;
@property (nonatomic) BOOL voiceVolumeDisable;
@property (copy, nonatomic) NSString *importMusicId;
@property (nonatomic) BOOL disableMusicModule;
@property (nonatomic) BOOL useWholeMusic;
@property (nonatomic) BOOL hitAudioRangeChangeTestInImageAlbum;
@property (nonatomic) BOOL hitVolumeChangeTestInImageAlbum;
@property (nonatomic) BOOL enableEditPageMusicLoop;
@property (nonatomic) BOOL postDownload;
@property (nonatomic) BOOL showMusicCapsule;
@property (nonatomic) BOOL needAiClip;
@property (copy, nonatomic) NSString *similarMusicId;
@property (copy, nonatomic) NSDictionary *musicTrackInfo;
@property (copy, nonatomic) NSString *binUri;
@property (retain, nonatomic) AWEDTOMusicTrimData *musicTrimData;
@property (retain, nonatomic) AWEDTOMusicVolumeModel *volumeModel;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (id)bgmClipRangeJSONTransformer;
+ (id)traceJSONTransformer;
+ (id)musicTrimDataJSONTransformer;
+ (id)volumeModelJSONTransformer;
+ (id)clipRangeJSONTransformer;
+ (id)musicJSONTransformer;
+ (id)acc_JSONKeyPathsByPropertyKey;
+ (void)_aweLazyRegisterLoad_Draft;
+ (id)JSONKeyPathsByPropertyKey;

- (void)setMusicVolume:(double)arg0;
- (void)setShowMusicCapsule:(BOOL)arg0;
- (void)setIsLvAudioFrameModel:(BOOL)arg0;
- (id)selectedFrom;
- (void)setSelectedFrom:(id)arg0;
- (long long)recordMusicFrom;
- (void)setRecordMusicFrom:(long long)arg0;
- (id)bgmClipRange;
- (void)setBgmClipRange:(id)arg0;
- (BOOL)enableMusicLoop;
- (void)setEnableMusicLoop:(BOOL)arg0;
- (id)editMusicFrom;
- (void)setEditMusicFrom:(id)arg0;
- (long long)musicType;
- (void)setMusicType:(long long)arg0;
- (id)strongBeatPath;
- (void)setStrongBeatPath:(id)arg0;
- (BOOL)isLvAudioFrameModel;
- (BOOL)useSuggestClipRange;
- (void)setUseSuggestClipRange:(BOOL)arg0;
- (id)bgmFile;
- (void)setBgmFile:(id)arg0;
- (void)setTrace:(id)arg0;
- (BOOL)voiceVolumeDisable;
- (void)setVoiceVolumeDisable:(BOOL)arg0;
- (id)importMusicId;
- (void)setImportMusicId:(id)arg0;
- (BOOL)disableMusicModule;
- (void)setDisableMusicModule:(BOOL)arg0;
- (BOOL)useWholeMusic;
- (void)setUseWholeMusic:(BOOL)arg0;
- (BOOL)hitAudioRangeChangeTestInImageAlbum;
- (void)setHitAudioRangeChangeTestInImageAlbum:(BOOL)arg0;
- (BOOL)hitVolumeChangeTestInImageAlbum;
- (void)setHitVolumeChangeTestInImageAlbum:(BOOL)arg0;
- (BOOL)enableEditPageMusicLoop;
- (void)setEnableEditPageMusicLoop:(BOOL)arg0;
- (BOOL)postDownload;
- (void)setPostDownload:(BOOL)arg0;
- (BOOL)showMusicCapsule;
- (BOOL)needAiClip;
- (void)setNeedAiClip:(BOOL)arg0;
- (id)similarMusicId;
- (void)setSimilarMusicId:(id)arg0;
- (id)musicTrackInfo;
- (void)setMusicTrackInfo:(id)arg0;
- (id)binUri;
- (void)setBinUri:(id)arg0;
- (id)musicTrimData;
- (void)setMusicTrimData:(id)arg0;
- (id)volumeModel;
- (void)setVolumeModel:(id)arg0;
- (id)clipRange;
- (void)setClipRange:(id)arg0;
- (id)music;
- (id)init;
- (double)musicVolume;
- (id)trace;
- (void).cxx_destruct;
- (void)setMusic:(id)arg0;
- (double)voiceVolume;
- (void)setVoiceVolume:(double)arg0;

@end
