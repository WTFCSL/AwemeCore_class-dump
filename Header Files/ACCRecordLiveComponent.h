//
//     Generated by private class-dump
//

@class UIViewController, CreateInfoResponse_CreateInfo, NSString, UIView, IESEffectModel, ACCRecordViewControllerInputData;
@protocol ACCRecordSwitchModeService, ACCRecordCloseService, ACCRecordModeFactory, ACCRecorderViewContainer, ACCRecordAuthService, CKBeautyService, ACCRecordUIHiddenStrategyService, ACCCameraKitService, AWEStudioLiveEntranceViewControllerProtocol, ACCBeautyService, ACCCameraService, ACCCameraHotCutService;

@interface ACCRecordLiveComponent : ACCFeatureComponent <ACCCameraLifeCircleEvent, ACCRecordSwitchModeServiceSubscriber, ACCRecordSwitchModeSwitchContextSubscriber> {
    BOOL _isAleadyUpdateViewFrame;
    BOOL _needJumpToLiveAfterPassCheckAuth;
    BOOL _needShowBlessingTag;
    BOOL _needShowSameTag;
    BOOL _hasSameActivity;
    BOOL _isFirstAppear;
    BOOL _isFetchCreateInfo;
    BOOL _isNeedInterrupt;
    ACCRecordViewControllerInputData *_inputData;
    id<ACCRecorderViewContainer> _viewContainer;
    id<ACCCameraService> _cameraService;
    id<ACCCameraKitService> _cameraKitService;
    id<ACCRecordSwitchModeService> _switchModeService;
    id<ACCBeautyService> _beautyService;
    id<CKBeautyService> _ckBeautyService;
    id<ACCRecordModeFactory> _modeFactory;
    id<ACCRecordAuthService> _authService;
    id<ACCRecordCloseService> _closeService;
    id<ACCCameraHotCutService> _hotCutService;
    id<ACCRecordUIHiddenStrategyService> _hiddenStrategyService;
    UIViewController<AWEStudioLiveEntranceViewControllerProtocol> *_liveViewController;
    UIView *_liveContainerView;
    IESEffectModel *_effectModel;
    CreateInfoResponse_CreateInfo *_openLiveModel;
    double _loadBeginTime;
    double _loadDuration;
}

@property (retain, nonatomic) ACCRecordViewControllerInputData *inputData;
@property (retain, nonatomic) id<ACCRecorderViewContainer> viewContainer;
@property (retain, nonatomic) id<ACCCameraService> cameraService;
@property (retain, nonatomic) id<ACCCameraKitService> cameraKitService;
@property (retain, nonatomic) id<ACCRecordSwitchModeService> switchModeService;
@property (retain, nonatomic) id<ACCBeautyService> beautyService;
@property (retain, nonatomic) id<CKBeautyService> ckBeautyService;
@property (retain, nonatomic) id<ACCRecordModeFactory> modeFactory;
@property (retain, nonatomic) id<ACCRecordAuthService> authService;
@property (retain, nonatomic) id<ACCRecordCloseService> closeService;
@property (retain, nonatomic) id<ACCCameraHotCutService> hotCutService;
@property (retain, nonatomic) id<ACCRecordUIHiddenStrategyService> hiddenStrategyService;
@property (retain, nonatomic) UIViewController<AWEStudioLiveEntranceViewControllerProtocol> *liveViewController;
@property (nonatomic) BOOL isAleadyUpdateViewFrame;
@property (retain, nonatomic) UIView *liveContainerView;
@property (nonatomic) BOOL needJumpToLiveAfterPassCheckAuth;
@property (nonatomic) BOOL needShowBlessingTag;
@property (nonatomic) BOOL needShowSameTag;
@property (nonatomic) BOOL hasSameActivity;
@property (retain, nonatomic) IESEffectModel *effectModel;
@property (nonatomic) BOOL isFirstAppear;
@property (retain, nonatomic) CreateInfoResponse_CreateInfo *openLiveModel;
@property (nonatomic) BOOL isFetchCreateInfo;
@property (nonatomic) BOOL isNeedInterrupt;
@property (nonatomic) double loadBeginTime;
@property (nonatomic) double loadDuration;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (void)checkBlessingStickerExistsWithCompleteBlock:(id /* block */)arg0;
- (void)checkHasSameStickerWithSticker:(id)arg0 completeBlock:(id /* block */)arg1;
- (id)publishModel;
- (void)setLoadDuration:(double)arg0;
- (void)setIsFirstAppear:(BOOL)arg0;
- (id)effectModel;
- (void)setEffectModel:(id)arg0;
- (void)bindViewModel;
- (id)cameraService;
- (void)setCameraService:(id)arg0;
- (void)componentDidMount;
- (void)componentDidUnmount;
- (void)componentDidAppear;
- (unsigned long long)preferredLoadPhase;
- (void)setLoadBeginTime:(double)arg0;
- (double)loadBeginTime;
- (void)bindServices:(id)arg0;
- (id)switchModeService;
- (void)switchModeServiceDidChangeMode:(id)arg0 oldMode:(id)arg1;
- (BOOL)shouldCalledLast;
- (void)setSwitchModeService:(id)arg0;
- (id)beautyService;
- (void)onCameraDidStartRender:(id)arg0;
- (id)authService;
- (void)setAuthService:(id)arg0;
- (void)setBeautyService:(id)arg0;
- (id)openLiveModel;
- (void)setOpenLiveModel:(id)arg0;
- (id)hiddenStrategyService;
- (void)setHiddenStrategyService:(id)arg0;
- (BOOL)needShowSameTag;
- (BOOL)needShowBlessingTag;
- (void)setNeedShowBlessingTag:(BOOL)arg0;
- (id)trackEventContentType;
- (void)setHasSameActivity:(BOOL)arg0;
- (void)setNeedShowSameTag:(BOOL)arg0;
- (id)hotCutService;
- (void)buildLiveView;
- (id)liveViewController;
- (void)updateLiveTab:(id)arg0;
- (BOOL)hasSameActivity;
- (void)setCameraForLivePreview;
- (void)updateLiveViewsFrame;
- (id)liveContainerView;
- (id)liveRecorder;
- (void)setIsNeedInterrupt:(BOOL)arg0;
- (BOOL)isNeedInterrupt;
- (void)clearBeautyConfig;
- (id)modeFactory;
- (void)jumpToLiveTab;
- (id)tabExtraInfo;
- (BOOL)needJumpToLiveAfterPassCheckAuth;
- (void)setNeedJumpToLiveAfterPassCheckAuth:(BOOL)arg0;
- (void)setLiveViewController:(id)arg0;
- (BOOL)enterExclusiveLiveMode;
- (id)closeService;
- (id)cameraKitService;
- (BOOL)isAleadyUpdateViewFrame;
- (void)setIsAleadyUpdateViewFrame:(BOOL)arg0;
- (id)ckBeautyService;
- (BOOL)isLiveDuetPhotoSession;
- (void)checkLivePermission;
- (void)configPredicate;
- (void)checkLiveTab;
- (void)fetchCreateInfo;
- (BOOL)isFetchCreateInfo;
- (void)setIsFetchCreateInfo:(BOOL)arg0;
- (void)jumpToLiveAfterPassCheckAuth;
- (void)exitLiveModeWithOldMode:(id)arg0;
- (void)enterLiveMode;
- (void)switchModeWillSwitchContextWithMode:(id)arg0 oldMode:(id)arg1;
- (void)switchModeDidSwitchContextWithMode:(id)arg0 oldMode:(id)arg1;
- (void)setCameraKitService:(id)arg0;
- (void)setCkBeautyService:(id)arg0;
- (void)setModeFactory:(id)arg0;
- (void)setCloseService:(id)arg0;
- (void)setHotCutService:(id)arg0;
- (void)setLiveContainerView:(id)arg0;
- (void).cxx_destruct;
- (void)dealloc;
- (BOOL)isFirstAppear;
- (id)inputData;
- (void)setInputData:(id)arg0;
- (double)loadDuration;
- (id)viewContainer;
- (void)setViewContainer:(id)arg0;

@end
