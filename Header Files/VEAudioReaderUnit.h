//
//     Generated by private class-dump
//

@class VEAudioReaderUnitConfig, NSMutableDictionary, IESMMAudioLimiter, VEAudioResamplerUnit, NSArray, NSMutableArray, NSObject;
@protocol VEAudioPlayerProtocol, OS_dispatch_queue;

@interface VEAudioReaderUnit : IESMMObject {
    BOOL _isSeeking;
    BOOL _useForPlayer;
    BOOL _stopThread;
    BOOL _paused;
    BOOL _resetBeforePlay;
    BOOL _reEnqueueFailedBuffer;
    BOOL _replaceAudioMix;
    BOOL _enableAudioReaderOpt;
    BOOL _enableProcessDataInQueue;
    BOOL _audioReaderAnrFix;
    BOOL _isRecordingScenes;
    unsigned int _numOfFramesToProcess;
    unsigned int _maxBufferListFrames;
    double _playRate;
    double _effectRecordRate;
    double _maxDuration;
    NSObject<OS_dispatch_queue> *_audioQueueOperQueue;
    NSObject<OS_dispatch_queue> *_processAudioQueue;
    id /* block */ _playDidStartBlock;
    id /* block */ _playDidEndBlock;
    id /* block */ _playDidPauseBlock;
    id /* block */ _playProgressBlock;
    id /* block */ _audioEffectProcessBlock;
    id /* block */ _audioPlayStatusBlk;
    NSMutableArray *_clipArray;
    id<VEAudioPlayerProtocol> _audioQueueUnit;
    double _seekTriggerTime;
    struct AudioBufferList { unsigned int x0; struct AudioBuffer { unsigned int x0; unsigned int x1; void *x2; } x1[1]; } *_outBufferList;
    double _currentTime;
    double _currentRateTime;
    double _lastTime;
    NSObject<OS_dispatch_queue> *_playerQueue;
    NSObject<OS_dispatch_queue> *_readerQueue;
    NSMutableDictionary *_assetClipLookupMap;
    VEAudioReaderUnitConfig *_config;
    id /* block */ _audioVolumeCallBack;
    IESMMAudioLimiter *_audioLimiter;
    VEAudioResamplerUnit *_resampleUnit;
    struct AudioStreamBasicDescription { double mSampleRate; unsigned int mFormatID; unsigned int mFormatFlags; unsigned int mBytesPerPacket; unsigned int mFramesPerPacket; unsigned int mBytesPerFrame; unsigned int mChannelsPerFrame; unsigned int mBitsPerChannel; unsigned int mReserved; } _asbd;
}

@property (retain, nonatomic) NSMutableArray *clipArray;
@property (retain, nonatomic) id<VEAudioPlayerProtocol> audioQueueUnit;
@property (nonatomic) struct AudioStreamBasicDescription { double mSampleRate; unsigned int mFormatID; unsigned int mFormatFlags; unsigned int mBytesPerPacket; unsigned int mFramesPerPacket; unsigned int mBytesPerFrame; unsigned int mChannelsPerFrame; unsigned int mBitsPerChannel; unsigned int mReserved; } asbd;
@property (nonatomic) BOOL useForPlayer;
@property (nonatomic) BOOL isSeeking;
@property (nonatomic) double seekTriggerTime;
@property (nonatomic) struct AudioBufferList { unsigned int x0; struct AudioBuffer { unsigned int x0; unsigned int x1; void *x2; } x1[1]; } *outBufferList;
@property (nonatomic) double maxDuration;
@property (nonatomic) double currentTime;
@property (nonatomic) double currentRateTime;
@property (nonatomic) double lastTime;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *playerQueue;
@property (nonatomic) BOOL stopThread;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *readerQueue;
@property (nonatomic) BOOL paused;
@property (nonatomic) BOOL resetBeforePlay;
@property (nonatomic) BOOL reEnqueueFailedBuffer;
@property (nonatomic) unsigned int numOfFramesToProcess;
@property (retain, nonatomic) NSMutableDictionary *assetClipLookupMap;
@property (retain, nonatomic) VEAudioReaderUnitConfig *config;
@property (readonly, nonatomic) unsigned int maxBufferListFrames;
@property (copy, nonatomic) id /* block */ audioVolumeCallBack;
@property (retain, nonatomic) IESMMAudioLimiter *audioLimiter;
@property (nonatomic) BOOL replaceAudioMix;
@property (nonatomic) BOOL enableAudioReaderOpt;
@property (nonatomic) BOOL enableProcessDataInQueue;
@property (nonatomic) BOOL audioReaderAnrFix;
@property (nonatomic) BOOL isRecordingScenes;
@property (retain, nonatomic) VEAudioResamplerUnit *resampleUnit;
@property (readonly, nonatomic) NSArray *assets;
@property (nonatomic) double playRate;
@property (nonatomic) double effectRecordRate;
@property (readonly, nonatomic) struct { long long x0; int x1; unsigned int x2; long long x3; } playCMTime;
@property (readonly, nonatomic) struct { long long x0; int x1; unsigned int x2; long long x3; } playCMRateTime;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *audioQueueOperQueue;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *processAudioQueue;
@property (copy, nonatomic) id /* block */ playDidStartBlock;
@property (copy, nonatomic) id /* block */ playDidEndBlock;
@property (copy, nonatomic) id /* block */ playDidPauseBlock;
@property (copy, nonatomic) id /* block */ playProgressBlock;
@property (readonly, nonatomic) double bufferListDuration;
@property (copy, nonatomic) id /* block */ audioEffectProcessBlock;
@property (copy, nonatomic) id /* block */ audioPlayStatusBlk;

+ (struct AudioStreamBasicDescription { double x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; })asbd;

- (void)setIsSeeking:(BOOL)arg0;
- (double)getaudioVolumeKeyFrameAtPts:(unsigned long long)arg0 withAVAsset:(id)arg1;
- (void)setUseForPlayer:(BOOL)arg0;
- (id)initWithVideoData:(id)arg0 withConfig:(id)arg1;
- (void)setDisableDurationCheck:(BOOL)arg0;
- (BOOL)isRecordingScenes;
- (void)setIsRecordingScenes:(BOOL)arg0;
- (id)audioQueueUnit;
- (void)setAudioQueueUnit:(id)arg0;
- (id)assetClipLookupMap;
- (unsigned int)numOfFramesToProcess;
- (void)setAudioQueueOperQueue:(id)arg0;
- (void)setOutBufferList:(struct AudioBufferList { unsigned int x0; struct AudioBuffer { unsigned int x0; unsigned int x1; void *x2; } x1[1]; } *)arg0;
- (void)setProcessAudioQueue:(id)arg0;
- (void)setAudioLimiter:(id)arg0;
- (void)updateClipArray:(id)arg0;
- (void)setResampleUnit:(id)arg0;
- (id /* block */)playDidStartBlock;
- (void)setPlayDidStartBlock:(id /* block */)arg0;
- (void)setupAudioQueue;
- (id /* block */)audioVolumeCallBack;
- (void)setAudioVolumnKeyFrameCallback:(id /* block */)arg0;
- (void)seekAudioReader:(id)arg0;
- (unsigned int)maxBufferListFrames;
- (void)setNumOfFramesToProcess:(unsigned int)arg0;
- (struct AudioBufferList { unsigned int x0; struct AudioBuffer { unsigned int x0; unsigned int x1; void *x2; } x1[1]; } *)renderAudioDataAtTime:(double)arg0;
- (struct AudioBufferList { unsigned int x0; struct AudioBuffer { unsigned int x0; unsigned int x1; void *x2; } x1[1]; } *)outBufferList;
- (void)audioEffectProcessIfNeeded:(struct AudioBufferList { unsigned int x0; struct AudioBuffer { unsigned int x0; unsigned int x1; void *x2; } x1[1]; } *)arg0;
- (id)resampleUnit;
- (BOOL)enableProcessDataInQueue;
- (BOOL)reEnqueueFailedBuffer;
- (void)setReEnqueueFailedBuffer:(BOOL)arg0;
- (id /* block */)audioEffectProcessBlock;
- (id)processAudioQueue;
- (void)setCurrentRateTime:(double)arg0;
- (double)currentRateTime;
- (void)releaseClip:(id)arg0;
- (void)updateMaxDurationIfNeeded;
- (void)resetCurrentTime:(double)arg0;
- (unsigned long long)p_audioFileTypeForAsset:(id)arg0;
- (float)p_rateByApplyingPlayRate:(float)arg0;
- (id)p_speedFilterWithConfig:(id)arg0;
- (void)p_doAppendClip:(id)arg0;
- (void)updateVideoAudioClips:(id)arg0;
- (BOOL)enableAudioReaderOpt;
- (void)p_updateClipCacheInfo;
- (id)convertToStringWithAudioFilterType:(int)arg0;
- (void)setResetBeforePlay:(BOOL)arg0;
- (id /* block */)playDidEndBlock;
- (void)mixAudioInterleavingBufferList:(struct AudioBufferList { unsigned int x0; struct AudioBuffer { unsigned int x0; unsigned int x1; void *x2; } x1[1]; } *)arg0 inBufferList:(struct AudioBufferList { unsigned int x0; struct AudioBuffer { unsigned int x0; unsigned int x1; void *x2; } x1[1]; } *)arg1;
- (id /* block */)playProgressBlock;
- (struct { long long x0; int x1; unsigned int x2; long long x3; })playCMRateTime;
- (BOOL)replaceAudioMix;
- (id)audioLimiter;
- (void)seekToTime:(double)arg0 forceSeek:(BOOL)arg1 completion:(id /* block */)arg2;
- (void)resetCurrentRateTime:(double)arg0;
- (void)setSeekTriggerTime:(double)arg0;
- (double)seekTriggerTime;
- (void)seekAudioReader:(id)arg0 triggerTime:(double)arg1 completion:(id /* block */)arg2;
- (BOOL)resetBeforePlay;
- (void)setPlayRate:(double)arg0 needSeek:(BOOL)arg1;
- (void)p_reloadClipRateWithSeek:(BOOL)arg0 currentTime:(double)arg1;
- (id /* block */)playDidPauseBlock;
- (id)audioQueueOperQueue;
- (void)setAudioVolumeCallBack:(id /* block */)arg0;
- (id /* block */)audioPlayStatusBlk;
- (double)effectRecordRate;
- (void)appendVideoAudioClip:(id)arg0 clipRange:(id)arg1 videoData:(id)arg2;
- (void)_updateVideoAudioClips:(id)arg0;
- (void)updateSubTrackVideoAudioClipsWithVideoData:(id)arg0;
- (struct { long long x0; int x1; unsigned int x2; long long x3; })playCMTime;
- (double)bufferListDuration;
- (void)hotAppendAudioAsset:(id)arg0 filterArray:(id)arg1 withClipRange:(id)arg2 currentPlayingTime:(double)arg3;
- (void)hotRemoveAudioAssets:(id)arg0;
- (void)hotReloadFilterForAssets:(id)arg0 inFilterMap:(id)arg1;
- (id)getFilterForAssets:(id)arg0;
- (void)hotReloadClipRangeForAssets:(id)arg0 inRangeMap:(id)arg1 currentPlayingTime:(double)arg2;
- (void)setEffectRecordRate:(double)arg0;
- (void)resusePlayer:(id)arg0;
- (void)updateSubTrackVideoAudioClips:(id)arg0;
- (id)p_getCurveConfig:(id)arg0;
- (BOOL)isAfterRange:(id)arg0 atTime:(double)arg1;
- (void)setPlayDidEndBlock:(id /* block */)arg0;
- (void)setPlayDidPauseBlock:(id /* block */)arg0;
- (void)setPlayProgressBlock:(id /* block */)arg0;
- (void)setAudioEffectProcessBlock:(id /* block */)arg0;
- (void)setAudioPlayStatusBlk:(id /* block */)arg0;
- (void)setPlayerQueue:(id)arg0;
- (void)setStopThread:(BOOL)arg0;
- (id)readerQueue;
- (void)setReaderQueue:(id)arg0;
- (void)setAssetClipLookupMap:(id)arg0;
- (void)setReplaceAudioMix:(BOOL)arg0;
- (void)setEnableAudioReaderOpt:(BOOL)arg0;
- (void)setEnableProcessDataInQueue:(BOOL)arg0;
- (BOOL)audioReaderAnrFix;
- (void)setAudioReaderAnrFix:(BOOL)arg0;
- (id)clipArray;
- (BOOL)isContainsInRange:(id)arg0 atTime:(double)arg1;
- (BOOL)isBeforeRange:(id)arg0 atTime:(double)arg1 tolerance:(double)arg2;
- (void)setClipArray:(id)arg0;
- (BOOL)useForPlayer;
- (BOOL)paused;
- (void)setLastTime:(double)arg0;
- (void)setConfig:(id)arg0;
- (void).cxx_destruct;
- (void)setCurrentTime:(double)arg0;
- (id)config;
- (void)stop;
- (void)setPaused:(BOOL)arg0;
- (double)lastTime;
- (double)currentTime;
- (BOOL)isPlaying;
- (void)setVolume:(float)arg0;
- (id)assets;
- (BOOL)isSeeking;
- (void)dealloc;
- (void)play;
- (void)pause;
- (void)seekToTime:(double)arg0;
- (struct opaqueCMSampleBuffer { } *)copyNextSampleBuffer;
- (double)maxDuration;
- (struct AudioStreamBasicDescription { double x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; })asbd;
- (void)setAsbd:(struct AudioStreamBasicDescription { double x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; })arg0;
- (float)getVolume;
- (void)setMaxDuration:(double)arg0;
- (double)playRate;
- (id)playerQueue;
- (void)setPlayRate:(double)arg0;
- (BOOL)stopThread;

@end
