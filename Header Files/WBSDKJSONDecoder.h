//
//     Generated by private class-dump
//

@interface WBSDKJSONDecoder : NSObject {
    struct WBSDKJKParseState { unsigned long long x0; struct WBSDKJKConstBuffer { struct WBSDKJKConstPtrRange { char *x0; unsigned long long x1; } x0; } x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; unsigned long long x5; unsigned long long x6; unsigned long long x7; struct WBSDKJKParseToken { struct WBSDKJKConstPtrRange { char *x0; unsigned long long x1; } x0; unsigned long long x1; struct WBSDKJKTokenValue { struct WBSDKJKConstPtrRange { char *x0; unsigned long long x1; } x0; unsigned long long x1; unsigned long long x2; union { long long x0; unsigned long long x1; double x2; } x3; struct WBSDKJKTokenCacheItem *x4; } x2; struct WBSDKJKManagedBuffer { struct WBSDKJKPtrRange { char *x0; unsigned long long x1; } x0; unsigned long long x1; unsigned long long x2; } x3; } x8; struct WBSDKJKObjectStack { void **x0; void **x1; unsigned long long *x2; unsigned long long x3; unsigned long long x4; unsigned long long x5; unsigned long long x6; } x9; struct WBSDKJKTokenCache { struct WBSDKJKTokenCacheItem *x0; unsigned long long x1; unsigned int x2; unsigned char x3[1024]; } x10; struct WBSDKJKObjCImpCache { Class x0; void /* function */ *x1; void /* function */ *x2; } x11; id x12; int x13; BOOL x14; } *parseState;
}

+ (id)decoderWithParseOptions:(unsigned long long)arg0;
+ (id)decoder;

- (id)initWithParseOptions:(unsigned long long)arg0;
- (id)objectWithUTF8String:(const char *)arg0 length:(unsigned long long)arg1 error:(id *)arg2;
- (id)mutableObjectWithUTF8String:(const char *)arg0 length:(unsigned long long)arg1 error:(id *)arg2;
- (id)parseUTF8String:(const char *)arg0 length:(unsigned long long)arg1 error:(id *)arg2;
- (id)parseWBSDKJSONData:(id)arg0;
- (id)parseWBSDKJSONData:(id)arg0 error:(id *)arg1;
- (id)objectWithUTF8String:(const char *)arg0 length:(unsigned long long)arg1;
- (id)mutableObjectWithUTF8String:(const char *)arg0 length:(unsigned long long)arg1;
- (id)init;
- (void)clearCache;
- (id)mutableObjectWithData:(id)arg0;
- (id)objectWithData:(id)arg0 error:(id *)arg1;
- (id)objectWithData:(id)arg0;
- (void)dealloc;
- (id)mutableObjectWithData:(id)arg0 error:(id *)arg1;
- (id)parseUTF8String:(const char *)arg0 length:(unsigned long long)arg1;

@end
