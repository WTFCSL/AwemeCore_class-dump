//
//     Generated by private class-dump
//

@class NSString;

@interface BDImageRequestKey : NSObject <NSCopying> {
    BOOL _smartCrop;
    NSString *_targetKey;
    NSString *_sourceKey;
    NSString *_sourceThumbKey;
    unsigned long long _memoryLimit;
    NSString *_transformName;
    struct CGSize { double width; double height; } _sizeLimit;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _cropRect;
}

@property (copy, nonatomic) NSString *targetKey;
@property (copy, nonatomic) NSString *sourceKey;
@property (copy, nonatomic) NSString *sourceThumbKey;
@property (nonatomic) struct CGSize { double width; double height; } sizeLimit;
@property (nonatomic) unsigned long long memoryLimit;
@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } cropRect;
@property (copy) NSString *transformName;
@property (nonatomic) BOOL smartCrop;
@property (nonatomic) BOOL builded;
@property (readonly, copy, nonatomic) NSString *targetkey;
@property (copy, nonatomic) NSString *transfromName;
@property (nonatomic) struct CGSize { double x0; double x1; } downsampleSize;

+ (id)cacheKeyWithURL:(id)arg0;
+ (id)cacheKeyWithURL:(id)arg0 transformName:(id)arg1;
+ (id)cacheKeyWithURL:(id)arg0 cropRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg1;
+ (id)cacheKeyWithURL:(id)arg0 smartCrop:(BOOL)arg1;
+ (id)cacheKeyWithURL:(id)arg0 sizeLimit:(struct CGSize { double x0; double x1; })arg1;
+ (id)cacheKeyWithURL:(id)arg0 memoryLimit:(unsigned long long)arg1;
+ (id)cacheKeyWithURL:(id)arg0 sizeLimit:(struct CGSize { double x0; double x1; })arg1 memoryLimit:(unsigned long long)arg2;
+ (id)cacheKeyWithURL:(id)arg0 transformName:(id)arg1 cropRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg2;
+ (id)cacheKeyWithURL:(id)arg0 transformName:(id)arg1 smartCrop:(BOOL)arg2;
+ (id)cacheKeyWithURL:(id)arg0 transformName:(id)arg1 sizeLimit:(struct CGSize { double x0; double x1; })arg2;
+ (id)cacheKeyWithURL:(id)arg0 transformName:(id)arg1 memoryLimit:(unsigned long long)arg2;
+ (id)cacheKeyWithURL:(id)arg0 transformName:(id)arg1 sizeLimit:(struct CGSize { double x0; double x1; })arg2 memoryLimit:(unsigned long long)arg3;

- (void)setSmartCrop:(BOOL)arg0;
- (id)initWithSourceKey:(id)arg0 sizeLimit:(struct CGSize { double x0; double x1; })arg1 memoryLimit:(unsigned long long)arg2 cropRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg3 transformName:(id)arg4 smartCrop:(BOOL)arg5;
- (id)targetKey;
- (BOOL)smartCrop;
- (id)initWithSourceKey:(id)arg0;
- (void)regenerateTargetKey;
- (void)setTargetKey:(id)arg0;
- (void)setSourceThumbKey:(id)arg0;
- (id)sourceThumbKey;
- (BOOL)containsUrl:(id)arg0;
- (id)extendKeyWithType:(id)arg0 value:(id)arg1;
- (id)initWithURL:(id)arg0 downsampleSize:(struct CGSize { double x0; double x1; })arg1 cropRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg2 transfromName:(id)arg3 smartCrop:(BOOL)arg4;
- (void)setBuilded:(BOOL)arg0;
- (BOOL)builded;
- (id)targetkey;
- (void)setTargetkey:(id)arg0;
- (void)setTransfromName:(id)arg0;
- (id)transfromName;
- (void)setDownsampleSize:(struct CGSize { double x0; double x1; })arg0;
- (struct CGSize { double x0; double x1; })downsampleSize;
- (void)setCropRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0;
- (void).cxx_destruct;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })cropRect;
- (id)copyWithZone:(struct _NSZone { } *)arg0;
- (id)initWithURL:(id)arg0;
- (void)setTransformName:(id)arg0;
- (void)setMemoryLimit:(unsigned long long)arg0;
- (unsigned long long)hash;
- (unsigned long long)memoryLimit;
- (id)transformName;
- (BOOL)isEqual:(id)arg0;
- (struct CGSize { double x0; double x1; })sizeLimit;
- (id)sourceKey;
- (void)setSizeLimit:(struct CGSize { double x0; double x1; })arg0;
- (void)setSourceKey:(id)arg0;

@end
