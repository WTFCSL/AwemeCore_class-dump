//
//     Generated by private class-dump
//

@class XPlayBlockRateProcesser, NSString, XPlayQualityStatsModel, XPlayGameTopView, NSMutableDictionary, XPlayTimeRecorder, XPlayTrackHelper, XPlayConfiguration, UIViewController;
@protocol XPlayPermissionDelegate, XPlayScreenRecordProtocol, XPlayUserInfoProtocol, XPlayKeyboardProtocol, XPlayItemDelegate, XPlayItemBusinessDelegate;

@protocol XPlayItemProtocol <NSObject>

@property (weak, nonatomic) id<XPlayItemDelegate> delegate;
@property (weak, nonatomic) id<XPlayItemBusinessDelegate> businessDelegate;
@property (weak, nonatomic) id<XPlayPermissionDelegate> permissionDelegate;
@property (readonly, copy, nonatomic) NSString *core;
@property (readonly, copy, nonatomic) NSString *itemId;
@property (retain, nonatomic) XPlayConfiguration *configuration;
@property (retain, nonatomic) id<XPlayUserInfoProtocol> userSession;
@property (retain, nonatomic) UIViewController *controller;
@property (retain, nonatomic) XPlayGameTopView *view;
@property (retain, nonatomic) XPlayTrackHelper *trackHelper;
@property (retain, nonatomic) XPlayTimeRecorder *recorder;
@property (nonatomic) unsigned long long status;
@property (copy, nonatomic) XPlayQualityStatsModel *qualityStats;
@property (retain, nonatomic) XPlayBlockRateProcesser *blockProcesser;
@property (retain, nonatomic) id<XPlayScreenRecordProtocol> screenRecorder;
@property (retain, nonatomic) id<XPlayKeyboardProtocol> keyboard;
@property (retain, nonatomic) NSMutableDictionary *pluggins;
@property (readonly, nonatomic) BOOL useCustomKbps;

- (id)trackHelper;
- (void)setTrackHelper:(id)arg0;
- (BOOL)useCustomKbps;
- (void)stopWithoutDismiss;
- (id)businessDelegate;
- (void)setBusinessDelegate:(id)arg0;
- (id)permissionDelegate;
- (void)setPermissionDelegate:(id)arg0;
- (void)setQualityStats:(id)arg0;
- (id)blockProcesser;
- (void)setBlockProcesser:(id)arg0;
- (id)pluggins;
- (void)setPluggins:(id)arg0;
- (id)qualityStats;
- (void)setController:(id)arg0;
- (id)keyboard;
- (id)userSession;
- (unsigned long long)status;
- (void)preload;
- (id)recorder;
- (void)stop;
- (id)initWithConfiguration:(id)arg0;
- (id)controller;
- (void)setUserSession:(id)arg0;
- (void)setView:(id)arg0;
- (id)delegate;
- (void)setStatus:(unsigned long long)arg0;
- (id)configuration;
- (BOOL)isPlaying;
- (void)setRecorder:(id)arg0;
- (void)setDelegate:(id)arg0;
- (void)play;
- (id)view;
- (void)setConfiguration:(id)arg0;
- (void)setKeyboard:(id)arg0;
- (id)itemId;
- (id)core;
- (id)screenRecorder;
- (void)setScreenRecorder:(id)arg0;

@optional

- (void)setAudioMute:(BOOL)arg0;
- (void)switchResolution:(id)arg0;
- (long long)startNetworkDetection;
- (id)sendCustomMessage:(id)arg0;
- (void)switchResolution:(id)arg0 callback:(id /* block */)arg1;
- (void)switchCustomResolution:(id)arg0 callback:(id /* block */)arg1;
- (void)stopNetworkDetection;
- (void)fastQueue;
- (void)startTask:(unsigned long long)arg0 andCategory:(long long)arg1;
- (void)requestBusinessConfig;
- (void)willRequestAuth:(id)arg0;
- (void)requestTasksInfoWithCategory:(long long)arg0 callback:(id /* block */)arg1;
- (void)requestPayResultWithOrder:(id)arg0 completion:(id /* block */)arg1;
- (void)requestUserAuthorizedWithAuthCheck:(BOOL)arg0 callback:(id /* block */)arg1;
- (void)completeUserRealNameAuthWithIdentityName:(id)arg0 identityNumber:(id)arg1 callback:(id /* block */)arg2;
- (void)completeAuthWith:(id)arg0 result:(long long)arg1 authCode:(id)arg2 message:(id)arg3 needCheckAuth:(BOOL)arg4 callback:(id /* block */)arg5;
- (void)postOpenActionWithAction:(unsigned long long)arg0 withExtra:(id)arg1 completion:(id /* block */)arg2;
- (void)getOpenActionWithActions:(id)arg0 completion:(id /* block */)arg1;
- (void)getOpenFeedBackTypeWithCompletion:(id /* block */)arg0;
- (void)postOpenFeedbackWithTypes:(id)arg0 nickId:(id)arg1 completion:(id /* block */)arg2;
- (void)postOpenFeedbackInQueue:(id)arg0 nickId:(id)arg1 queueType:(id)arg2 completion:(id /* block */)arg3;
- (void)sendMessage:(id)arg0 callback:(id /* block */)arg1;
- (void)resume;
- (void)dequeue;
- (void)stopAudioCapture;
- (void)startAudioCapture;
- (void)pause;

@end
