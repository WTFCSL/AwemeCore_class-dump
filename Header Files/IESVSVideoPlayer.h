//
//     Generated by private class-dump
//

@class UIView, NSString, NSArray, HTSEventContext, IESLiveVideoPlayerController, NSTimer, NSDate, NSMutableSet, TTVideoEngineModel, HTSLiveEpisode;
@protocol IESVSVideoPlayAction;

@interface IESVSVideoPlayer : NSObject <IESLiveVideoPlayerControllerDelegate, IESVSScreenStyleAction, IESLivePlaybackRoomAction, IESVSVideoPlayerRouter> {
    BOOL _renderedFirstFrame;
    BOOL _isVertical;
    BOOL _isReusePlayer;
    BOOL _isPlayStarted;
    BOOL _isPlayInitCalled;
    BOOL _needShowHistoryTip;
    BOOL _hadSendFirstFrameChange;
    BOOL _isBackFromSmallWindow;
    BOOL _didFirstInitConfig;
    BOOL _didFirstDefaultConfiged;
    BOOL _isLoadVideoURL;
    BOOL _streamResolutionDidChange;
    BOOL _notReportPv;
    BOOL _hadReceiveData;
    BOOL _hadReportedRecPlay;
    BOOL _hadReportedPlay;
    BOOL _reduceDanmakuSVGMaskFPS;
    BOOL _isLandscape;
    BOOL _isScaleIn;
    int _videoModelType;
    double _startLocation;
    unsigned long long _defaultResolutionType;
    id /* block */ _enterTraceStartSpan;
    id /* block */ _enterTraceEndSpan;
    UIView *_containerView;
    IESLiveVideoPlayerController *_player;
    NSMutableSet *_observerSet;
    HTSLiveEpisode *_episode;
    NSString *_currentVideoModelJson;
    TTVideoEngineModel *_currentVideoModel;
    UIView *_windowView;
    NSArray *_replayStreamAddr;
    long long _selectedReplayResolutionIdx;
    unsigned long long _playAlignOffset;
    HTSEventContext *_eventContext;
    NSTimer *_oneMinTimer;
    NSDate *_firstPlayTime;
    NSDate *_startPlayTime;
    double _maxWatchDuration;
    double _currentDuationForEvent;
    long long _startWatchTime;
    long long _startSpeedWatchRecord;
    long long _startInPlayerDynamicWatchRecord;
    long long _startInPlayerWatchRecord;
    NSDate *_startInPlayerTime;
    NSDate *_startSpeedTime;
    NSDate *_startInPlayerDynamicTime;
    long long _startWatchTimeV2;
    NSDate *_startPlayTimeV2;
    long long _dropWatchRecord;
    NSDate *_stopWatchRecord;
    NSString *_longPressType;
    id<IESVSVideoPlayAction> _videoPlayAction;
    unsigned long long _barrageMaskFrameCount;
    NSDate *_landscapeWatchRecord;
    long long _landscapeDropWatchRecord;
    NSDate *_landscapeStopWatchRecord;
    UIView *_padSatusBarBackground;
    double _scaleInShortedWidth;
    struct CGSize { double width; double height; } _mediaSize;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _playerFrame;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _contentViewFrame;
}

@property (retain, nonatomic) UIView *containerView;
@property (retain, nonatomic) IESLiveVideoPlayerController *player;
@property (nonatomic) struct CGSize { double width; double height; } mediaSize;
@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } playerFrame;
@property (nonatomic) BOOL isVertical;
@property (retain, nonatomic) NSMutableSet *observerSet;
@property (nonatomic) BOOL isPlayStarted;
@property (nonatomic) BOOL isPlayInitCalled;
@property (retain, nonatomic) HTSLiveEpisode *episode;
@property (retain, nonatomic) NSString *currentVideoModelJson;
@property (retain, nonatomic) TTVideoEngineModel *currentVideoModel;
@property (nonatomic) BOOL needShowHistoryTip;
@property (nonatomic) BOOL hadSendFirstFrameChange;
@property (retain, nonatomic) UIView *windowView;
@property (nonatomic) BOOL isBackFromSmallWindow;
@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } contentViewFrame;
@property (nonatomic) BOOL didFirstInitConfig;
@property (nonatomic) BOOL didFirstDefaultConfiged;
@property (copy, nonatomic) NSArray *replayStreamAddr;
@property (nonatomic) long long selectedReplayResolutionIdx;
@property (nonatomic) int videoModelType;
@property (nonatomic) unsigned long long playAlignOffset;
@property (nonatomic) BOOL isLoadVideoURL;
@property (nonatomic) BOOL streamResolutionDidChange;
@property (nonatomic) BOOL notReportPv;
@property (nonatomic) BOOL hadReceiveData;
@property (retain, nonatomic) HTSEventContext *eventContext;
@property (nonatomic) BOOL hadReportedRecPlay;
@property (nonatomic) BOOL hadReportedPlay;
@property (retain, nonatomic) NSTimer *oneMinTimer;
@property (retain, nonatomic) NSDate *firstPlayTime;
@property (retain, nonatomic) NSDate *startPlayTime;
@property (nonatomic) double maxWatchDuration;
@property (nonatomic) double currentDuationForEvent;
@property (nonatomic, getter=getStartWatchTime) long long startWatchTime;
@property (nonatomic) long long startSpeedWatchRecord;
@property (nonatomic) long long startInPlayerDynamicWatchRecord;
@property (nonatomic) long long startInPlayerWatchRecord;
@property (retain, nonatomic) NSDate *startInPlayerTime;
@property (retain, nonatomic) NSDate *startSpeedTime;
@property (retain, nonatomic) NSDate *startInPlayerDynamicTime;
@property (nonatomic) long long startWatchTimeV2;
@property (retain, nonatomic) NSDate *startPlayTimeV2;
@property (nonatomic) long long dropWatchRecord;
@property (retain, nonatomic) NSDate *stopWatchRecord;
@property (retain, nonatomic) NSString *longPressType;
@property (retain, nonatomic) id<IESVSVideoPlayAction> videoPlayAction;
@property (nonatomic) BOOL reduceDanmakuSVGMaskFPS;
@property (nonatomic) unsigned long long barrageMaskFrameCount;
@property (nonatomic) BOOL isLandscape;
@property (retain, nonatomic) NSDate *landscapeWatchRecord;
@property (nonatomic) long long landscapeDropWatchRecord;
@property (retain, nonatomic) NSDate *landscapeStopWatchRecord;
@property (retain, nonatomic) UIView *padSatusBarBackground;
@property (nonatomic) BOOL isScaleIn;
@property (nonatomic) double scaleInShortedWidth;
@property (nonatomic) double startLocation;
@property (nonatomic) unsigned long long defaultResolutionType;
@property (copy, nonatomic) id /* block */ enterTraceStartSpan;
@property (copy, nonatomic) id /* block */ enterTraceEndSpan;
@property (nonatomic) BOOL renderedFirstFrame;
@property (readonly, nonatomic) BOOL isVerticalStream;
@property (nonatomic) BOOL isReusePlayer;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic, getter=isPlaying) BOOL playing;
@property (readonly, nonatomic, getter=isPause) BOOL pause;
@property (nonatomic, getter=getPlaybackSpeed, setter=setPlaybackSpeed:) double playbackSpeed;
@property (nonatomic, getter=getVolume, setter=setVolume:) double volume;
@property (nonatomic, getter=getHardwareDecode, setter=setHardwareDecode:) BOOL hardwareDecode;
@property (nonatomic, getter=isMuted, setter=setMute:) BOOL muted;
@property (nonatomic, getter=isLooping, setter=setLoop:) BOOL looping;
@property (readonly, nonatomic, getter=getCurrentPlaybackTime) double currentPlaybackTime;
@property (readonly, nonatomic, getter=getDuration) double duration;
@property (readonly, nonatomic, getter=getPlayableDuration) double playableDuration;
@property (readonly, nonatomic, getter=getDurationWatched) double durationWatched;
@property (readonly, nonatomic, getter=getCurrentResolution) unsigned long long currentResolution;
@property (nonatomic, getter=getBarrageMaskEnabled, setter=setBarrageMaskEnabled:) BOOL barrageMaskEnabled;
@property (readonly, nonatomic, getter=isSupportBarrageMask) BOOL supportBarrageMask;
@property (nonatomic, getter=getAIBarrageEnabled, setter=setAIBarrageEnabled:) BOOL aiBarrageEnabled;
@property (readonly, nonatomic, getter=getTransform) struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } transform;
@property (readonly, nonatomic) BOOL hasBarrageMaskUrl;
@property (readonly, nonatomic) BOOL hasAiBarrageInfo;

+ (float)getVSPreloadSizeMultiplier:(unsigned long long)arg0;
+ (unsigned long long)getVSResolutionOfVideoJson:(id)arg0;
+ (unsigned long long)handleVSVideoResolutionWithEpisode:(id)arg0;
+ (BOOL)isSupportBarrageMask:(id)arg0;
+ (BOOL)isSupportAiBarrage:(id)arg0;
+ (id)videoEngineModelFrom:(id)arg0;
+ (double)handleVideoStartLocationWithEpisode:(id)arg0 params:(id)arg1;
+ (unsigned long long)getResolutionOfVideoJson:(id)arg0 isPlayback:(BOOL)arg1;
+ (id)getVideoListTypesNumberFromJson:(id)arg0;
+ (unsigned long long)core_getResolutionOfTypeList:(id)arg0 isPlayback:(BOOL)arg1;
+ (double)handleHistoryStartLocationWithEpisode:(id)arg0 params:(id)arg1;
+ (double)p_calculationFinalHistoryLocation:(double)arg0 episode:(id)arg1;
+ (id)getVideoListTypesNumber:(id)arg0;
+ (BOOL)enableChangeEnterResolutionWithEpisode:(id)arg0;
+ (unsigned long long)enterTargetResolution;
+ (void)checkCacheExist:(id)arg0 resolution:(unsigned long long)arg1 completion:(id /* block */)arg2;
+ (void)preloadVideoModel:(id)arg0 resolution:(unsigned long long)arg1;
+ (long long)handleVideoStartTypeWithEpisode:(id)arg0 params:(id)arg1;
+ (unsigned long long)getEnterVideoResolutionWithEpisode:(id)arg0;

- (id)supportedResolutionTypes;
- (void)setHardwareDecode:(BOOL)arg0;
- (void)closeAsync;
- (void)didSetAttachingDIContext;
- (void)onStalledStart:(id)arg0 actionType:(long long)arg1 reason:(unsigned long long)arg2;
- (void)onStalledEnd:(id)arg0;
- (void)setStartPlayTime:(id)arg0;
- (double)getCurrentPlaybackTime;
- (int)videoModelType;
- (void)setVideoModelType:(int)arg0;
- (id)longPressType;
- (void)setLongPressType:(id)arg0;
- (void)setEventContext:(id)arg0;
- (void)onOrientationChanged:(long long)arg0;
- (id)startPlayTime;
- (BOOL)isPause;
- (void)videoEngine:(id)arg0 loadStateDidChanged:(unsigned long long)arg1;
- (id)supportedQualityInfos;
- (void)suggestReduceResolution:(id)arg0;
- (void)configResolution:(unsigned long long)arg0 params:(id)arg1 completion:(id /* block */)arg2;
- (void)setObserverSet:(id)arg0;
- (void)onNetworkStatusChanged:(id)arg0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })playerFrame;
- (void)setPlayerFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0;
- (void)setIsPlayStarted:(BOOL)arg0;
- (BOOL)isPlayStarted;
- (id)currentVideoModel;
- (void)trackVideoPlay;
- (void)setStartWatchTime:(long long)arg0;
- (void)liveDidEnterBackground;
- (BOOL)isVerticalStream;
- (void)pauseByUser;
- (void)startPlayWithEpisode:(id)arg0;
- (void)startLocalPlay:(id)arg0 withVideoModel:(id)arg1;
- (void)replaceWithEpisode:(id)arg0;
- (void)replaceWithEpisode:(id)arg0 startLocation:(double)arg1 resolution:(unsigned long long)arg2;
- (void)replaceWithLoaclEpisode:(id)arg0 startLocation:(double)arg1 videoModel:(id)arg2 resolution:(unsigned long long)arg3;
- (id)getEpisodeID;
- (void)preloadWithEpisode:(id)arg0;
- (void)retryPlayWithEpisode:(id)arg0;
- (void)seekVideoWithProgress:(double)arg0 complete:(id /* block */)arg1;
- (void)seekVideo:(double)arg0 complete:(id /* block */)arg1 renderComplete:(id /* block */)arg2;
- (id)getThumbInfo;
- (double)bottomOffsetForPlayer;
- (void)attachOnSmallWindow:(id)arg0;
- (void)detachWindow;
- (BOOL)isPlayerViewAspectFill;
- (BOOL)isVaildEpisode:(id)arg0;
- (void)changeContentFrame;
- (double)getPlaybackSpeed;
- (BOOL)getHardwareDecode;
- (double)getPlayableDuration;
- (double)getDurationWatched;
- (unsigned long long)getCurrentResolution;
- (BOOL)getBarrageMaskEnabled;
- (void)setBarrageMaskEnabled:(BOOL)arg0;
- (BOOL)isSupportBarrageMask;
- (BOOL)getAIBarrageEnabled;
- (void)setAIBarrageEnabled:(BOOL)arg0;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })getTransform;
- (BOOL)hasBarrageMaskUrl;
- (BOOL)hasAiBarrageInfo;
- (long long)getStartWatchTime;
- (BOOL)renderedFirstFrame;
- (void)setRenderedFirstFrame:(BOOL)arg0;
- (void)scaleInPlayerViewInShortenWidth:(double)arg0;
- (void)scaleOutPlayerView;
- (BOOL)isScaleIn;
- (void)setBarrageMaskDelayEnabled:(BOOL)arg0;
- (void)videoReadyToDisPlayOfPlayerController:(id)arg0;
- (void)playerController:(id)arg0 updateCacheProgress:(double)arg1;
- (void)playerController:(id)arg0 updateCurrent:(double)arg1 duration:(double)arg2;
- (void)playerController:(id)arg0 playbackStateDidChange:(unsigned long long)arg1;
- (void)playerController:(id)arg0 playerDidFinishError:(id)arg1;
- (void)playerController:(id)arg0 userStop:(id)arg1;
- (void)playerController:(id)arg0 videoBitrateDidChangeResolution:(unsigned long long)arg1 bitrate:(long long)arg2;
- (void)playerController:(id)arg0 onMaskInfoCallBack:(id)arg1 pts:(unsigned long long)arg2;
- (void)playerController:(id)arg0 onEffectInfoCallBack:(id)arg1 pts:(unsigned long long)arg2;
- (void)renderOnView:(id)arg0;
- (BOOL)hadReportedPlay;
- (void)setHadReportedPlay:(BOOL)arg0;
- (BOOL)isReusePlayer;
- (void)setIsReusePlayer:(BOOL)arg0;
- (void)trackVideoFinish;
- (void)setCurrentVideoModel:(id)arg0;
- (void)setFirstPlayTime:(id)arg0;
- (id)firstPlayTime;
- (id)windowView;
- (void)setWindowView:(id)arg0;
- (unsigned long long)defaultResolutionType;
- (void)trackAppDidEnterBackground;
- (void)didUpdatePlaybackEpisode:(id)arg0;
- (BOOL)usePadNewStyle;
- (void)_loadPlayerIfNeed;
- (BOOL)notReportPv;
- (void)setNotReportPv:(BOOL)arg0;
- (unsigned long long)playAlignOffset;
- (double)maxWatchDuration;
- (void)setMaxWatchDuration:(double)arg0;
- (void)updateScreenStyle:(unsigned long long)arg0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })p_buildNormalFrameOfSize:(struct CGSize { double x0; double x1; })arg0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })p_buildVerticalFrameOfSize:(struct CGSize { double x0; double x1; })arg0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })buildPlaybackFrameOfSize:(struct CGSize { double x0; double x1; })arg0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })buildPlaybackVerticalFrameOfSize:(struct CGSize { double x0; double x1; })arg0;
- (double)portrait_bottomOffset;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frameForHorizontalStreamInLandscapeWithMediaSize:(struct CGSize { double x0; double x1; })arg0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })videoPlayerFrameOfType:(long long)arg0 mediaSize:(struct CGSize { double x0; double x1; })arg1;
- (void)setReduceDanmakuSVGMaskFPS:(BOOL)arg0;
- (void)reusePlayer:(id)arg0 model:(id)arg1;
- (void)configPlayerScaleMode;
- (id)transformToVideoEngineModel:(id)arg0;
- (void)prepareInfoForPlayer:(id)arg0;
- (void)onReceiveRmoteRoomData:(id)arg0;
- (id)stopWatchRecord;
- (long long)dropWatchRecord;
- (void)setDropWatchRecord:(long long)arg0;
- (void)setStopWatchRecord:(id)arg0;
- (void)p_recordLandscapeDropTime;
- (id)landscapeStopWatchRecord;
- (long long)landscapeDropWatchRecord;
- (void)setLandscapeDropWatchRecord:(long long)arg0;
- (void)setLandscapeStopWatchRecord:(id)arg0;
- (BOOL)streamResolutionDidChange;
- (id)replayStreamAddr;
- (BOOL)isPlayInitCalled;
- (void)setIsPlayInitCalled:(BOOL)arg0;
- (BOOL)isLoadVideoURL;
- (void)setIsLoadVideoURL:(BOOL)arg0;
- (void)setStreamResolutionDidChange:(BOOL)arg0;
- (long long)selectedReplayResolutionIdx;
- (void)p_recordDropTime;
- (void)trackVideoPlayTimeV2;
- (void)trackVideoPlayTime:(id)arg0;
- (void)p_clearDropTime;
- (BOOL)hadReceiveData;
- (void)trackInPlayerDynamicTime;
- (void)trackSpeedPlayTime;
- (void)setStartInPlayerDynamicWatchRecord:(long long)arg0;
- (void)setStartSpeedTime:(id)arg0;
- (void)setStartInPlayerDynamicTime:(id)arg0;
- (void)setStartSpeedWatchRecord:(long long)arg0;
- (void)setSelectedReplayResolutionIdx:(long long)arg0;
- (void)checkMediaSizeChangeIfNeed;
- (void)prepareInfoForPlayer:(id)arg0 withVideoModel:(id)arg1;
- (void)setDefaultResolutionType:(unsigned long long)arg0;
- (void)setIsScaleIn:(BOOL)arg0;
- (void)setScaleInShortedWidth:(double)arg0;
- (void)changeContentFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0;
- (void)setIsBackFromSmallWindow:(BOOL)arg0;
- (double)scaleInShortedWidth;
- (void)computeTrackTimer;
- (long long)startWatchTimeV2;
- (void)setHadReceiveData:(BOOL)arg0;
- (void)trackVideoRecPlay;
- (void)startOneMinTrackTimer;
- (void)trackInPlayerTime;
- (id /* block */)enterTraceEndSpan;
- (void)setCurrentDuationForEvent:(double)arg0;
- (id)videoPlayAction;
- (void)resumeOneMinTimer;
- (void)p_startStopTime;
- (void)pauseOneMinTimer;
- (BOOL)reduceDanmakuSVGMaskFPS;
- (unsigned long long)barrageMaskFrameCount;
- (void)setBarrageMaskFrameCount:(unsigned long long)arg0;
- (void)setLandscapeWatchRecord:(id)arg0;
- (void)trackVideoLandscapeTime;
- (void)prepareInfoForPlayer:(id)arg0 withReplayStreamUrl:(id)arg1;
- (void)setReplayStreamAddr:(id)arg0;
- (void)setPlayAlignOffset:(unsigned long long)arg0;
- (BOOL)didFirstInitConfig;
- (void)setDidFirstInitConfig:(BOOL)arg0;
- (BOOL)p_isPlayerDefaultConfig;
- (void)setDidFirstDefaultConfiged:(BOOL)arg0;
- (BOOL)didFirstDefaultConfiged;
- (id /* block */)enterTraceStartSpan;
- (BOOL)hadSendFirstFrameChange;
- (BOOL)isBackFromSmallWindow;
- (void)setHadSendFirstFrameChange:(BOOL)arg0;
- (id)padSatusBarBackground;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })buildPadLandscapHalfScreenFrame;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })buildPadLandscapFullScreenFrame;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })buildPadPortraitHalfScreenFrame;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })buildPadPortraitFullScreenFrame;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })pad_buildLandscapVerticalFrame;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })pad_buildLandscapFullScreenFrame;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })pad_buildHorizontalHalfScreenFrame;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })pad_buildPortraitVerticalFrame;
- (id)oneMinTimer;
- (void)setOneMinTimer:(id)arg0;
- (BOOL)hadReportedRecPlay;
- (void)setHadReportedRecPlay:(BOOL)arg0;
- (void)setStartPlayTimeV2:(id)arg0;
- (void)setStartWatchTimeV2:(long long)arg0;
- (void)setStartInPlayerTime:(id)arg0;
- (double)currentDuationForEvent;
- (id)startPlayTimeV2;
- (id)landscapeWatchRecord;
- (long long)startInPlayerWatchRecord;
- (long long)startInPlayerDynamicWatchRecord;
- (long long)startSpeedWatchRecord;
- (id)startInPlayerDynamicTime;
- (void)setStartInPlayerWatchRecord:(long long)arg0;
- (id)startSpeedTime;
- (id)initWithPlayer:(id)arg0 model:(id)arg1;
- (void)onComponentInit;
- (void)onOrientationBegin;
- (void)didOrientationEnd;
- (long long)greaterThanScreenCategory4_3;
- (BOOL)shouldTrackVideoPlay;
- (void)setEnterTraceStartSpan:(id /* block */)arg0;
- (void)setEnterTraceEndSpan:(id /* block */)arg0;
- (id)currentVideoModelJson;
- (void)setCurrentVideoModelJson:(id)arg0;
- (BOOL)needShowHistoryTip;
- (void)setNeedShowHistoryTip:(BOOL)arg0;
- (id)startInPlayerTime;
- (void)setVideoPlayAction:(id)arg0;
- (void)setPadSatusBarBackground:(id)arg0;
- (BOOL)isVertical;
- (void)resetTimer;
- (void).cxx_destruct;
- (void)setIsVertical:(BOOL)arg0;
- (id)observerSet;
- (void)commonInit;
- (void)close;
- (void)stop;
- (void)setIsLandscape:(BOOL)arg0;
- (void)removeObserver;
- (void)setContainerView:(id)arg0;
- (void)setPlayer:(id)arg0;
- (double)getDuration;
- (id)containerView;
- (id)eventContext;
- (BOOL)isLandscape;
- (BOOL)isPlaying;
- (void)setVolume:(double)arg0;
- (id)playerView;
- (BOOL)isLooping;
- (void)dealloc;
- (void)play;
- (void)pause;
- (void)pause:(BOOL)arg0;
- (void)setMute:(BOOL)arg0;
- (BOOL)isMuted;
- (void)replay;
- (id)player;
- (double)startLocation;
- (void)setStartLocation:(double)arg0;
- (BOOL)isHorizontal;
- (void)setPlaybackSpeed:(double)arg0;
- (void)setEpisode:(id)arg0;
- (id)episode;
- (double)getVolume;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })contentViewFrame;
- (struct CGSize { double x0; double x1; })mediaSize;
- (void)setMediaSize:(struct CGSize { double x0; double x1; })arg0;
- (void)setLoop:(BOOL)arg0;
- (void)setContentViewFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0;

@end
