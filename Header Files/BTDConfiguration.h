//
//     Generated by private class-dump
//

@class NSString, NSDictionary, NSArray, NSMutableArray;
@protocol XPlayHoverBallConfig, XPlayCustomResolution, XPlayAgreementConfig, XPlayResolution, XPlayResolutionConfig, XPlayDataConfig;

@interface BTDConfiguration : XPlayConfiguration <TTAirPlayConfigurationProtocol> {
    NSMutableArray *_supportResolutions;
    BOOL _useNativeKeyboard;
    NSString *_realGameId;
    NSString *_token;
    long long _frameWidth;
    long long _frameHeight;
    NSString *_enironment;
    NSString *_rtcAppId;
    NSString *_roomId;
    NSString *_podId;
    NSString *_podUserId;
    NSString *_rtcUserId;
    struct CGSize { double width; double height; } _normlizedGameSize;
    struct CGSize { double width; double height; } _rtcVideoSize;
}

@property (copy, nonatomic) NSString *realGameId;
@property (copy, nonatomic) NSString *token;
@property (nonatomic) long long frameWidth;
@property (nonatomic) long long frameHeight;
@property (copy, nonatomic) NSString *enironment;
@property (nonatomic) BOOL useNativeKeyboard;
@property (copy, nonatomic) NSString *rtcAppId;
@property (copy, nonatomic) NSString *roomId;
@property (copy, nonatomic) NSString *podId;
@property (copy, nonatomic) NSString *podUserId;
@property (copy, nonatomic) NSString *rtcUserId;
@property (nonatomic) struct CGSize { double width; double height; } normlizedGameSize;
@property (nonatomic) struct CGSize { double width; double height; } rtcVideoSize;
@property (copy, nonatomic) NSString *gameId;
@property (copy, nonatomic) NSString *xToken;
@property (copy, nonatomic) NSString *channel;
@property (copy, nonatomic) NSString *gameName;
@property (nonatomic) unsigned long long displayWidth;
@property (nonatomic) unsigned long long displayHeight;
@property (nonatomic) long long originX;
@property (nonatomic) long long originY;
@property (nonatomic) unsigned long long pcDisplayWidthRatio;
@property (nonatomic) unsigned long long pcDisplayHeightRatio;
@property (copy, nonatomic) NSString *expectCore;
@property (nonatomic) BOOL pcVirtualHandle;
@property (nonatomic) BOOL enableRTCMulti;
@property (nonatomic) BOOL muteAudioPlayback;
@property (nonatomic) BOOL enablePixelBuffer;
@property (nonatomic) BOOL enableAudioFrame;
@property (nonatomic) BOOL useDefaultShouldAutorotate;
@property (nonatomic) BOOL shouldAutorotate;
@property (copy, nonatomic) NSDictionary *extra;
@property (copy, nonatomic) NSDictionary *appExtra;
@property (copy, nonatomic) NSDictionary *innerExtra;
@property (nonatomic) BOOL useNativeKeyboardIfSupported;
@property (nonatomic) BOOL useGameOrientation;
@property (nonatomic) BOOL useNativeShockIfSupported;
@property (nonatomic) long long supportLiveType;
@property (nonatomic) long long trialTimeUpStatus;
@property (readonly, copy, nonatomic) NSString *core;
@property (readonly, nonatomic) unsigned long long gameOrientation;
@property (readonly, nonatomic) unsigned short gameOrientationAngle;
@property (readonly, nonatomic) unsigned long long playTime;
@property (readonly, nonatomic) unsigned long long remainingPlayTime;
@property (readonly, nonatomic) unsigned long long requestId;
@property (readonly, nonatomic) BOOL useNativeMotion;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } frame;
@property (readonly, nonatomic) id<XPlayResolution> currentResolution;
@property (readonly, nonatomic) id<XPlayCustomResolution> currentCustomResolution;
@property (readonly, copy, nonatomic) NSArray *supportResolutions;
@property (readonly, nonatomic) long long preload;
@property (readonly, nonatomic) long long podType;
@property (readonly, nonatomic) long long platformType;
@property (readonly, nonatomic) id<XPlayResolutionConfig> resolutionConfig;
@property (readonly, nonatomic) id<XPlayDataConfig> dataConfig;
@property (readonly, nonatomic) id<XPlayAgreementConfig> agreementConfig;
@property (readonly, copy, nonatomic) NSString *debugInfo;
@property (readonly, copy, nonatomic) NSString *itemId;
@property (readonly, copy, nonatomic) NSDictionary *openInfo;
@property (readonly, copy, nonatomic) NSString *uniGameId;
@property (readonly, nonatomic) BOOL isArchivedGame;
@property (readonly, nonatomic) BOOL needAuthorized;
@property (readonly, nonatomic) BOOL needRealNameAuth;
@property (readonly, nonatomic) BOOL hideHoverBall;
@property (readonly, nonatomic) id<XPlayHoverBallConfig> hoverBallConfig;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (id)roomId;
- (void)setRoomId:(id)arg0;
- (BOOL)configurationSetWithDictionary:(id)arg0;
- (void)setRealGameId:(id)arg0;
- (void)setPodId:(id)arg0;
- (void)setPodUserId:(id)arg0;
- (void)setFrameWidth:(long long)arg0;
- (void)setFrameHeight:(long long)arg0;
- (void)setRtcAppId:(id)arg0;
- (void)setRtcUserId:(id)arg0;
- (void)setUseNativeKeyboard:(BOOL)arg0;
- (void)setEnironment:(id)arg0;
- (BOOL)examineConfiguration;
- (id)realGameId;
- (id)podId;
- (id)podUserId;
- (long long)frameHeight;
- (id)rtcAppId;
- (id)rtcUserId;
- (id)enironment;
- (struct CGSize { double x0; double x1; })rtcVideoSize;
- (double)getEvenValue:(double)arg0;
- (void)setNormlizedGameSize:(struct CGSize { double x0; double x1; })arg0;
- (void)setupNormlizedGameSize;
- (BOOL)useNativeKeyboard;
- (id)prepareOption;
- (void)setRtcVideoSize:(struct CGSize { double x0; double x1; })arg0;
- (struct CGSize { double x0; double x1; })normlizedGameSize;
- (id)init;
- (void).cxx_destruct;
- (void)setToken:(id)arg0;
- (id)debugInfo;
- (id)token;
- (long long)frameWidth;

@end
