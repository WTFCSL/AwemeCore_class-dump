//
//     Generated by private class-dump
//

@class NSString, NSMapTable, RTVXRBaseBusinessHandler, __RTVXRControllerScopeBinder, __RTVXRControllerBinderManager;
@protocol RxInjector;

@interface __RTVXRScopeControllerInjector : NSObject <__RTVXRControllerInjector, RTVXRControllerInjector> {
    struct RecursiveMutex { int _type; union { struct mutex { struct _opaque_pthread_mutex_t { long long __sig; char __opaque[56]; } __m_; } _plain; struct recursive_mutex { struct _opaque_pthread_mutex_t { long long __sig; char __opaque[56]; } __m_; } _recursive; } ; } _lock;
    BOOL _isTreeStructure;
    id<RxInjector> _injector;
    NSString *_scopeKey;
    __RTVXRControllerBinderManager *_binderManager;
    RTVXRBaseBusinessHandler *_businessHandler;
    __RTVXRControllerScopeBinder *_binder;
    NSMapTable *_parentControllerInjectors;
}

@property (readonly, weak, nonatomic) id<RxInjector> injector;
@property (readonly, copy, nonatomic) NSString *scopeKey;
@property (retain, nonatomic) __RTVXRControllerBinderManager *binderManager;
@property (readonly, weak, nonatomic) RTVXRBaseBusinessHandler *businessHandler;
@property (readonly, weak, nonatomic) __RTVXRControllerScopeBinder *binder;
@property (retain, nonatomic) NSMapTable *parentControllerInjectors;
@property (nonatomic) BOOL isTreeStructure;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (id)rxInjectorCreateWithArgs:(id)arg0 injector:(id)arg1;
+ (id)__createInjectorWithBinderManager:(id)arg0 parentControllerInjectors:(id)arg1 injector:(id)arg2;

- (void)renderModel:(id)arg0 context:(id)arg1;
- (id)getInstance:(id)arg0;
- (void)injectController:(id)arg0;
- (id)getController:(id)arg0;
- (id)getControllerForKey:(id)arg0;
- (id)scopeKey;
- (void)__log:(id)arg0;
- (BOOL)isTreeStructure;
- (id)__allCachedControllers;
- (void)setIsTreeStructure:(BOOL)arg0;
- (void)setBinderManager:(id)arg0;
- (void)setParentControllerInjectors:(id)arg0;
- (id)binderManager;
- (void)__injectController:(id)arg0 forKey:(id)arg1 binder:(id)arg2;
- (void)__injectController:(id)arg0 controllerInjector:(id)arg1;
- (void)__doInjectController:(id)arg0 controllerInjector:(id)arg1;
- (id)parentControllerInjectors;
- (id)businessHandler;
- (void)injectController:(id)arg0 forKey:(id)arg1;
- (BOOL)isRefactorControllerInjector;
- (void)removeInjectorController:(id)arg0;
- (void)injectController:(id)arg0 forProtocol:(id)arg1;
- (void)releaseControllerForKey:(id)arg0;
- (void).cxx_destruct;
- (id)injector;
- (void)dealloc;
- (id).cxx_construct;
- (id)binder;

@end
