//
//     Generated by private class-dump
//

@class NSString, NSMutableDictionary, IESLatchContext, NSError, NSMutableArray, NSObject;
@protocol OS_dispatch_queue;

@interface IESLatchLoader : NSObject <IESLatchProcessorDelegate, IESLatchNativePrefetchProcessorDelegate, IESLatchLoaderProtocol> {
    BOOL _enable;
    BOOL _enableCheckVersion;
    NSString *_business;
    IESLatchContext *_context;
    NSMutableDictionary *_latchProcessorMap;
    NSMutableArray *_inferiorLatchIDs;
    NSObject<OS_dispatch_queue> *_processorQueue;
    NSObject<OS_dispatch_queue> *_loaderQueue;
    NSObject<OS_dispatch_queue> *_npProcessorQueue;
    NSError *_npError;
    unsigned long long _prefetchFrom;
}

@property (nonatomic) BOOL enable;
@property (copy, nonatomic) NSString *business;
@property (retain, nonatomic) IESLatchContext *context;
@property (retain, nonatomic) NSMutableDictionary *latchProcessorMap;
@property (retain, nonatomic) NSMutableArray *inferiorLatchIDs;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *processorQueue;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *loaderQueue;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *npProcessorQueue;
@property (retain, nonatomic) NSError *npError;
@property (nonatomic) unsigned long long prefetchFrom;
@property (nonatomic) BOOL enableCheckVersion;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (id)initWithContext:(id)arg0 forBusiness:(id)arg1;
- (void)p_evaluatePrefetchForContainer:(id)arg0 sync:(BOOL)arg1 completion:(id /* block */)arg2;
- (id)inferiorLatchIDs;
- (void)getProcessorForLatchID:(id)arg0 withCompletion:(id /* block */)arg1;
- (void)removeProcessorForLatchID:(id)arg0 withCompletion:(id /* block */)arg1;
- (BOOL)enableCheckVersion;
- (id)processorQueue;
- (BOOL)stopEvaluateIfNeededForLatchID:(id)arg0;
- (id)npProcessorQueue;
- (void)setNpError:(id)arg0;
- (id)npError;
- (unsigned long long)prefetchFrom;
- (id)latchProcessorMap;
- (id)loaderQueue;
- (void)setProcessor:(id)arg0 forLatchID:(id)arg1 withCompletion:(id /* block */)arg2;
- (void)setPrefetchFrom:(unsigned long long)arg0;
- (void)setEnableCheckVersion:(BOOL)arg0;
- (void)monitorContainer:(id)arg0 IODuration:(double)arg1;
- (void)p_getJSDataWithContainer:(id)arg0 sync:(BOOL)arg1 completion:(id /* block */)arg2;
- (id)safeQueue;
- (void)onLatchJobsFinishWithProcessor:(id)arg0 latchID:(id)arg1;
- (id)npSafeQueue;
- (void)onNativePrefetchProcessor:(id)arg0 finishWithLatchID:(id)arg1;
- (void)onNativePrefetchProcessor:(id)arg0 url:(id)arg1 errorOccured:(id)arg2;
- (id)initWithJSDataProvider:(id)arg0 business:(id)arg1;
- (BOOL)evaluatePrefetchForContainer:(id)arg0;
- (void)evaluateOnlinePrefetchForContainer:(id)arg0 completion:(id /* block */)arg1;
- (BOOL)attachForLatchID:(id)arg0 withCompletion:(id /* block */)arg1;
- (void)reportForLatchID:(id)arg0 withPerfMetric:(id)arg1;
- (void)reportForLatchID:(id)arg0 withResult:(id)arg1 url:(id)arg2;
- (void)reportJsbPromiseResultForLatchID:(id)arg0 withResult:(id)arg1;
- (void)checkPrefetchTemplateVersion:(id)arg0 url:(id)arg1 latchID:(id)arg2;
- (void)setLatchProcessorMap:(id)arg0;
- (void)setInferiorLatchIDs:(id)arg0;
- (void)setProcessorQueue:(id)arg0;
- (void)setLoaderQueue:(id)arg0;
- (void)setNpProcessorQueue:(id)arg0;
- (BOOL)enable;
- (void).cxx_destruct;
- (void)setContext:(id)arg0;
- (id)context;
- (void)setEnabled:(BOOL)arg0;
- (void)setEnable:(BOOL)arg0;
- (id)business;
- (void)setBusiness:(id)arg0;

@end
