//
//     Generated by private class-dump
//

@class AVSampleBufferDisplayLayer, NSString, VESampleData, VEFPSCalculator, VELimitLogger, HTSGLFramebuffer, VEMVPRenderer, NSMutableArray, NSObject, HTSGLContext, VEFastcvRgb2Yuv;
@protocol OS_dispatch_queue, IVERendererDrawable;

@interface VEPreviewUnit : UIView <VEAppStatusProtocol, IVEPreviewUnit> {
    float _backgroundColorRed;
    float _backgroundColorGreen;
    float _backgroundColorBlue;
    float _backgroundColorAlpha;
    VESampleData *_inputSampleDataForDisplay;
    HTSGLFramebuffer *_transformFrameBuffer;
    struct CGSize { double width; double height; } _boundsSizeAtFrameBufferEpoch;
    struct CGSize { double width; double height; } _boundsSizeWithRetina;
    BOOL _hasRender;
    BOOL _flipX;
    BOOL _flipY;
    double _rotateAngle;
    double _extraRotateAngle;
    double _offsetX;
    double _offsetY;
    double _scale;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _cropRect;
    id /* block */ _previewImageHandler;
    unsigned long long _inputRotation;
    struct { long long value; int timescale; unsigned int flags; long long epoch; } _lasetPresentTime;
    struct { long long value; int timescale; unsigned int flags; long long epoch; } _lastCaptureTime;
    HTSGLFramebuffer *_cacheFramebufferForCapture;
    HTSGLFramebuffer *_imageCaptureFramebuffer;
    struct opaqueCMSampleBuffer { } *_lastSampleBuffer;
    struct __CVBuffer { } *_lastPixelBuffer;
    BOOL _enableBlend;
    BOOL _isMagnifierUnit;
    BOOL _enableAGFXMetal;
    BOOL _enablePrintFPS;
    BOOL _isFromRecorder;
    BOOL _enable10bitRT;
    BOOL _lastRecordingStatus;
    BOOL _isLastFrameBufferRender;
    BOOL _needTransformRenderForDisplayLayer;
    BOOL _useFirstFrameCallbackFix;
    BOOL _isMVPRender;
    BOOL _dynamicLanczos;
    unsigned long long _fillMode;
    NSString *_route;
    HTSGLContext *_context;
    id /* block */ _firstRenderBlk;
    id /* block */ _frameTimeBlk;
    id /* block */ _nthRenderBlk;
    long long _framePrefetchLatency;
    VEMVPRenderer *_textureMvpRenderer;
    id<IVERendererDrawable> _rendererDrawable;
    long long _previewFps;
    double _previewFrameCost;
    long long _colorPrimariesType;
    long long _transferFunctionType;
    id /* block */ _beginOfStreamArrivedBlock;
    unsigned long long _forceRotationMode;
    VELimitLogger *_previewLimitLogger;
    VEFPSCalculator *_fpsCalculator;
    AVSampleBufferDisplayLayer *_sampleBufferDisplayLayer;
    unsigned long long _sampeBufferCounter;
    VEMVPRenderer *_mvpCaptureRenderer;
    long long _maxPreviewBufferCount;
    NSMutableArray *_transColorFramebuffers;
    VEFastcvRgb2Yuv *_fastcvRgb2Yuv;
    NSObject<OS_dispatch_queue> *_bufferCacheQueue;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _viewBounds;
}

@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } viewBounds;
@property (retain, nonatomic) VELimitLogger *previewLimitLogger;
@property (retain, nonatomic) VEFPSCalculator *fpsCalculator;
@property (nonatomic) long long previewFps;
@property (nonatomic) double previewFrameCost;
@property (nonatomic) BOOL isFromRecorder;
@property (retain, nonatomic) AVSampleBufferDisplayLayer *sampleBufferDisplayLayer;
@property (nonatomic) unsigned long long sampeBufferCounter;
@property (retain, nonatomic) VEMVPRenderer *mvpCaptureRenderer;
@property (nonatomic) BOOL enable10bitRT;
@property (nonatomic) long long maxPreviewBufferCount;
@property (retain, nonatomic) NSMutableArray *transColorFramebuffers;
@property (retain, nonatomic) VEFastcvRgb2Yuv *fastcvRgb2Yuv;
@property (nonatomic) BOOL lastRecordingStatus;
@property (nonatomic) BOOL isLastFrameBufferRender;
@property (nonatomic) BOOL needTransformRenderForDisplayLayer;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *bufferCacheQueue;
@property (nonatomic) BOOL useFirstFrameCallbackFix;
@property (nonatomic) BOOL isMVPRender;
@property (nonatomic) BOOL dynamicLanczos;
@property (readonly, nonatomic) VEMVPRenderer *textureMvpRenderer;
@property (readonly, nonatomic) id<IVERendererDrawable> rendererDrawable;
@property (nonatomic) BOOL enableAGFXMetal;
@property (nonatomic) BOOL enablePrintFPS;
@property (nonatomic) long long colorPrimariesType;
@property (nonatomic) long long transferFunctionType;
@property (copy, nonatomic) id /* block */ beginOfStreamArrivedBlock;
@property (nonatomic) unsigned long long forceRotationMode;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) unsigned long long fillMode;
@property (readonly, nonatomic) struct CGSize { double x0; double x1; } sizeInPixels;
@property (retain, nonatomic) HTSGLContext *context;
@property (copy, nonatomic) id /* block */ firstRenderBlk;
@property (copy, nonatomic) id /* block */ nthRenderBlk;
@property (copy, nonatomic) id /* block */ frameTimeBlk;
@property (nonatomic) BOOL enableBlend;
@property (nonatomic) BOOL isMagnifierUnit;
@property (nonatomic) long long framePrefetchLatency;
@property (retain, nonatomic) NSString *route;

- (void)setBackgroundColorRed:(float)arg0 green:(float)arg1 blue:(float)arg2 alpha:(float)arg3;
- (struct CGSize { double x0; double x1; })maximumOutputSize;
- (BOOL)enable10bitRT;
- (void)setEnable10bitRT:(BOOL)arg0;
- (void)clearDisplay:(float)arg0 green:(float)arg1 blue:(float)arg2 alpha:(float)arg3;
- (void)commonInit:(long long)arg0;
- (void)setPreviewFps:(long long)arg0;
- (long long)previewFps;
- (void)setFirstRenderBlk:(id /* block */)arg0;
- (id /* block */)firstRenderBlk;
- (id /* block */)nthRenderBlk;
- (void)setNthRenderBlk:(id /* block */)arg0;
- (id)textureMvpRenderer;
- (BOOL)enableBlend;
- (void)setFrameTimeBlk:(id /* block */)arg0;
- (void)setEnableBlend:(BOOL)arg0;
- (void)setFpsCalculator:(id)arg0;
- (id)fpsCalculator;
- (id)rendererDrawable;
- (long long)transferFunctionType;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0 route:(id)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0 route:(id)arg1 context:(id)arg2;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0 route:(id)arg1 context:(id)arg2 renderType:(long long)arg3;
- (void)updateHTSGLContext:(id)arg0;
- (void)updateColorSpace:(id)arg0 finishBlock:(id /* block */)arg1;
- (void)updatePreviewGamma:(unsigned long long)arg0;
- (struct CGImage { } *)capturePreviewtoImage;
- (struct CGImage { } *)capturePreviewtoImage:(struct { long long x0; int x1; unsigned int x2; long long x3; } *)arg0;
- (void)capturePreviewtoImageAsync:(id /* block */)arg0;
- (BOOL)capturePreviewtoData:(char *)arg0 requiredWidth:(int)arg1 requiredHeight:(int)arg2;
- (id /* block */)frameTimeBlk;
- (BOOL)isMagnifierUnit;
- (void)setIsMagnifierUnit:(BOOL)arg0;
- (long long)framePrefetchLatency;
- (void)setFramePrefetchLatency:(long long)arg0;
- (void)setFlipX:(BOOL)arg0 flipY:(BOOL)arg1;
- (void)setExtraRotateAngle:(double)arg0;
- (void)setOffsetX:(double)arg0 offsetY:(double)arg1;
- (void)enableTransparent:(BOOL)arg0;
- (void)enableDisplayLanczos:(BOOL)arg0;
- (void)calcBackgrounColorWithColorSpace;
- (void)layerInit;
- (long long)colorPrimariesType;
- (void)updateLayerColorSpace:(id)arg0;
- (void)setColorPrimariesType:(long long)arg0;
- (void)setTransferFunctionType:(long long)arg0;
- (void)layerLayout;
- (BOOL)processSampleData:(id)arg0;
- (void)setUseFirstFrameCallbackFix:(BOOL)arg0;
- (void)setForceRotationMode:(unsigned long long)arg0;
- (void)setIsMVPRender:(BOOL)arg0;
- (BOOL)dynamicLanczos;
- (void)setSampleBufferDisplayLayer:(id)arg0;
- (id)bufferCacheQueue;
- (void)p_cleanCachedSampleBuffer;
- (void)p_cleanCachedPixelBuffer;
- (void)setDynamicLanczos:(BOOL)arg0;
- (BOOL)enablePrintFPS;
- (void)p_countingFrames;
- (unsigned long long)forceRotationMode;
- (BOOL)isMVPRender;
- (BOOL)isLastFrameBufferRender;
- (void)cleanCachedFrameBuffer;
- (void)clearDisplay:(float)arg0 green:(float)arg1 blue:(float)arg2 alpha:(float)arg3 sync:(BOOL)arg4;
- (BOOL)useFirstFrameCallbackFix;
- (void)renderWithDisplayLayer:(id)arg0 firstRenderBlk:(id /* block */)arg1;
- (BOOL)lastRecordingStatus;
- (void)setLastRecordingStatus:(BOOL)arg0;
- (void)setIsLastFrameBufferRender:(BOOL)arg0;
- (void)rebuildRender:(long long)arg0;
- (void)p_holdPixelBuffer:(struct __CVBuffer { } *)arg0;
- (void)needCapturePreview:(id)arg0;
- (void)doRender:(id)arg0 syncClear:(BOOL)arg1 firstRenderBlk:(id /* block */)arg2;
- (void)setPreviewFrameCost:(double)arg0;
- (void)renderWithGpu:(id)arg0 firstRenderBlk:(id /* block */)arg1;
- (id)doTransformRender:(id)arg0;
- (void)p_holdSampleBuffer:(struct opaqueCMSampleBuffer { } *)arg0;
- (void)p_createDisplayLayer;
- (void)modifyTransformPara;
- (BOOL)capturePreviewFrameBuffer;
- (BOOL)enableAGFXMetal;
- (void)setEnableAGFXMetal:(BOOL)arg0;
- (void)setEnablePrintFPS:(BOOL)arg0;
- (double)previewFrameCost;
- (id /* block */)beginOfStreamArrivedBlock;
- (void)setBeginOfStreamArrivedBlock:(id /* block */)arg0;
- (id)previewLimitLogger;
- (void)setPreviewLimitLogger:(id)arg0;
- (unsigned long long)sampeBufferCounter;
- (void)setSampeBufferCounter:(unsigned long long)arg0;
- (id)mvpCaptureRenderer;
- (void)setMvpCaptureRenderer:(id)arg0;
- (long long)maxPreviewBufferCount;
- (void)setMaxPreviewBufferCount:(long long)arg0;
- (id)transColorFramebuffers;
- (void)setTransColorFramebuffers:(id)arg0;
- (id)fastcvRgb2Yuv;
- (void)setFastcvRgb2Yuv:(id)arg0;
- (BOOL)needTransformRenderForDisplayLayer;
- (void)setNeedTransformRenderForDisplayLayer:(BOOL)arg0;
- (void)setBufferCacheQueue:(id)arg0;
- (BOOL)isFromRecorder;
- (void)setIsFromRecorder:(BOOL)arg0;
- (void)becomeActive;
- (struct CGSize { double x0; double x1; })sizeInPixels;
- (id)initWithContext:(id)arg0;
- (void)setFillMode:(unsigned long long)arg0;
- (unsigned long long)fillMode;
- (id)sampleBufferDisplayLayer;
- (void)setCropRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0;
- (void).cxx_destruct;
- (id)route;
- (void)resignActive;
- (void)setContext:(id)arg0;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0;
- (void)enterBackground;
- (void)setRoute:(id)arg0;
- (id)context;
- (id)initWithCoder:(id)arg0;
- (void)cleanCache;
- (void)layoutSublayersOfLayer:(id)arg0;
- (void)enterForeground;
- (void)setScaleFactor:(double)arg0;
- (void)setFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0;
- (void)layoutSubviews;
- (void)dealloc;
- (void)memoryWarning;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })viewBounds;
- (void)setViewBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0;

@end
