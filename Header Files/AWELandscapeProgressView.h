//
//     Generated by private class-dump
//

@class AWEAwemeModel, UIView, NSArray, AWELandscapeProgressPreviewView, AWEPageContext, AWELandscapeProgressContainerView, NSString, UILabel;
@protocol AWELandscapePageContextInteractionProtocol, AWELandscapeProgressViewDelegate;

@interface AWELandscapeProgressView : UIView <AWELandscapeProgressContainerViewDelegate> {
    BOOL _isSlidingInProgress;
    id<AWELandscapeProgressViewDelegate> _delegate;
    unsigned long long _sliderState;
    UIView *_playedView;
    UIView *_bufferView;
    UIView *_thumbView;
    UIView *_timeContainer;
    UILabel *_currentTimeLabel;
    UILabel *_lineLabel;
    UILabel *_totalTimeLabel;
    UILabel *_danmakuCountLabel;
    AWELandscapeProgressPreviewView *_previewContainer;
    double _lastPlayTime;
    double _seekingToTime;
    long long _beforeSlideState;
    AWEAwemeModel *_model;
    AWEPageContext<AWELandscapePageContextInteractionProtocol> *_context;
    double _totalTime;
    double _playTime;
    double _playTimeBeforeDrag;
    AWELandscapeProgressContainerView *_progressContainer;
    NSArray *_chapterPointList;
}

@property (retain, nonatomic) UIView *playedView;
@property (retain, nonatomic) UIView *bufferView;
@property (retain, nonatomic) UIView *thumbView;
@property (retain, nonatomic) UIView *timeContainer;
@property (retain, nonatomic) UILabel *currentTimeLabel;
@property (retain, nonatomic) UILabel *lineLabel;
@property (retain, nonatomic) UILabel *totalTimeLabel;
@property (retain, nonatomic) UILabel *danmakuCountLabel;
@property (retain, nonatomic) AWELandscapeProgressPreviewView *previewContainer;
@property (nonatomic) double lastPlayTime;
@property (nonatomic) unsigned long long sliderState;
@property (nonatomic) double seekingToTime;
@property (nonatomic) long long beforeSlideState;
@property (nonatomic) BOOL isSlidingInProgress;
@property (retain, nonatomic) AWEAwemeModel *model;
@property (retain, nonatomic) AWEPageContext<AWELandscapePageContextInteractionProtocol> *context;
@property (nonatomic) double totalTime;
@property (nonatomic) double playTime;
@property (nonatomic) double playTimeBeforeDrag;
@property (retain, nonatomic) AWELandscapeProgressContainerView *progressContainer;
@property (copy, nonatomic) NSArray *chapterPointList;
@property (weak, nonatomic) id<AWELandscapeProgressViewDelegate> delegate;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (void)willEnterSplitScreen:(BOOL)arg0 movePoint:(struct CGPoint { double x0; double x1; })arg1 scale:(double)arg2;
- (double)lastPlayTime;
- (void)setLastPlayTime:(double)arg0;
- (id)totalTimeLabel;
- (void)setTotalTimeLabel:(id)arg0;
- (void)setPlayTime:(double)arg0;
- (void)setPreviewContainer:(id)arg0;
- (id)playedView;
- (long long)chapterIndexWithPlayTime:(double)arg0;
- (void)setPlayedView:(id)arg0;
- (void)refreshPlayTime:(double)arg0 canPlayTime:(double)arg1 totalTime:(double)arg2;
- (void)handleProgressViewPanBegin:(double)arg0;
- (void)handleProgressViewPanEnd:(double)arg0;
- (void)updateWithModel:(id)arg0 currentPlayTime:(double)arg1 context:(id)arg2;
- (void)setTimeContainer:(id)arg0;
- (void)updateProgressSliderState:(unsigned long long)arg0;
- (void)updateWithPlayTime:(double)arg0 canPlayTime:(double)arg1 animated:(BOOL)arg2;
- (unsigned long long)sliderState;
- (id)progressContainer;
- (void)setSliderState:(unsigned long long)arg0;
- (void)setPlayTimeBeforeDrag:(double)arg0;
- (void)showPreview:(BOOL)arg0 targetTime:(double)arg1 scrollChapterAnimated:(BOOL)arg2;
- (double)targetTimeWithOffset:(double)arg0;
- (void)handleProgressViewPanChanging:(double)arg0;
- (double)playTimeBeforeDrag;
- (void)setProgressContainer:(id)arg0;
- (BOOL)canShowDanmakuCountOutsideWithModel:(id)arg0;
- (double)attachValueWithCurrentValue:(double)arg0 shock:(BOOL)arg1;
- (id)danmakuCountLabel;
- (void)setDanmakuCountLabel:(id)arg0;
- (id)chapterPointList;
- (void)setChapterPointList:(id)arg0;
- (void)updateDanmakuCountView;
- (BOOL)hasChapterList;
- (void)showScreenCastView:(BOOL)arg0;
- (void)updateLayoutWithOffset:(double)arg0;
- (void)refreshPlayTime:(double)arg0 canPlayTime:(double)arg1 totalTime:(double)arg2 animated:(BOOL)arg3;
- (void)resetChapterList;
- (id)configChapterInfoList;
- (double)offsetWithPlayTime:(double)arg0;
- (id)makePointViewWithType:(long long)arg0;
- (BOOL)hasLongVideoHeadTailPoint;
- (BOOL)hasPaymentTryWatchPoint;
- (BOOL)hasRewardedAdvertisingTryWatchPoint;
- (void)configChapterPointView;
- (void)updateChapterPointWithSliderState:(unsigned long long)arg0;
- (void)updateChapterPointWithPlayTime:(double)arg0 resetShock:(BOOL)arg1;
- (double)realValueWithCurrentValue:(double)arg0;
- (id)chapterPointIndexIfAttachedWithTime:(double)arg0;
- (void)configDanmakuCountViewIfNeeded;
- (void)setBeforeSlideState:(long long)arg0;
- (double)progressContainerHeightWithSliderState:(unsigned long long)arg0;
- (id)bufferView;
- (BOOL)isSlidingInProgress;
- (void)trackDragSliderFromTime:(double)arg0 toTime:(double)arg1 bySlideProgress:(BOOL)arg2;
- (long long)beforeSlideState;
- (BOOL)isPointInProgressContainer:(struct CGPoint { double x0; double x1; })arg0;
- (void)setIsSlidingInProgress:(BOOL)arg0;
- (void)setBufferView:(id)arg0;
- (void)updateState:(long long)arg0;
- (void)setModel:(id)arg0;
- (double)totalTime;
- (void).cxx_destruct;
- (void)setContext:(id)arg0;
- (id)model;
- (id)thumbView;
- (double)playTime;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })arg0;
- (id)currentTimeLabel;
- (id)previewContainer;
- (id)delegate;
- (id)context;
- (void)setCurrentTimeLabel:(id)arg0;
- (void)setDelegate:(id)arg0;
- (void)reset;
- (void)setTotalTime:(double)arg0;
- (id)hitTest:(struct CGPoint { double x0; double x1; })arg0 withEvent:(id)arg1;
- (id)lineLabel;
- (void)setLineLabel:(id)arg0;
- (void)setupUI;
- (void)setThumbView:(id)arg0;
- (void)handlePanGesture:(id)arg0;
- (void)handleTapGesture:(id)arg0;
- (void)setSeekingToTime:(double)arg0;
- (double)seekingToTime;
- (id)timeContainer;

@end
