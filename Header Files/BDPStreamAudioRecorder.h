//
//     Generated by private class-dump
//

@class NSObject, NSString, BDPAudioInterruptionConfig, BDPUniqueID, BDPAudioSessionLock;
@protocol OS_dispatch_queue;

@interface BDPStreamAudioRecorder : NSObject <AVAudioRecorderDelegate, BDPContainerLifeCycleMessage, BDPPermissionChangeMessage, BDPAudioInterruptionDelegate> {
    struct AudioStreamBasicDescription { double mSampleRate; unsigned int mFormatID; unsigned int mFormatFlags; unsigned int mBytesPerPacket; unsigned int mFramesPerPacket; unsigned int mBytesPerFrame; unsigned int mChannelsPerFrame; unsigned int mBitsPerChannel; unsigned int mReserved; } _mDataFormat;
    struct OpaqueAudioQueue { } *_mQueue;
    struct AudioQueueBuffer *_mBuffers[3];
    struct OpaqueAudioFileID { } *_mAudioFile;
    unsigned int _bufferByteSize;
    long long _mCurrentPacket;
    BOOL _mIsRunning;
    unsigned int _encodeBitRate;
    BOOL _isQueueStoping;
    BOOL _isQueueDisposed;
    BOOL _isQueuePaused;
    id /* block */ _durationBlock;
    NSString *_recorderURLPath;
    unsigned long long _recorderFormat;
    NSObject<OS_dispatch_queue> *_serialQueue;
    BDPUniqueID *_uniqueID;
    BDPAudioSessionLock *_audioSessionLock;
    BDPAudioInterruptionConfig *_audioInterruptionConfig;
}

@property (retain, nonatomic) NSObject<OS_dispatch_queue> *serialQueue;
@property (retain, nonatomic) BDPUniqueID *uniqueID;
@property (retain, nonatomic) BDPAudioSessionLock *audioSessionLock;
@property (retain, nonatomic) BDPAudioInterruptionConfig *audioInterruptionConfig;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (unsigned long long)startWithModel:(id)arg0;
- (void)applicationExitWithUniqueID:(id)arg0;
- (void)permissionStatusChanged:(id)arg0 on:(BOOL)arg1 uniqueID:(id)arg2;
- (void)stateChange:(id)arg0 data:(id)arg1;
- (void)pauseByInterrupt;
- (id)getInterruptUniqueID;
- (void)setAudioInterruptionConfig:(id)arg0;
- (id)audioInterruptionConfig;
- (void)setAudioSessionLock:(id)arg0;
- (id)audioSessionLock;
- (void)stopUsingRecorder;
- (BOOL)disposeAudioRecorder;
- (void)subscribeCommonError:(unsigned long long)arg0;
- (void)subscribeInternalErrorWithMsg:(id)arg0;
- (unsigned long long)setupAudioAndFilePropertyWithModel:(id)arg0;
- (unsigned long long)setupAuidoQueue;
- (unsigned long long)setupAuidoFileWithPath:(id)arg0 audioFileIDRef:(struct OpaqueAudioFileID **)arg1;
- (unsigned long long)setupAudioQueueBufferAndMagicCookieWithModel:(id)arg0;
- (BOOL)isCompressForamt;
- (void)doWorkAfterQueueActuallyStopped;
- (void)subscribeFrameRecorded:(struct AudioQueueBuffer { unsigned int x0; void *x1; unsigned int x2; void *x3; unsigned int x4; struct AudioStreamPacketDescription *x5; unsigned int x6; } *)arg0 inNumberPacketDescriptions:(unsigned int)arg1 inPacketDescs:(const struct AudioStreamPacketDescription { long long x0; unsigned int x1; unsigned int x2; } *)arg2;
- (unsigned long long)resume;
- (void).cxx_destruct;
- (id)uniqueID;
- (void)setUniqueID:(id)arg0;
- (void)setSerialQueue:(id)arg0;
- (id)serialQueue;
- (unsigned long long)stop;
- (void)dealloc;
- (unsigned long long)pause;
- (id)initWithUniqueID:(id)arg0;
- (void)setupAudioSession;

@end
