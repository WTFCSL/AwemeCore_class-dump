//
//     Generated by private class-dump
//

@class LBLelinkConnectSocket, NSString, NSDictionary, LBLelinkPlayerConnection, NSDate, LBInnerLelinkDeviceModel, LBLelinkPassthConnection;
@protocol LBInnerNewLelinkConnectionDelegate;

@interface LBInnerNewLelinkConnection : NSObject <LBLelinkConnectSocketConnectionDelegate, LBLelinkPassthConnectionDelegate> {
    BOOL _isLelinkEt;
    BOOL _connected;
    BOOL _protocolConnected;
    LBInnerLelinkDeviceModel *_deviceModel;
    id<LBInnerNewLelinkConnectionDelegate> _delegate;
    LBLelinkConnectSocket *_lelinkConnectSocket;
    LBLelinkPassthConnection *_passthConnection;
    LBLelinkPlayerConnection *_playerConnection;
    NSString *_sessionId;
    NSString *_tid;
    NSDate *_startConnectDate;
    NSString *_sm;
    NSDictionary *_reverseControlBodyDic;
    NSDictionary *_connectBodyDic;
    NSDictionary *_passthConnectBodyDic;
}

@property (nonatomic) BOOL isLelinkEt;
@property (nonatomic, getter=isConnected) BOOL connected;
@property (nonatomic) BOOL protocolConnected;
@property (retain, nonatomic) NSDate *startConnectDate;
@property (copy, nonatomic) NSString *sm;
@property (retain, nonatomic) NSDictionary *reverseControlBodyDic;
@property (retain, nonatomic) NSDictionary *connectBodyDic;
@property (copy, nonatomic) NSString *sessionId;
@property (retain, nonatomic) NSDictionary *passthConnectBodyDic;
@property (retain, nonatomic) LBInnerLelinkDeviceModel *deviceModel;
@property (weak, nonatomic) id<LBInnerNewLelinkConnectionDelegate> delegate;
@property (retain, nonatomic) LBLelinkConnectSocket *lelinkConnectSocket;
@property (retain, nonatomic) LBLelinkPassthConnection *passthConnection;
@property (weak, nonatomic) LBLelinkPlayerConnection *playerConnection;
@property (copy, nonatomic) NSString *tid;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (void)setTid:(id)arg0;
- (void)disConnect;
- (id)initWithDeviceModel:(id)arg0 delegate:(id)arg1;
- (void)connectWithInnerLelinkDeviceModel:(id)arg0;
- (id)sm;
- (BOOL)canPassthRightsQuery;
- (id)passthConnection;
- (void)passthRightsQuery;
- (BOOL)canPassthJournalFile;
- (void)passthJournalFileWithEid:(id)arg0 euqid:(id)arg1 et:(id)arg2;
- (BOOL)canPassthPerformedMirrorAction;
- (void)passthPerformedMirrorActionType:(long long)arg0;
- (BOOL)canPassthEventReverseControl;
- (void)passthEventReverseControl;
- (BOOL)canPassthRemoteControlEvent;
- (void)passthListenRemoteControlSwitch:(BOOL)arg0;
- (BOOL)canPassthPluginInfo;
- (BOOL)canPassthPluginMessage;
- (void)passthMicroAppMessageWithAppId:(id)arg0 type:(long long)arg1 content:(id)arg2;
- (BOOL)canPassthPluginClose;
- (void)passthMicroAppCloseWithType:(long long)arg0;
- (id)connectBodyDic;
- (id)passthConnectBodyDic;
- (BOOL)canSwitchTemporaryPrivateMode;
- (void)innerNewLelinkConnectionWithError:(id)arg0 sn:(id)arg1 et:(id)arg2;
- (void)passthSwitchTemporaryPrivateMode:(BOOL)arg0;
- (void)passthWaterRabbitUseDataDic:(id)arg0;
- (void)setStartConnectDate:(id)arg0;
- (void)setReverseControlBodyDic:(id)arg0;
- (id)lelinkConnectSocket;
- (void)setProtocolConnected:(BOOL)arg0;
- (id)startConnectDate;
- (BOOL)canPassthContorMessage;
- (void)passthSendContorMessageWithContorType:(long long)arg0 contorCommands:(id)arg1;
- (BOOL)canPassthMirrorAndPushSet;
- (void)passthQueryMirrorAndPushPortSet;
- (BOOL)protocolConnected;
- (void)lelinkBaseSocketDisconnect:(id)arg0;
- (void)setConnectBodyDic:(id)arg0;
- (void)setSm:(id)arg0;
- (void)setPassthConnectBodyDic:(id)arg0;
- (void)innerNewLelinkConnectionWithErrorUpload:(id)arg0 et:(id)arg1;
- (void)lelinkBaseSocket:(id)arg0 connectSucceedToHost:(id)arg1 port:(unsigned short)arg2;
- (void)lelinkBaseSocket:(id)arg0 onError:(id)arg1;
- (void)lelinkPassthConnection:(id)arg0 onError:(id)arg1;
- (void)lelinkPassthConnection:(id)arg0 didConnectToDevice:(id)arg1;
- (void)lelinkPassthConnection:(id)arg0 disConnectToDevice:(id)arg1;
- (void)lelinkPassthConnection:(id)arg0 decoderList:(id)arg1;
- (void)lelinkPassthConnection:(id)arg0 connectSm:(id)arg1;
- (void)lelinkPassthConnection:(id)arg0 rightsSynchronous:(id)arg1;
- (void)lelinkPassthConnection:(id)arg0 manifestVerConnectBody:(id)arg1;
- (void)lelinkPassthConnection:(id)arg0 mirrorActionType:(long long)arg1;
- (void)lelinkPassthConnection:(id)arg0 eventReverseControlBodyDic:(id)arg1;
- (void)lelinkPassthConnection:(id)arg0 remoteControlEventDic:(id)arg1;
- (void)lelinkPassthConnection:(id)arg0 microAppMessage:(id)arg1;
- (void)lelinkPassthConnection:(id)arg0 microAppClose:(id)arg1;
- (void)lelinkPassthConnection:(id)arg0 waterRabbitDic:(id)arg1;
- (void)lelinkPassthConnection:(id)arg0 queryMirrorAndPushReplySet:(id)arg1;
- (void)lelinkPassthConnection:(id)arg0 collectServiceReplyMessage:(id)arg1;
- (void)lelinkPassthConnection:(id)arg0 cloudFunctionReplyMessage:(id)arg1;
- (void)sendCloudMirroRoomId:(id)arg0 type:(id)arg1;
- (void)passthPlugAppId:(id)arg0 type:(long long)arg1 pluginUrl:(id)arg2 pluginproof:(id)arg3 loginInfo:(id)arg4;
- (BOOL)canPushVideoList;
- (BOOL)canSwitchAudioTrack;
- (BOOL)canWaterRabbit;
- (BOOL)canCastSpace;
- (BOOL)canPassthFavorityLelinkServcie;
- (void)passthFavorityLelinkServcieWithName:(id)arg0;
- (void)setLelinkConnectSocket:(id)arg0;
- (void)setPassthConnection:(id)arg0;
- (void)setPlayerConnection:(id)arg0;
- (BOOL)isLelinkEt;
- (void)setIsLelinkEt:(BOOL)arg0;
- (id)reverseControlBodyDic;
- (void)lelinkBaseSocketDisconnect:(id)arg0 error:(id)arg1;
- (void)lelinkConnectSocketConnectSucceedReply:(id)arg0 connectBodyDic:(id)arg1;
- (void)lelinkConnectSocketDisconnectReply:(id)arg0;
- (void)connect;
- (void)setDeviceModel:(id)arg0;
- (id)init;
- (void)setConnected:(BOOL)arg0;
- (void)setSessionId:(id)arg0;
- (void).cxx_destruct;
- (id)deviceModel;
- (id)sessionId;
- (BOOL)isConnected;
- (id)delegate;
- (void)setDelegate:(id)arg0;
- (void)dealloc;
- (id)tid;
- (id)playerConnection;

@end
